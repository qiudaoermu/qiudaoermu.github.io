{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/volantis/source/css/Readme.md","path":"css/Readme.md","modified":0,"renderable":1},{"_id":"themes/volantis/source/css/first.styl","path":"css/first.styl","modified":0,"renderable":1},{"_id":"themes/volantis/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/plugins/aplayer.js","path":"js/plugins/aplayer.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/plugins/parallax.js","path":"js/plugins/parallax.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/plugins/rightMenu.js","path":"js/plugins/rightMenu.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/plugins/rightMenus.js","path":"js/plugins/rightMenus.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/search/hexo.js","path":"js/search/hexo.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/plugins/tags/contributors.js","path":"js/plugins/tags/contributors.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/plugins/tags/friends.js","path":"js/plugins/tags/friends.js","modified":0,"renderable":1},{"_id":"themes/volantis/source/js/plugins/tags/sites.js","path":"js/plugins/tags/sites.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/--🌦🌦-element-upload-使用axios-代理上传.md","hash":"e1c824780fe4a528fefa775254bca26ed35198cd","modified":1715848187373},{"_id":"source/_posts/--📣📣-东西方哲学的不同.md","hash":"c77263d14387dfc981f69fadd970c686a8958bb2","modified":1715845151056},{"_id":"source/_posts/-🌦🌦lodash常用方法.md","hash":"55f7d08d166be1b36ae0e548c3062e81ccb2ab75","modified":1715845151041},{"_id":"source/_posts/-🌦🌦nodejs做服务器和服务代理.md","hash":"c83d510eb53386db3b5833e69d628cc94a10acde","modified":1715845151058},{"_id":"source/_posts/-🎨🎨-git-push-为什么必须要先-git-pull.md","hash":"dcc14e889236d2a125556bbcc57f83fc67674ba3","modified":1715845151049},{"_id":"source/_posts/-📣📣--软件工程师的十大层次.md","hash":"e559117a2928935b1f268a6cf0ab27ea4e5803f0","modified":1715845151057},{"_id":"source/_posts/-📣📣-我看《图灵和ACM图灵奖》.md","hash":"a921e4a39511fa1aa1c39a34d787a0d5a4f7227e","modified":1715845151057},{"_id":"source/_posts/-📣📣-科学---技术---工程学---手艺---艺术.md","hash":"524f46ae74fdb824ba33ce9f17e3b0b065ee7c24","modified":1715845151056},{"_id":"source/_posts/-📣📣《计算机·一部历史》.md","hash":"87617452183b9d2f1a42c600bc578cf7afc900e6","modified":1715845151055},{"_id":"source/_posts/-📣📣几个哲学问题.html","hash":"f49de9acd43935a69ad00467a6b64488924f738f","modified":1715845151056},{"_id":"source/_posts/ivew-modal-验证，关闭再打开，验证错误.md","hash":"48eff67245948497b61df2258f2f0dc8ce7d1dc5","modified":1715845151042},{"_id":"source/_posts/2023-06-24.html","hash":"a5cc047e085b44296d3d385b1574cd2fb5a0620a","modified":1715845151057},{"_id":"source/_posts/ivew-radio-单选-1,0-字符串和数字怎么传.md","hash":"e9f2d8d4c20482d5a37c0c21ad4ba1b3ba6df3ac","modified":1715845151042},{"_id":"source/_posts/☀️☀️-编程范式----JS-必包-VS-c语言.md","hash":"2c51754f015d664737e36dd229cdb000fefcc2a3","modified":1715845151060},{"_id":"source/_posts/☀️☀️-编程范式----shell-子文件异步模式-VS--JS-async-await.md","hash":"424673900b57c56c653e897c3bce78efc020236f","modified":1715845151059},{"_id":"source/_posts/☀️☀️UI开发的几个历史阶段.md","hash":"4853878d78f5695673be51709202099dffe4b094","modified":1715845151053},{"_id":"source/_posts/☀️☀️装饰器模式实现.md","hash":"c98747e0156f169cd59a4088264ce3fcef6bb1fa","modified":1715845151059},{"_id":"source/_posts/☀️☀️单例模式.md","hash":"a777823555f9ea639c1258bf7f1d7fc3f610d725","modified":1715845151059},{"_id":"source/_posts/☀️☀️设计模式在react项目中的落地.md","hash":"e659dfad17f30355e0182afdc1e0dbcb255d5967","modified":1715845151060},{"_id":"source/_posts/☁️☁️-node-js常用工具包.md","hash":"990c56df10b2b8df128d47e780becbe068949640","modified":1715845151046},{"_id":"source/_posts/⛵︎数图番外篇-显卡构成.md","hash":"bad2035c7e9baf6ea6850d25a930cc8b30bb5b64","modified":1715845151049},{"_id":"source/_posts/⛵︎数图番外篇-文本和二进制互转.md","hash":"e5455ede624967a5cdff8840fed436dc43baf2c1","modified":1715845151048},{"_id":"source/_posts/⛵︎数字到图像（1）--不同数据类型协议转图片.md","hash":"5021dcf08f6798c505b4b7c4cc32db6628a03a0e","modified":1715845151048},{"_id":"source/_posts/⛵︎数图番外篇-液晶显示器原理.md","hash":"e12c4597f69ed85b00d465fe66c53513254da4ad","modified":1715845151049},{"_id":"source/_posts/⛵︎数据到图像-（2）浏览器渲染.md","hash":"cf55a55c4d60ca2341bb04815c67101f852b99ab","modified":1715845151048},{"_id":"source/_posts/⛵︎验证码-(11)-操作系统底层库和接口.md","hash":"2458335f7ca17256df06dcf50982d2d7c72c6630","modified":1715845151050},{"_id":"source/_posts/⛵︎验证码-(12)-CPU都干了什么事.md","hash":"be9047c6f3f28d17832d11a2d9b41c23995f73f9","modified":1715845151050},{"_id":"source/_posts/⛵︎验证码---(10)--操作系统之进程通信.md","hash":"a145be298a8463110082e4de08860b17e4b47548","modified":1715845151050},{"_id":"source/_posts/⛵︎验证码-(13)--CPU实现加法.md","hash":"546ef2e22ebd6b155ef82cf7587c7b70f9cde76e","modified":1715845151050},{"_id":"source/_posts/⛵︎验证码---(9)--CPU多任务原理.md","hash":"aba3648e6ec1827493aafbcc4e4fe7e78f1026db","modified":1715845151049},{"_id":"source/_posts/两大浏览器高性能路线之争.md","hash":"74c78ed7163fa889753cac9bc8bc0e4bfd035962","modified":1715845151055},{"_id":"source/_posts/⛵︎验证码（14）按下开机键后，电脑都干了些什么？.md","hash":"c5392e1317bbfa662723f0281f723ad6a6ee9805","modified":1715845151050},{"_id":"source/_posts/使用-TS-适配-ES-Module-和-CommonJS-两种格式.md","hash":"1f260a057b54064842d37b6ee9bec7065e441d9e","modified":1715845151057},{"_id":"source/_posts/微信小程序-为什么地图本地体验可以用，线上环境不能用.md","hash":"25c23559c3fef7ffed42e8799837e421a26dfe0d","modified":1715845151041},{"_id":"source/_posts/怎么避免ivew-form-prop,-乱七八糟的type校验.md","hash":"532b3ede67683a4ba216507df9fa276aa3a4d4e1","modified":1715845151042},{"_id":"source/_posts/清明节,今天想跟自己谈谈.html","hash":"c12807bdfa84b74a6245fb092410db09d6aae59a","modified":1715845151059},{"_id":"source/_posts/编译器.html","hash":"ddaa5ff0cffd6803b4e2f5c37d38dba098ca3168","modified":1715845151058},{"_id":"source/_posts/知识肥胖症的危害.md","hash":"11c33ef38322d68e07da632c7b9553b99835bece","modified":1715845151054},{"_id":"source/_posts/🌈--css-flex-多列等高.md","hash":"0198dd528c72b67ef849bec3a6fdc007308097f9","modified":1715845151039},{"_id":"source/_posts/🌈-CSS--nth-child-and--nth-of-type的区别.md","hash":"76e0c2273a45194eae137c5621ad00c02fdd28d0","modified":1715845151039},{"_id":"source/_posts/🌈-flex布局--一行显示固定个数,强制换行且均匀分布.md","hash":"6a8a2a8ea5df78aac30e5c41db3e5703b8589c88","modified":1715845151039},{"_id":"source/_posts/🌈-space-between和space-around的区别？.md","hash":"6bd100b0c7cf72ce4715f2acc705ad76a96efa1b","modified":1715845151039},{"_id":"source/_posts/🌈-让div填充剩余的屏幕空间的高度.md","hash":"f197d1f3f043cb65b1c09c62485e4e657a0ae67a","modified":1715845151039},{"_id":"source/_posts/🌈最近做项目碰到的几个css小问题总结.md","hash":"0e8e2452f54e48404b98212eb3fab40579d91157","modified":1715845151041},{"_id":"source/_posts/🌈解决flex布局warp自动换行下最后一行居中问题.md","hash":"4b1273d724a5ba0056811f0ed2cb12868e3b0ac7","modified":1715845151051},{"_id":"source/_posts/🌦🌦-++A-,-A++-区别.md","hash":"5ace548d84d121f25e179d1ec725b89d49e0aaab","modified":1715845151044},{"_id":"source/_posts/🌦🌦--encodeURI与encodeURIComponent区别.md","hash":"1ad971a959a9c35f6f94e7c03f37c843b59b83dc","modified":1715845151044},{"_id":"source/_posts/🌦🌦-charCodeAt-,-fromCharCode-用法.md","hash":"78da253e9a7d06c05f62e3be9275196c85880afa","modified":1715845151044},{"_id":"source/_posts/🌦🌦-ajax-post-四种提交方式.md","hash":"2515374cd8ce1ec5ef75032c3a27281029aaef2f","modified":1715845151047},{"_id":"source/_posts/🌦🌦-cookie-为什么作为token-放在header里.md","hash":"26330d0c7d7363f9b9df0426393ca6bd3ba914fc","modified":1715845151045},{"_id":"source/_posts/🌦🌦-import---as-怎么用.md","hash":"494c9fe23b9962f9f352e01e4212c969c9fe0f77","modified":1715845151047},{"_id":"source/_posts/🌦🌦-indexOf，includes，空字符串，返回的什么.md","hash":"28021e9fee1c160aa20d600c4e2511947f246534","modified":1715845151046},{"_id":"source/_posts/🌦🌦-ivew-动态新增-input-prop校验.md","hash":"d30e9654cf74a1481b042f32675da23e6c696011","modified":1715845151041},{"_id":"source/_posts/🌦🌦-js-二进制转字符串.md","hash":"75ff6ef6a22d1f58242733e55d44c59789daa301","modified":1715845151043},{"_id":"source/_posts/🌦🌦-js-修改对象key.md","hash":"1e71c950f6a1eba5bfb1c0ae701f8d57253064d7","modified":1715845151045},{"_id":"source/_posts/🌦🌦-js小技巧.md","hash":"ff780c3ece046444012b1aa3d7df6bcb5592798b","modified":1715845151044},{"_id":"source/_posts/🌦🌦-requestAnimationFrame-定时器.md","hash":"60bb38eef4cb6e28d86c837a4729663326f1cd3d","modified":1715845151040},{"_id":"source/_posts/🌦🌦-vite+vue3使用tailwindcss.md","hash":"0f9c19a364773f696f782962c6e7d97a00bd4e85","modified":1715845151058},{"_id":"source/_posts/🌦🌦-下载文件两种方式总结.md","hash":"0a699aa748b1a991eeea43b37102f96a10d09f3f","modified":1715845151050},{"_id":"source/_posts/🌦🌦-为什么-export-default-var-a-=-1-在ES6中不被允许-.md","hash":"13120bffaaca7ac60415d370d1166431c2fb6a8b","modified":1715845151047},{"_id":"source/_posts/🌦🌦-优雅的获取-数组第一个元素.md","hash":"3bb92ef44c9cc29506cd5c2ab21e6461e33978bd","modified":1715845151043},{"_id":"source/_posts/🌦🌦-空值合并操作符--有哪些坑.md","hash":"c5796a12327a5e22aa27716215982c50a19d3f4b","modified":1715845151044},{"_id":"source/_posts/🌦🌦for-异步执行方案.md","hash":"c5d37cd3dbd1adeb937c788de1816ee992460697","modified":1715845151052},{"_id":"source/_posts/🌦🌦forEach不改变原数组,-但是改变对象属性的问题.md","hash":"536997cd79e6664293bf5b7f1f49db9fbc0e2482","modified":1715845151042},{"_id":"source/_posts/🌦🌦js-数字溢出问题.md","hash":"922f080fc3fd11814ea1be7744207532231b13a2","modified":1715845151053},{"_id":"source/_posts/🌦🌦前端位运算.md","hash":"06bde8076cc2fa12383662714fdee241f3d17af2","modified":1715845151044},{"_id":"source/_posts/🌦🌦webpack&Esbuild--两者可以兼得.md","hash":"20a22a11661f47c653d95183090ee8c4a2cf1bb4","modified":1715845151053},{"_id":"source/_posts/🌦🌦前端大文件上传.md","hash":"ea18b9554c815c828c47b33a54b8c845ba47ff9b","modified":1715845151054},{"_id":"source/_posts/🌦🌦小程序框架对比.md","hash":"d831f3a4fb7887d4dbfd1c243305ba45bfc74152","modified":1715845151056},{"_id":"source/_posts/🌦🌦数组删除某个下标对象.md","hash":"358b0e8b12b5ae1ef3b16e92a8024471828fe35d","modified":1715845151043},{"_id":"source/_posts/🌦🌦神秘的sass-node.md","hash":"85e9438dd40de403f5a441cd6f03d8bc6c6aaaa6","modified":1715845151056},{"_id":"source/_posts/🌦🌦移动端适配方案选择.md","hash":"d40696f71e67c1f3159eb76585ef85060885bb80","modified":1715845151055},{"_id":"source/_posts/🍎🍎-Mac-OS-配置环境变量.md","hash":"c5e378ebbbcbd2bc28d5f9b37bdc6db548235c90","modified":1715845151039},{"_id":"source/_posts/🍎🍎-Mac-端口和代理.md","hash":"24fadee2f113a2f4995ca8ea62767d56df2ddf6d","modified":1715845151039},{"_id":"source/_posts/🎅🎁为什么esbuild更快.md","hash":"ea83bbaee814a39acf2028cc78b3964fb71ae04f","modified":1715845151051},{"_id":"source/_posts/🎅🏻🎅🏿-50个提高编码水平的方法.md","hash":"7bd7989442aabee6a8f2977d5544418703bb0984","modified":1715845151051},{"_id":"source/_posts/🎅📣你的github是空的吗.md","hash":"8ef972f3f263dc4e89150369e688fad92c36efee","modified":1715845151048},{"_id":"source/_posts/🎅🔥-Python-+-JavaScript-=-🔥🔥🔥.md","hash":"d110f499e2fbd8779ef50c75e619351d2e574506","modified":1715845151047},{"_id":"source/_posts/🎨🎨-git-Tips.md","hash":"fd94bc80e052a66353640f0053b9a17c0a05201f","modified":1715845151042},{"_id":"source/_posts/🎥-各个跨端技术原理归纳.md","hash":"c0e2aab1eff67d809de08c4b5231e2b58d9db73f","modified":1715845151047},{"_id":"source/_posts/🎨🎨-git-reset-提交.md","hash":"6312d8cba66cf99709f6de40d2df6a3da1f1541c","modified":1715845151051},{"_id":"source/_posts/🎨🎨-git-一些常用参数设置.md","hash":"723fde6f8c184ca2ae655b8f219cae0b48b80c08","modified":1715845151045},{"_id":"source/_posts/🎨🎨-git-设置文件大小写敏感.md","hash":"d1f5f0e6d953441701f5afd8e10027adbc6a91a9","modified":1715845151042},{"_id":"source/_posts/🎨🎨git-The-project-you-were-looking-for-could-not-be-found-解.md","hash":"aa85fe8420270bb2d522543e777eeaebedc625de","modified":1715845151053},{"_id":"source/_posts/🐓🥚-HBuilderX-uni-app--h5端构建发布实践.md","hash":"e9c3149e2dabb11fca24b1fc524b12d55af66bb7","modified":1715845151040},{"_id":"source/_posts/🐓🥚-如何写一个脚手架工具.md","hash":"63b26efa06bddd968dab3e243eafce10c3598c47","modified":1715845151045},{"_id":"source/_posts/🐓🥚docker打包node-js服务.md","hash":"20bcc6a9beef1402f1010c327bbbba6db40035e5","modified":1715845151039},{"_id":"source/_posts/🐓🥚npm-link-Hot-Module-Replacement-方案.md","hash":"90bf1276320b4d2b79d11bb00dc0e125168e4736","modified":1715845151040},{"_id":"source/_posts/🐓🥚webSocket-socket-js.md","hash":"69cdb90f96ae9133810ab9c694cb1d789272c724","modified":1715845151040},{"_id":"source/_posts/🐓🥚一键同步简书的文章到-GitHub-Pages.md","hash":"d77259b697246f15276a7a7362f5233b5b661b97","modified":1715845151040},{"_id":"source/_posts/🐛-An-error-occurred-while-installing-http_parser-rb-(0-6-0).md","hash":"080c560d4dac93eb99c3d66c9875215cc2a9833e","modified":1715845151048},{"_id":"source/_posts/👨🍳🐓-如何炖好一碗鸡汤.md","hash":"192d838e203b88af275f7eedf03456a918246f87","modified":1715845151060},{"_id":"source/_posts/💻--M1芯片为什么这么快.md","hash":"edf67da4678667f19fe17f07d41d983a078a4e2b","modified":1715845151061},{"_id":"source/_posts/💻-cpu体系结构.md","hash":"60f3f957ca10de1833150128d83192602638bccb","modified":1715845151061},{"_id":"source/_posts/💻-操作系统-api应用.md","hash":"f531ba6642bfcfe18b7552c02d3583f1c8043eb1","modified":1715845151061},{"_id":"source/_posts/💻-计算机是怎么显示图像的.md","hash":"b7ccc7c900bcd12d3a09c857866d461a386e7935","modified":1715845151061},{"_id":"source/_posts/💻 ASCII码与Unicode.md","hash":"76cf440d51cb13f4c3c8bfff6ef6ec873ddf3540","modified":1715845151060},{"_id":"source/_posts/📁📁-CentOS-7-firewall-cmd开放端口时出现bad-port-(most-likely-missin.md","hash":"21ef6ee141e090949b56800f2fd18f7fe05a1287","modified":1715845151042},{"_id":"source/_posts/📁📁-rsync更改chmod-权限.md","hash":"21e5c49744bb75e0d7c9f855ba48febd06156420","modified":1715845151056},{"_id":"source/_posts/📁📁-操作系统文件大小写的区别.md","hash":"608e8a5f0ef136e94ba2323f6d3bdfe09736ac40","modified":1715845151044},{"_id":"source/_posts/📁📁linux文件操作常用命令.md","hash":"77a4ff3f931496d03f3fb4f464408b9242d20ffb","modified":1715845151046},{"_id":"source/_posts/📁📁关闭linux系统端口.md","hash":"e3cf44639bba40aa2fefc5e62fc331d54e7ffe06","modified":1715845151052},{"_id":"source/_posts/📖计算机自学之路.md","hash":"c24fb680b02360c1130b02488638e4944863acd9","modified":1715845151060},{"_id":"source/_posts/📣▶️-33届前端早早聊，总结.md","hash":"67cac8d244a5430c361846d660e9db71913cabef","modified":1715845151047},{"_id":"source/_posts/📣-前端常用命名.md","hash":"0b610958848e5a0e248f7504bf61a3917eb1710d","modified":1715845151049},{"_id":"source/_posts/📣🐘🐘🐘🐘程序员面试指东.md","hash":"4574bf2a6e42f2eb79c97c1c6585dbe5541cc030","modified":1715845151053},{"_id":"source/_posts/📣📒🔖-看网文和读书的区别.md","hash":"c4110d6ae31ed64b09e30c9fd11101bddee62a66","modified":1715845151051},{"_id":"source/_posts/📣📝-功夫在诗外，优秀文章精选.md","hash":"4de039a271265eb876e210f2b66dfd6c08a371e7","modified":1715845151051},{"_id":"source/_posts/📣📣-工程师的世界越复杂，你的世界就越简单.md","hash":"d9ed4bfb5d6fa8ecf53e3ca542ff8c6b69ecf7ad","modified":1715845151055},{"_id":"source/_posts/📣📣ph-d-vs-Engineer.md","hash":"6b790c5753ae584b97b8ebccbaeb4dfbff09295d","modified":1715845151055},{"_id":"source/_posts/📣📣-如果让我写一本《软件工程》.html","hash":"e7299235a3b2316cf71cb6f4f6de1c1d091b0ef6","modified":1715845151056},{"_id":"source/_posts/📣📣编程艺术和编程的本质.md","hash":"e3585af8ea9d58ccd6950e297415fecda0f49eb9","modified":1715845151045},{"_id":"source/_posts/📣🚦力扣刷题有感.md","hash":"f946a510a1e798b828b696a0fe22cb09652eb607","modified":1715845151045},{"_id":"source/_posts/📣🚶🚶🚶🏻做好自己的事-不要被别人打乱自己的节奏.md","hash":"ef66990b0c742fece6e05a19057fd31625300f1e","modified":1715845151053},{"_id":"source/_posts/📣🤔🤔关于技术和创业的思考.md","hash":"0c291b2b1c3e5b019cc86447dcd408eded2f96c1","modified":1715845151052},{"_id":"source/_posts/🗳🗳-nginx-启动停止命令.md","hash":"92b690872133b79470abb3f1257ae6561152a088","modified":1715845151045},{"_id":"source/_posts/🗳🗳-npm版本自动控制.md","hash":"3c677ccb2154ad1f87be5563b1f054e707ee1bf6","modified":1715845151045},{"_id":"source/_posts/🗳🗳-软件工程之前端基础建设.md","hash":"0038a51ffe75686829e780f2de08957f39242a6f","modified":1715845151054},{"_id":"source/_posts/🗳🗳nginx转发小能手.md","hash":"d85f9ff74a2bab7b3da45c778cbb01108bfcc882","modified":1715845151052},{"_id":"source/_posts/🟨-🟨--常用正则表达式.md","hash":"edef04a6da1f7f2dfebe200b3d433c7793bbab70","modified":1715845151059},{"_id":"source/_posts/🟨-🟨-正则表达式中^的用法.md","hash":"a4dbe34d2a350278cb3126f9e6869d2f577013bb","modified":1715845151059},{"_id":"source/_posts/🦕🦕-react-hotc与-Decorator模式区别.md","hash":"4dbb79a9137d7bcd205433217612c45dd7f8fdba","modified":1715845151044},{"_id":"source/_posts/🦕🦕React阻止事件冒泡？.md","hash":"1705f930f1b9587fde119532c4be54ae1584b320","modified":1715845151041},{"_id":"source/_posts/🦜🦜-vue-router-同一个页面地址栏参数改变，页面不刷新的问题.md","hash":"1ae58968169fc2876ca1b6971841817430de1bff","modified":1715845151046},{"_id":"source/_posts/🦜🦜Vuex-Action异步执行使用场景.md","hash":"792b15e782542bd14def211b339a13272c5fb293","modified":1715845151053},{"_id":"source/_posts/🦜🦜vue-$emit-钩子函数.md","hash":"8fcbd408827dc35e2af7b77a9b9326d303296000","modified":1715845151046},{"_id":"source/_posts/🦜🦜vue-修改数组中某个对象的属性不更新.md","hash":"c5dd4eef629ef06c861654a84978d27d7d5216b5","modified":1715845151043},{"_id":"source/_posts/🦜🦜-vue中使provide中的数据变为响应式.md","hash":"f0f6a66cb519ed7e0689a07ea0d13c8ab71031d6","modified":1715845151046},{"_id":"source/_posts/🦜🦜vue-对象的属性是数组-watch监听不了.md","hash":"c77dc0ecbe9431ac0bbeb9b1413e072ae61da0bf","modified":1715845151042},{"_id":"source/_posts/🦜🦜vuejs-第二次点击按钮-事件时出现TypeError--n-apply-is-not-a-function.md","hash":"371934b44f146552066047b7834200316b3c56f1","modified":1715845151041},{"_id":"source/_posts/🧮🧮查找树节点中符合条件的子节点.md","hash":"d2f5ab6463076fadaf7b8f94d33b0159af90a6c8","modified":1715845151043},{"_id":"source/_posts/🧮🧮几个算法.md","hash":"2d4c07fb0c470097622066aff3e989a97b29f417","modified":1715845151041},{"_id":"themes/volantis/layout/_partial/_cover/blank.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715843427998},{"_id":"themes/volantis/layout/_partial/scripts/content-visibility-scroll-fix.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715843428009},{"_id":"themes/volantis/LICENSE","hash":"13b0862f4ed1914abe887a47df2c3ca5adfa8f3f","modified":1715843427991},{"_id":"themes/volantis/CHANGELOG.md","hash":"dadfe5d5b2e03ba1e41b5fd55816507b7bda3cb2","modified":1715843427991},{"_id":"themes/volantis/languages/zh-TW.yml","hash":"30df1cf6181375c4d05cb6dcfbdc0487ea39369c","modified":1715843427994},{"_id":"themes/volantis/package.json","hash":"1220f3b3a3a99e9373f1812a68720ed25b677399","modified":1715843428049},{"_id":"themes/volantis/languages/zh-CN.yml","hash":"669a4fd3c1526812be0f3db7a83e1697e34f2394","modified":1715843427994},{"_id":"themes/volantis/languages/en.yml","hash":"70caf366f8ab80dee4953684126affdd8fba529e","modified":1715843427994},{"_id":"themes/volantis/layout/404.ejs","hash":"48e160ad704be637cafc433d2365fc0eb8bab8cb","modified":1715843427994},{"_id":"themes/volantis/layout/_pre.ejs","hash":"3ac804505c282ff8b16858037c1d2bf9305c3063","modified":1715843428041},{"_id":"themes/volantis/layout/archive.ejs","hash":"e9f960ed538f1776e27c5409f1b702c5d3ebe7e4","modified":1715843428047},{"_id":"themes/volantis/layout/category.ejs","hash":"9ee883e5f73c05b3963770b74b63d7bb7e4e1ed5","modified":1715843428047},{"_id":"themes/volantis/layout/docs.ejs","hash":"16917af05431c049aa103744a5fb2595d5848d4c","modified":1715843428047},{"_id":"themes/volantis/_config.yml","hash":"06c6b346381f95f9d281b3637ebe56f82797e38f","modified":1715843427993},{"_id":"themes/volantis/layout/friends.ejs","hash":"8f39063d22a50e3ee48d85a371877f888e792739","modified":1715843428047},{"_id":"themes/volantis/layout/index.ejs","hash":"8ea7d49272b068cd1a4037846c72eb37e9823512","modified":1715843428048},{"_id":"themes/volantis/layout/list.ejs","hash":"a85b2984717ee6d5058ec5635f3f287f45c3d4ba","modified":1715843428048},{"_id":"themes/volantis/layout/layout.ejs","hash":"7d7a9cbf56497c7a5f0052ac7ad186e8744b5fb7","modified":1715843428048},{"_id":"themes/volantis/layout/page.ejs","hash":"16917af05431c049aa103744a5fb2595d5848d4c","modified":1715843428048},{"_id":"themes/volantis/layout/post.ejs","hash":"16917af05431c049aa103744a5fb2595d5848d4c","modified":1715843428048},{"_id":"themes/volantis/layout/_meta/artalkcount.ejs","hash":"797c9339a3980ab2fffe4b15902902f343071ac4","modified":1715843427995},{"_id":"themes/volantis/layout/tag.ejs","hash":"696e7b1c70b4438e6a8d925f99cbc4222dd4035d","modified":1715843428049},{"_id":"themes/volantis/layout/_meta/author.ejs","hash":"68e8f198c406b6946fbf0a0f756e8a334982ba84","modified":1715843427995},{"_id":"themes/volantis/layout/_meta/category.ejs","hash":"e95b88bf5f8b11b4f886859cf634a72aa46c8650","modified":1715843427995},{"_id":"themes/volantis/layout/_meta/counter.ejs","hash":"64da5df520e4174b4c26949713dcf7e4f0ec2c82","modified":1715843427995},{"_id":"themes/volantis/README.md","hash":"ce52d270a594874476aedeaaf073f0a6ecf6c801","modified":1715843427992},{"_id":"themes/volantis/layout/_meta/date.ejs","hash":"ba6c554dbc6c1870debb2b87c5fa25caa089be8f","modified":1715843427996},{"_id":"themes/volantis/layout/_meta/music.ejs","hash":"2c1884e59131d47a82d2556ac28ef784b4ddaa10","modified":1715843427996},{"_id":"themes/volantis/layout/_meta/share.ejs","hash":"0f3b1db92319734baa8da1636340839ed2d37a7b","modified":1715843427996},{"_id":"themes/volantis/layout/_meta/thumbnail.ejs","hash":"60045f2bf695b4be5ad3fd19db46890f1cdee68a","modified":1715843427997},{"_id":"themes/volantis/layout/_meta/tags.ejs","hash":"24aae7e64ce05ddb13e793a181bfa74257a830e4","modified":1715843427997},{"_id":"themes/volantis/layout/_meta/updated.ejs","hash":"edf445ad8153419a5dc7c4ec4c8490967cd9d33d","modified":1715843427997},{"_id":"themes/volantis/layout/_meta/walinecount.ejs","hash":"272822f1f62b3d0ce5fbb51c1b28475f8c6dfe15","modified":1715843427997},{"_id":"themes/volantis/layout/_meta/wordcount.ejs","hash":"eebaab3821af95ee64d8d56f33ca6c9c60b9b6f0","modified":1715843427998},{"_id":"themes/volantis/layout/_partial/archive.ejs","hash":"d5f776437c108c72c002b11f1d23d30b50e0079a","modified":1715843428002},{"_id":"themes/volantis/layout/_partial/article.ejs","hash":"1a0b3b358f70c1a1647b2501fe21208207acd38e","modified":1715843428002},{"_id":"themes/volantis/layout/_partial/categories.ejs","hash":"c2bc61780cab948ef8ab5076511ebccacab1cd79","modified":1715843428003},{"_id":"themes/volantis/layout/_partial/cover.ejs","hash":"b03a268d75dedeb8d6e29e3e352bd6cdf921545a","modified":1715843428003},{"_id":"themes/volantis/layout/_partial/footer.ejs","hash":"49f268fb64e59167a4283767bb0fccf38f616aab","modified":1715843428003},{"_id":"themes/volantis/layout/_partial/header.ejs","hash":"2145c5c73bc59bce580924545b8ecb0145678c23","modified":1715843428004},{"_id":"themes/volantis/layout/_partial/head.ejs","hash":"908405277c1b6bd57aa46a17e2fd3a08cbf33ab9","modified":1715843428003},{"_id":"themes/volantis/layout/_partial/meta.ejs","hash":"62b8298125ec4e395ec0f7b86a3290b54c84bf52","modified":1715843428004},{"_id":"themes/volantis/layout/_partial/post.ejs","hash":"70a5853353be1052fec311048ad49c19d1136f98","modified":1715843428005},{"_id":"themes/volantis/layout/_partial/side.ejs","hash":"27f9df84585ffb24e2ba2423761f90f690c65787","modified":1715843428012},{"_id":"themes/volantis/layout/_widget/blogger.ejs","hash":"46778ef9cd352631a677f718d2dd22d9d1953609","modified":1715843428041},{"_id":"themes/volantis/layout/_widget/category.ejs","hash":"3104d6a1d857552c6629eb03351f581b1e7ded95","modified":1715843428041},{"_id":"themes/volantis/layout/_widget/grid.ejs","hash":"a120c295500d9280fca069c6e78b4c6c21e696c3","modified":1715843428043},{"_id":"themes/volantis/layout/_widget/copyright.ejs","hash":"4dc030b174e646a1be916fd8111a674e6ee2a306","modified":1715843428042},{"_id":"themes/volantis/layout/_widget/_pre.ejs","hash":"f10d86b08237ca737b013ab59cfb6fef0a79b8d1","modified":1715843428041},{"_id":"themes/volantis/layout/_widget/group.ejs","hash":"2eed9614049441b51e6819f393f80faf5441870b","modified":1715843428043},{"_id":"themes/volantis/layout/_widget/header.ejs","hash":"b132e332ddf12d1bb1d99480200561d8c38edd04","modified":1715843428044},{"_id":"themes/volantis/layout/_widget/lastupdate.ejs","hash":"af1b4b533bbe9b45a7bdf85e46d1cd408ba72d70","modified":1715843428044},{"_id":"themes/volantis/layout/_widget/list.ejs","hash":"f4d4fa3ef7e658206afab993cf28bc92015340d2","modified":1715843428044},{"_id":"themes/volantis/layout/_widget/music.ejs","hash":"563136c48bacea387032fd3418c1509e40d2c02f","modified":1715843428045},{"_id":"themes/volantis/layout/_widget/page.ejs","hash":"dacff1467a65b094d37893886555119e9731fc57","modified":1715843428045},{"_id":"themes/volantis/layout/_widget/load.ejs","hash":"95a7df52cf0ccba54bf18269d80d05d6a0c46b3a","modified":1715843428044},{"_id":"themes/volantis/layout/_widget/qrcode.ejs","hash":"5560f396deaf22fb49f71269764dd0ba094757c5","modified":1715843428045},{"_id":"themes/volantis/layout/_widget/references.ejs","hash":"8be0102cda29802e5517b3b9286fe71ca7c4c6bf","modified":1715843428045},{"_id":"themes/volantis/layout/_widget/related_posts.ejs","hash":"3037060944a123f4e7a90b2095a14c2ac6e1fd2b","modified":1715843428045},{"_id":"themes/volantis/layout/_widget/text.ejs","hash":"b891cf3d7d1e0fdbdb5be7baf8877180ac01044f","modified":1715843428046},{"_id":"themes/volantis/layout/_widget/tagcloud.ejs","hash":"97b7189d13dc0a561ffc6df461e5de17744cef64","modified":1715843428046},{"_id":"themes/volantis/scripts/events/index.js","hash":"171d2b453b4aa8794d46e215c03b5b7ea5d44327","modified":1715843428049},{"_id":"themes/volantis/scripts/filters/content-visibility.js","hash":"3e0134b69bd581b695a522d4aed6cdf140f5e753","modified":1715843428052},{"_id":"themes/volantis/layout/_widget/webinfo.ejs","hash":"931533793898b4c89ecbbcf8a50c9d13cc7f3603","modified":1715843428046},{"_id":"themes/volantis/layout/_widget/toc.ejs","hash":"6c08748b3aab214e5aeed9972515b920baad712b","modified":1715843428046},{"_id":"themes/volantis/scripts/filters/replace.js","hash":"aa6fe807d7b24a60475ce8126a1be7b314cd26ba","modified":1715843428053},{"_id":"themes/volantis/scripts/filters/z-lazyload.js","hash":"df6c5b0a6eff5e655d2b8de85c646ba1e5a16535","modified":1715843428053},{"_id":"themes/volantis/scripts/helpers/first-style.js","hash":"ba2e2325a365704abae3f1d204b058731e21bfbf","modified":1715843428054},{"_id":"themes/volantis/scripts/helpers/custom-files.js","hash":"8483fcdc7dbbfde40276dc3daa1ddc5e40380360","modified":1715843428054},{"_id":"themes/volantis/scripts/helpers/related-posts.js","hash":"cab8c291a8ff460b29b3248ac86827c143aca9ee","modified":1715843428056},{"_id":"themes/volantis/scripts/tags/btn.js","hash":"e9b6e26f106505cf14a72524ab5e8b5bc85f362a","modified":1715843428058},{"_id":"themes/volantis/scripts/helpers/revisioned.js","hash":"244de084b70b68273af5fbd5d2e2061361ec9840","modified":1715843428056},{"_id":"themes/volantis/scripts/tags/btns.js","hash":"648671420faa0ac00076a8c7bb011c908b83fd5a","modified":1715843428059},{"_id":"themes/volantis/scripts/tags/checkbox.js","hash":"0798edc6833d5978709ca5ed56aed33cea46e694","modified":1715843428059},{"_id":"themes/volantis/scripts/tags/contributors.js","hash":"a00573000e7ddf7a9d2f03f29fd62cb8a9752a48","modified":1715843428059},{"_id":"themes/volantis/scripts/tags/dropmenu.js","hash":"19176a6edf7acc6ad31c96961e59da526f200980","modified":1715843428059},{"_id":"themes/volantis/scripts/tags/fancybox.js","hash":"9eac73fa2d7d14ae585b302255270933641a4859","modified":1715843428060},{"_id":"themes/volantis/scripts/tags/folding.js","hash":"a809988c63f358e2ae903d905dc81ed80860bacd","modified":1715843428060},{"_id":"themes/volantis/scripts/tags/frame.js","hash":"e78834c005bda8f80ba86c78911b9db7566b878b","modified":1715843428060},{"_id":"themes/volantis/scripts/tags/ghcard.js","hash":"1ed7c1508180756ad4752769aa91289d37a7e23d","modified":1715843428061},{"_id":"themes/volantis/scripts/tags/image.js","hash":"63a4b3e1e3d661b6ab2b3fcfcfb657e3b632b9cb","modified":1715843428061},{"_id":"themes/volantis/scripts/tags/friends.js","hash":"a902e1ac279014a30eda85e477c52144214cc66c","modified":1715843428061},{"_id":"themes/volantis/scripts/tags/md.js","hash":"66d6b7c17638e778a8796d64cd42d0c622eba67e","modified":1715843428062},{"_id":"themes/volantis/scripts/tags/inline-labels.js","hash":"08fbdc0ea622270e1236a28778f875c8ad2e5516","modified":1715843428061},{"_id":"themes/volantis/scripts/tags/media.js","hash":"b3871bc024d7fce9500f31073d690c4cd33bce18","modified":1715843428062},{"_id":"themes/volantis/scripts/tags/link.js","hash":"9dec9c65819d1135a7a248adaa26acbf24427cd0","modified":1715843428062},{"_id":"themes/volantis/scripts/tags/note.js","hash":"ac86ba50da98d9546522feaca672259620b053d8","modified":1715843428062},{"_id":"themes/volantis/scripts/tags/span.js","hash":"b825115f037386797efa1b0aee3a1df21629f243","modified":1715843428063},{"_id":"themes/volantis/scripts/tags/site.js","hash":"dd23a06f2e8a3cc70730cf199a0661777532ff0b","modified":1715843428062},{"_id":"themes/volantis/scripts/tags/swiper.js","hash":"f0171f07f494c0b0f3f8af265344add15813a676","modified":1715843428063},{"_id":"themes/volantis/scripts/tags/table.js","hash":"ad82046fc64f932019d8a7b3e9a8ff07973a6c3b","modified":1715843428063},{"_id":"themes/volantis/scripts/tags/timeline.js","hash":"9b6b88ada712a8f3a04a825cf73a409f072ed045","modified":1715843428064},{"_id":"themes/volantis/source/css/Readme.md","hash":"cf408308dcbc62f4fc2bd5aa38303b368cc88a7e","modified":1715843428064},{"_id":"themes/volantis/scripts/tags/tabs.js","hash":"f0054f1c970cac728b3ad289a3c531c070c06896","modified":1715843428064},{"_id":"themes/volantis/scripts/filters/img.js","hash":"160732831bec5baf89fa07a85fec5229c3cb9cd7","modified":1715843428052},{"_id":"themes/volantis/source/css/first.styl","hash":"2a17b4079c0d9d06fb44da8517f9f9e16aeb6dc7","modified":1715843428087},{"_id":"themes/volantis/source/js/app.js","hash":"99a253ee9b6f6c797df42785d88c8600424b65b4","modified":1715843428089},{"_id":"themes/volantis/layout/_partial/_cover/featured.ejs","hash":"6127655788723099fecd7c6a58212fd48dd8a834","modified":1715843427999},{"_id":"themes/volantis/layout/_partial/_cover/focus.ejs","hash":"6127655788723099fecd7c6a58212fd48dd8a834","modified":1715843428000},{"_id":"themes/volantis/source/css/style.styl","hash":"00892839230a1b05a5f9d9350baacd67d894fc85","modified":1715843428088},{"_id":"themes/volantis/layout/_partial/_cover/dock.ejs","hash":"5f8dfb92ac47efa04248c11729e350f744fa19c9","modified":1715843427999},{"_id":"themes/volantis/layout/_partial/_cover/layout.ejs","hash":"39a463ce33ce6138d40055e72118941515ba2f63","modified":1715843428000},{"_id":"themes/volantis/layout/_partial/_cover/search.ejs","hash":"7767c06cd4be45b83b3eab57bb2d0ff170442ea5","modified":1715843428001},{"_id":"themes/volantis/layout/_partial/scripts/_ctrl.ejs","hash":"8dd82dc0d7cd59c55d9e1239ec80c0303a4069bf","modified":1715843428006},{"_id":"themes/volantis/layout/_partial/scripts/index.ejs","hash":"2e8e13d7d73f2e59038866a7cacd2cae4b380fbe","modified":1715843428011},{"_id":"themes/volantis/layout/_partial/scripts/global.ejs","hash":"46b3e44e316802ec4ce81bae320f7671647823f5","modified":1715843428011},{"_id":"themes/volantis/layout/_partial/scripts/toc.ejs","hash":"d71bac519593ac09e9e5c521e5999925e253f4b6","modified":1715843428012},{"_id":"themes/volantis/layout/_plugins/_page_plugins/index.ejs","hash":"0225c5aa1c5a2b25887fef4354a1a7a253d67f08","modified":1715843428015},{"_id":"themes/volantis/layout/_plugins/analytics/LCCounter.ejs","hash":"ecad85a3d5776614335783e13a9497b1538731a3","modified":1715843428021},{"_id":"themes/volantis/layout/_plugins/analytics/script.ejs","hash":"d6e33103088b4bff2e3810c48aa91ac18e6e7b16","modified":1715843428022},{"_id":"themes/volantis/layout/_plugins/aplayer/layout.ejs","hash":"51b4f54a165fbca56c9beec3ce19bc62f10097d9","modified":1715843428023},{"_id":"themes/volantis/layout/_plugins/aplayer/script.ejs","hash":"e555989a9d0518bb5b15814df6961232fcba691b","modified":1715843428023},{"_id":"themes/volantis/layout/_plugins/comments/index.ejs","hash":"3d781c01f494b89d1d31d3210c100c822787c9b7","modified":1715843428030},{"_id":"themes/volantis/layout/_plugins/end-of-support/script.ejs","hash":"d0e391135d2c9e986971e24b93baf4657bdae6f5","modified":1715843428033},{"_id":"themes/volantis/layout/_plugins/darkmode/script.ejs","hash":"742f0e0988741e3eb82bb0d99a081447b45a41b1","modified":1715843428033},{"_id":"themes/volantis/layout/_plugins/chat/index.ejs","hash":"56d2e577fbd08859e118cfb1d1b8d230850a3675","modified":1715843428024},{"_id":"themes/volantis/layout/_plugins/github-api/script.ejs","hash":"8c414c5c39fb6c36c2a4881463f3dc3346cc9b46","modified":1715843428034},{"_id":"themes/volantis/layout/_plugins/highlight/script.ejs","hash":"06befe70f47454fbfaa95245fe4cdb8d4f6f9f3c","modified":1715843428035},{"_id":"themes/volantis/layout/_plugins/lazyload/script.ejs","hash":"d80dd5864200d86bc6c43d0fd1efab6538e703cf","modified":1715843428035},{"_id":"themes/volantis/layout/_plugins/nodewaves/script.ejs","hash":"f28854fba682c345424f6217525507f0a3e2b17d","modified":1715843428036},{"_id":"themes/volantis/layout/_plugins/parallax/script.ejs","hash":"7c88aedd458b2c9df27e57db5c6ecb3090c58eba","modified":1715843428036},{"_id":"themes/volantis/layout/_plugins/pjax/animate.ejs","hash":"050f626db44ef423e5f8689447197a37f7de6e27","modified":1715843428036},{"_id":"themes/volantis/layout/_plugins/pjax/index.ejs","hash":"dcba4a0877b1eedf7899eb947c6256063f665d3a","modified":1715843428036},{"_id":"themes/volantis/layout/_plugins/preload/script.ejs","hash":"1c3bf70b6df9da59c5554a921d7447e20684241d","modified":1715843428037},{"_id":"themes/volantis/layout/_plugins/rightmenu/layout.ejs","hash":"aa49c2498e2e61dd4ac0d68db89a1bdee86a9208","modified":1715843428038},{"_id":"themes/volantis/layout/_plugins/pjax/pdata.ejs","hash":"eb90a00163519e6ed01a4f38380caf4dc2bd5049","modified":1715843428037},{"_id":"themes/volantis/layout/_plugins/rightmenus/layout.ejs","hash":"e58b4ffa5db685b00149d73c8914e2748686c442","modified":1715843428038},{"_id":"themes/volantis/layout/_plugins/scrollreveal/script.ejs","hash":"bfcd40a4c86a79d11b6ea9460f5bb6c3a60be48e","modified":1715843428039},{"_id":"themes/volantis/layout/_plugins/search/script.ejs","hash":"c6525e6d76b6e968a1803fe8aea076dfc23659a0","modified":1715843428040},{"_id":"themes/volantis/scripts/events/lib/check-environment.js","hash":"4efbacae50e3d693a8a0c8585ae5a369fc605f04","modified":1715843428050},{"_id":"themes/volantis/layout/_plugins/share/layout.ejs","hash":"bc2aeea593ddb818dc7596ca2f34640fbfb7b2f3","modified":1715843428040},{"_id":"themes/volantis/scripts/events/lib/check-configuration.js","hash":"2724cfe60b737677b2b9a06207826615b935b359","modified":1715843428050},{"_id":"themes/volantis/scripts/events/lib/config.js","hash":"8dafa15769d43693523e435fad10b85f614a0600","modified":1715843428051},{"_id":"themes/volantis/layout/_plugins/swiper/script.ejs","hash":"766ab47f4b26502fb71383ae442a1db629fe9e12","modified":1715843428040},{"_id":"themes/volantis/scripts/events/lib/render-stylus.js","hash":"36c2f32d2101eaa84041daf70393df6f3a3fa331","modified":1715843428051},{"_id":"themes/volantis/scripts/events/lib/stellar-tag-utils.js","hash":"8d62893faf26d15d2833f8090bd6257a7282f5e2","modified":1715843428052},{"_id":"themes/volantis/scripts/helpers/head/autoCanonical.js","hash":"f3ea74759129c71041371a1d77c687eb6aa88d3a","modified":1715843428055},{"_id":"themes/volantis/scripts/helpers/head/generate_preload_fontfamily.js","hash":"d37dbe38fa9125fdce99b2ef9e92582ed08eea82","modified":1715843428055},{"_id":"themes/volantis/scripts/helpers/head/generate_title__keywords__description.js","hash":"179a07b7b2270398216a34d79595d98e30962b22","modified":1715843428055},{"_id":"themes/volantis/scripts/helpers/head/generate_seo.js","hash":"e0059a60cc5978be6792dcf795a2ece3a509f41a","modified":1715843428055},{"_id":"themes/volantis/scripts/helpers/structured-data/index.js","hash":"bcb770787c77e39cdc156b7fd58cde8e00b79153","modified":1715843428056},{"_id":"themes/volantis/source/css/_defines/AutoPrefixCSS.styl","hash":"c76f624d332c59b73c1d6b95b30b2afb560976eb","modified":1715843428065},{"_id":"themes/volantis/source/css/_defines/color.styl","hash":"19624d8825128a4323229b10d0c9dd925d9ed525","modified":1715843428065},{"_id":"themes/volantis/source/css/_defines/Readme.md","hash":"77d9e986d24898b98eba2010185951fd1fb8b95c","modified":1715843428065},{"_id":"themes/volantis/source/css/_defines/effect.styl","hash":"47db4f84182194a8a233931424c9bc79c6cf0117","modified":1715843428066},{"_id":"themes/volantis/source/css/_defines/func.styl","hash":"430adedc7e6f57013e54d15e6f8dce21e9ea2579","modified":1715843428066},{"_id":"themes/volantis/source/css/_first/base_first.styl","hash":"4c32e4ad6c203b5edd9e29650a91328a951e6b22","modified":1715843428067},{"_id":"themes/volantis/source/css/_first/cover_first.styl","hash":"32f0e09eba832607165096c68f70698a75d685b5","modified":1715843428067},{"_id":"themes/volantis/source/css/_first/dark_first.styl","hash":"3370c7877b18b5464dad56873c52a8a5eff4b6c8","modified":1715843428067},{"_id":"themes/volantis/source/css/_defines/layout.styl","hash":"d1bdce2e7974b1feb585adcdf95e36a054a36ec4","modified":1715843428066},{"_id":"themes/volantis/source/css/_first/fontfamily_first.styl","hash":"5024a9162f4787ac4234d5b8549fad40dbecf865","modified":1715843428068},{"_id":"themes/volantis/source/css/_first/navbar_first.styl","hash":"e268d81dc78fdf9758d314cdc5cc087aec1c70e6","modified":1715843428068},{"_id":"themes/volantis/source/css/_first/search_first.styl","hash":"955c9eb68b90b97dba0bd27909347cfc91ce68c5","modified":1715843428068},{"_id":"themes/volantis/source/css/_style/index.styl","hash":"835b3640c257cd229b20c088536b053b92c9796c","modified":1715843428087},{"_id":"themes/volantis/source/js/plugins/aplayer.js","hash":"95f2e47535c8d37e90cab7726d25845cf01ca477","modified":1715843428090},{"_id":"themes/volantis/source/js/plugins/parallax.js","hash":"3c3210bde6e86d7d157c34c14796abe98cb1bbd0","modified":1715843428090},{"_id":"themes/volantis/source/js/plugins/rightMenus.js","hash":"fda412e6e740acc6fb209031fec240a5126c13b9","modified":1715843428091},{"_id":"themes/volantis/source/js/plugins/rightMenu.js","hash":"cb2f17ab10127065f7b9f5f87a49921d25b287e1","modified":1715843428091},{"_id":"themes/volantis/source/css/_defines/fonts.styl","hash":"fa199b11b568a6b0d6fc4e87ef12ab36ac254966","modified":1715843428066},{"_id":"themes/volantis/source/js/search/hexo.js","hash":"286a7bac5fad588539f9b28ddea38cde573a69f8","modified":1715843428092},{"_id":"themes/volantis/layout/_partial/scripts/_ctrl/cdnCtrl.ejs","hash":"f104b18fce3ed5fdc9e122c7326937015468ede5","modified":1715843428007},{"_id":"themes/volantis/layout/_partial/scripts/_ctrl/coverCtrl.ejs","hash":"ee3f2108e61db024466b08beddb895ad97330f63","modified":1715843428007},{"_id":"themes/volantis/layout/_plugins/_page_plugins/bbtalk/index.ejs","hash":"bd513c00f6d5fb57e504db7e89c3326d9f68dd88","modified":1715843428013},{"_id":"themes/volantis/layout/_plugins/_page_plugins/gitter/index.ejs","hash":"e90bf8daf46f34ca9b37049154dda6d1f155d037","modified":1715843428014},{"_id":"themes/volantis/layout/_plugins/_page_plugins/artitalk/index.ejs","hash":"98fb39a1ac55b9af0c1501b051ac2698a3684686","modified":1715843428012},{"_id":"themes/volantis/layout/_plugins/_page_plugins/fcircle/index.ejs","hash":"2a220187916a0474a083a8f716c0a3b9a8f57548","modified":1715843428013},{"_id":"themes/volantis/layout/_plugins/_page_plugins/indent/index.ejs","hash":"7d112cde9b8d1785d8c541cde94361e0bfc60f30","modified":1715843428014},{"_id":"themes/volantis/layout/_plugins/_page_plugins/katex/index.ejs","hash":"159e21313df49ef1ab14122bfe7e02d2d4f6fcdf","modified":1715843428015},{"_id":"themes/volantis/layout/_plugins/comments/artalk/script.ejs","hash":"22b4830abca40c696fee7f2884adb07b6b1c7018","modified":1715843428025},{"_id":"themes/volantis/layout/_plugins/_page_plugins/mathjax/index.ejs","hash":"91a412d8324fbacd7a340e4ad031b4e917a16f2f","modified":1715843428015},{"_id":"themes/volantis/layout/_plugins/comments/beaudar/script.ejs","hash":"285226000b8bff1f96b8b69da268a0af79d04b98","modified":1715843428026},{"_id":"themes/volantis/layout/_plugins/_page_plugins/snackbar/index.ejs","hash":"bddb75f7112d2b438f462a6ebef79810ef5ac291","modified":1715843428016},{"_id":"themes/volantis/layout/_plugins/comments/discuss/script.ejs","hash":"eb75bc4a6cbea04a0cbe49e22796d8180c7987b8","modified":1715843428027},{"_id":"themes/volantis/layout/_plugins/comments/disqusjs/script.ejs","hash":"569912aebbde81490e57ab2ce49e35bf678723f2","modified":1715843428029},{"_id":"themes/volantis/layout/_plugins/comments/giscus/script.ejs","hash":"45fe8d3e47d2a990292426d14091cffa46301704","modified":1715843428029},{"_id":"themes/volantis/layout/_plugins/comments/gitalk/script.ejs","hash":"00a20cd4a398204b1193b0e9d3fac2c5f32daad3","modified":1715843428030},{"_id":"themes/volantis/layout/_plugins/comments/disqus/script.ejs","hash":"faa5f24195e152c5f99cfd93a63117ae802d104b","modified":1715843428028},{"_id":"themes/volantis/layout/_plugins/comments/hashover/script.ejs","hash":"7ecd8879c66b907da04093a465d346f6569cee83","modified":1715843428030},{"_id":"themes/volantis/layout/_plugins/comments/isso/script.ejs","hash":"aa7c81e6df9b803966efe5eda8edbc85b924f34b","modified":1715843428031},{"_id":"themes/volantis/layout/_plugins/comments/livere/script.ejs","hash":"54340ba16d4f46ed4f3c6f67ac7ba1a2e68be67a","modified":1715843428031},{"_id":"themes/volantis/layout/_plugins/comments/utterances/script.ejs","hash":"afbb35e59b3b3af34627416ee47ecad1d564bdbc","modified":1715843428032},{"_id":"themes/volantis/layout/_plugins/comments/twikoo/script.ejs","hash":"c0fc694962e94a478b85ae7adb95917fc5f8f2c4","modified":1715843428031},{"_id":"themes/volantis/layout/_plugins/comments/waline/script.ejs","hash":"945fa1928c6bd1599134b8627b35d3dd7cd79013","modified":1715843428032},{"_id":"themes/volantis/layout/_plugins/comments/vssue/script.ejs","hash":"8171fdfbe668277942eaa55847ba646532d245eb","modified":1715843428032},{"_id":"themes/volantis/layout/_plugins/comments/z-custom/script.ejs","hash":"e5cfe25fb88b7a3dd0c68e20b2e17d44eb2a1f04","modified":1715843428033},{"_id":"themes/volantis/layout/_plugins/highlight/prismjs/script.ejs","hash":"f2b823714c16b9fadd501bc127fc17fca8cad488","modified":1715843428034},{"_id":"themes/volantis/scripts/helpers/structured-data/lib/blogposting.js","hash":"f8543b0460c9a5b23ee43d8ed49e018c1c627439","modified":1715843428057},{"_id":"themes/volantis/layout/_plugins/chat/gitter/script.ejs","hash":"e4f06c50c23d433a0e63fc703a35704c336ba090","modified":1715843428024},{"_id":"themes/volantis/layout/_plugins/chat/tidio/script.ejs","hash":"bb678b5e8a9fb87fc1c1e48914da3a1a052a8e02","modified":1715843428025},{"_id":"themes/volantis/layout/_plugins/highlight/highlightjs/script.ejs","hash":"3ffdc0dea93efd49b23910fe7a295784c7053b97","modified":1715843428034},{"_id":"themes/volantis/scripts/helpers/structured-data/lib/breadcrumblist.js","hash":"df6316082af2df061f16bb01d5b5d3478f98c662","modified":1715843428057},{"_id":"themes/volantis/scripts/helpers/structured-data/lib/organization.js","hash":"02c08f0362aec5d310b8c7e69823cd88ed49ea5e","modified":1715843428058},{"_id":"themes/volantis/scripts/helpers/structured-data/lib/person.js","hash":"afca448311d62a44566d9471594a43495a6be6db","modified":1715843428058},{"_id":"themes/volantis/scripts/helpers/structured-data/lib/config.js","hash":"e4c3c23e58f0bac72010f962d92da641445e748a","modified":1715843428057},{"_id":"themes/volantis/scripts/helpers/structured-data/lib/index.js","hash":"41e4af773dfb4755752cb74a6d70e4b5b0c1ce4d","modified":1715843428057},{"_id":"themes/volantis/scripts/helpers/structured-data/lib/website.js","hash":"556f28164d31b3898d06cb8f76472bc6547bb1db","modified":1715843428058},{"_id":"themes/volantis/source/css/_style/_base/base.styl","hash":"712eb4803dc595eb111ebd89546e6ed3fb1ec7ce","modified":1715843428069},{"_id":"themes/volantis/source/css/_style/_layout/archive.styl","hash":"a96709230abbc8d4fc40361b8fc02d4249abb4a1","modified":1715843428069},{"_id":"themes/volantis/source/css/_style/_base/fontfamily_async.styl","hash":"48c006682b8f44681662e4b0f8d3ebfdf85add69","modified":1715843428069},{"_id":"themes/volantis/source/css/_style/_layout/article.styl","hash":"c004332ad389146db507192f7776ef50cba74d4c","modified":1715843428069},{"_id":"themes/volantis/source/css/_style/_layout/footer.styl","hash":"bb850b4707ee025e267e079fcf85484849cf4f41","modified":1715843428070},{"_id":"themes/volantis/source/css/_style/_layout/friends-traditional.styl","hash":"2da0419cd5874d03d7d5bafdb081beb6cb786608","modified":1715843428070},{"_id":"themes/volantis/source/css/_style/_layout/img.styl","hash":"55d79f07b717d3e28515b41401f656d1593be624","modified":1715843428071},{"_id":"themes/volantis/source/css/_style/_layout/friends-simpleuser.styl","hash":"07c477e15bf75615faff5587cc82dbc6004a901a","modified":1715843428070},{"_id":"themes/volantis/source/css/_style/_layout/loading.styl","hash":"56a2b9f46edd5b87e49d11647dc9396b0d833d54","modified":1715843428071},{"_id":"themes/volantis/source/css/_style/_layout/md.styl","hash":"80ed875bbeed516c192417d4a8160cbff416f82b","modified":1715843428071},{"_id":"themes/volantis/source/css/_style/_layout/main.styl","hash":"caf1f945f564f79e374beaf265923f54a61655ff","modified":1715843428071},{"_id":"themes/volantis/source/css/_style/_layout/posts.styl","hash":"db5d89ef911abd521e5daeea569871ebb979c3fb","modified":1715843428072},{"_id":"themes/volantis/source/css/_style/_layout/pagination.styl","hash":"65dacf95771fc518a06cbf301f4c0b06201d7321","modified":1715843428072},{"_id":"themes/volantis/source/css/_style/_layout/search.styl","hash":"ac9f4c4f6e1ac38757dfeae3483a55983e1491d0","modified":1715843428072},{"_id":"themes/volantis/source/css/_style/_layout/snackbar.styl","hash":"752a7fea5284a61fd9305d3b0fcaa43f2e64862f","modified":1715843428072},{"_id":"themes/volantis/source/css/_style/_layout/toc.styl","hash":"b7fef67b480c298ebc760069761578a81c28f4d8","modified":1715843428073},{"_id":"themes/volantis/source/css/_style/_layout/sidebar.styl","hash":"203792c9b492fe8c29a43205a4a8a2681a029137","modified":1715843428072},{"_id":"themes/volantis/source/css/_style/_plugins/aplayer.styl","hash":"da809e1dde8adb9d1c98f0daeb52a2d920d497f7","modified":1715843428077},{"_id":"themes/volantis/source/css/_style/_layout/video.styl","hash":"680e8cf8fc5d62913dad4ccd06135caad2bb3e92","modified":1715843428073},{"_id":"themes/volantis/source/css/_style/_plugins/cursor.styl","hash":"bc055048c7d017be8cf25a3385f516656c96cf66","modified":1715843428077},{"_id":"themes/volantis/source/css/_style/_plugins/gitalk.styl","hash":"c4c9950fd6654f87ca4f481cf3065ca4069fac48","modified":1715843428078},{"_id":"themes/volantis/source/css/_style/_plugins/fontcolor.styl","hash":"fa13f91f8be68b62210048d1481c3b23e23f939b","modified":1715843428078},{"_id":"themes/volantis/source/css/_style/_plugins/mathjax.styl","hash":"11ee86571f31f9aa61dcc48b40977dcd974d76a4","modified":1715843428079},{"_id":"themes/volantis/source/css/_style/_plugins/index.styl","hash":"a18de4930b88f62e557e62e8fbb9e2ce550c5d49","modified":1715843428079},{"_id":"themes/volantis/source/css/_style/_plugins/message.styl","hash":"995b46084664f2ed2cf025c1a208089ecfe1147e","modified":1715843428080},{"_id":"themes/volantis/source/css/_style/_plugins/pjaxanimate.styl","hash":"86c80d1d1c8a02c0eb4c0b5d29ff41c9a5dd5ac3","modified":1715843428080},{"_id":"themes/volantis/source/css/_style/_tag-plugins/Readme.md","hash":"51986550e80990e1db23e2ee4165e5e4800e4b9f","modified":1715843428080},{"_id":"themes/volantis/source/css/_style/_tag-plugins/dropmenu.styl","hash":"a136ebb90bedef15c1d8b8d75e09b37c3873f5e8","modified":1715843428081},{"_id":"themes/volantis/source/css/_style/_tag-plugins/checkbox.styl","hash":"8c62dd38914d939069d9222c54787a24cb5c31f7","modified":1715843428081},{"_id":"themes/volantis/source/css/_style/_tag-plugins/fancybox.styl","hash":"1b4709787f9bda8ce565aa9a4aaf7f1f58751b44","modified":1715843428082},{"_id":"themes/volantis/source/css/_style/_tag-plugins/btns.styl","hash":"bf592cd78c146bb671217f106632b9e5bcc7c145","modified":1715843428081},{"_id":"themes/volantis/source/css/_style/_tag-plugins/folding.styl","hash":"253f13e60218e0d014a1df99933f5cdba507f3b1","modified":1715843428082},{"_id":"themes/volantis/source/css/_style/_tag-plugins/frame.styl","hash":"6ffbb29514781aa4fa7d7653706554ce33f4525b","modified":1715843428082},{"_id":"themes/volantis/source/css/_style/_tag-plugins/friends.styl","hash":"8f9e60b94c02197e4555f923d357017742bf8d7b","modified":1715843428082},{"_id":"themes/volantis/source/css/_style/_tag-plugins/ghcard.styl","hash":"58adb206695a704b1f40df42e2dc10e9e9055aeb","modified":1715843428082},{"_id":"themes/volantis/source/css/_style/_tag-plugins/image.styl","hash":"bb4b07841602592e421597ba8dd7110edec789d8","modified":1715843428083},{"_id":"themes/volantis/source/css/_style/_tag-plugins/link.styl","hash":"82cdcc537612eec3e1af40d00edf80b14116c191","modified":1715843428083},{"_id":"themes/volantis/source/css/_style/_tag-plugins/media.styl","hash":"576c9eede3a8f9ec2ba1a970e92a49154ec3acb3","modified":1715843428084},{"_id":"themes/volantis/source/css/_style/_tag-plugins/note.styl","hash":"005d3c55c2216d7c88661f79ad466ad89fad4784","modified":1715843428084},{"_id":"themes/volantis/source/css/_style/_tag-plugins/sites.styl","hash":"01593f3b8a233bc2c3193796707e4ed77df217bb","modified":1715843428085},{"_id":"themes/volantis/source/css/_style/_tag-plugins/span.styl","hash":"6e9f8b453244d9241d3fceed0a56e12c86a4b446","modified":1715843428085},{"_id":"themes/volantis/source/css/_style/_tag-plugins/swiper.styl","hash":"819385594f1825e26074ade900835a3f4031fe42","modified":1715843428085},{"_id":"themes/volantis/source/css/_style/_tag-plugins/tabs.styl","hash":"a2366f4fe1d9f06e47a7a994cfc80a1edbf6c535","modified":1715843428085},{"_id":"themes/volantis/source/css/_style/_tag-plugins/table.styl","hash":"ef07ab4fe8a391ea9039fbe53333aaf58e3ce033","modified":1715843428085},{"_id":"themes/volantis/source/css/_style/_tag-plugins/tag.json","hash":"506f87e397f258b097ba24ce16c33b5353bab462","modified":1715843428086},{"_id":"themes/volantis/source/css/_style/_tag-plugins/text.styl","hash":"b2c2f3946fb611ad052c61d7309098edbf494c86","modified":1715843428086},{"_id":"themes/volantis/source/js/plugins/tags/contributors.js","hash":"cf1af362cf73c83a28ae2651eb1daafaed2ec91f","modified":1715843428092},{"_id":"themes/volantis/source/css/_style/_tag-plugins/timeline.styl","hash":"f84f411a3b7dcdbfd4fb19ac4e0f91300c5e19be","modified":1715843428087},{"_id":"themes/volantis/source/js/plugins/tags/friends.js","hash":"7d53cf366638d0e254f7f26de01c8892710d1d23","modified":1715843428092},{"_id":"themes/volantis/source/js/plugins/tags/sites.js","hash":"47b0ff4a3ccea2da9b60023cb4288f979504b0c7","modified":1715843428092},{"_id":"themes/volantis/source/css/_style/_plugins/_dark/dark_async.styl","hash":"a5da6f0b232a767057321fa51e382fd2d86bd98d","modified":1715843428074},{"_id":"themes/volantis/source/css/_style/_plugins/_dark/dark_plugins.styl","hash":"7ce4338ca5af0e8dd1ec5228166c07d19ede9057","modified":1715843428074},{"_id":"themes/volantis/source/css/_style/_plugins/_highlight/index.styl","hash":"6c681c760fa63425e7564c0d68532bb5ac95690a","modified":1715843428076},{"_id":"themes/volantis/source/css/_style/_plugins/_rightmenu/reading.styl","hash":"cb01065424dbd32c79b973b06fcdbc1c72917bc6","modified":1715843428077},{"_id":"themes/volantis/source/css/_style/_plugins/_rightmenu/rightmenu.styl","hash":"ef456a92173c303b61015f3581450aa14f0d2b41","modified":1715843428077},{"_id":"themes/volantis/source/css/_style/_plugins/_highlight/highlightjs/index.styl","hash":"38089b686a0cfdde555539c1c0c5b3fe402afada","modified":1715843428075},{"_id":"themes/volantis/source/css/_style/_plugins/_highlight/prismjs/clipboard.styl","hash":"0f92935e3bb9732b6e1cc7f305577144f1fe99a8","modified":1715843428076},{"_id":"themes/volantis/source/css/_style/_plugins/_highlight/highlightjs/language.styl","hash":"4fade2fe067f557d3b420d0b9a9d88d18feb9a72","modified":1715843428075},{"_id":"themes/volantis/source/css/_style/_plugins/_highlight/prismjs/index.styl","hash":"215face68fab1c31cfa8d4c21941c72efe54cb78","modified":1715843428076},{"_id":"themes/volantis/source/css/_style/_plugins/_highlight/highlightjs/color.styl","hash":"319ccc46d5d387ee14a22e0de1a518288331629b","modified":1715843428075},{"_id":"themes/volantis/source/css/_style/_plugins/_highlight/highlightjs/clipboard.styl","hash":"6818ba853fd6a319ff4eb50d228b1d625db9a0fd","modified":1715843428074},{"_id":"themes/volantis/source/css/_style/_plugins/_highlight/prismjs/language.styl","hash":"3af7fae25a0e2c54f0aacb1d8cbe383d5c1e60a5","modified":1715843428076},{"_id":"public/search.xml","hash":"c7c8e2f1544994feb2854b2d051c125356480d40","modified":1715849101641},{"_id":"public/content.json","hash":"62b5571523fd8970d2c442ab06808e5ddd17a54a","modified":1715849101641},{"_id":"public/2023/undefined/22/--🌦🌦-element-upload-使用axios-代理上传/index.html","hash":"c29c3e6a1dbce52a67cf48923fdc6f34f3fb30a1","modified":1715849101641},{"_id":"public/2023/undefined/12/-🌦🌦nodejs做服务器和服务代理/index.html","hash":"6443bf7eddad01c8a59ac9232490e9d29a9b6eb8","modified":1715849101641},{"_id":"public/2023/undefined/29/🌦🌦-vite+vue3使用tailwindcss/index.html","hash":"50fc8f43c1de8f7bdccbd39a2b8d7711e3c3f147","modified":1715849101641},{"_id":"public/2023/undefined/20/使用-TS-适配-ES-Module-和-CommonJS-两种格式/index.html","hash":"07491e5e1c4c32d05748ec04b45e8cdad8506009","modified":1715849101641},{"_id":"public/2023/undefined/25/-📣📣--软件工程师的十大层次/index.html","hash":"2c96975f85ce5bcd0fa3b4e2cfd8d6143cf6339c","modified":1715849101641},{"_id":"public/2023/undefined/27/-📣📣-我看《图灵和ACM图灵奖》/index.html","hash":"c9bf3e84fc62c1343e007ebfb86f06d722e19e03","modified":1715849101641},{"_id":"public/2023/undefined/21/🌦🌦神秘的sass-node/index.html","hash":"ce45853f7533d74c9100def1261fd0ef7d1bd2fd","modified":1715849101641},{"_id":"public/2023/undefined/14/🌦🌦小程序框架对比/index.html","hash":"05b86836165525f7dab783a90a501ca5e7abbb92","modified":1715849101641},{"_id":"public/2022/undefined/17/-📣📣-科学---技术---工程学---手艺---艺术/index.html","hash":"8fb0c37c65cea55d20194d7807dbb3a3c3cd7ae0","modified":1715849101641},{"_id":"public/2022/undefined/08/--📣📣-东西方哲学的不同/index.html","hash":"828638c08a34d050b4514cba4198b856e1092079","modified":1715849101641},{"_id":"public/2022/undefined/06/-📣📣几个哲学问题/index.html","hash":"a324ad9633be8581cb9a5072d1ffe193aaaa982f","modified":1715849101641},{"_id":"public/2022/undefined/25/📁📁-rsync更改chmod-权限/index.html","hash":"fa641cad95e6a0d968955c72a8012a923407166a","modified":1715849101641},{"_id":"public/2022/undefined/16/📣📣-如果让我写一本《软件工程》/index.html","hash":"b8ebbef43c66af50e2476b25ecfc8c11aae550a3","modified":1715849101641},{"_id":"public/2022/undefined/02/📣📣-工程师的世界越复杂，你的世界就越简单/index.html","hash":"497d24f6ed0eeef1370ab76a36d901e4d4460c90","modified":1715849101641},{"_id":"public/2022/undefined/27/-📣📣《计算机·一部历史》/index.html","hash":"2e57d71303d4e565bfd54dacf188b612a7cded0d","modified":1715849101641},{"_id":"public/2022/undefined/20/🌦🌦移动端适配方案选择/index.html","hash":"20461f1065dac1174a0d96f10c0f63af9211973a","modified":1715849101641},{"_id":"public/2022/undefined/14/两大浏览器高性能路线之争/index.html","hash":"ac56131473e5dc2f55db0d87472b02956960d86d","modified":1715849101641},{"_id":"public/2022/undefined/07/知识肥胖症的危害/index.html","hash":"74d6fb10258f66faf48c292c94b407c4cdc09c58","modified":1715849101641},{"_id":"public/2022/undefined/12/🌦🌦前端大文件上传/index.html","hash":"e529e3c02fda3e4a72830b66b542bbb81954cb5b","modified":1715849101641},{"_id":"public/2022/undefined/04/🐓🥚webSocket-socket-js/index.html","hash":"bd63b07c0f24045af99034b4ea4a27e42a3514a8","modified":1715849101641},{"_id":"public/2022/undefined/02/🐓🥚npm-link-Hot-Module-Replacement-方案/index.html","hash":"0e5f52c74a40db3c5721520f07352ca30b590d4e","modified":1715849101641},{"_id":"public/2022/undefined/20/📣📣ph-d-vs-Engineer/index.html","hash":"55dc41eb192227e68eb2f42958536c98b135f503","modified":1715849101641},{"_id":"public/2022/undefined/17/🌈-CSS--nth-child-and--nth-of-type的区别/index.html","hash":"5c8b4d036676213520042c6dcddf95de1fcabcff","modified":1715849101641},{"_id":"public/2022/undefined/04/🐓🥚一键同步简书的文章到-GitHub-Pages/index.html","hash":"3c9fbe3b7c9272d8ac8a787b77b9f02c98ea75e7","modified":1715849101641},{"_id":"public/2022/undefined/25/☀️☀️装饰器模式实现/index.html","hash":"2489d27a3930ea2cc2cfa059f58749af1941e055","modified":1715849101641},{"_id":"public/2022/undefined/25/🐓🥚-HBuilderX-uni-app--h5端构建发布实践/index.html","hash":"99d21f808ff3f2aa56235a7a680edb389d41ee60","modified":1715849101641},{"_id":"public/2022/undefined/21/🗳🗳-软件工程之前端基础建设/index.html","hash":"57f1c6c247a615e3262b9f69577af4bbabfdd134","modified":1715849101641},{"_id":"public/2022/undefined/16/🎨🎨git-The-project-you-were-looking-for-could-not-be-found-解/index.html","hash":"edf2f5f43706068db2d796cb9138bbbe64729038","modified":1715849101641},{"_id":"public/2022/undefined/15/🐓🥚docker打包node-js服务/index.html","hash":"1257b279e6865c8b585a7c74d547e65b9261653d","modified":1715849101641},{"_id":"public/2022/undefined/12/🌦🌦webpack&Esbuild--两者可以兼得/index.html","hash":"9f41def8a321dc32a3a8a16fb12f3d7af3528cab","modified":1715849101641},{"_id":"public/2022/undefined/11/☀️☀️UI开发的几个历史阶段/index.html","hash":"7e4d6284baa82db140718ca2c54cfe7859fe5a8f","modified":1715849101641},{"_id":"public/2022/undefined/01/🌦🌦js-数字溢出问题/index.html","hash":"59640f9e9b123ba7b8bda6050caf409b33989624","modified":1715849101641},{"_id":"public/2022/undefined/22/🦜🦜Vuex-Action异步执行使用场景/index.html","hash":"456d2ada3c49a3f0463e71737a4d7854ec2d073d","modified":1715849101641},{"_id":"public/2022/undefined/20/☀️☀️单例模式/index.html","hash":"a798964992ff8a01f6374561efc103f1970e27cc","modified":1715849101641},{"_id":"public/2022/undefined/17/📣🚶🚶🚶🏻做好自己的事-不要被别人打乱自己的节奏/index.html","hash":"becea8fd42f82f70a054922d36dcd4e36b38d568","modified":1715849101641},{"_id":"public/2022/undefined/17/📣🐘🐘🐘🐘程序员面试指东/index.html","hash":"e1af36bccada6f5991b95f4b0e1c199b89da0c22","modified":1715849101641},{"_id":"public/2022/undefined/11/🌦🌦for-异步执行方案/index.html","hash":"721c0a48f43ff5f94b1ff07b4619030a24362314","modified":1715849101641},{"_id":"public/2022/undefined/28/📣🤔🤔关于技术和创业的思考/index.html","hash":"03da600f0df497e05e4a6e18fcebe57b97880480","modified":1715849101641},{"_id":"public/2022/undefined/11/🗳🗳nginx转发小能手/index.html","hash":"910e2258096a419e8f4bfde0d648de744afe2512","modified":1715849101641},{"_id":"public/2022/undefined/11/📁📁关闭linux系统端口/index.html","hash":"177dfd7529f7efb5b34400712ad04345c58c4fcf","modified":1715849101641},{"_id":"public/2022/undefined/10/🌈解决flex布局warp自动换行下最后一行居中问题/index.html","hash":"bcd283aaedcbf6451e9974f7abf622fded119a4f","modified":1715849101641},{"_id":"public/2021/undefined/26/🎅🎁为什么esbuild更快/index.html","hash":"d6ec9aba1de1c44e94103b90198d0241cbc28e89","modified":1715849101641},{"_id":"public/2021/undefined/25/🌦🌦-下载文件两种方式总结/index.html","hash":"0661e1bdba5e58cc65fd8f6eed6ebd16879f4ba1","modified":1715849101641},{"_id":"public/2021/undefined/25/🎅🏻🎅🏿-50个提高编码水平的方法/index.html","hash":"6898a944baf809bd99d38f42b4e3a637decab8f6","modified":1715849101641},{"_id":"public/2021/undefined/25/🎨🎨-git-reset-提交/index.html","hash":"93a3284f7634a0f503659d71a823b5577d526edb","modified":1715849101641},{"_id":"public/2021/undefined/25/👨🍳🐓-如何炖好一碗鸡汤/index.html","hash":"db32bea8bac7223fcb85253ddc7df3aa0a47fc8b","modified":1715849101641},{"_id":"public/2021/undefined/25/📣📒🔖-看网文和读书的区别/index.html","hash":"5d3570feef0d0d62216dc7678a08ed59fc646b04","modified":1715849101641},{"_id":"public/2021/undefined/25/📣📝-功夫在诗外，优秀文章精选/index.html","hash":"9b7fa9ce1b13272fb2254fce2608b7ac0bf84743","modified":1715849101641},{"_id":"public/2021/undefined/23/⛵︎验证码（14）按下开机键后，电脑都干了些什么？/index.html","hash":"1a69e15df5befebbd7d89b6915f2ff582e9d4be5","modified":1715849101641},{"_id":"public/2021/undefined/22/⛵︎验证码-(13)--CPU实现加法/index.html","hash":"d4901cef7e72f031e17136b0d1f66158c38fc053","modified":1715849101641},{"_id":"public/2021/undefined/17/⛵︎验证码-(12)-CPU都干了什么事/index.html","hash":"2dafdbb9d197097a90e6c9f311c5c4e53cbd8afc","modified":1715849101641},{"_id":"public/2021/undefined/03/⛵︎验证码-(11)-操作系统底层库和接口/index.html","hash":"7768356957afc9de66d7168e0f62afefa1be3dac","modified":1715849101641},{"_id":"public/2021/undefined/02/⛵︎验证码---(10)--操作系统之进程通信/index.html","hash":"fd37b46455b862c12301d1077694a2b0b8f3f836","modified":1715849101641},{"_id":"public/2021/undefined/30/⛵︎验证码---(9)--CPU多任务原理/index.html","hash":"5e732db1a899c1508a5d58972aad7f6fae994ed2","modified":1715849101641},{"_id":"public/2021/undefined/18/-🎨🎨-git-push-为什么必须要先-git-pull/index.html","hash":"734d282b425ed439b9532fe38bae012faf3ee0bc","modified":1715849101641},{"_id":"public/2021/undefined/18/⛵︎数图番外篇-液晶显示器原理/index.html","hash":"c57277f0f8af0c1e4fa4ae821c02f2f0705f952c","modified":1715849101641},{"_id":"public/2021/undefined/18/🌈-让div填充剩余的屏幕空间的高度/index.html","hash":"3149835c3022bc2c7f11e94c2593bb3e4f39c082","modified":1715849101641},{"_id":"public/2021/undefined/17/⛵︎数图番外篇-显卡构成/index.html","hash":"5685d0416aab0de539da940c1c25241584c2087a","modified":1715849101641},{"_id":"public/2021/undefined/09/⛵︎数据到图像-（2）浏览器渲染/index.html","hash":"0ac08a92344ec40e5a898fbdc35fb2bf0d4d7c7a","modified":1715849101641},{"_id":"public/2021/undefined/08/⛵︎数图番外篇-文本和二进制互转/index.html","hash":"66528008024f1f6692d7b54a03801599db2b0efa","modified":1715849101641},{"_id":"public/2021/undefined/06/⛵︎数字到图像（1）--不同数据类型协议转图片/index.html","hash":"9214fdf2c39e8f3345d1780de5bba89d6f6298e8","modified":1715849101641},{"_id":"public/2021/undefined/03/🎅📣你的github是空的吗/index.html","hash":"2c17a0f45399dbe9ba5ce84f55ade8ec8af2cded","modified":1715849101641},{"_id":"public/2021/undefined/03/📣-前端常用命名/index.html","hash":"54cc56e7e8aa5f56633718011518ab51124d9200","modified":1715849101641},{"_id":"public/2021/undefined/02/🎥-各个跨端技术原理归纳/index.html","hash":"638b12bdb99c2237d80a71ee2813fe1ef7d70fee","modified":1715849101641},{"_id":"public/2021/undefined/26/🎅🔥-Python-+-JavaScript-=-🔥🔥🔥/index.html","hash":"e34bf2ea83183f3824d17de5498f753a93c368a8","modified":1715849101641},{"_id":"public/2021/undefined/26/🐛-An-error-occurred-while-installing-http_parser-rb-(0-6-0)/index.html","hash":"7003837c607ebf774eeda4334e7f6da1116a27e6","modified":1715849101641},{"_id":"public/2021/undefined/25/📣▶️-33届前端早早聊，总结/index.html","hash":"deaf9690ace29b055b08f113a93d33000c1f0558","modified":1715849101641},{"_id":"public/2021/undefined/23/🌦🌦-ajax-post-四种提交方式/index.html","hash":"f51eb6a96042be34f639af69d72beda0746a160d","modified":1715849101641},{"_id":"public/2021/undefined/22/🌦🌦-import---as-怎么用/index.html","hash":"6b198d05e5ecf8ff05711f595147e5ca6d38887e","modified":1715849101641},{"_id":"public/2021/undefined/19/🌦🌦-为什么-export-default-var-a-=-1-在ES6中不被允许-/index.html","hash":"6cc0a01c450f910153b32d9520926ffb17fb94c6","modified":1715849101641},{"_id":"public/2021/undefined/22/🦜🦜-vue-router-同一个页面地址栏参数改变，页面不刷新的问题/index.html","hash":"7328000fc629b3c9a9980f07b1bc3087df6c8fe1","modified":1715849101641},{"_id":"public/2021/undefined/18/☁️☁️-node-js常用工具包/index.html","hash":"2c157ef7ee0fd33e7870dc94fbb5d3734d1173e1","modified":1715849101641},{"_id":"public/2021/undefined/16/📁📁linux文件操作常用命令/index.html","hash":"a9acce8f22a6fd15117667161119822b93565b92","modified":1715849101641},{"_id":"public/2021/undefined/13/🦜🦜-vue中使provide中的数据变为响应式/index.html","hash":"c3962f57003fa462abf1e88aaba6be55c60374ae","modified":1715849101641},{"_id":"public/2021/undefined/10/🌦🌦-indexOf，includes，空字符串，返回的什么/index.html","hash":"ce76a8602acc65540fbfffa2beed90396db948aa","modified":1715849101641},{"_id":"public/2021/undefined/08/🦜🦜vue-$emit-钩子函数/index.html","hash":"802e45966dcc6910c67b4aca48a0977f0c3a931e","modified":1715849101641},{"_id":"public/2021/undefined/30/🌦🌦-js-修改对象key/index.html","hash":"40fd2f6326da7fbec1edebe6e357cbee0246dfb1","modified":1715849101641},{"_id":"public/2021/undefined/22/🌦🌦-cookie-为什么作为token-放在header里/index.html","hash":"f0f8d6a32a086d2965f7fa30029bcafac718bb3e","modified":1715849101641},{"_id":"public/2021/undefined/19/🍎🍎-Mac-OS-配置环境变量/index.html","hash":"a13642d5dc68b69c29689337655882976803e6d8","modified":1715849101641},{"_id":"public/2021/undefined/19/🎨🎨-git-一些常用参数设置/index.html","hash":"b8a549eacdfc566e4126b0d797234127c492fdfe","modified":1715849101641},{"_id":"public/2021/undefined/15/🗳🗳-nginx-启动停止命令/index.html","hash":"c27effc3059eb89430ebc226e982485e12752ee8","modified":1715849101641},{"_id":"public/2021/undefined/13/☀️☀️-编程范式----shell-子文件异步模式-VS--JS-async-await/index.html","hash":"31245ede209d5aafd4e0f3a324518fcdef8b99e2","modified":1715849101641},{"_id":"public/2021/undefined/11/🐓🥚-如何写一个脚手架工具/index.html","hash":"8546f2509d933b42d786d9378105ea6e73e93f9c","modified":1715849101641},{"_id":"public/2021/undefined/08/📣📣编程艺术和编程的本质/index.html","hash":"b7d4b0673d940dc963db4d319518f5e270d974d8","modified":1715849101641},{"_id":"public/2021/undefined/07/☀️☀️设计模式在react项目中的落地/index.html","hash":"afb4fc4a6d365fa5113affcfac29aca5272d43ca","modified":1715849101641},{"_id":"public/2021/undefined/01/🌈--css-flex-多列等高/index.html","hash":"afecb63b90162cca06e412db214022a4e0f471bc","modified":1715849101641},{"_id":"public/2021/undefined/23/💻--M1芯片为什么这么快/index.html","hash":"745b5d45516f1e37d17eeaff1e0b79db04e67f64","modified":1715849101641},{"_id":"public/2021/undefined/16/📣🚦力扣刷题有感/index.html","hash":"18dfca45f67544d02074486413c29bf7d8cc87db","modified":1715849101641},{"_id":"public/2021/undefined/15/🗳🗳-npm版本自动控制/index.html","hash":"21040c72f59161ba4c8159c2bb91aafc07ffb79c","modified":1715849101641},{"_id":"public/2021/undefined/12/🌦🌦-js小技巧/index.html","hash":"27952b85574605d414a5e7bca88315668cb4b1d0","modified":1715849101641},{"_id":"public/2021/undefined/08/💻-cpu体系结构/index.html","hash":"331fa06ccdb5940b2a74358e5581b2d0713bd8b2","modified":1715849101641},{"_id":"public/2021/undefined/08/💻-操作系统-api应用/index.html","hash":"d463df1d0ab7a94071c88df373eff002937323d2","modified":1715849101641},{"_id":"public/2021/undefined/05/🌦🌦前端位运算/index.html","hash":"b589565f93371037ad8d010ed287b3b3407b3358","modified":1715849101641},{"_id":"public/2021/undefined/05/🦕🦕-react-hotc与-Decorator模式区别/index.html","hash":"5638e8d55892bb8146d9ae47324539857d848f21","modified":1715849101641},{"_id":"public/2021/undefined/02/📁📁-操作系统文件大小写的区别/index.html","hash":"275c5773466f79f0adc6023e569f2fbf99051fd7","modified":1715849101641},{"_id":"public/2021/undefined/04/🟨-🟨-正则表达式中^的用法/index.html","hash":"b24b3eec86795ad2c1f1a15dcde998284bda299e","modified":1715849101641},{"_id":"public/2021/undefined/30/🌦🌦--encodeURI与encodeURIComponent区别/index.html","hash":"08fb2c05eced0f49c79d6eb0f6f9e413c4b0942c","modified":1715849101641},{"_id":"public/2021/undefined/25/🌦🌦-++A-,-A++-区别/index.html","hash":"cf056c89c36def094ffe596bb6f6c600649537d6","modified":1715849101641},{"_id":"public/2021/undefined/24/🌦🌦-charCodeAt-,-fromCharCode-用法/index.html","hash":"7efb0b1a9c55d7f68e1506a6c80d4d164849344c","modified":1715849101641},{"_id":"public/2021/undefined/19/🌦🌦-空值合并操作符--有哪些坑/index.html","hash":"b122e5912b55f80f8657eb3f9dd96023a07ffbed","modified":1715849101641},{"_id":"public/2021/undefined/16/🌦🌦数组删除某个下标对象/index.html","hash":"c69293c4f1862bdbe0bad2d0ba062d0876e176e9","modified":1715849101641},{"_id":"public/2021/undefined/12/🌦🌦-优雅的获取-数组第一个元素/index.html","hash":"56503e909113c8ba2d241fc7d7b63885e9ff5cd1","modified":1715849101641},{"_id":"public/2021/undefined/29/🟨-🟨--常用正则表达式/index.html","hash":"13aad6ef9a22ae828f206652e7bb2e32a97ab0f7","modified":1715849101641},{"_id":"public/2021/undefined/18/🌈-space-between和space-around的区别？/index.html","hash":"fc5ba57636070881d3e6eefb1aee71f2cabe0f31","modified":1715849101641},{"_id":"public/2021/undefined/28/🌦🌦-js-二进制转字符串/index.html","hash":"b1c0a47979f2b52df9b9218b6a961960e3dbcb32","modified":1715849101641},{"_id":"public/2021/undefined/19/🧮🧮查找树节点中符合条件的子节点/index.html","hash":"abccfd87efcc35bde01b6fdfbf494a6e1e4cde7d","modified":1715849101641},{"_id":"public/2021/undefined/10/🍎🍎-Mac-端口和代理/index.html","hash":"27e53191a1e7fa93b1df89337e05e71be4be1de6","modified":1715849101641},{"_id":"public/2021/undefined/11/🌦🌦forEach不改变原数组,-但是改变对象属性的问题/index.html","hash":"e938071761a5242c04581b387c8455264dd0cd6b","modified":1715849101641},{"_id":"public/2021/undefined/11/🦜🦜vue-修改数组中某个对象的属性不更新/index.html","hash":"f5b24a88cb15cad8ee6f5042e48caa31eb17d72f","modified":1715849101641},{"_id":"public/2021/undefined/03/📁📁-CentOS-7-firewall-cmd开放端口时出现bad-port-(most-likely-missin/index.html","hash":"a97ec4ec7613af981a278c750083b140e68c0060","modified":1715849101641},{"_id":"public/2021/undefined/05/🌈-flex布局--一行显示固定个数,强制换行且均匀分布/index.html","hash":"52020d25e9b2b5e9ae6f5101cd4fdb73ce8de81d","modified":1715849101641},{"_id":"public/2021/undefined/02/ivew-radio-单选-1,0-字符串和数字怎么传/index.html","hash":"df5778ba6ebe57fb5e1a216e246508da1f3a74f6","modified":1715849101641},{"_id":"public/2021/undefined/02/🎨🎨-git-Tips/index.html","hash":"bb741d5273709a8784091d77642d09e134b76bcc","modified":1715849101641},{"_id":"public/2021/undefined/29/怎么避免ivew-form-prop,-乱七八糟的type校验/index.html","hash":"db1647b338bf629c70077fefef9326042a58ee5e","modified":1715849101641},{"_id":"public/2021/undefined/19/ivew-modal-验证，关闭再打开，验证错误/index.html","hash":"ee7f9ac865835949145fba42efbc63040eea3f54","modified":1715849101641},{"_id":"public/2021/undefined/17/🦜🦜vue-对象的属性是数组-watch监听不了/index.html","hash":"e3c459cd8ff59f400afe4be38d7439c25a17bd4e","modified":1715849101641},{"_id":"public/2021/undefined/15/🎨🎨-git-设置文件大小写敏感/index.html","hash":"3d5139c8747bbe18037348527aa9c2ef51e1c471","modified":1715849101641},{"_id":"public/2021/undefined/11/2023-06-24/index.html","hash":"5cf51a711d465cb4f88e5beb8520ed09c6204cc7","modified":1715849101641},{"_id":"public/2021/undefined/11/☀️☀️-编程范式----JS-必包-VS-c语言/index.html","hash":"7e34f6798d487a54b5fd815583173818eff05ec2","modified":1715849101641},{"_id":"public/2021/undefined/11/清明节,今天想跟自己谈谈/index.html","hash":"60a663354065545c178bd057b918167b8597fdec","modified":1715849101641},{"_id":"public/2021/undefined/11/编译器/index.html","hash":"c8aa3f0f2d016d59fbd7a84171c5c2d35c9ca483","modified":1715849101641},{"_id":"public/2021/undefined/06/💻-计算机是怎么显示图像的/index.html","hash":"cacb97e974d6096a16d643df44d1ad21bd34a4dc","modified":1715849101641},{"_id":"public/2021/undefined/05/💻 ASCII码与Unicode/index.html","hash":"0175494105837ef8c2a55e94408161cefe1dcf07","modified":1715849101641},{"_id":"public/2021/undefined/03/🌦🌦-ivew-动态新增-input-prop校验/index.html","hash":"ad8fd38620523c59b5574fc452da11a7bce108ea","modified":1715849101641},{"_id":"public/2020/undefined/30/📖计算机自学之路/index.html","hash":"30aca93f45b8d97022e4d8a2aaaf50102cde451e","modified":1715849101641},{"_id":"public/2020/undefined/24/微信小程序-为什么地图本地体验可以用，线上环境不能用/index.html","hash":"227500a9066955d7b33eb4235b94253e93a99629","modified":1715849101641},{"_id":"public/2020/undefined/24/🦜🦜vuejs-第二次点击按钮-事件时出现TypeError--n-apply-is-not-a-function/index.html","hash":"7c2d0fa492b0a99f46200d60c7dce4f150457ff4","modified":1715849101641},{"_id":"public/2020/undefined/24/🌈最近做项目碰到的几个css小问题总结/index.html","hash":"6382b0eb276ecbde4d29530e4e75c409904dc201","modified":1715849101641},{"_id":"public/2019/undefined/05/-🌦🌦lodash常用方法/index.html","hash":"700c16de071fb7e63c7e6c6f635623f70676061e","modified":1715849101641},{"_id":"public/2018/undefined/08/🦕🦕React阻止事件冒泡？/index.html","hash":"954d8970ef8f6301502e05c1c18bf51fbed836a0","modified":1715849101641},{"_id":"public/2018/undefined/06/🌦🌦-requestAnimationFrame-定时器/index.html","hash":"f6d8af952813cb994851d5052388388790e5ba44","modified":1715849101641},{"_id":"public/2018/undefined/06/🧮🧮几个算法/index.html","hash":"8c12aea9a326f6b5727deee34a2b0f811847f21a","modified":1715849101641},{"_id":"public/archives/index.html","hash":"67389d7603912121699a055b156fe58bf31865d6","modified":1715849101641},{"_id":"public/archives/page/2/index.html","hash":"0904d57c66b423fee994818f346b583518341702","modified":1715849101641},{"_id":"public/archives/page/3/index.html","hash":"813ec40892f1facd19b7e045ed92542818a790fa","modified":1715849101641},{"_id":"public/archives/page/4/index.html","hash":"3d68892fb0f924f7985f43d09e5708a5568b23d4","modified":1715849101641},{"_id":"public/archives/page/5/index.html","hash":"6e4f086ad89fe25200efa2170673298f473bb645","modified":1715849101641},{"_id":"public/archives/page/6/index.html","hash":"84f9a3742d82530fbef64d7678412b7e781753ba","modified":1715849101641},{"_id":"public/archives/page/7/index.html","hash":"6767484b69937a8aa43035b8ab2f1ef913cdf094","modified":1715849101641},{"_id":"public/archives/page/8/index.html","hash":"01d7a0f303f5ca35c69cf1ad276f4200345ef7a3","modified":1715849101641},{"_id":"public/archives/page/9/index.html","hash":"901ff1b4f970871b0cf83e39dd9ac738e72e1e90","modified":1715849101641},{"_id":"public/archives/page/10/index.html","hash":"a157dd5d36977dd332fb3270503de33fc8a9126b","modified":1715849101641},{"_id":"public/archives/page/11/index.html","hash":"b754dac9755961d9905410a601160f7e2ba957d4","modified":1715849101641},{"_id":"public/archives/page/12/index.html","hash":"b0ea230888a8768a4c02bdf0842e2024fa4873f8","modified":1715849101641},{"_id":"public/archives/page/13/index.html","hash":"006b6a34be131f8a56ce0e3ee112a4a3e1b48153","modified":1715849101641},{"_id":"public/archives/page/14/index.html","hash":"17a351e46dc90efaf9c6fcd4f3f0ae0de94210c3","modified":1715849101641},{"_id":"public/archives/2018/index.html","hash":"c010a6a7392083ae623ec51c5eb0e438388917d4","modified":1715849101641},{"_id":"public/archives/2018/12/index.html","hash":"1cd789fc8b329cc743637574da65c5e66559c83e","modified":1715849101641},{"_id":"public/archives/2019/index.html","hash":"b27b95370189b10ed7bcedd78b0f5315ea41c699","modified":1715849101641},{"_id":"public/archives/2019/12/index.html","hash":"631bcfd08f795e32761fc402c3e0cd5baed4519b","modified":1715849101641},{"_id":"public/archives/2020/index.html","hash":"4f499676aec8a43f6f57176908982684ac09c9ca","modified":1715849101641},{"_id":"public/archives/2020/11/index.html","hash":"d554ab613dddc7098a11e763240ac922423452b2","modified":1715849101641},{"_id":"public/archives/2021/index.html","hash":"19510170ce02fd11af68f4c8ebbcc94516816e70","modified":1715849101641},{"_id":"public/archives/2020/12/index.html","hash":"9ccece969e214d344c7a4ac5706e91c990e77844","modified":1715849101641},{"_id":"public/archives/2021/page/2/index.html","hash":"158f1684d86b2847492c443c94bdd2497a96c7c3","modified":1715849101641},{"_id":"public/archives/2021/page/3/index.html","hash":"d219f1a504beecab32e75bbd2f0eead69ee9799f","modified":1715849101641},{"_id":"public/archives/2021/page/4/index.html","hash":"946caf8e4be087f2a465ee5d9ed2336d543474ce","modified":1715849101641},{"_id":"public/archives/2021/page/6/index.html","hash":"dc0818197df1b5d27b9bf4c57b4e6070af417a53","modified":1715849101641},{"_id":"public/archives/2021/page/5/index.html","hash":"b6d7c8a757bd480c0af5f1a61ea8058823977763","modified":1715849101641},{"_id":"public/archives/2021/page/7/index.html","hash":"18767905f0308738fdab308c1f832c6611b43a80","modified":1715849101641},{"_id":"public/archives/2021/page/8/index.html","hash":"4830b1e75a312c70e62fb8935bb00352395d69d0","modified":1715849101641},{"_id":"public/archives/2021/page/9/index.html","hash":"44248a8a7b7e9eba5e92ec3abc2847a07de776e9","modified":1715849101641},{"_id":"public/archives/2021/01/index.html","hash":"a190312c2a7df93cbf7e94f8713123ae4ae92d7b","modified":1715849101641},{"_id":"public/archives/2021/01/page/2/index.html","hash":"c3a2d505a73c11a00635e660a80d3be71f6408ed","modified":1715849101641},{"_id":"public/archives/2021/02/index.html","hash":"06a03a5e1237a3637732390921c5d440d1a5887b","modified":1715849101641},{"_id":"public/archives/2021/03/index.html","hash":"c08df3966dfb41bcf24b501707679e8641261c36","modified":1715849101641},{"_id":"public/archives/2021/04/index.html","hash":"b5c6629a2c7bd86b53766f1ed58f0c8048771eca","modified":1715849101641},{"_id":"public/archives/2021/06/index.html","hash":"b73d2fa3eae909099417f103f228f8231061ea2f","modified":1715849101641},{"_id":"public/archives/2021/07/index.html","hash":"4aa230f03faf8905de0357877ff1ce916e891470","modified":1715849101641},{"_id":"public/archives/2021/08/index.html","hash":"6271497626788cfe20a8fe6bdca00a6cc407564d","modified":1715849101641},{"_id":"public/archives/2021/09/index.html","hash":"bf79f7df972c0a19ae440251c253867f96294ff6","modified":1715849101641},{"_id":"public/archives/2021/10/index.html","hash":"5f23a8c7cce6f3b858e30f4945410969b91bf025","modified":1715849101641},{"_id":"public/archives/2021/10/page/2/index.html","hash":"c2779252becb04112d07c5e12b03085be544721e","modified":1715849101641},{"_id":"public/archives/2021/11/index.html","hash":"83fbf36a0aa362a4420f2ec9aff2fbad1c4a9f5d","modified":1715849101641},{"_id":"public/archives/2021/11/page/2/index.html","hash":"aa1eedbdb67556ba829f992e7573fe393488147d","modified":1715849101641},{"_id":"public/archives/2021/12/index.html","hash":"1f933d2affc42b8e53eb3382c5cbd3eca9c4724b","modified":1715849101641},{"_id":"public/archives/2021/12/page/2/index.html","hash":"6a1423ec8e5cfa64e95a509a02b90756ee46b5ae","modified":1715849101641},{"_id":"public/archives/2022/index.html","hash":"96da3e0473f8c9a74bf9a5173ec35ba283835c71","modified":1715849101641},{"_id":"public/archives/2022/page/2/index.html","hash":"49278a896be0c1e08c19115ee865ddddf21af172","modified":1715849101641},{"_id":"public/archives/2022/page/3/index.html","hash":"268c4a9a1a1c2df20d8c23208e92f547511a6841","modified":1715849101641},{"_id":"public/archives/2022/page/4/index.html","hash":"c5ad0a56e11c1a1d8dc753a15a0b507727c8ac5d","modified":1715849101641},{"_id":"public/archives/2022/01/index.html","hash":"d25d9e200170d8f54c93b6227c2b1ae6d229945f","modified":1715849101641},{"_id":"public/archives/2022/02/index.html","hash":"21fe8e90c704a23d1582dafbfaadc3eb336cf325","modified":1715849101641},{"_id":"public/archives/2022/03/index.html","hash":"ee5bc1527cc441392b916af8beee90de089cf03a","modified":1715849101641},{"_id":"public/archives/2022/05/index.html","hash":"43e9e87a095419a1a94b4130f4d54e3a402f7525","modified":1715849101641},{"_id":"public/archives/2022/04/index.html","hash":"bb5fa8408140d8607d86567ee3e43d16c2fb56e3","modified":1715849101641},{"_id":"public/archives/2022/06/index.html","hash":"fb794d776e94fb61d981f40e18513316a86fa1fd","modified":1715849101641},{"_id":"public/archives/2022/07/index.html","hash":"e799b41082edc01d10080e8a230805d5bd5856a2","modified":1715849101641},{"_id":"public/archives/2022/08/index.html","hash":"20d4bd5980d724e5ff6512ea3d1c4c699a67fddd","modified":1715849101641},{"_id":"public/archives/2022/09/index.html","hash":"5a588ffc6e08a25414870e9bc0ce11b86cba881f","modified":1715849101641},{"_id":"public/archives/2022/10/index.html","hash":"43cab40fc3b75b0643fd27418a032301b724b207","modified":1715849101641},{"_id":"public/archives/2022/11/index.html","hash":"dcb5ce189f1ec8de40f4f54665b6c62dbbc15da2","modified":1715849101641},{"_id":"public/archives/2022/12/index.html","hash":"864595e827d7dc90f2129b8042afad1916591c63","modified":1715849101641},{"_id":"public/archives/2023/index.html","hash":"c8e083821ddaadc614ee8c421c8f30bab7cf7e3e","modified":1715849101641},{"_id":"public/archives/2023/04/index.html","hash":"8faddd333994912857854f5a5ff3c4a3f6b7f544","modified":1715849101641},{"_id":"public/archives/2023/05/index.html","hash":"37c8c9bb6444f377e3ed6e76913e9736ab29c256","modified":1715849101641},{"_id":"public/archives/2023/06/index.html","hash":"4d8d0e9213668c971ecc81de29fa8c128a8d38d0","modified":1715849101641},{"_id":"public/archives/2023/07/index.html","hash":"c70e9d44bdb03803c2b19a97c0e16f7a349c73e2","modified":1715849101641},{"_id":"public/archives/2023/11/index.html","hash":"49d1b850d73f9fa3b5af5d24bf761598c5cb5779","modified":1715849101641},{"_id":"public/archives/2023/12/index.html","hash":"9be0bf1db66292b20b876d5f1d1d87f119f71a21","modified":1715849101641},{"_id":"public/tags/开发日常/index.html","hash":"8095186b2d0d0929f44cc8c49f50c43736d98104","modified":1715849101641},{"_id":"public/tags/开发日常/page/2/index.html","hash":"787c58fef899db6b0d9ddb1c744ea7923cdd85f7","modified":1715849101641},{"_id":"public/tags/开发日常/page/3/index.html","hash":"391f7513b66c70caabbb087802142768de94caf1","modified":1715849101641},{"_id":"public/tags/开发日常/page/4/index.html","hash":"80795f10aebd21afad899a0b31f76cfc60c09970","modified":1715849101641},{"_id":"public/tags/开发日常/page/5/index.html","hash":"a7d2eb03403b171fe7890a267a358964e8bc1e79","modified":1715849101641},{"_id":"public/tags/开发日常/page/6/index.html","hash":"1abf786d66566c9ff2f00f520504a86a0030504e","modified":1715849101641},{"_id":"public/tags/开发日常/page/7/index.html","hash":"0b732628edffb681c99c9ed116bb6bd8f3491a7e","modified":1715849101641},{"_id":"public/tags/开发日常/page/8/index.html","hash":"2f778cef105488f358530e0f914ac76e0b7388d0","modified":1715849101641},{"_id":"public/tags/开发日常/page/9/index.html","hash":"f0f67303841c84134a0884d1aaded98196b60d41","modified":1715849101641},{"_id":"public/tags/开发日常/page/10/index.html","hash":"d17b214a5be2bcc7cb212bb4b4fe581865108602","modified":1715849101641},{"_id":"public/tags/开发日常/page/11/index.html","hash":"29cd7177486a0e1e6d459568a4585c7f26a6b928","modified":1715849101641},{"_id":"public/tags/编程范式/index.html","hash":"66b34cdbe6ecaa850bf167583b53949b51663f70","modified":1715849101641},{"_id":"public/tags/css/index.html","hash":"2d985a4c609a90f5d357382f080b2c8963349647","modified":1715849101641},{"_id":"public/tags/mac小天地/index.html","hash":"248511722e8fd49da85ee9efeafc0cd901229c1d","modified":1715849101641},{"_id":"public/tags/实践堂/index.html","hash":"e9bc9f2957bc5c898d5c13a8c453846ebbeb01e9","modified":1715849101641},{"_id":"public/tags/美食记录/index.html","hash":"a3bbe86b0d4c3e118c421e1f13f6b0aab41c9b57","modified":1715849101641},{"_id":"public/tags/计算机基础小窥/index.html","hash":"67fb35f5f97436818b1292ea7f933420af33a810","modified":1715849101641},{"_id":"public/tags/正则/index.html","hash":"5fc528b07f0eaee36771a26673cc30d4e9aa6bad","modified":1715849101641},{"_id":"public/index.html","hash":"12dfd1e77e5418fa7168d13529f8215dd5efb3f0","modified":1715849101641},{"_id":"public/page/2/index.html","hash":"16ef33b591cc8b8786c6f1c4e884167d583e4630","modified":1715849101641},{"_id":"public/page/3/index.html","hash":"231b33ef48dcaae73eebfde74a5ac1f63f55b7bb","modified":1715849101641},{"_id":"public/page/4/index.html","hash":"4518d9352a31e81497e2644a0369fb3b84f21700","modified":1715849101641},{"_id":"public/page/5/index.html","hash":"1c902efae58ce24786d15c258b25b3490be8f780","modified":1715849101641},{"_id":"public/page/6/index.html","hash":"767bc0912ec24982a0de9c62544203e141e73ea9","modified":1715849101641},{"_id":"public/page/7/index.html","hash":"865334fdffe42fd349736303fc3dcf32565f9d72","modified":1715849101641},{"_id":"public/page/8/index.html","hash":"c2d6b9035fedf19916f156127e2d94321285211e","modified":1715849101641},{"_id":"public/page/9/index.html","hash":"e2a1749d1f95aa0ef9c06483c07e802d1d6563bb","modified":1715849101641},{"_id":"public/page/10/index.html","hash":"c951e3ac8a086e934ff517e581be3907f8cc4e25","modified":1715849101641},{"_id":"public/page/11/index.html","hash":"f8daf98d3b0e7f562bebe626d86349348a72c522","modified":1715849101641},{"_id":"public/page/12/index.html","hash":"41cb109df948647072a03b1f0282d8b31d092a92","modified":1715849101641},{"_id":"public/page/13/index.html","hash":"2730aee9974d006b5c3967a0f1cb814a8ba82e24","modified":1715849101641},{"_id":"public/page/14/index.html","hash":"e4ff5520affc5d9523cb4fee2f76c0baafdec202","modified":1715849101641},{"_id":"public/js/app.af2d54c8.js","hash":"99a253ee9b6f6c797df42785d88c8600424b65b4","modified":1715849101641},{"_id":"public/js/plugins/rightMenus.cd02aa19.js","hash":"f86990a8e631862c3ef904dd54f54e5160e2c5b3","modified":1715849101641},{"_id":"public/js/plugins/rightMenu.d9437285.js","hash":"58d3b19e244f20cb24b0c24120d3f00fc26dc5fe","modified":1715849101641},{"_id":"public/js/plugins/tags/sites.76bf19b8.js","hash":"47b0ff4a3ccea2da9b60023cb4288f979504b0c7","modified":1715849101641},{"_id":"public/js/plugins/tags/contributors.aec80453.js","hash":"cf1af362cf73c83a28ae2651eb1daafaed2ec91f","modified":1715849101641},{"_id":"public/js/search/hexo.0e52f222.js","hash":"286a7bac5fad588539f9b28ddea38cde573a69f8","modified":1715849101641},{"_id":"public/js/plugins/parallax.8bf0ab10.js","hash":"3c3210bde6e86d7d157c34c14796abe98cb1bbd0","modified":1715849101641},{"_id":"public/css/style.95a177eb.css","hash":"849f6e5fbd5d55fdd9e626cb2323542d7676a863","modified":1715849101641},{"_id":"public/js/plugins/tags/friends.f372da57.js","hash":"7d53cf366638d0e254f7f26de01c8892710d1d23","modified":1715849101641},{"_id":"public/css/Readme.html","hash":"942e993f16d5c13b617561506efbed0088016a5d","modified":1715849101641},{"_id":"public/js/plugins/aplayer.js","hash":"95f2e47535c8d37e90cab7726d25845cf01ca477","modified":1715849101641},{"_id":"public/css/first.css","hash":"e16def6703730e811aab6861d0b5fa89204302bf","modified":1715849101641}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"--🌦🌦-element-upload-使用axios-代理上传","date":"2023-12-21T16:00:00.000Z","_content":"element-upload，涉及到跨域上传，需要使用http-request自定义上传\n```\n <el-upload\n            action=\"#\" // 修改为#\n            :http-request=\"hanldeUploadFile\"\n            class=\"mr-10\"\n            :show-file-list=\"false\"\n            :on-exceed=\"handleExceed\"\n          >\n            <el-button\n              type=\"primary\"\n              :icon=\"UploadFilled\"\n              @click=\"handleRefresh\"\n              >上传</el-button\n            >\n</el-upload>\n```\n上传函数\n```js\nfunction hanldeUploadFile(param) {\n  // 上传请求头为：uploadFile：binary\n  // 格式 a=123&c=456\n  // 只有 FormData 可以传输二进制文件流\n  const formData = new FormData(); \n  formData.append('uploadFile', param.file);\n  getPathToExcel(formData).then(res => {\n    console.log(res);\n  });\n}\n```\napi 记得添加 header Content-Type\n```\nexport function getPathToExcel(data) {\n  return http.post(`/GLuserCode/logins/getPathToExcel`, data, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n}\n\n```\naxios 封装\n```\nimport axios, { type AxiosInstance, type AxiosRequestConfig } from 'axios';\nimport { ElMessage } from 'element-plus';\n\nconst service: AxiosInstance = axios.create({\n  withCredentials: false,\n  timeout: 50000,\n  // baseURL: import.meta.env.VITE_APP_BASE_API,\n});\n\nservice.interceptors.request.use(\n  (config: InternalAxiosRequestConfig) => {\n    console.log(config, 'interceptors');\n    return config;\n  },\n  (error: AxiosError) => {\n    return Promise.reject(error);\n  }\n);\n\nservice.interceptors.response.use(\n  (response: AxiosResponse) => {\n    const res = response.data;\n    if (res.res !== 1) {\n      ElMessage.error(res.resMsg || 'Error');\n      return Promise.reject(res.resMsg || 'Error');\n    } else {\n      return res;\n    }\n  },\n  (error: AxiosError) => {\n    console.log(`err${error}`);\n    ElMessage.error(error.message || 'Error');\n    return Promise.reject(error.message);\n  }\n);\n\nexport const http = {\n  get<T = any>(url: string, config?: AxiosRequestConfig): Promise<T> {\n    return service.get(url);\n  },\n  post<T = any>(\n    url: string,\n    data?: object,\n    config?: AxiosRequestConfig\n  ): Promise<T> {\n    return service.post(url, data, config);\n  },\n};\n\nexport default service;\n\n```\n\nvite.config.ts配置跨域请求配置\n\n```\n   server: {\n      /** 是否开启 HTTPS */\n      https: false,\n      /** 设置 host: true 才可以使用 Network 的形式，以 IP 访问项目 */\n      host: true, // host: \"0.0.0.0\"\n      /** 端口号 */\n      port: 3333,\n      /** 是否自动打开浏览器 */\n      open: false,\n      /** 跨域设置允许 */\n      cors: true,\n      /** 端口被占用时，是否直接退出 */\n      strictPort: false,\n      /** 接口代理 */\n      proxy: {\n        '/GLuserCode': {\n          target: 'http://10.1.81.45:9080/pf3/GLuserCode/',\n          changeOrigin: true,\n          rewrite: path => path.replace(/^\\/GLuserCode/, ''),\n        },\n      },\n    },\n```\n","source":"_posts/--🌦🌦-element-upload-使用axios-代理上传.md","raw":"---\ntitle: \"--🌦🌦-element-upload-使用axios-代理上传\"\ndate: 2023-12-22\ntags: \n- 开发日常\n---\nelement-upload，涉及到跨域上传，需要使用http-request自定义上传\n```\n <el-upload\n            action=\"#\" // 修改为#\n            :http-request=\"hanldeUploadFile\"\n            class=\"mr-10\"\n            :show-file-list=\"false\"\n            :on-exceed=\"handleExceed\"\n          >\n            <el-button\n              type=\"primary\"\n              :icon=\"UploadFilled\"\n              @click=\"handleRefresh\"\n              >上传</el-button\n            >\n</el-upload>\n```\n上传函数\n```js\nfunction hanldeUploadFile(param) {\n  // 上传请求头为：uploadFile：binary\n  // 格式 a=123&c=456\n  // 只有 FormData 可以传输二进制文件流\n  const formData = new FormData(); \n  formData.append('uploadFile', param.file);\n  getPathToExcel(formData).then(res => {\n    console.log(res);\n  });\n}\n```\napi 记得添加 header Content-Type\n```\nexport function getPathToExcel(data) {\n  return http.post(`/GLuserCode/logins/getPathToExcel`, data, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n}\n\n```\naxios 封装\n```\nimport axios, { type AxiosInstance, type AxiosRequestConfig } from 'axios';\nimport { ElMessage } from 'element-plus';\n\nconst service: AxiosInstance = axios.create({\n  withCredentials: false,\n  timeout: 50000,\n  // baseURL: import.meta.env.VITE_APP_BASE_API,\n});\n\nservice.interceptors.request.use(\n  (config: InternalAxiosRequestConfig) => {\n    console.log(config, 'interceptors');\n    return config;\n  },\n  (error: AxiosError) => {\n    return Promise.reject(error);\n  }\n);\n\nservice.interceptors.response.use(\n  (response: AxiosResponse) => {\n    const res = response.data;\n    if (res.res !== 1) {\n      ElMessage.error(res.resMsg || 'Error');\n      return Promise.reject(res.resMsg || 'Error');\n    } else {\n      return res;\n    }\n  },\n  (error: AxiosError) => {\n    console.log(`err${error}`);\n    ElMessage.error(error.message || 'Error');\n    return Promise.reject(error.message);\n  }\n);\n\nexport const http = {\n  get<T = any>(url: string, config?: AxiosRequestConfig): Promise<T> {\n    return service.get(url);\n  },\n  post<T = any>(\n    url: string,\n    data?: object,\n    config?: AxiosRequestConfig\n  ): Promise<T> {\n    return service.post(url, data, config);\n  },\n};\n\nexport default service;\n\n```\n\nvite.config.ts配置跨域请求配置\n\n```\n   server: {\n      /** 是否开启 HTTPS */\n      https: false,\n      /** 设置 host: true 才可以使用 Network 的形式，以 IP 访问项目 */\n      host: true, // host: \"0.0.0.0\"\n      /** 端口号 */\n      port: 3333,\n      /** 是否自动打开浏览器 */\n      open: false,\n      /** 跨域设置允许 */\n      cors: true,\n      /** 端口被占用时，是否直接退出 */\n      strictPort: false,\n      /** 接口代理 */\n      proxy: {\n        '/GLuserCode': {\n          target: 'http://10.1.81.45:9080/pf3/GLuserCode/',\n          changeOrigin: true,\n          rewrite: path => path.replace(/^\\/GLuserCode/, ''),\n        },\n      },\n    },\n```\n","slug":"--🌦🌦-element-upload-使用axios-代理上传","published":1,"updated":"2024-05-16T08:29:47.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094l100002omv166pbo0l","content":"<p>element-upload，涉及到跨域上传，需要使用http-request自定义上传</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;el-upload</span><br><span class=\"line\">            action=&quot;#&quot; // 修改为#</span><br><span class=\"line\">            :http-request=&quot;hanldeUploadFile&quot;</span><br><span class=\"line\">            class=&quot;mr-10&quot;</span><br><span class=\"line\">            :show-file-list=&quot;false&quot;</span><br><span class=\"line\">            :on-exceed=&quot;handleExceed&quot;</span><br><span class=\"line\">          &gt;</span><br><span class=\"line\">            &lt;el-button</span><br><span class=\"line\">              type=&quot;primary&quot;</span><br><span class=\"line\">              :icon=&quot;UploadFilled&quot;</span><br><span class=\"line\">              @click=&quot;handleRefresh&quot;</span><br><span class=\"line\">              &gt;上传&lt;/el-button</span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure>\n<p>上传函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hanldeUploadFile</span>(<span class=\"params\">param</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 上传请求头为：uploadFile：binary</span></span><br><span class=\"line\">  <span class=\"comment\">// 格式 a=123&amp;c=456</span></span><br><span class=\"line\">  <span class=\"comment\">// 只有 FormData 可以传输二进制文件流</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> formData = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>(); </span><br><span class=\"line\">  formData.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;uploadFile&#x27;</span>, param.<span class=\"property\">file</span>);</span><br><span class=\"line\">  <span class=\"title function_\">getPathToExcel</span>(formData).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>api 记得添加 header Content-Type</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function getPathToExcel(data) &#123;</span><br><span class=\"line\">  return http.post(`/GLuserCode/logins/getPathToExcel`, data, &#123;</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>axios 封装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios, &#123; type AxiosInstance, type AxiosRequestConfig &#125; from &#x27;axios&#x27;;</span><br><span class=\"line\">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const service: AxiosInstance = axios.create(&#123;</span><br><span class=\"line\">  withCredentials: false,</span><br><span class=\"line\">  timeout: 50000,</span><br><span class=\"line\">  // baseURL: import.meta.env.VITE_APP_BASE_API,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">service.interceptors.request.use(</span><br><span class=\"line\">  (config: InternalAxiosRequestConfig) =&gt; &#123;</span><br><span class=\"line\">    console.log(config, &#x27;interceptors&#x27;);</span><br><span class=\"line\">    return config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (error: AxiosError) =&gt; &#123;</span><br><span class=\"line\">    return Promise.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">service.interceptors.response.use(</span><br><span class=\"line\">  (response: AxiosResponse) =&gt; &#123;</span><br><span class=\"line\">    const res = response.data;</span><br><span class=\"line\">    if (res.res !== 1) &#123;</span><br><span class=\"line\">      ElMessage.error(res.resMsg || &#x27;Error&#x27;);</span><br><span class=\"line\">      return Promise.reject(res.resMsg || &#x27;Error&#x27;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (error: AxiosError) =&gt; &#123;</span><br><span class=\"line\">    console.log(`err$&#123;error&#125;`);</span><br><span class=\"line\">    ElMessage.error(error.message || &#x27;Error&#x27;);</span><br><span class=\"line\">    return Promise.reject(error.message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">export const http = &#123;</span><br><span class=\"line\">  get&lt;T = any&gt;(url: string, config?: AxiosRequestConfig): Promise&lt;T&gt; &#123;</span><br><span class=\"line\">    return service.get(url);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  post&lt;T = any&gt;(</span><br><span class=\"line\">    url: string,</span><br><span class=\"line\">    data?: object,</span><br><span class=\"line\">    config?: AxiosRequestConfig</span><br><span class=\"line\">  ): Promise&lt;T&gt; &#123;</span><br><span class=\"line\">    return service.post(url, data, config);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default service;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>vite.config.ts配置跨域请求配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: &#123;</span><br><span class=\"line\">   /** 是否开启 HTTPS */</span><br><span class=\"line\">   https: false,</span><br><span class=\"line\">   /** 设置 host: true 才可以使用 Network 的形式，以 IP 访问项目 */</span><br><span class=\"line\">   host: true, // host: &quot;0.0.0.0&quot;</span><br><span class=\"line\">   /** 端口号 */</span><br><span class=\"line\">   port: 3333,</span><br><span class=\"line\">   /** 是否自动打开浏览器 */</span><br><span class=\"line\">   open: false,</span><br><span class=\"line\">   /** 跨域设置允许 */</span><br><span class=\"line\">   cors: true,</span><br><span class=\"line\">   /** 端口被占用时，是否直接退出 */</span><br><span class=\"line\">   strictPort: false,</span><br><span class=\"line\">   /** 接口代理 */</span><br><span class=\"line\">   proxy: &#123;</span><br><span class=\"line\">     &#x27;/GLuserCode&#x27;: &#123;</span><br><span class=\"line\">       target: &#x27;http://10.1.81.45:9080/pf3/GLuserCode/&#x27;,</span><br><span class=\"line\">       changeOrigin: true,</span><br><span class=\"line\">       rewrite: path =&gt; path.replace(/^\\/GLuserCode/, &#x27;&#x27;),</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>element-upload，涉及到跨域上传，需要使用http-request自定义上传</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;el-upload</span><br><span class=\"line\">            action=&quot;#&quot; // 修改为#</span><br><span class=\"line\">            :http-request=&quot;hanldeUploadFile&quot;</span><br><span class=\"line\">            class=&quot;mr-10&quot;</span><br><span class=\"line\">            :show-file-list=&quot;false&quot;</span><br><span class=\"line\">            :on-exceed=&quot;handleExceed&quot;</span><br><span class=\"line\">          &gt;</span><br><span class=\"line\">            &lt;el-button</span><br><span class=\"line\">              type=&quot;primary&quot;</span><br><span class=\"line\">              :icon=&quot;UploadFilled&quot;</span><br><span class=\"line\">              @click=&quot;handleRefresh&quot;</span><br><span class=\"line\">              &gt;上传&lt;/el-button</span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure>\n<p>上传函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hanldeUploadFile</span>(<span class=\"params\">param</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 上传请求头为：uploadFile：binary</span></span><br><span class=\"line\">  <span class=\"comment\">// 格式 a=123&amp;c=456</span></span><br><span class=\"line\">  <span class=\"comment\">// 只有 FormData 可以传输二进制文件流</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> formData = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>(); </span><br><span class=\"line\">  formData.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;uploadFile&#x27;</span>, param.<span class=\"property\">file</span>);</span><br><span class=\"line\">  <span class=\"title function_\">getPathToExcel</span>(formData).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>api 记得添加 header Content-Type</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function getPathToExcel(data) &#123;</span><br><span class=\"line\">  return http.post(`/GLuserCode/logins/getPathToExcel`, data, &#123;</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>axios 封装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios, &#123; type AxiosInstance, type AxiosRequestConfig &#125; from &#x27;axios&#x27;;</span><br><span class=\"line\">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const service: AxiosInstance = axios.create(&#123;</span><br><span class=\"line\">  withCredentials: false,</span><br><span class=\"line\">  timeout: 50000,</span><br><span class=\"line\">  // baseURL: import.meta.env.VITE_APP_BASE_API,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">service.interceptors.request.use(</span><br><span class=\"line\">  (config: InternalAxiosRequestConfig) =&gt; &#123;</span><br><span class=\"line\">    console.log(config, &#x27;interceptors&#x27;);</span><br><span class=\"line\">    return config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (error: AxiosError) =&gt; &#123;</span><br><span class=\"line\">    return Promise.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">service.interceptors.response.use(</span><br><span class=\"line\">  (response: AxiosResponse) =&gt; &#123;</span><br><span class=\"line\">    const res = response.data;</span><br><span class=\"line\">    if (res.res !== 1) &#123;</span><br><span class=\"line\">      ElMessage.error(res.resMsg || &#x27;Error&#x27;);</span><br><span class=\"line\">      return Promise.reject(res.resMsg || &#x27;Error&#x27;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (error: AxiosError) =&gt; &#123;</span><br><span class=\"line\">    console.log(`err$&#123;error&#125;`);</span><br><span class=\"line\">    ElMessage.error(error.message || &#x27;Error&#x27;);</span><br><span class=\"line\">    return Promise.reject(error.message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">export const http = &#123;</span><br><span class=\"line\">  get&lt;T = any&gt;(url: string, config?: AxiosRequestConfig): Promise&lt;T&gt; &#123;</span><br><span class=\"line\">    return service.get(url);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  post&lt;T = any&gt;(</span><br><span class=\"line\">    url: string,</span><br><span class=\"line\">    data?: object,</span><br><span class=\"line\">    config?: AxiosRequestConfig</span><br><span class=\"line\">  ): Promise&lt;T&gt; &#123;</span><br><span class=\"line\">    return service.post(url, data, config);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default service;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>vite.config.ts配置跨域请求配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server: &#123;</span><br><span class=\"line\">   /** 是否开启 HTTPS */</span><br><span class=\"line\">   https: false,</span><br><span class=\"line\">   /** 设置 host: true 才可以使用 Network 的形式，以 IP 访问项目 */</span><br><span class=\"line\">   host: true, // host: &quot;0.0.0.0&quot;</span><br><span class=\"line\">   /** 端口号 */</span><br><span class=\"line\">   port: 3333,</span><br><span class=\"line\">   /** 是否自动打开浏览器 */</span><br><span class=\"line\">   open: false,</span><br><span class=\"line\">   /** 跨域设置允许 */</span><br><span class=\"line\">   cors: true,</span><br><span class=\"line\">   /** 端口被占用时，是否直接退出 */</span><br><span class=\"line\">   strictPort: false,</span><br><span class=\"line\">   /** 接口代理 */</span><br><span class=\"line\">   proxy: &#123;</span><br><span class=\"line\">     &#x27;/GLuserCode&#x27;: &#123;</span><br><span class=\"line\">       target: &#x27;http://10.1.81.45:9080/pf3/GLuserCode/&#x27;,</span><br><span class=\"line\">       changeOrigin: true,</span><br><span class=\"line\">       rewrite: path =&gt; path.replace(/^\\/GLuserCode/, &#x27;&#x27;),</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n"},{"title":"--📣📣-东西方哲学的不同","date":"2022-11-07T16:00:00.000Z","_content":"\n![](https://upload-images.jianshu.io/upload_images/15312191-b2b80226864e04c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 1.渊源\n\n东方是**农业文明**，注重用伦理连接个体，建立各种联系，比如分封制，封建中央集权。\n西方古希腊是**海洋文明**，交易发达形成了契约精神。\n\n以上观点存疑，海洋文明农业文明，没有明确定位，文明具有偶然性和民族自我的宿命。\n## 2.表现\n\n### 2.1 研究对象不同\n![孔子布道图](https://upload-images.jianshu.io/upload_images/15312191-b8aab1ade2b3fd23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n东方哲学注重内在**精神修为和觉醒**，处理人和人、人和社会的关系，比如帝王之术，是以道德为根本点，强调修身齐家治国平天下。注重人与自然的和谐，比如风水学，坐北向南，封建江山龙脉探测，反对土木对地气的破坏。\n\n![雅典学院](https://upload-images.jianshu.io/upload_images/15312191-d5f947d5f04e65b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n西方哲学是对外在不断求知探索的，注重人和自然的关系，探索自然，控制自然，改造自然，注重**理性**。比如，把各种科学体系建立在数学模型上，伽利略制造望远镜观察宇宙，完善日心说。古希腊数学家阿基米德曾说，给我一根杠杆，我可以撬动整个地球。\n列举几个点来说明\n#### 绘画\n\n\n![蒙娜丽莎中的黄金分割](https://upload-images.jianshu.io/upload_images/15312191-c297754a06816955.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![书画合一](https://upload-images.jianshu.io/upload_images/15312191-ba22263d96d0cb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![柴门闻犬吠，风雪夜归人](https://upload-images.jianshu.io/upload_images/15312191-da95e83623606306.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n西方绘画注重写实，利用**数学公式**最大化表现形体美，东方绘画注重**意境**。\n#### 音乐\n![西方交响乐](https://upload-images.jianshu.io/upload_images/15312191-cb15c65f4dc77294.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n再比如西方乐器多用金属定制，种类繁多，而东方乐器擅长自然取材。\n西方文化在逻辑和制度的基础上发展，重视形式。为了达到共同的形式，乐器的声音不能是独特的。这就是为什么西方乐器不像人类的声音。理性需要标准和统一形式。\n\n除了乐器之外，西方音乐总体上强调结构和形式。西方音乐更多社交响且多层次的。它通常会创造音乐的多维纹理。为了创造如此复杂的音乐质感，西方音乐必须由某种结构或形式组成，这就像数学计算一样，需要进行各种安排，以避免混乱，实现和谐。\n![中国古琴](https://upload-images.jianshu.io/upload_images/15312191-36e856a6bc61548a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n中国文化重视自然，主要受道教的影响。中国音乐专注于乐器的个性和本质。它更像是一条远远延伸的路，起伏不定。旋律是线性的，追求空灵的意境。\n#### 建筑\n1.东方建筑多用木材，西方多用石料，这反应了西方人善于改造自然，东方人追求与自然的和谐。\n2.东方建筑讲究**平铺**，格局排列讲究礼法，比如故宫，沿着中轴线对称分布，前后建筑分宾主排列。西方建筑采用**体量**的扩展和叠加，罗马帝国时期的圆形竞技场采用混凝土、泥炭和砖块建成，高达 50 米，可容纳超过五万名观众。\n3.东方建筑结构不靠计算、不靠定量分析、不用形式逻辑的方法分析，而是靠师傅带徒弟，言传身教、靠实践和经验。西方建筑的意识形态是几何之美和数学，比如雅典神庙的黄金分割。\n![古罗马斗兽场](https://upload-images.jianshu.io/upload_images/15312191-65565917b107c256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 饮食\n西方人饮食的背后是高度的理性思维，他们非常注重卡路里和营养的摄取，餐饮中各种能量物质的搭配都是精确计算，恰到好处的。\n\n而中餐讲究的是“五谷调和”，原理在于阴阳五行中庸之道。表现在饮食结构上就是更加注重季节时令与食材的搭配，如冬天多煮炖焖煨，夏天多凉拌。\n\n西方并不会将荤素各类食材搭配在一起，体现的是细分的理性思维。而中餐最特色的地方在于调和，每一道菜都要用两种以上的原料和多种调料来调和烹制。即使是人们日常生活中所食用的家常菜，也是多种调料混合而成，这里面体现的是中国文化合的理念。\n\n中餐表现为圆桌围坐的方式，这是集体主义文化的说明，圆桌围坐可以方便亲族之间互相问候，交流感情，它符合中国人大团圆的心态，而中国文化的核心就是圆，涉及到具体坐的方式上，座位排次是根据早期宗法制的习惯来制定的。长幼尊卑都有严格区分，请客时，年长者、主宾或者地位高的人坐上座，男女主人或陪客坐下座，现在讲究以左为尊。\n\n而西方用餐就没那么多规矩，比较自由，比如自助餐式的party，几个人聚在一起闲谈。\n### 2.2 物质基础不同\n东方哲学建立在**屯混和气**的基础上，注重意向，是感知层面的，比如元气、神，阴阳，悟道，都是是虚无模糊的，比如老子的《道德经》，一生二，二生三，三生万物，天人合一、道法自然，阴阳二气生宇宙。中医主张望闻问切，注重身体五行的平衡。\n\n西方哲学建立在**逻辑学**的基础上，是可量化的，是唯物的，可具象观察的。培根的唯物主义和笛卡尔的方法论建立了现代西方哲学的基础。\n### 2.3 愿景不同\n东方哲学重现世、尚事功，学以致用，构建价值观，是为阶级和个人服务，具有强烈的功利心，被动学习，是独断的，注重权威性。注重管制国家，强调**集体性**。\n充满了现实社会和历史，而不是自然界，追求内圣外王，对纯粹的自然世界不感兴趣。相比西方，东方人生活在二维世界，只有政治的打打杀杀，你争我夺，而没有宇宙观。\n\n西方哲学，重超越、尚思辨，学以致知，追求智慧，获取知识，是怀疑和批判的，哲学家纯粹追求知识的愉悦，注重**人的独立性**。\n\n在东方文化中领导的地位非常高，个人受到上级的约束比较大，集体大于个体，西方文化不喜欢被束缚。\n东方主张先有国再有家再有个人，西方主张独立的人组成家庭和国家，个人大于国家。\n\n东方人联系比较强，重情亲，你是儿子、父亲、女儿、母亲等等，办事找关系现象比较多，喜欢攀比，在没有外力的作用的情况下，组织性差，没有团结力。\n\n西方亲情关系淡漠，不喜攀比，体现在衣食住行，不用必须买房，不注重衣服车子品牌，办事找警察靠法律，非常注重个人隐私。\n\n![东西方个体的差异](https://upload-images.jianshu.io/upload_images/15312191-6e87e05bdc3f354d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w)\n\n## 3.未来\n\n\n\n市场经济带来的贫富差距和东方文化的功利性以及科技与资本的结合造成的进步强制，让东方人感觉越来越焦虑，躺平也是一种对抗的办法。\n\n东方哲学在面临社会大变动时，具有强烈的组织性，比如面对地震等自然灾害、对新冠疫情的对抗。\n\n西方哲学帮助他们在科技方面遥遥领先，在遥远的几百年之内东方都难以望其项背，其社会也将更加撕裂。\n","source":"_posts/--📣📣-东西方哲学的不同.md","raw":"---\ntitle: \"--📣📣-东西方哲学的不同\"\ndate: 2022-11-08\ntags: \n- 开发日常\n---\n\n![](https://upload-images.jianshu.io/upload_images/15312191-b2b80226864e04c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 1.渊源\n\n东方是**农业文明**，注重用伦理连接个体，建立各种联系，比如分封制，封建中央集权。\n西方古希腊是**海洋文明**，交易发达形成了契约精神。\n\n以上观点存疑，海洋文明农业文明，没有明确定位，文明具有偶然性和民族自我的宿命。\n## 2.表现\n\n### 2.1 研究对象不同\n![孔子布道图](https://upload-images.jianshu.io/upload_images/15312191-b8aab1ade2b3fd23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n东方哲学注重内在**精神修为和觉醒**，处理人和人、人和社会的关系，比如帝王之术，是以道德为根本点，强调修身齐家治国平天下。注重人与自然的和谐，比如风水学，坐北向南，封建江山龙脉探测，反对土木对地气的破坏。\n\n![雅典学院](https://upload-images.jianshu.io/upload_images/15312191-d5f947d5f04e65b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n西方哲学是对外在不断求知探索的，注重人和自然的关系，探索自然，控制自然，改造自然，注重**理性**。比如，把各种科学体系建立在数学模型上，伽利略制造望远镜观察宇宙，完善日心说。古希腊数学家阿基米德曾说，给我一根杠杆，我可以撬动整个地球。\n列举几个点来说明\n#### 绘画\n\n\n![蒙娜丽莎中的黄金分割](https://upload-images.jianshu.io/upload_images/15312191-c297754a06816955.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![书画合一](https://upload-images.jianshu.io/upload_images/15312191-ba22263d96d0cb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![柴门闻犬吠，风雪夜归人](https://upload-images.jianshu.io/upload_images/15312191-da95e83623606306.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n西方绘画注重写实，利用**数学公式**最大化表现形体美，东方绘画注重**意境**。\n#### 音乐\n![西方交响乐](https://upload-images.jianshu.io/upload_images/15312191-cb15c65f4dc77294.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n再比如西方乐器多用金属定制，种类繁多，而东方乐器擅长自然取材。\n西方文化在逻辑和制度的基础上发展，重视形式。为了达到共同的形式，乐器的声音不能是独特的。这就是为什么西方乐器不像人类的声音。理性需要标准和统一形式。\n\n除了乐器之外，西方音乐总体上强调结构和形式。西方音乐更多社交响且多层次的。它通常会创造音乐的多维纹理。为了创造如此复杂的音乐质感，西方音乐必须由某种结构或形式组成，这就像数学计算一样，需要进行各种安排，以避免混乱，实现和谐。\n![中国古琴](https://upload-images.jianshu.io/upload_images/15312191-36e856a6bc61548a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n中国文化重视自然，主要受道教的影响。中国音乐专注于乐器的个性和本质。它更像是一条远远延伸的路，起伏不定。旋律是线性的，追求空灵的意境。\n#### 建筑\n1.东方建筑多用木材，西方多用石料，这反应了西方人善于改造自然，东方人追求与自然的和谐。\n2.东方建筑讲究**平铺**，格局排列讲究礼法，比如故宫，沿着中轴线对称分布，前后建筑分宾主排列。西方建筑采用**体量**的扩展和叠加，罗马帝国时期的圆形竞技场采用混凝土、泥炭和砖块建成，高达 50 米，可容纳超过五万名观众。\n3.东方建筑结构不靠计算、不靠定量分析、不用形式逻辑的方法分析，而是靠师傅带徒弟，言传身教、靠实践和经验。西方建筑的意识形态是几何之美和数学，比如雅典神庙的黄金分割。\n![古罗马斗兽场](https://upload-images.jianshu.io/upload_images/15312191-65565917b107c256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 饮食\n西方人饮食的背后是高度的理性思维，他们非常注重卡路里和营养的摄取，餐饮中各种能量物质的搭配都是精确计算，恰到好处的。\n\n而中餐讲究的是“五谷调和”，原理在于阴阳五行中庸之道。表现在饮食结构上就是更加注重季节时令与食材的搭配，如冬天多煮炖焖煨，夏天多凉拌。\n\n西方并不会将荤素各类食材搭配在一起，体现的是细分的理性思维。而中餐最特色的地方在于调和，每一道菜都要用两种以上的原料和多种调料来调和烹制。即使是人们日常生活中所食用的家常菜，也是多种调料混合而成，这里面体现的是中国文化合的理念。\n\n中餐表现为圆桌围坐的方式，这是集体主义文化的说明，圆桌围坐可以方便亲族之间互相问候，交流感情，它符合中国人大团圆的心态，而中国文化的核心就是圆，涉及到具体坐的方式上，座位排次是根据早期宗法制的习惯来制定的。长幼尊卑都有严格区分，请客时，年长者、主宾或者地位高的人坐上座，男女主人或陪客坐下座，现在讲究以左为尊。\n\n而西方用餐就没那么多规矩，比较自由，比如自助餐式的party，几个人聚在一起闲谈。\n### 2.2 物质基础不同\n东方哲学建立在**屯混和气**的基础上，注重意向，是感知层面的，比如元气、神，阴阳，悟道，都是是虚无模糊的，比如老子的《道德经》，一生二，二生三，三生万物，天人合一、道法自然，阴阳二气生宇宙。中医主张望闻问切，注重身体五行的平衡。\n\n西方哲学建立在**逻辑学**的基础上，是可量化的，是唯物的，可具象观察的。培根的唯物主义和笛卡尔的方法论建立了现代西方哲学的基础。\n### 2.3 愿景不同\n东方哲学重现世、尚事功，学以致用，构建价值观，是为阶级和个人服务，具有强烈的功利心，被动学习，是独断的，注重权威性。注重管制国家，强调**集体性**。\n充满了现实社会和历史，而不是自然界，追求内圣外王，对纯粹的自然世界不感兴趣。相比西方，东方人生活在二维世界，只有政治的打打杀杀，你争我夺，而没有宇宙观。\n\n西方哲学，重超越、尚思辨，学以致知，追求智慧，获取知识，是怀疑和批判的，哲学家纯粹追求知识的愉悦，注重**人的独立性**。\n\n在东方文化中领导的地位非常高，个人受到上级的约束比较大，集体大于个体，西方文化不喜欢被束缚。\n东方主张先有国再有家再有个人，西方主张独立的人组成家庭和国家，个人大于国家。\n\n东方人联系比较强，重情亲，你是儿子、父亲、女儿、母亲等等，办事找关系现象比较多，喜欢攀比，在没有外力的作用的情况下，组织性差，没有团结力。\n\n西方亲情关系淡漠，不喜攀比，体现在衣食住行，不用必须买房，不注重衣服车子品牌，办事找警察靠法律，非常注重个人隐私。\n\n![东西方个体的差异](https://upload-images.jianshu.io/upload_images/15312191-6e87e05bdc3f354d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w)\n\n## 3.未来\n\n\n\n市场经济带来的贫富差距和东方文化的功利性以及科技与资本的结合造成的进步强制，让东方人感觉越来越焦虑，躺平也是一种对抗的办法。\n\n东方哲学在面临社会大变动时，具有强烈的组织性，比如面对地震等自然灾害、对新冠疫情的对抗。\n\n西方哲学帮助他们在科技方面遥遥领先，在遥远的几百年之内东方都难以望其项背，其社会也将更加撕裂。\n","slug":"--📣📣-东西方哲学的不同","published":1,"updated":"2024-05-16T07:39:11.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094l900012omv283dhtcs","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b2b80226864e04c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<div class=\"\"><h2 id=\"1-渊源\"><a href=\"#1-渊源\" class=\"headerlink\" title=\"1.渊源\"></a>1.渊源</h2><p>东方是<strong>农业文明</strong>，注重用伦理连接个体，建立各种联系，比如分封制，封建中央集权。<br>西方古希腊是<strong>海洋文明</strong>，交易发达形成了契约精神。</p>\n<p>以上观点存疑，海洋文明农业文明，没有明确定位，文明具有偶然性和民族自我的宿命。</p>\n</div><div class=\"\"><h2 id=\"2-表现\"><a href=\"#2-表现\" class=\"headerlink\" title=\"2.表现\"></a>2.表现</h2><h3 id=\"2-1-研究对象不同\"><a href=\"#2-1-研究对象不同\" class=\"headerlink\" title=\"2.1 研究对象不同\"></a>2.1 研究对象不同</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b8aab1ade2b3fd23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"孔子布道图\"><br>东方哲学注重内在<strong>精神修为和觉醒</strong>，处理人和人、人和社会的关系，比如帝王之术，是以道德为根本点，强调修身齐家治国平天下。注重人与自然的和谐，比如风水学，坐北向南，封建江山龙脉探测，反对土木对地气的破坏。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-d5f947d5f04e65b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"雅典学院\"><br>西方哲学是对外在不断求知探索的，注重人和自然的关系，探索自然，控制自然，改造自然，注重<strong>理性</strong>。比如，把各种科学体系建立在数学模型上，伽利略制造望远镜观察宇宙，完善日心说。古希腊数学家阿基米德曾说，给我一根杠杆，我可以撬动整个地球。<br>列举几个点来说明</p>\n<h4 id=\"绘画\"><a href=\"#绘画\" class=\"headerlink\" title=\"绘画\"></a>绘画</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c297754a06816955.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"蒙娜丽莎中的黄金分割\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-ba22263d96d0cb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"书画合一\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-da95e83623606306.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"柴门闻犬吠，风雪夜归人\"><br>西方绘画注重写实，利用<strong>数学公式</strong>最大化表现形体美，东方绘画注重<strong>意境</strong>。</p>\n<h4 id=\"音乐\"><a href=\"#音乐\" class=\"headerlink\" title=\"音乐\"></a>音乐</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-cb15c65f4dc77294.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"西方交响乐\"></p>\n<p>再比如西方乐器多用金属定制，种类繁多，而东方乐器擅长自然取材。<br>西方文化在逻辑和制度的基础上发展，重视形式。为了达到共同的形式，乐器的声音不能是独特的。这就是为什么西方乐器不像人类的声音。理性需要标准和统一形式。</p>\n<p>除了乐器之外，西方音乐总体上强调结构和形式。西方音乐更多社交响且多层次的。它通常会创造音乐的多维纹理。为了创造如此复杂的音乐质感，西方音乐必须由某种结构或形式组成，这就像数学计算一样，需要进行各种安排，以避免混乱，实现和谐。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-36e856a6bc61548a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"中国古琴\"></p>\n<p>中国文化重视自然，主要受道教的影响。中国音乐专注于乐器的个性和本质。它更像是一条远远延伸的路，起伏不定。旋律是线性的，追求空灵的意境。</p>\n<h4 id=\"建筑\"><a href=\"#建筑\" class=\"headerlink\" title=\"建筑\"></a>建筑</h4><p>1.东方建筑多用木材，西方多用石料，这反应了西方人善于改造自然，东方人追求与自然的和谐。<br>2.东方建筑讲究<strong>平铺</strong>，格局排列讲究礼法，比如故宫，沿着中轴线对称分布，前后建筑分宾主排列。西方建筑采用<strong>体量</strong>的扩展和叠加，罗马帝国时期的圆形竞技场采用混凝土、泥炭和砖块建成，高达 50 米，可容纳超过五万名观众。<br>3.东方建筑结构不靠计算、不靠定量分析、不用形式逻辑的方法分析，而是靠师傅带徒弟，言传身教、靠实践和经验。西方建筑的意识形态是几何之美和数学，比如雅典神庙的黄金分割。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-65565917b107c256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"古罗马斗兽场\"></p>\n<h4 id=\"饮食\"><a href=\"#饮食\" class=\"headerlink\" title=\"饮食\"></a>饮食</h4><p>西方人饮食的背后是高度的理性思维，他们非常注重卡路里和营养的摄取，餐饮中各种能量物质的搭配都是精确计算，恰到好处的。</p>\n<p>而中餐讲究的是“五谷调和”，原理在于阴阳五行中庸之道。表现在饮食结构上就是更加注重季节时令与食材的搭配，如冬天多煮炖焖煨，夏天多凉拌。</p>\n<p>西方并不会将荤素各类食材搭配在一起，体现的是细分的理性思维。而中餐最特色的地方在于调和，每一道菜都要用两种以上的原料和多种调料来调和烹制。即使是人们日常生活中所食用的家常菜，也是多种调料混合而成，这里面体现的是中国文化合的理念。</p>\n<p>中餐表现为圆桌围坐的方式，这是集体主义文化的说明，圆桌围坐可以方便亲族之间互相问候，交流感情，它符合中国人大团圆的心态，而中国文化的核心就是圆，涉及到具体坐的方式上，座位排次是根据早期宗法制的习惯来制定的。长幼尊卑都有严格区分，请客时，年长者、主宾或者地位高的人坐上座，男女主人或陪客坐下座，现在讲究以左为尊。</p>\n<p>而西方用餐就没那么多规矩，比较自由，比如自助餐式的party，几个人聚在一起闲谈。</p>\n<h3 id=\"2-2-物质基础不同\"><a href=\"#2-2-物质基础不同\" class=\"headerlink\" title=\"2.2 物质基础不同\"></a>2.2 物质基础不同</h3><p>东方哲学建立在<strong>屯混和气</strong>的基础上，注重意向，是感知层面的，比如元气、神，阴阳，悟道，都是是虚无模糊的，比如老子的《道德经》，一生二，二生三，三生万物，天人合一、道法自然，阴阳二气生宇宙。中医主张望闻问切，注重身体五行的平衡。</p>\n<p>西方哲学建立在<strong>逻辑学</strong>的基础上，是可量化的，是唯物的，可具象观察的。培根的唯物主义和笛卡尔的方法论建立了现代西方哲学的基础。</p>\n<h3 id=\"2-3-愿景不同\"><a href=\"#2-3-愿景不同\" class=\"headerlink\" title=\"2.3 愿景不同\"></a>2.3 愿景不同</h3><p>东方哲学重现世、尚事功，学以致用，构建价值观，是为阶级和个人服务，具有强烈的功利心，被动学习，是独断的，注重权威性。注重管制国家，强调<strong>集体性</strong>。<br>充满了现实社会和历史，而不是自然界，追求内圣外王，对纯粹的自然世界不感兴趣。相比西方，东方人生活在二维世界，只有政治的打打杀杀，你争我夺，而没有宇宙观。</p>\n<p>西方哲学，重超越、尚思辨，学以致知，追求智慧，获取知识，是怀疑和批判的，哲学家纯粹追求知识的愉悦，注重<strong>人的独立性</strong>。</p>\n<p>在东方文化中领导的地位非常高，个人受到上级的约束比较大，集体大于个体，西方文化不喜欢被束缚。<br>东方主张先有国再有家再有个人，西方主张独立的人组成家庭和国家，个人大于国家。</p>\n<p>东方人联系比较强，重情亲，你是儿子、父亲、女儿、母亲等等，办事找关系现象比较多，喜欢攀比，在没有外力的作用的情况下，组织性差，没有团结力。</p>\n<p>西方亲情关系淡漠，不喜攀比，体现在衣食住行，不用必须买房，不注重衣服车子品牌，办事找警察靠法律，非常注重个人隐私。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6e87e05bdc3f354d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w\" alt=\"东西方个体的差异\"></p>\n</div><div class=\"\"><h2 id=\"3-未来\"><a href=\"#3-未来\" class=\"headerlink\" title=\"3.未来\"></a>3.未来</h2><p>市场经济带来的贫富差距和东方文化的功利性以及科技与资本的结合造成的进步强制，让东方人感觉越来越焦虑，躺平也是一种对抗的办法。</p>\n<p>东方哲学在面临社会大变动时，具有强烈的组织性，比如面对地震等自然灾害、对新冠疫情的对抗。</p>\n<p>西方哲学帮助他们在科技方面遥遥领先，在遥远的几百年之内东方都难以望其项背，其社会也将更加撕裂。</p>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b2b80226864e04c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"1-渊源\"><a href=\"#1-渊源\" class=\"headerlink\" title=\"1.渊源\"></a>1.渊源</h2><p>东方是<strong>农业文明</strong>，注重用伦理连接个体，建立各种联系，比如分封制，封建中央集权。<br>西方古希腊是<strong>海洋文明</strong>，交易发达形成了契约精神。</p>\n<p>以上观点存疑，海洋文明农业文明，没有明确定位，文明具有偶然性和民族自我的宿命。</p>\n<h2 id=\"2-表现\"><a href=\"#2-表现\" class=\"headerlink\" title=\"2.表现\"></a>2.表现</h2><h3 id=\"2-1-研究对象不同\"><a href=\"#2-1-研究对象不同\" class=\"headerlink\" title=\"2.1 研究对象不同\"></a>2.1 研究对象不同</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b8aab1ade2b3fd23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"孔子布道图\"><br>东方哲学注重内在<strong>精神修为和觉醒</strong>，处理人和人、人和社会的关系，比如帝王之术，是以道德为根本点，强调修身齐家治国平天下。注重人与自然的和谐，比如风水学，坐北向南，封建江山龙脉探测，反对土木对地气的破坏。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-d5f947d5f04e65b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"雅典学院\"><br>西方哲学是对外在不断求知探索的，注重人和自然的关系，探索自然，控制自然，改造自然，注重<strong>理性</strong>。比如，把各种科学体系建立在数学模型上，伽利略制造望远镜观察宇宙，完善日心说。古希腊数学家阿基米德曾说，给我一根杠杆，我可以撬动整个地球。<br>列举几个点来说明</p>\n<h4 id=\"绘画\"><a href=\"#绘画\" class=\"headerlink\" title=\"绘画\"></a>绘画</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c297754a06816955.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"蒙娜丽莎中的黄金分割\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-ba22263d96d0cb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"书画合一\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-da95e83623606306.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"柴门闻犬吠，风雪夜归人\"><br>西方绘画注重写实，利用<strong>数学公式</strong>最大化表现形体美，东方绘画注重<strong>意境</strong>。</p>\n<h4 id=\"音乐\"><a href=\"#音乐\" class=\"headerlink\" title=\"音乐\"></a>音乐</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-cb15c65f4dc77294.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"西方交响乐\"></p>\n<p>再比如西方乐器多用金属定制，种类繁多，而东方乐器擅长自然取材。<br>西方文化在逻辑和制度的基础上发展，重视形式。为了达到共同的形式，乐器的声音不能是独特的。这就是为什么西方乐器不像人类的声音。理性需要标准和统一形式。</p>\n<p>除了乐器之外，西方音乐总体上强调结构和形式。西方音乐更多社交响且多层次的。它通常会创造音乐的多维纹理。为了创造如此复杂的音乐质感，西方音乐必须由某种结构或形式组成，这就像数学计算一样，需要进行各种安排，以避免混乱，实现和谐。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-36e856a6bc61548a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"中国古琴\"></p>\n<p>中国文化重视自然，主要受道教的影响。中国音乐专注于乐器的个性和本质。它更像是一条远远延伸的路，起伏不定。旋律是线性的，追求空灵的意境。</p>\n<h4 id=\"建筑\"><a href=\"#建筑\" class=\"headerlink\" title=\"建筑\"></a>建筑</h4><p>1.东方建筑多用木材，西方多用石料，这反应了西方人善于改造自然，东方人追求与自然的和谐。<br>2.东方建筑讲究<strong>平铺</strong>，格局排列讲究礼法，比如故宫，沿着中轴线对称分布，前后建筑分宾主排列。西方建筑采用<strong>体量</strong>的扩展和叠加，罗马帝国时期的圆形竞技场采用混凝土、泥炭和砖块建成，高达 50 米，可容纳超过五万名观众。<br>3.东方建筑结构不靠计算、不靠定量分析、不用形式逻辑的方法分析，而是靠师傅带徒弟，言传身教、靠实践和经验。西方建筑的意识形态是几何之美和数学，比如雅典神庙的黄金分割。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-65565917b107c256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"古罗马斗兽场\"></p>\n<h4 id=\"饮食\"><a href=\"#饮食\" class=\"headerlink\" title=\"饮食\"></a>饮食</h4><p>西方人饮食的背后是高度的理性思维，他们非常注重卡路里和营养的摄取，餐饮中各种能量物质的搭配都是精确计算，恰到好处的。</p>\n<p>而中餐讲究的是“五谷调和”，原理在于阴阳五行中庸之道。表现在饮食结构上就是更加注重季节时令与食材的搭配，如冬天多煮炖焖煨，夏天多凉拌。</p>\n<p>西方并不会将荤素各类食材搭配在一起，体现的是细分的理性思维。而中餐最特色的地方在于调和，每一道菜都要用两种以上的原料和多种调料来调和烹制。即使是人们日常生活中所食用的家常菜，也是多种调料混合而成，这里面体现的是中国文化合的理念。</p>\n<p>中餐表现为圆桌围坐的方式，这是集体主义文化的说明，圆桌围坐可以方便亲族之间互相问候，交流感情，它符合中国人大团圆的心态，而中国文化的核心就是圆，涉及到具体坐的方式上，座位排次是根据早期宗法制的习惯来制定的。长幼尊卑都有严格区分，请客时，年长者、主宾或者地位高的人坐上座，男女主人或陪客坐下座，现在讲究以左为尊。</p>\n<p>而西方用餐就没那么多规矩，比较自由，比如自助餐式的party，几个人聚在一起闲谈。</p>\n<h3 id=\"2-2-物质基础不同\"><a href=\"#2-2-物质基础不同\" class=\"headerlink\" title=\"2.2 物质基础不同\"></a>2.2 物质基础不同</h3><p>东方哲学建立在<strong>屯混和气</strong>的基础上，注重意向，是感知层面的，比如元气、神，阴阳，悟道，都是是虚无模糊的，比如老子的《道德经》，一生二，二生三，三生万物，天人合一、道法自然，阴阳二气生宇宙。中医主张望闻问切，注重身体五行的平衡。</p>\n<p>西方哲学建立在<strong>逻辑学</strong>的基础上，是可量化的，是唯物的，可具象观察的。培根的唯物主义和笛卡尔的方法论建立了现代西方哲学的基础。</p>\n<h3 id=\"2-3-愿景不同\"><a href=\"#2-3-愿景不同\" class=\"headerlink\" title=\"2.3 愿景不同\"></a>2.3 愿景不同</h3><p>东方哲学重现世、尚事功，学以致用，构建价值观，是为阶级和个人服务，具有强烈的功利心，被动学习，是独断的，注重权威性。注重管制国家，强调<strong>集体性</strong>。<br>充满了现实社会和历史，而不是自然界，追求内圣外王，对纯粹的自然世界不感兴趣。相比西方，东方人生活在二维世界，只有政治的打打杀杀，你争我夺，而没有宇宙观。</p>\n<p>西方哲学，重超越、尚思辨，学以致知，追求智慧，获取知识，是怀疑和批判的，哲学家纯粹追求知识的愉悦，注重<strong>人的独立性</strong>。</p>\n<p>在东方文化中领导的地位非常高，个人受到上级的约束比较大，集体大于个体，西方文化不喜欢被束缚。<br>东方主张先有国再有家再有个人，西方主张独立的人组成家庭和国家，个人大于国家。</p>\n<p>东方人联系比较强，重情亲，你是儿子、父亲、女儿、母亲等等，办事找关系现象比较多，喜欢攀比，在没有外力的作用的情况下，组织性差，没有团结力。</p>\n<p>西方亲情关系淡漠，不喜攀比，体现在衣食住行，不用必须买房，不注重衣服车子品牌，办事找警察靠法律，非常注重个人隐私。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6e87e05bdc3f354d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w\" alt=\"东西方个体的差异\"></p>\n<h2 id=\"3-未来\"><a href=\"#3-未来\" class=\"headerlink\" title=\"3.未来\"></a>3.未来</h2><p>市场经济带来的贫富差距和东方文化的功利性以及科技与资本的结合造成的进步强制，让东方人感觉越来越焦虑，躺平也是一种对抗的办法。</p>\n<p>东方哲学在面临社会大变动时，具有强烈的组织性，比如面对地震等自然灾害、对新冠疫情的对抗。</p>\n<p>西方哲学帮助他们在科技方面遥遥领先，在遥远的几百年之内东方都难以望其项背，其社会也将更加撕裂。</p>\n"},{"title":"-🌦🌦lodash常用方法","date":"2019-12-04T16:00:00.000Z","_content":"1. 找数组中的相同key项的对象()\n\nintersectionBy\n```\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]\n```\n2. 去重\nuniqBy\n```\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n```\n3. 返回符合元素的 index，否则返回 -1。\nfindIndex\n```\nvar users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n_.findIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n```\n4.深克隆\ncloneDeep\n```\n\nvar objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar deep = _.cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// => false\n```\n5.取差集\ndifferenceBy\n```\n_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n```\n","source":"_posts/-🌦🌦lodash常用方法.md","raw":"---\ntitle: \"-🌦🌦lodash常用方法\"\ndate: 2019-12-05\ntags: \n- 开发日常\n---\n1. 找数组中的相同key项的对象()\n\nintersectionBy\n```\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]\n```\n2. 去重\nuniqBy\n```\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n```\n3. 返回符合元素的 index，否则返回 -1。\nfindIndex\n```\nvar users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n_.findIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n```\n4.深克隆\ncloneDeep\n```\n\nvar objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar deep = _.cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// => false\n```\n5.取差集\ndifferenceBy\n```\n_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n```\n","slug":"-🌦🌦lodash常用方法","published":1,"updated":"2024-05-16T07:39:11.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094lf00032omvbbqzdw7d","content":"<ol>\n<li>找数组中的相同key项的对象()</li>\n</ol>\n<p>intersectionBy</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersectionBy([&#123; &#x27;x&#x27;: 1 &#125;], [&#123; &#x27;x&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 1 &#125;], &#x27;x&#x27;);</span><br><span class=\"line\">// =&gt; [&#123; &#x27;x&#x27;: 1 &#125;]</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>去重<br>uniqBy<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniqBy([&#123; &#x27;x&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 1 &#125;], &#x27;x&#x27;);</span><br><span class=\"line\">// =&gt; [&#123; &#x27;x&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 2 &#125;]</span><br></pre></td></tr></table></figure></li>\n<li>返回符合元素的 index，否则返回 -1。<br>findIndex<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var users = [</span><br><span class=\"line\">  &#123; &#x27;user&#x27;: &#x27;barney&#x27;,  &#x27;active&#x27;: false &#125;,</span><br><span class=\"line\">  &#123; &#x27;user&#x27;: &#x27;fred&#x27;,    &#x27;active&#x27;: false &#125;,</span><br><span class=\"line\">  &#123; &#x27;user&#x27;: &#x27;pebbles&#x27;, &#x27;active&#x27;: true &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">_.findIndex(users, &#123; &#x27;user&#x27;: &#x27;fred&#x27;, &#x27;active&#x27;: false &#125;);</span><br><span class=\"line\">// =&gt; 1</span><br></pre></td></tr></table></figure>\n4.深克隆<br>cloneDeep<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var objects = [&#123; &#x27;a&#x27;: 1 &#125;, &#123; &#x27;b&#x27;: 2 &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">var deep = _.cloneDeep(objects);</span><br><span class=\"line\">console.log(deep[0] === objects[0]);</span><br><span class=\"line\">// =&gt; false</span><br></pre></td></tr></table></figure>\n5.取差集<br>differenceBy<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.differenceBy([&#123; &#x27;x&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 1 &#125;], [&#123; &#x27;x&#x27;: 1 &#125;], &#x27;x&#x27;);</span><br><span class=\"line\">// =&gt; [&#123; &#x27;x&#x27;: 2 &#125;]</span><br></pre></td></tr></table></figure></li>\n</ol>\n\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>找数组中的相同key项的对象()</li>\n</ol>\n<p>intersectionBy</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersectionBy([&#123; &#x27;x&#x27;: 1 &#125;], [&#123; &#x27;x&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 1 &#125;], &#x27;x&#x27;);</span><br><span class=\"line\">// =&gt; [&#123; &#x27;x&#x27;: 1 &#125;]</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>去重<br>uniqBy<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniqBy([&#123; &#x27;x&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 1 &#125;], &#x27;x&#x27;);</span><br><span class=\"line\">// =&gt; [&#123; &#x27;x&#x27;: 1 &#125;, &#123; &#x27;x&#x27;: 2 &#125;]</span><br></pre></td></tr></table></figure></li>\n<li>返回符合元素的 index，否则返回 -1。<br>findIndex<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var users = [</span><br><span class=\"line\">  &#123; &#x27;user&#x27;: &#x27;barney&#x27;,  &#x27;active&#x27;: false &#125;,</span><br><span class=\"line\">  &#123; &#x27;user&#x27;: &#x27;fred&#x27;,    &#x27;active&#x27;: false &#125;,</span><br><span class=\"line\">  &#123; &#x27;user&#x27;: &#x27;pebbles&#x27;, &#x27;active&#x27;: true &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">_.findIndex(users, &#123; &#x27;user&#x27;: &#x27;fred&#x27;, &#x27;active&#x27;: false &#125;);</span><br><span class=\"line\">// =&gt; 1</span><br></pre></td></tr></table></figure>\n4.深克隆<br>cloneDeep<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var objects = [&#123; &#x27;a&#x27;: 1 &#125;, &#123; &#x27;b&#x27;: 2 &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">var deep = _.cloneDeep(objects);</span><br><span class=\"line\">console.log(deep[0] === objects[0]);</span><br><span class=\"line\">// =&gt; false</span><br></pre></td></tr></table></figure>\n5.取差集<br>differenceBy<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.differenceBy([&#123; &#x27;x&#x27;: 2 &#125;, &#123; &#x27;x&#x27;: 1 &#125;], [&#123; &#x27;x&#x27;: 1 &#125;], &#x27;x&#x27;);</span><br><span class=\"line\">// =&gt; [&#123; &#x27;x&#x27;: 2 &#125;]</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"-🌦🌦nodejs做服务器和服务代理","date":"2023-12-11T16:00:00.000Z","_content":"最近遇到在 windows2008部署前端项目的问题，tomact 和 ng 都不太合适小项目，而且配置比较复杂，使用 node搞个服务器吧\n把打包好的静态文件放在 dist 文件夹下,目录如下：\n-dist\n  --assets\n  -- index.html\n### 服务器 express\n```js\nconst path = require('path');\nconst express = require('express');\nconst { createProxyMiddleware } = require('http-proxy-middleware');\nconst PORT = 3001;\n\nconst STATIC = path.resolve(__dirname, 'dist');\nconst INDEX = path.resolve(STATIC, 'index.html');\n\nconst app = express();\n// Static content\napp.use(express.static(STATIC));\n\n\n// All GET request handled by INDEX file\napp.get('*', function (req, res) {\n  res.sendFile(INDEX);\n});\n\n// Start server\napp.listen(PORT, function () {\n  console.log('Server up and running on ', `http://localhost:${PORT}/`);\n});\n\n```\n搞好服务器，后端小伙伴 cors 跨域也不会弄，只能自己代理了\n### 代理工具 http-proxy-middleware\n```\nconst path = require('path');\nconst express = require('express');\nconst { createProxyMiddleware } = require('http-proxy-middleware');\nconst PORT = 3001;\n\nconst STATIC = path.resolve(__dirname, 'dist');\nconst INDEX = path.resolve(STATIC, 'index.html');\n\nconst app = express();\n// Static content\napp.use(express.static(STATIC));\n+ app.use(\n+ '/userCode', // 请求 localhost:3001/userCode/login ->  \n+ createProxyMiddleware({\n+    target: 'http://10.1.81.45:9080/pf2/', //'http://10.1.81.45:9080/pf2//userCode/login\n+   changeOrigin: true,\n+  }),\n+);\n\n\n// All GET request handled by INDEX file\napp.get('*', function (req, res) {\n  res.sendFile(INDEX);\n});\n\n// Start server\napp.listen(PORT, function () {\n  console.log('Server up and running on ', `http://localhost:${PORT}/`);\n});\n```\n","source":"_posts/-🌦🌦nodejs做服务器和服务代理.md","raw":"---\ntitle: \"-🌦🌦nodejs做服务器和服务代理\"\ndate: 2023-12-12\ntags: \n- 开发日常\n---\n最近遇到在 windows2008部署前端项目的问题，tomact 和 ng 都不太合适小项目，而且配置比较复杂，使用 node搞个服务器吧\n把打包好的静态文件放在 dist 文件夹下,目录如下：\n-dist\n  --assets\n  -- index.html\n### 服务器 express\n```js\nconst path = require('path');\nconst express = require('express');\nconst { createProxyMiddleware } = require('http-proxy-middleware');\nconst PORT = 3001;\n\nconst STATIC = path.resolve(__dirname, 'dist');\nconst INDEX = path.resolve(STATIC, 'index.html');\n\nconst app = express();\n// Static content\napp.use(express.static(STATIC));\n\n\n// All GET request handled by INDEX file\napp.get('*', function (req, res) {\n  res.sendFile(INDEX);\n});\n\n// Start server\napp.listen(PORT, function () {\n  console.log('Server up and running on ', `http://localhost:${PORT}/`);\n});\n\n```\n搞好服务器，后端小伙伴 cors 跨域也不会弄，只能自己代理了\n### 代理工具 http-proxy-middleware\n```\nconst path = require('path');\nconst express = require('express');\nconst { createProxyMiddleware } = require('http-proxy-middleware');\nconst PORT = 3001;\n\nconst STATIC = path.resolve(__dirname, 'dist');\nconst INDEX = path.resolve(STATIC, 'index.html');\n\nconst app = express();\n// Static content\napp.use(express.static(STATIC));\n+ app.use(\n+ '/userCode', // 请求 localhost:3001/userCode/login ->  \n+ createProxyMiddleware({\n+    target: 'http://10.1.81.45:9080/pf2/', //'http://10.1.81.45:9080/pf2//userCode/login\n+   changeOrigin: true,\n+  }),\n+);\n\n\n// All GET request handled by INDEX file\napp.get('*', function (req, res) {\n  res.sendFile(INDEX);\n});\n\n// Start server\napp.listen(PORT, function () {\n  console.log('Server up and running on ', `http://localhost:${PORT}/`);\n});\n```\n","slug":"-🌦🌦nodejs做服务器和服务代理","published":1,"updated":"2024-05-16T07:39:11.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094lh00042omv6otl0lbf","content":"<p>最近遇到在 windows2008部署前端项目的问题，tomact 和 ng 都不太合适小项目，而且配置比较复杂，使用 node搞个服务器吧<br>把打包好的静态文件放在 dist 文件夹下,目录如下：<br>-dist<br>  –assets<br>  – index.html</p>\n<h3 id=\"服务器-express\"><a href=\"#服务器-express\" class=\"headerlink\" title=\"服务器 express\"></a>服务器 express</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; createProxyMiddleware &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">3001</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">STATIC</span> = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">INDEX</span> = path.<span class=\"title function_\">resolve</span>(<span class=\"variable constant_\">STATIC</span>, <span class=\"string\">&#x27;index.html&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"><span class=\"comment\">// Static content</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"variable constant_\">STATIC</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// All GET request handled by INDEX file</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">sendFile</span>(<span class=\"variable constant_\">INDEX</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Start server</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Server up and running on &#x27;</span>, <span class=\"string\">`http://localhost:<span class=\"subst\">$&#123;PORT&#125;</span>/`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>搞好服务器，后端小伙伴 cors 跨域也不会弄，只能自己代理了</p>\n<h3 id=\"代理工具-http-proxy-middleware\"><a href=\"#代理工具-http-proxy-middleware\" class=\"headerlink\" title=\"代理工具 http-proxy-middleware\"></a>代理工具 http-proxy-middleware</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&#x27;path&#x27;);</span><br><span class=\"line\">const express = require(&#x27;express&#x27;);</span><br><span class=\"line\">const &#123; createProxyMiddleware &#125; = require(&#x27;http-proxy-middleware&#x27;);</span><br><span class=\"line\">const PORT = 3001;</span><br><span class=\"line\"></span><br><span class=\"line\">const STATIC = path.resolve(__dirname, &#x27;dist&#x27;);</span><br><span class=\"line\">const INDEX = path.resolve(STATIC, &#x27;index.html&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">const app = express();</span><br><span class=\"line\">// Static content</span><br><span class=\"line\">app.use(express.static(STATIC));</span><br><span class=\"line\">+ app.use(</span><br><span class=\"line\">+ &#x27;/userCode&#x27;, // 请求 localhost:3001/userCode/login -&gt;  </span><br><span class=\"line\">+ createProxyMiddleware(&#123;</span><br><span class=\"line\">+    target: &#x27;http://10.1.81.45:9080/pf2/&#x27;, //&#x27;http://10.1.81.45:9080/pf2//userCode/login</span><br><span class=\"line\">+   changeOrigin: true,</span><br><span class=\"line\">+  &#125;),</span><br><span class=\"line\">+);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// All GET request handled by INDEX file</span><br><span class=\"line\">app.get(&#x27;*&#x27;, function (req, res) &#123;</span><br><span class=\"line\">  res.sendFile(INDEX);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Start server</span><br><span class=\"line\">app.listen(PORT, function () &#123;</span><br><span class=\"line\">  console.log(&#x27;Server up and running on &#x27;, `http://localhost:$&#123;PORT&#125;/`);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>最近遇到在 windows2008部署前端项目的问题，tomact 和 ng 都不太合适小项目，而且配置比较复杂，使用 node搞个服务器吧<br>把打包好的静态文件放在 dist 文件夹下,目录如下：<br>-dist<br>  –assets<br>  – index.html</p>\n<h3 id=\"服务器-express\"><a href=\"#服务器-express\" class=\"headerlink\" title=\"服务器 express\"></a>服务器 express</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; createProxyMiddleware &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">3001</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">STATIC</span> = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">INDEX</span> = path.<span class=\"title function_\">resolve</span>(<span class=\"variable constant_\">STATIC</span>, <span class=\"string\">&#x27;index.html&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"><span class=\"comment\">// Static content</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"variable constant_\">STATIC</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// All GET request handled by INDEX file</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">sendFile</span>(<span class=\"variable constant_\">INDEX</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Start server</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Server up and running on &#x27;</span>, <span class=\"string\">`http://localhost:<span class=\"subst\">$&#123;PORT&#125;</span>/`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>搞好服务器，后端小伙伴 cors 跨域也不会弄，只能自己代理了</p>\n<h3 id=\"代理工具-http-proxy-middleware\"><a href=\"#代理工具-http-proxy-middleware\" class=\"headerlink\" title=\"代理工具 http-proxy-middleware\"></a>代理工具 http-proxy-middleware</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&#x27;path&#x27;);</span><br><span class=\"line\">const express = require(&#x27;express&#x27;);</span><br><span class=\"line\">const &#123; createProxyMiddleware &#125; = require(&#x27;http-proxy-middleware&#x27;);</span><br><span class=\"line\">const PORT = 3001;</span><br><span class=\"line\"></span><br><span class=\"line\">const STATIC = path.resolve(__dirname, &#x27;dist&#x27;);</span><br><span class=\"line\">const INDEX = path.resolve(STATIC, &#x27;index.html&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">const app = express();</span><br><span class=\"line\">// Static content</span><br><span class=\"line\">app.use(express.static(STATIC));</span><br><span class=\"line\">+ app.use(</span><br><span class=\"line\">+ &#x27;/userCode&#x27;, // 请求 localhost:3001/userCode/login -&gt;  </span><br><span class=\"line\">+ createProxyMiddleware(&#123;</span><br><span class=\"line\">+    target: &#x27;http://10.1.81.45:9080/pf2/&#x27;, //&#x27;http://10.1.81.45:9080/pf2//userCode/login</span><br><span class=\"line\">+   changeOrigin: true,</span><br><span class=\"line\">+  &#125;),</span><br><span class=\"line\">+);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// All GET request handled by INDEX file</span><br><span class=\"line\">app.get(&#x27;*&#x27;, function (req, res) &#123;</span><br><span class=\"line\">  res.sendFile(INDEX);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Start server</span><br><span class=\"line\">app.listen(PORT, function () &#123;</span><br><span class=\"line\">  console.log(&#x27;Server up and running on &#x27;, `http://localhost:$&#123;PORT&#125;/`);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"-🎨🎨-git-push-为什么必须要先-git-pull","date":"2021-11-17T16:00:00.000Z","_content":"## (e.g., 'git pull ...') before pushing again\nUse git pull to pull the latest changes from the remote repository to your local repository. In this case, pulling changes will require a merge because you have made changes to your local repository.\n\nI'll provide an example and a picture to explain. Let's assume your last pull from origin/branch was at Commit B. You have completed and committed some work (Commit C). At the same time, someone else has completed their work and pushed it to origin/branch (Commit D). There will need to be a merge between these two branches.\n```\nlocal branch:                         --- Commit C \n                                    /\n                                   /\n                                  /\norigin/branch: Commit A ------ Commit B ---- Commit D\n```\nBecause you are the one that wants to push, **`Git forces`** you to perform the merge. To do so, you must first pull the changes from origin/branch.\n```\nlocal branch:                         --- Commit C -- Commit E\n                                    /               /           \n                                   /               /             \n                                  /               /               \norigin/branch: Commit A ------ Commit B ---- Commit D \n```\nAfter completing the merge, you will now be allowed to fast-forward origin/branch to Commit E by pushing your changes.\n\nGit requires that you handle merges yourself, because a merge may lead to **`conflicts`**.\n","source":"_posts/-🎨🎨-git-push-为什么必须要先-git-pull.md","raw":"---\ntitle: \"-🎨🎨-git-push-为什么必须要先-git-pull\"\ndate: 2021-11-18\ntags: \n- 开发日常\n---\n## (e.g., 'git pull ...') before pushing again\nUse git pull to pull the latest changes from the remote repository to your local repository. In this case, pulling changes will require a merge because you have made changes to your local repository.\n\nI'll provide an example and a picture to explain. Let's assume your last pull from origin/branch was at Commit B. You have completed and committed some work (Commit C). At the same time, someone else has completed their work and pushed it to origin/branch (Commit D). There will need to be a merge between these two branches.\n```\nlocal branch:                         --- Commit C \n                                    /\n                                   /\n                                  /\norigin/branch: Commit A ------ Commit B ---- Commit D\n```\nBecause you are the one that wants to push, **`Git forces`** you to perform the merge. To do so, you must first pull the changes from origin/branch.\n```\nlocal branch:                         --- Commit C -- Commit E\n                                    /               /           \n                                   /               /             \n                                  /               /               \norigin/branch: Commit A ------ Commit B ---- Commit D \n```\nAfter completing the merge, you will now be allowed to fast-forward origin/branch to Commit E by pushing your changes.\n\nGit requires that you handle merges yourself, because a merge may lead to **`conflicts`**.\n","slug":"-🎨🎨-git-push-为什么必须要先-git-pull","published":1,"updated":"2024-05-16T07:39:11.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094li00052omva90e5ihq","content":"<div class=\"\"><h2 id=\"e-g-‘git-pull-…’-before-pushing-again\"><a href=\"#e-g-‘git-pull-…’-before-pushing-again\" class=\"headerlink\" title=\"(e.g., ‘git pull …’) before pushing again\"></a>(e.g., ‘git pull …’) before pushing again</h2><p>Use git pull to pull the latest changes from the remote repository to your local repository. In this case, pulling changes will require a merge because you have made changes to your local repository.</p>\n<p>I’ll provide an example and a picture to explain. Let’s assume your last pull from origin&#x2F;branch was at Commit B. You have completed and committed some work (Commit C). At the same time, someone else has completed their work and pushed it to origin&#x2F;branch (Commit D). There will need to be a merge between these two branches.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local branch:                         --- Commit C </span><br><span class=\"line\">                                    /</span><br><span class=\"line\">                                   /</span><br><span class=\"line\">                                  /</span><br><span class=\"line\">origin/branch: Commit A ------ Commit B ---- Commit D</span><br></pre></td></tr></table></figure>\n<p>Because you are the one that wants to push, <strong><code>Git forces</code></strong> you to perform the merge. To do so, you must first pull the changes from origin&#x2F;branch.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local branch:                         --- Commit C -- Commit E</span><br><span class=\"line\">                                    /               /           </span><br><span class=\"line\">                                   /               /             </span><br><span class=\"line\">                                  /               /               </span><br><span class=\"line\">origin/branch: Commit A ------ Commit B ---- Commit D </span><br></pre></td></tr></table></figure>\n<p>After completing the merge, you will now be allowed to fast-forward origin&#x2F;branch to Commit E by pushing your changes.</p>\n<p>Git requires that you handle merges yourself, because a merge may lead to <strong><code>conflicts</code></strong>.</p>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"e-g-‘git-pull-…’-before-pushing-again\"><a href=\"#e-g-‘git-pull-…’-before-pushing-again\" class=\"headerlink\" title=\"(e.g., ‘git pull …’) before pushing again\"></a>(e.g., ‘git pull …’) before pushing again</h2><p>Use git pull to pull the latest changes from the remote repository to your local repository. In this case, pulling changes will require a merge because you have made changes to your local repository.</p>\n<p>I’ll provide an example and a picture to explain. Let’s assume your last pull from origin&#x2F;branch was at Commit B. You have completed and committed some work (Commit C). At the same time, someone else has completed their work and pushed it to origin&#x2F;branch (Commit D). There will need to be a merge between these two branches.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local branch:                         --- Commit C </span><br><span class=\"line\">                                    /</span><br><span class=\"line\">                                   /</span><br><span class=\"line\">                                  /</span><br><span class=\"line\">origin/branch: Commit A ------ Commit B ---- Commit D</span><br></pre></td></tr></table></figure>\n<p>Because you are the one that wants to push, <strong><code>Git forces</code></strong> you to perform the merge. To do so, you must first pull the changes from origin&#x2F;branch.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local branch:                         --- Commit C -- Commit E</span><br><span class=\"line\">                                    /               /           </span><br><span class=\"line\">                                   /               /             </span><br><span class=\"line\">                                  /               /               </span><br><span class=\"line\">origin/branch: Commit A ------ Commit B ---- Commit D </span><br></pre></td></tr></table></figure>\n<p>After completing the merge, you will now be allowed to fast-forward origin&#x2F;branch to Commit E by pushing your changes.</p>\n<p>Git requires that you handle merges yourself, because a merge may lead to <strong><code>conflicts</code></strong>.</p>\n"},{"title":"-📣📣-我看《图灵和ACM图灵奖》","date":"2023-05-26T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-f906638c0681ff7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n最近看的书比较多也比较杂，像《芯片战争》、《芯片简史》、《比尔盖茨传》、《数学之美》等等，这几本书里有提到图灵奖的信息，顺手买了一本《图灵和ACM图灵奖》，看了这本书对我震撼很大，原来计算机的大牛在搞这些东西，他们可以是程序员，更重要的是这些人更看重数学，用数学建立模型来构建和改善计算机生态。\n\n之前看过左耳朵耗子写 的《程序员三重门》，当时还没太懂，现在完全明白了，\n简单说：三等程序员写代码，二等程序员调试调优，一等程序员玩数学。\n\n这篇文章也是对自己将近十年的职业生涯的一个总结吧，知道自己在计算机这座神庙里干的什么活，以后前进的方向。\n\n之前一直想把**数学**和**算法**应用到工作中，相信很多人在给你灌输这样的想法（他们的主要目的还是让你交智商税），简单概括他们的说法，技术万法不离其宗，不学好算法你就不配做程序员，学会你就天下无敌了。但是随着时间的推移，你发现你就算学完这些对你的工作提升也不大，因为在工作中根本用不到，这个月学完下个月忘(没错就是以前的我🤪)，好像自己很笨一直冲不破这道门一样。\n\n其实这个道理很简单，我下面举个例子：\n\n比如你是军队一名步兵，你的日常作战任务就是瞄准开枪。你的长官说：小子，想做好一名步兵，你需要学习子弹和枪的设计原理，这样你才能更好的瞄准射击，才能做一名出色的步兵。\n\n当然，作为一个积极向上的步兵，你欣然接受了前辈长官的建议。因此你除了在作战中开枪射击之外，不打仗的时候就去研究各种枪炮原理、空气动力学，材料学啥的。然后你想在射击中应用你学到的这些原理，但是你发现学习动力学好像和射击有点关系，但是关系又不大，因为你是一名步兵，你的日常动作是瞄准开枪射击，你所处的场所没有为你提供改造枪和子弹的结构的环境或者条件。\n\n研究这些东西并没有错，因为你是一个想提升自己的人，但是你急于把所学转化成当前的步兵角色中，效果甚微，长此以往，你得到的只有对自己的质疑和前途的迷茫，因为你身边所有士兵都这样说的，想做好步兵就要学习枪炮原理，如果你学到的东西长期用不到，有可能是你学的东西不对，也有可能是你的职业错了。\n\n然而真正研究枪和子弹原理并应用的是兵工厂的枪炮师，这些东西是通过他们的倡导流行开来的，所以你学这些东西后就不要在想去做一个步兵了，你应该是去做兵工厂的炮枪师，这样才能发挥你的所学。\n\n这也是AK47发明者米哈伊留申·卡拉希尼柯夫的故事，二战中，卡拉希尼柯夫作为一名坦克手奔赴前线，在，在1941年10月手臂严重受伤，卡拉希尼柯夫在野战医院疗伤时，打听着伤员们常在一起抱怨苏联枪械的拙劣性能和前线德军使用的自动武器，于是萌发了设计轻武器的念头。回家养伤期间，他设计出第一支PPK-42冲锋枪，引起军方的注意。1943年，他进入正规学校，并被分配到武器试验场担任技术员，从此转型做了枪炮师。\n\n\n所以，如果想做好一名步兵，你还是应该把主要精力放在射击练习和熟系枪械上，同理\n作为一个三等程序员，你只要把程序**逻辑**搞明白，会看英语文档、懂点操作系统、网络和编译，再懂点设计模式，明白软件工程师需要注意什么就OK了，这一层的天花板很低，而且这些东西之间联系并不大，不需要你把这些东西全部融会贯通。\n\n\n当然，作为一名软件工程师，如果想进一步提升等级，就必须去研究性能优化，需要全面考量的那种，CPU、操作系统、网络、内存、程序等等（可以看看**《性能之巅》**)，真正把你学的算法和数学运用起来。换句话说，学完这些你就得准备转换程序员角色了，如果你下定决心转型，这一过程肯定是充满了曲折的，因为你要踏入陌生的领域，运用不同的思维和技能去解决你没有完全熟悉的问题。\n\n现在再看，那些把数学和算法挂在嘴边的人，你就知道什么叫蒙昧，他们能骗的也就是哪些喜欢揍捷径的人(有些PM都被忽悠去学了)或者说这些人本身就是枪炮师，他们只是站在自己的应用领域去学习这些东西，但是他们或者你自己无意间把这些强加在你自己身上了，过度神话了。通过这个思考，我更知道了读书的重要性，让你看到更大的世界，让你独立思考，不能人云亦云。\n\n总之，**算法**和**数学**和普通程序员关系不大，大家都知道编程的门槛有多低，现在小学生都学的懂。读了这本书我才发现，一等程序员更多的是用数学去解决计算机的普遍性问题，比如非对称加密质数解密，计算复杂性问题、怎么让编译器性能更快，为什么用关系型数据库代替网状数据库，我之后会结合图灵奖写几篇数学在计算机中的应用的博客。\n\n最后缅怀下左耳朵耗子，他对中国技术圈的贡献和积极的影响力绝对是值得肯定的。\n","source":"_posts/-📣📣-我看《图灵和ACM图灵奖》.md","raw":"---\ntitle: \"-📣📣-我看《图灵和ACM图灵奖》\"\ndate: 2023-05-27\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-f906638c0681ff7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n最近看的书比较多也比较杂，像《芯片战争》、《芯片简史》、《比尔盖茨传》、《数学之美》等等，这几本书里有提到图灵奖的信息，顺手买了一本《图灵和ACM图灵奖》，看了这本书对我震撼很大，原来计算机的大牛在搞这些东西，他们可以是程序员，更重要的是这些人更看重数学，用数学建立模型来构建和改善计算机生态。\n\n之前看过左耳朵耗子写 的《程序员三重门》，当时还没太懂，现在完全明白了，\n简单说：三等程序员写代码，二等程序员调试调优，一等程序员玩数学。\n\n这篇文章也是对自己将近十年的职业生涯的一个总结吧，知道自己在计算机这座神庙里干的什么活，以后前进的方向。\n\n之前一直想把**数学**和**算法**应用到工作中，相信很多人在给你灌输这样的想法（他们的主要目的还是让你交智商税），简单概括他们的说法，技术万法不离其宗，不学好算法你就不配做程序员，学会你就天下无敌了。但是随着时间的推移，你发现你就算学完这些对你的工作提升也不大，因为在工作中根本用不到，这个月学完下个月忘(没错就是以前的我🤪)，好像自己很笨一直冲不破这道门一样。\n\n其实这个道理很简单，我下面举个例子：\n\n比如你是军队一名步兵，你的日常作战任务就是瞄准开枪。你的长官说：小子，想做好一名步兵，你需要学习子弹和枪的设计原理，这样你才能更好的瞄准射击，才能做一名出色的步兵。\n\n当然，作为一个积极向上的步兵，你欣然接受了前辈长官的建议。因此你除了在作战中开枪射击之外，不打仗的时候就去研究各种枪炮原理、空气动力学，材料学啥的。然后你想在射击中应用你学到的这些原理，但是你发现学习动力学好像和射击有点关系，但是关系又不大，因为你是一名步兵，你的日常动作是瞄准开枪射击，你所处的场所没有为你提供改造枪和子弹的结构的环境或者条件。\n\n研究这些东西并没有错，因为你是一个想提升自己的人，但是你急于把所学转化成当前的步兵角色中，效果甚微，长此以往，你得到的只有对自己的质疑和前途的迷茫，因为你身边所有士兵都这样说的，想做好步兵就要学习枪炮原理，如果你学到的东西长期用不到，有可能是你学的东西不对，也有可能是你的职业错了。\n\n然而真正研究枪和子弹原理并应用的是兵工厂的枪炮师，这些东西是通过他们的倡导流行开来的，所以你学这些东西后就不要在想去做一个步兵了，你应该是去做兵工厂的炮枪师，这样才能发挥你的所学。\n\n这也是AK47发明者米哈伊留申·卡拉希尼柯夫的故事，二战中，卡拉希尼柯夫作为一名坦克手奔赴前线，在，在1941年10月手臂严重受伤，卡拉希尼柯夫在野战医院疗伤时，打听着伤员们常在一起抱怨苏联枪械的拙劣性能和前线德军使用的自动武器，于是萌发了设计轻武器的念头。回家养伤期间，他设计出第一支PPK-42冲锋枪，引起军方的注意。1943年，他进入正规学校，并被分配到武器试验场担任技术员，从此转型做了枪炮师。\n\n\n所以，如果想做好一名步兵，你还是应该把主要精力放在射击练习和熟系枪械上，同理\n作为一个三等程序员，你只要把程序**逻辑**搞明白，会看英语文档、懂点操作系统、网络和编译，再懂点设计模式，明白软件工程师需要注意什么就OK了，这一层的天花板很低，而且这些东西之间联系并不大，不需要你把这些东西全部融会贯通。\n\n\n当然，作为一名软件工程师，如果想进一步提升等级，就必须去研究性能优化，需要全面考量的那种，CPU、操作系统、网络、内存、程序等等（可以看看**《性能之巅》**)，真正把你学的算法和数学运用起来。换句话说，学完这些你就得准备转换程序员角色了，如果你下定决心转型，这一过程肯定是充满了曲折的，因为你要踏入陌生的领域，运用不同的思维和技能去解决你没有完全熟悉的问题。\n\n现在再看，那些把数学和算法挂在嘴边的人，你就知道什么叫蒙昧，他们能骗的也就是哪些喜欢揍捷径的人(有些PM都被忽悠去学了)或者说这些人本身就是枪炮师，他们只是站在自己的应用领域去学习这些东西，但是他们或者你自己无意间把这些强加在你自己身上了，过度神话了。通过这个思考，我更知道了读书的重要性，让你看到更大的世界，让你独立思考，不能人云亦云。\n\n总之，**算法**和**数学**和普通程序员关系不大，大家都知道编程的门槛有多低，现在小学生都学的懂。读了这本书我才发现，一等程序员更多的是用数学去解决计算机的普遍性问题，比如非对称加密质数解密，计算复杂性问题、怎么让编译器性能更快，为什么用关系型数据库代替网状数据库，我之后会结合图灵奖写几篇数学在计算机中的应用的博客。\n\n最后缅怀下左耳朵耗子，他对中国技术圈的贡献和积极的影响力绝对是值得肯定的。\n","slug":"-📣📣-我看《图灵和ACM图灵奖》","published":1,"updated":"2024-05-16T07:39:11.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ll00082omv7cgk8uzg","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f906638c0681ff7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>最近看的书比较多也比较杂，像《芯片战争》、《芯片简史》、《比尔盖茨传》、《数学之美》等等，这几本书里有提到图灵奖的信息，顺手买了一本《图灵和ACM图灵奖》，看了这本书对我震撼很大，原来计算机的大牛在搞这些东西，他们可以是程序员，更重要的是这些人更看重数学，用数学建立模型来构建和改善计算机生态。</p>\n<p>之前看过左耳朵耗子写 的《程序员三重门》，当时还没太懂，现在完全明白了，<br>简单说：三等程序员写代码，二等程序员调试调优，一等程序员玩数学。</p>\n<p>这篇文章也是对自己将近十年的职业生涯的一个总结吧，知道自己在计算机这座神庙里干的什么活，以后前进的方向。</p>\n<p>之前一直想把<strong>数学</strong>和<strong>算法</strong>应用到工作中，相信很多人在给你灌输这样的想法（他们的主要目的还是让你交智商税），简单概括他们的说法，技术万法不离其宗，不学好算法你就不配做程序员，学会你就天下无敌了。但是随着时间的推移，你发现你就算学完这些对你的工作提升也不大，因为在工作中根本用不到，这个月学完下个月忘(没错就是以前的我🤪)，好像自己很笨一直冲不破这道门一样。</p>\n<p>其实这个道理很简单，我下面举个例子：</p>\n<p>比如你是军队一名步兵，你的日常作战任务就是瞄准开枪。你的长官说：小子，想做好一名步兵，你需要学习子弹和枪的设计原理，这样你才能更好的瞄准射击，才能做一名出色的步兵。</p>\n<p>当然，作为一个积极向上的步兵，你欣然接受了前辈长官的建议。因此你除了在作战中开枪射击之外，不打仗的时候就去研究各种枪炮原理、空气动力学，材料学啥的。然后你想在射击中应用你学到的这些原理，但是你发现学习动力学好像和射击有点关系，但是关系又不大，因为你是一名步兵，你的日常动作是瞄准开枪射击，你所处的场所没有为你提供改造枪和子弹的结构的环境或者条件。</p>\n<p>研究这些东西并没有错，因为你是一个想提升自己的人，但是你急于把所学转化成当前的步兵角色中，效果甚微，长此以往，你得到的只有对自己的质疑和前途的迷茫，因为你身边所有士兵都这样说的，想做好步兵就要学习枪炮原理，如果你学到的东西长期用不到，有可能是你学的东西不对，也有可能是你的职业错了。</p>\n<p>然而真正研究枪和子弹原理并应用的是兵工厂的枪炮师，这些东西是通过他们的倡导流行开来的，所以你学这些东西后就不要在想去做一个步兵了，你应该是去做兵工厂的炮枪师，这样才能发挥你的所学。</p>\n<p>这也是AK47发明者米哈伊留申·卡拉希尼柯夫的故事，二战中，卡拉希尼柯夫作为一名坦克手奔赴前线，在，在1941年10月手臂严重受伤，卡拉希尼柯夫在野战医院疗伤时，打听着伤员们常在一起抱怨苏联枪械的拙劣性能和前线德军使用的自动武器，于是萌发了设计轻武器的念头。回家养伤期间，他设计出第一支PPK-42冲锋枪，引起军方的注意。1943年，他进入正规学校，并被分配到武器试验场担任技术员，从此转型做了枪炮师。</p>\n<p>所以，如果想做好一名步兵，你还是应该把主要精力放在射击练习和熟系枪械上，同理<br>作为一个三等程序员，你只要把程序<strong>逻辑</strong>搞明白，会看英语文档、懂点操作系统、网络和编译，再懂点设计模式，明白软件工程师需要注意什么就OK了，这一层的天花板很低，而且这些东西之间联系并不大，不需要你把这些东西全部融会贯通。</p>\n<p>当然，作为一名软件工程师，如果想进一步提升等级，就必须去研究性能优化，需要全面考量的那种，CPU、操作系统、网络、内存、程序等等（可以看看<strong>《性能之巅》</strong>)，真正把你学的算法和数学运用起来。换句话说，学完这些你就得准备转换程序员角色了，如果你下定决心转型，这一过程肯定是充满了曲折的，因为你要踏入陌生的领域，运用不同的思维和技能去解决你没有完全熟悉的问题。</p>\n<p>现在再看，那些把数学和算法挂在嘴边的人，你就知道什么叫蒙昧，他们能骗的也就是哪些喜欢揍捷径的人(有些PM都被忽悠去学了)或者说这些人本身就是枪炮师，他们只是站在自己的应用领域去学习这些东西，但是他们或者你自己无意间把这些强加在你自己身上了，过度神话了。通过这个思考，我更知道了读书的重要性，让你看到更大的世界，让你独立思考，不能人云亦云。</p>\n<p>总之，<strong>算法</strong>和<strong>数学</strong>和普通程序员关系不大，大家都知道编程的门槛有多低，现在小学生都学的懂。读了这本书我才发现，一等程序员更多的是用数学去解决计算机的普遍性问题，比如非对称加密质数解密，计算复杂性问题、怎么让编译器性能更快，为什么用关系型数据库代替网状数据库，我之后会结合图灵奖写几篇数学在计算机中的应用的博客。</p>\n<p>最后缅怀下左耳朵耗子，他对中国技术圈的贡献和积极的影响力绝对是值得肯定的。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f906638c0681ff7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>最近看的书比较多也比较杂，像《芯片战争》、《芯片简史》、《比尔盖茨传》、《数学之美》等等，这几本书里有提到图灵奖的信息，顺手买了一本《图灵和ACM图灵奖》，看了这本书对我震撼很大，原来计算机的大牛在搞这些东西，他们可以是程序员，更重要的是这些人更看重数学，用数学建立模型来构建和改善计算机生态。</p>\n<p>之前看过左耳朵耗子写 的《程序员三重门》，当时还没太懂，现在完全明白了，<br>简单说：三等程序员写代码，二等程序员调试调优，一等程序员玩数学。</p>\n<p>这篇文章也是对自己将近十年的职业生涯的一个总结吧，知道自己在计算机这座神庙里干的什么活，以后前进的方向。</p>\n<p>之前一直想把<strong>数学</strong>和<strong>算法</strong>应用到工作中，相信很多人在给你灌输这样的想法（他们的主要目的还是让你交智商税），简单概括他们的说法，技术万法不离其宗，不学好算法你就不配做程序员，学会你就天下无敌了。但是随着时间的推移，你发现你就算学完这些对你的工作提升也不大，因为在工作中根本用不到，这个月学完下个月忘(没错就是以前的我🤪)，好像自己很笨一直冲不破这道门一样。</p>\n<p>其实这个道理很简单，我下面举个例子：</p>\n<p>比如你是军队一名步兵，你的日常作战任务就是瞄准开枪。你的长官说：小子，想做好一名步兵，你需要学习子弹和枪的设计原理，这样你才能更好的瞄准射击，才能做一名出色的步兵。</p>\n<p>当然，作为一个积极向上的步兵，你欣然接受了前辈长官的建议。因此你除了在作战中开枪射击之外，不打仗的时候就去研究各种枪炮原理、空气动力学，材料学啥的。然后你想在射击中应用你学到的这些原理，但是你发现学习动力学好像和射击有点关系，但是关系又不大，因为你是一名步兵，你的日常动作是瞄准开枪射击，你所处的场所没有为你提供改造枪和子弹的结构的环境或者条件。</p>\n<p>研究这些东西并没有错，因为你是一个想提升自己的人，但是你急于把所学转化成当前的步兵角色中，效果甚微，长此以往，你得到的只有对自己的质疑和前途的迷茫，因为你身边所有士兵都这样说的，想做好步兵就要学习枪炮原理，如果你学到的东西长期用不到，有可能是你学的东西不对，也有可能是你的职业错了。</p>\n<p>然而真正研究枪和子弹原理并应用的是兵工厂的枪炮师，这些东西是通过他们的倡导流行开来的，所以你学这些东西后就不要在想去做一个步兵了，你应该是去做兵工厂的炮枪师，这样才能发挥你的所学。</p>\n<p>这也是AK47发明者米哈伊留申·卡拉希尼柯夫的故事，二战中，卡拉希尼柯夫作为一名坦克手奔赴前线，在，在1941年10月手臂严重受伤，卡拉希尼柯夫在野战医院疗伤时，打听着伤员们常在一起抱怨苏联枪械的拙劣性能和前线德军使用的自动武器，于是萌发了设计轻武器的念头。回家养伤期间，他设计出第一支PPK-42冲锋枪，引起军方的注意。1943年，他进入正规学校，并被分配到武器试验场担任技术员，从此转型做了枪炮师。</p>\n<p>所以，如果想做好一名步兵，你还是应该把主要精力放在射击练习和熟系枪械上，同理<br>作为一个三等程序员，你只要把程序<strong>逻辑</strong>搞明白，会看英语文档、懂点操作系统、网络和编译，再懂点设计模式，明白软件工程师需要注意什么就OK了，这一层的天花板很低，而且这些东西之间联系并不大，不需要你把这些东西全部融会贯通。</p>\n<p>当然，作为一名软件工程师，如果想进一步提升等级，就必须去研究性能优化，需要全面考量的那种，CPU、操作系统、网络、内存、程序等等（可以看看<strong>《性能之巅》</strong>)，真正把你学的算法和数学运用起来。换句话说，学完这些你就得准备转换程序员角色了，如果你下定决心转型，这一过程肯定是充满了曲折的，因为你要踏入陌生的领域，运用不同的思维和技能去解决你没有完全熟悉的问题。</p>\n<p>现在再看，那些把数学和算法挂在嘴边的人，你就知道什么叫蒙昧，他们能骗的也就是哪些喜欢揍捷径的人(有些PM都被忽悠去学了)或者说这些人本身就是枪炮师，他们只是站在自己的应用领域去学习这些东西，但是他们或者你自己无意间把这些强加在你自己身上了，过度神话了。通过这个思考，我更知道了读书的重要性，让你看到更大的世界，让你独立思考，不能人云亦云。</p>\n<p>总之，<strong>算法</strong>和<strong>数学</strong>和普通程序员关系不大，大家都知道编程的门槛有多低，现在小学生都学的懂。读了这本书我才发现，一等程序员更多的是用数学去解决计算机的普遍性问题，比如非对称加密质数解密，计算复杂性问题、怎么让编译器性能更快，为什么用关系型数据库代替网状数据库，我之后会结合图灵奖写几篇数学在计算机中的应用的博客。</p>\n<p>最后缅怀下左耳朵耗子，他对中国技术圈的贡献和积极的影响力绝对是值得肯定的。</p>\n"},{"title":"-📣📣--软件工程师的十大层次","date":"2023-06-24T16:00:00.000Z","_content":"自西方文艺复兴以来，中国在自然科学方面落后西方很多，软件领域也不例外。当然现在中国的许多程序员们对此可能有许多不同的意见，有些人认为中国的程序员水平远落后于西方，有些则认为中国的程序员个人能力并不比西方的程序员差，只是整个软件产业落后而已。\n\n那么，到底中国的程序员水平比西方程序员水平差，还是中国有许多优秀的程序员达到或超过了西方程序员同等水平呢？要解决这个问题，必须先知道程序员有多少种技术层级，每个层级需要什么样的技术水平，然后再比较中国和西方在各个技术层级的人数，就可以知道到底有没有差距，差距有多大。\n当然，对于如何划分程序员的技术层级，不同公司或不同人会有不同的划分标准，下面的划分仅代表个人的观点，如有不当之处，还请砸板砖予以纠正。\n \n### 第1层 菜鸟\n   第1层楼属于地板层，迈进这层楼的门槛是很低的。基本上懂计算机的基本操作，了解计算机专业的一些基础知识，掌握一门基本的编程语言如C/C++，或者Java，或者JavaScript，…，均可入门迈进这层。\n   \n在这层上，中国有着绝对的优势，除了从计算机专业毕业的众多人数外，还有大量的通信、自动化、数学等相关专业的人士进入这一行，此外还有众多的其他专业转行的人士，人数绝对比西方多出甚多。并且还有一个优势就是我们这层人员的平均智商比西方肯定高。\n\n没有多少人愿意一辈子做菜鸟，因为做”菜鸟”的滋味实在是不咋的，整天被老大们吆喝着去装装机器，搭建一下测试环境，或者对照着别人写好的测试用例做一些黑盒测试，好一点的可以被安排去写一点测试代码。当然如果运气”好”的话，碰到了国内的一些作坊式的公司，也有机会去写一些正式的代码。\n所以，菜鸟们总是在努力学习，希望爬更高的一层楼去。\n \n###  第2层 大虾\n   从第1层爬到第2层相对容易一些，以C/C++程序员为例，只要熟练掌握C/C++编程语言，掌握C标准库和常用的各种数据结构算法，掌握STL的基本实现和使用方法，掌握多线程编程基础知识，掌握一种开发环境，再对各种操作系统的API都去使用一下，搞网络编程的当然对socket编程要好好掌握一下，然后再学习一些面向对象的设计知识和设计模式等，学习一些测试、软件工程和质量控制的基本知识，大部分人经过2～3年的努力，都可以爬到第2层，晋升为”大虾”。\n\n中国的”大虾”数量和”菜鸟”数量估计不会少多少，所以这层上仍然远领先于西方。\n 大虾们通常还是有些自知之明，知道自己只能实现一些简单的功能，做不了大的东西，有时候还会遇到一些疑难问题给卡住，所以他们对那些大牛级的人物通常是非常崇拜的，国外的如Robert C. Martin、Linus Torvalds，国内的如求伯君、王志东等通常是他们崇拜的对象。其中的有些人希望有一天也能达到这些大牛级人物的水平，所以他们继续往楼上爬去。\n \n###  第3层 牛人\n由于”大虾”们经常被一些疑难问题给卡住，所以有了”大虾”们只好继续学习，他们需要将原来所学的知识进一步熟练掌握，比如以熟练掌握C++编程语言为例，除了学一些基础性的C++书籍如《C++ Primer》，《Effective C++》，《Think in C++》，《Exception C++》等之外，更重要的是需要了解C++编译器的原理和实现机制，了解操作系统中的内部机制如内存管理、进程和线程的管理机制，了解处理器的基础知识和代码优化的方法，此外还需要更深入地学习更多的数据结构与算法，掌握更深入的测试和调试知识以及质量管理和控制方法，对各种设计方法有更好的理解等。\n\n学习上面说的这些知识不是一挥而就的，不看个三五十本书并掌握它是做不到的。以数据结构算法来说，至少要看个5～10本这方面的著作；以软件设计来说，光懂结构化设计、面向对象设计和一些设计模式是不够的，还要了解软件架构设计、交互设计、面向方面的设计、面向使用的设计、面向数据结构算法的设计、情感化设计等，否则是很难进到这个楼层的。\n\n当然除了上面说的知识外，大虾们还需要去学习各种经验和技巧。当然这点难不倒他们，现在出版的书籍众多，网络上的技术文章更是不胜数，然后再去各种专业论坛里泡一泡，把这些书籍和文章中的各种经验、技能、技巧掌握下来，再去学习一些知名的开源项目如Apache或Linux操作系统的源代码实现等。此时对付一般的疑难问题通常都不在话下，菜鸟和大虾们会觉得你很”牛”，你也就爬到了第3层，晋升为”牛人”了。\n\n看了上面所讲的要求，可能有些大虾要晕过去了，成为牛人要学这么多东西啊！要求是不是太高了？其实要求一点也不高，这么点东西都掌握不了的话，怎么能让别人觉得你”牛”呢？\n需要提一下的是，进入多核时代后，从第2层爬到第3层增加了一道多核编程的门槛。当然要迈过这道门槛并不难，已经有很多前辈高人迈进了这道门槛，只要循着他们的足迹前进就可以了。想迈进这道门槛者不妨去学习一下TBB开源项目的源代码(链接：http://www.threadingbuildingblocks.org/)，然后上Intel的博客（http://softwareblogs-zho.intel.com/）和多核论坛（http://forum.csdn.net/Intel/IntelMulti-core/）去看看相关文章，再买上几本相关的书籍学习一下。\n在国内， 一旦成为”牛人”，通常可以到许多知名的公司里去，运气好者可以挂上一个架构师的头衔，甚至挂上一个”首席架构师”或者”首席xx学家”的头衔也不足为奇。有不少爬到这层的人就以为到了楼顶了，可以眼睛往天上看了，开始目空一切起来，以为自己什么都可以做了，什么都懂了，经常在网络上乱砸板砖是这个群体的最好写照。由此也看出，国内的牛人数量仍然众多，远多于西方的牛人数量，在这层上仍然是领先的。\n\n也有不少谦虚的”牛人”，知道自己现在还不到半桶水阶段。他们深知爬楼的游戏就像猴子上树一样，往下看是笑脸，往上看是屁股。为了多看笑脸，少看屁股，他们并没有在此停步不前，而是继续寻找到更上一层的楼梯，以便继续往上爬。\n \n###  第4层 大牛\n从第3层爬到第4层可不像上面说过的那几层一样容易，要成为大牛的话，你必须要能做牛人们做不了的事情，解决牛人们解决不了问题。比如牛人们通常都不懂写操作系统，不会写编译器，不懂得TCP/IP协议的底层实现，如果你有能力将其中的任何一个实现得象模象样的话，那么你就从牛人升级为”大牛”了。\n\n当然，由于各个专业领域的差别，这里举操作系统、编译器、TCP/IP协议只是作为例子，并不代表成为”大牛”一定需要掌握这些知识，以时下热门的多核编程来说，如果你能比牛人们更深入地掌握其中的各种思想原理，能更加自如的运用，并有能力去实现一个象开源项目TBB库一样的东西，也可以成为”大牛”，又或者你能写出一个类似Apache一样的服务器，或者写出一个数据库，都可以成为”大牛”。\n\n要成为”大牛”并不是一件简单的事情，需要付出比牛人们多得多的努力，一般来说，至少要看过200~400本左右的专业书籍并好好掌握它，除此之外，还得经常关注网络和期刊杂志上的各种最新信息。\n\n当”牛人”晋升为”大牛”，让”牛人们”发现有比他们更牛的人时，对”牛人”们的心灵的震撼是可想而知的。由于牛人们的数量庞大，并且牛人对大虾和菜鸟阶层有言传身教的影响，所以大牛们通常能获得非常高的社会知名度，几乎可以用”引无数菜鸟、大虾、牛人竞折腰”来形容，看看前面提过的Linus Torvalds等大牛，应该知道此言不虚。\n\n虽然成为”大牛”的条件看起来似乎很高似的，但是这层楼并不是很难爬的一层，只要通过一定的努力，素质不是很差，还是有许多”牛人”可以爬到这一层的。由此可知，”大牛”这个楼层的人数其实并不像想像的那么少，例如比尔·盖茨之类的人好像也是属于这一层的。\n\n由于”大牛”这层的人数不少，所以也很难统计除到底是中国的”大牛”数量多还是西方的大牛数量多？我估计应该是个旗鼓相当的数量，或者中国的”大牛”们会更多一些。\n\n看到这里，可能会有很多人会以为我在这里说瞎话，Linus Torvalds写出了著名的Linux操作系统，我国并没有人写出过类似的东西啊，我国的”大牛”怎么能和西方的比呢? 不知大家注意到没有，Linus Torvalds只是写出了一个”象模象样”的操作系统雏形，Linux后来真正发展成闻名全球的开源操作系统期间，完全是因为许多支持开源的商业公司如IBM等，派出了许多比Linus Torvalds更高楼层的幕后英雄在里面把它开发出来的。\n\n可能有些菜鸟认为Linus Torvalds是程序员中的上帝，不妨说个小故事：\nLinus，Richard Stallman和Don Knuth（高德纳）一同参加一个会议。\nLinus 说：”上帝说我创造了世界上最优秀的操作系统。”\n\nRichard Stallman自然不甘示弱地说：”上帝说我创造了世界上最好用的编译器。”\nDon Knuth一脸疑惑的说：”等等，等等，我什么时候说过这些话？”\n\n由此可以看出，Linus Torvalds的技术水平并不像想像中那么高，只是”牛人”和”大虾”觉得”大牛”比他们更牛吧了。在我国，有一些当时还处于”大虾”层的人物，也能写出介绍如何写操作系统的书，并且书写得非常出色，而且写出了一个有那么一点点象模象样的操作系统来。我想中国的”大牛”们是不会比西方差的，之所以没有人写出类似的商业产品来，完全是社会环境的原因，并不是技术能力达不到的原因。\n\n“大牛”们之所以成为大牛，主要的原因是因为把”牛人”给盖了下去，并不是他们自己觉得如何牛。也许有很多菜鸟、大虾甚至牛人觉得”大牛”这层已经到顶了，但大多数”大牛”估计应该是有自知之明的，他们知道自己现在还没有爬到半山腰，也就勉强能算个半桶水的水平，其中有些爬到这层没有累趴下，仍然能量充沛，并且又有志者，还是会继续往更上一层楼爬的。\n\n看到这里，也许有些菜鸟、大虾、牛人想不明白了，还有比”大牛”们更高的楼层，那会是什么样的楼层？下面就来看看第5层楼的奥妙。\n \n###  第5层 专家\n当大牛们真正动手做一个操作系统或者类似的其他软件时，他们就会发现自己的基本功仍然有很多的不足。以内存管理为例，如果直接抄袭Linux或者其他开源操作系统的内存管理算法，会被人看不起的，如果自动动手实现一个内存管理算法，他会发现现在有关内存管理方法的算法数量众多，自己并没有全部学过和实践过，不知道到底该用那种内存管理算法。\n\n看到这里，可能有些人已经明白第5层楼的奥妙了，那就是需要做基础研究，当然在计算机里，最重要的就是”计算”二字，程序员要做基础研究，主要的内容就是研究非数值”计算”。\n\n非数值计算可是一个非常庞大的领域，不仅时下热门的”多核计算”与”云计算”属于非数值计算范畴，就是软件需求、设计、测试、调试、评估、质量控制、软件工程等本质上也属于非数值计算的范畴，甚至芯片硬件设计也同样牵涉到非数值计算。如果你还没有真正领悟”计算”二字的含义，那么你就没有机会进到这层楼来。\n可能有人仍然没有明白为什么比尔·盖茨被划在了大牛层，没有进到这层来。虽然比尔·盖茨大学未毕业，学历不够，但是家有藏书2万余册，进入软件这个行业比绝大部分人都早，撇开他的商业才能不谈，即使只看他的技术水平，也可以算得上是学富五车，顶上几个普通的计算机软件博士之和是没有问题的，比起Linus Torvalds之类的”大牛”们应该技高一筹才对，怎么还进不了这层楼呢？\n\n非常遗憾的是，从Windows操作系统的实现来看，其对计算的理解是很肤浅的，如果把Google对计算方面的理解比做大学生，比尔·盖茨只能算做一个初中生，所以比尔·盖茨永远只能做个大牛人，成不了”专家”。\n\n看到这里，也许国内的大牛们要高兴起来了，原来比尔·盖茨也只和我等在同一个层次，只要再升一层就可以超越比尔·盖茨了。不过爬到这层可没有从”牛人”升为”大牛”那么简单，人家比尔·盖茨都家有2万多册书，让你看个500~1000本以上的专业书籍并掌握好它应该要求不高吧。当然，这并不是主要的条件，更重要的是，需要到专业的学术站点去学习了，到ACM，IEEE，Elsevier，SpringerLink，SIAM等地方去下载论文应该成为你的定期功课，使用Google搜索引擎中的学术搜索更是应该成为你的日常必修课。此外，你还得经常关注是否有与你研究相关的开源项目冒出来，例如当听到有TBB这样针对多核的开源项目时，你应该第一时间到Google里输入”TBB”搜索一下，将其源代码下载下来好好研究一番，这样也许你的一只脚已经快迈进了这层楼的门槛。\n\n当你象我上面说的那样去做了以后，随着时间的推移，总会有某天，你发现，在很多小的领域里，你已经学不到什么新东西了，所有最新出来的研究成果你几乎都知道。此时你会发现你比在做”牛人”和”大牛”时的水平不知高出了多少，但是你一点也”牛”不起来，因为你学的知识和思想都是别人提出来的，你自己并没有多少自己的知识和思想分享给别人，所以你还得继续往楼上爬才行。\n我不知道国内的”专家”到底有多少，不过有一点可以肯定的是，如果把那些专门蒙大家的”砖家”也算上的话，我们的砖家比西方的要多得多。\n \n###  第6层 学者\n当”专家”们想继续往上一层楼爬时，他们几乎一眼就可以看到楼梯的入口，不过令他们吃惊的是，楼梯入口处竖了一道高高的门槛，上面写着”创新”二字。不幸的是，大多数人在爬到第5层楼时已经体能消耗过度，无力翻过这道门槛。\n\n有少数体能充足者，可以轻易翻越这道门槛，但是并不意味着体力消耗过度者就无法翻越，因为你只是暂时还没有掌握恢复体能的方法而已，当掌握了恢复体能的方法，将体能恢复后，你就可以轻易地翻越这道门槛了。\n\n怎么才能将体能恢复呢？我们的老祖宗”孔子”早就教导过我们”温故而知新”，在英文里，研究的单词是”research”，其前缀”re”和”search”分别是什么意思不用我解释吧。或许有些人觉得”温故而知新”和”research”有些抽象，不好理解，我再给打个简单的比方，比如你在爬一座高山，爬了半天，中途体力不支，怎么恢复体力呢？自然是休息一下，重新进食一些食物，体力很快就可以得到恢复。\n\n由此可知，对体能消耗过度者，休息＋重新进食通常是恢复体能的最佳选择。可惜的是，国内的老板们并不懂得这点，他们的公司里不仅连正常国家规定的休息时间都不给足，有些公司甚至有员工”过劳死”出现。所以国内能翻越”创新”这道门槛的人是”少之又少”，和西方比起来估计是数量级的差别。\n\n再说说重新进食的问题，这个重新进食是有讲究的，需要进食一些基础性易消化的简单食物，不能进食山珍海味级的复杂食物，否则很难快速吸收。以查找为例，并不是去天天盯着那些复杂的查找结构和算法进行研究，你需要做的是将二分查找、哈希查找、普通二叉树查找等基础性的知识好好地复习几遍。\n\n以哈希查找为例，首先你需要去将各种冲突解决方法如链式结构、二次哈希等编写一遍，再试试不同种类的哈希函数，然后还需要试试在硬盘中如何实现哈希查找，并考虑数据从硬盘读到内存后，如何组织硬盘中的数据才能快速地在内存中构建出哈希表来，…，这样你可能需要将一个哈希表写上十几个不同的版本，并比较各个版本的性能、功能方面的区别和适用范围。\n\n总之，对任何一种简单的东西，你需要考虑各种各样的需求，以需求来驱动研究。最后你将各种最基础性的查找结构和算法都了然于胸后，或许某天你再看其他更复杂的查找算法，或者你在散步时，脑袋里灵光一现，突然间就发现了更好的方法，也就从专家晋升为”学者”了。\n\n学者所做的事情，通常都是在前人的基础上，进行一些小的优化和改进，例如别人发明了链式基数排序的方法，你第1个发现使用一定的方法，可以用数组替代链表进行基数排序，性能还能得到进一步提高。\n由于学者需要的只是一些小的优化改进，因此中国还是有一定数量的学者。不过和国外的数量比起来，估计少了一个数量级而已。\n也许有人会觉得现在中国许多公司申请专利的数量达到甚至超过西方发达国家了，我们的学者数量应该不会比他们少多少。因此，有必要把专利和这里说的创新的区别解释一下。\n\n所谓专利者，只要是以前没有的，新的东西，都可以申请专利；甚至是以前有的东西，你把他用到了一个新的领域的产品里去，也可以申请专利。比如你在房子里造一个水泥柱子，只要以前没有人就这件事申请专利，那么你就可以申请专利，并且下次你把水泥柱子挪一个位置，又可以申请一个新的专利；或者你在一个柜子上打上几个孔，下次又把孔的位置改一改，…，均可申请专利。\n\n这层楼里所说的创新，是指学术层面的创新，是基础研究方面的创新，和专利的概念是完全不同的，难度也是完全不同的。你即使申请了一万个象那种打孔一类的专利，加起来也够不到这层楼里的一个创新。\n\n当你爬到第6层楼时，你也许会有一种突破极限的快感，因为你终于把那道高高的写着”创新”二字的门槛给翻过去了，实现了”0”的突破。这时，你也许有一种”独上高楼，欲望尽天涯路”的感觉，但是很快你会发现看到的都是比较近的路，远处的路根本看不清楚。如果你还有足够的体力的话，你会想爬到更高一层的楼层去。\n \n###  第7层 大师\n从第6层楼爬到第7层楼，并没有多少捷径可走，主要看你有没有足够的能量。你如果能象Hoare一样设计出一个快速排序的算法；或者象Eugene W. Myers一样设计出了一个用编辑图的最短路径模型来解决diff问题的算法；或者象M.J.D. Powell一样提出了一个能够处理非线性规划问题的SQP方法；或者你发现基于比较的排序算法，它的复杂度下界为O(NLogN)；或者你发现用栈可以将递归的算法变成非递归的；或者你设计出一个红黑树或者AVL树之类的查找结构；或者你设计出一个象C++或Java一样的语言；或者你发明了UML；…，你就爬到了第7层，晋升为”大师”了。\n\n上面举的这些例子中，其中有些人站的楼层比这层高，这里只是为了形象说明而举例他们的某个成就。从上面列出的一些大师的贡献可以看出，成为大师必须要有较大的贡献。首先解决问题必须是比较重要的，其次你要比前辈们在某方面有一个较大的提高，或者你解决的是一个全新的以前没有解决过的问题；最重要的是，主要的思路和方法必须是你自己提供的，不再是在别人的思路基础上进行的优化和改进。\n看了上面这些要求，如果能量不够的话，你也许会觉得有些困难，所以不是每个人都能成为”大师”的。中国软件业里能称得上是”大师”的人，用屈指可数来形容，估计是绰绰有余。值得一提的是，国外的”大师”就象我们的”大牛”一样满天飞的多。\n\n我把我猜测本国有可能进到这层楼的大师列一下，以起个抛砖引玉的作用。汉王的”手写识别”技术由于是完全保密的，不知道它里面用了什么思想，原创思想占的比重有多少，因此不知道该把它划到这层楼还是更高一层楼去。原山东大学王小云教授破解DES和MD5算法时，用到的方法不知道是不是完全原创的，如果是的话也可进到这层楼来。\n陈景润虽然没有彻底解决哥德巴赫猜想，但他在解决问题时所用的方法是创新的，因此也可以进到这层楼来。当然，如果能彻底解决哥德巴赫猜想，那么可以算到更高的楼层去。\n\n求伯君和王志东等大牛们，他们在做WPS和表格处理之类的软件时，不知是否有较大的原创算法在里面，如果有的话就算我错把他们划到了大牛层。由于所学有限，不知道国内还有那些人能够得上”大师”的级别，或许有少量做研究的教授、院士们，可以达到这个级别，有知道的不妨回个帖子晾一晾。\n\n鉴于”大师”这个称号的光环效应，相信有不少人梦想着成为”大师”。或许你看了前面举的一些大师的例子，你会觉得要成为大师非常困难。不妨说一下，现在有一条通往”大师”之路的捷径打开了，那就是多核计算领域，有大量的处女地等待大家去挖掘。\n以前在单核时代开发的各种算法，现在都需要改写成并行的。数据结构与算法、图像处理、数值计算、操作系统、编译器、测试调试等各个领域，都存在大量的机会，可以让你进到这层楼来，甚至有可能让你进到更高一层楼去。\n \n### 第8层 科学家\n科学家向来都是一个神圣的称号，因此我把他放在了“大师”之上。要成为科学家，你的贡献必须超越大师，不妨随便举一些例子。\n\n如果你象Dijkstra一样设计了ALGOL语言，提出了程序设计的三种基本结构：顺序、选择、循环，那么你可以爬到第8层楼来。顺便说一下，即使抛开这个成果，Dijkstra凭他的PV操作和信号量概念的提出，同样可以进到这层楼。\n\n如果你象Don Knuth一样，是数据结构与算法这门学科的重要奠基者，你也可以进到这层楼来。当然，数据结构和算法这门学科不是某个人开创的，是许多大师和科学家集体开创的。\n\n如果你象巴科斯一样发明了Fortran语言，并提出了巴科斯范式，对高级程序语言的发展起了重要作用，你也可以进到这层楼来。\n\n或者你象Ken Thompson、Dennis Ritchie一样发明了Unix操作系统和功能强大、高效、灵活、表达力强的C语言，对操作系统理论和高级编程语言均作出重大贡献，那么你也可以进到这层楼来。\n\n或者你有Frederick P. Brooks一样机会，可以去领导开发IBM的大型计算机System/360和OS/360操作系统，并在失败后反思总结，写出《人月神话》，对软件工程作出里程碑式的贡献，你也可以进到这层来。\n\n或者你提出了面向对象设计的基本思想，或者你设计了互联网的TCP/IP协议，或者你象Steven A.Cook一样奠定NP完全性的理论基础，或者你象Frances Allen一样专注于并行计算来实现编译技术，在编译优化理论和技术取得基础性的成就，…，均可进入这层。\n\n当然，如果你发明了C++语言或者Java语言，你进不到这层来，因为你用到的主要思想都是这层楼中的科学家提出的，你自己并没有没有多少原创思想在里面。\n\n看了上面列出的科学家的成就，你会发现，要成为“科学家”，通常要开创一门分支学科，或者是这个分支学科的奠基者，或者在某个分支学科里作出里程碑式的重大贡献。如果做不到这些的话，那么你能象Andrew C. Yao（姚期智）一样在对计算理论的多个方向如伪随机数生成，密码学与通信复杂度等各个方向上作出重要贡献，成为集大成者，也可以进入这层楼。\n\n成为“科学家”后，如果你有幸象Dijkstra一样，出现在一个非常重视科学的国度。当你去世时，你家乡满城的人都会自动地去为你送葬。不过如果不幸生错地方的话，能不挨“板砖”估计就算万幸了。\n\n从上面随便举的一些例子中，你可能能猜到，西方科学家的数量是非常多的，于是你会想中国应该也有少量的科学家吧？我可以很负责任地告诉你一个不幸的结果，中国本土产生的科学家的数量为0。目前在国内，软件领域的唯一的科学家就是上面提过的姚期智，还是国外请回来的，并不是本土产生的。\n\n可能你不同意我说的本土科学家数量为0的结论，因为你经常看到有许多公司里都有所谓“首席XX科学家”的头衔。我想说的是，这些所谓的“首席XX科学家”都是远远够不到这层楼的级别的，有些人的水平估计也就是一个“牛人”或“大牛”的级别，好一点的最多也就一个“学者”的级别。尤其是那些被称作“首席经X学家”的，基本上可以把称号改为“首席坑大家”。\n\n虽然我国没有人能爬到这层楼上来，但是西方国家仍然有许多人爬到了比这层更高的楼上。如果要问我们比西方落后多少？那么可以简单地回答为：“落后了三层楼”。下面就来看看我们做梦都没有到过的更高一层楼的秘密。\n \n### 第9层 大科学家\n进入这层楼的门槛通常需要一些运气，比如某天有个苹果砸到你头上时，你碰巧发现了万有引力，那么你可以进到这层楼来。当然，万有引力几百年前就被人发现了，如果你现在到处嚷嚷着说你发现了万有引力，恐怕马上会有人打110，然后警察会把你送到不正常人类的聚集地去。因此，这里举万有引力的例子，只是说你要有类似的成就才能进到这层楼来。\n\n牛顿发现万有引力定律开创了经典物理运动力学这门学科，如果你也能开创一门大的学科，那么你就从科学家晋升为“大科学家”。比如爱因斯坦创建了相对论，从一个小职员变成了大科学家。当然大科学家可远不止这两人，数学界里比物理学界更是多得多，如欧几里得创建了平面几何，笛卡尔开创解析几何，还有欧拉、高斯、莱布尼茨等数不清的人物，跟计算相关的大科学家则有图灵等人。\n\n从上面列出的一些大科学家可以发现，他们的成就不仅是开创了一个大的学科，更重要的是他们的成就上升到了“公理”的层面。发现公理通常是需要一点运气的，如果你的运气不够好的话，另外还有一个笨办法也可以进到这层楼来，那就是成为集大成者。例如冯·诺伊曼，对数学的所有分支都非常了解，许多领域都有较大的贡献，即使撇开他对计算机的开创贡献，成为大科学家照样绰绰有余。\n\n当然，程序员们最关心的是自己有没有机会变成大科学家。既然计算机这门大学科的开创性成果早就被冯·诺伊曼、图灵等人摘走了，那么程序员们是不是没有机会变成大科学家了呢？我们的古人说得好：“江山代有才人出，各领风骚数百年”，现在在计算机这门学科下面诞生了许多非常重要的大的分支，所以你还是有足够的机会进到这层楼的。\n\n如果你能够彻底解决自然语言理解（机器翻译）这门学科中的核心问题， 或者你在人工智能或者机器视觉（图像识别）方面有突破性的发现，那么你同样可以轻易地晋升为“大科学家”。这样当某天你老了去世时，或许那天国人已经觉醒，你也能享受到如Dijkstra一样的待遇，有满城甚至全国的人去为你送葬。\n\n现在还剩下另外一个大家感兴趣的问题没有讨论，那就是这层中已经出现了牛顿、爱因斯坦、高斯等我们平常人都认为是顶级的科学家，是不是这层已经是楼顶了呢？相信还记得本文标题的人应该知道现在仅仅是第9层，还有第10层没有到达呢。可能不少人现在要感到困惑了，难道还有人站在比牛顿、爱因斯坦、高斯等人更高的楼层上？\n这个世界上确实存在可以用一只手的手指数得清的那么几个人，他们爬到了第10层楼上。因此，第10层楼不是虚构的，而是确实存在的。如果对此有疑惑或者认为我在胡诌一番的话，那么不妨继续往下看下去，窥一下第10层楼的秘密。\n \n###  第10层 大哲\n看了这层楼的名字“大哲”，可能不少人已经猜到了这层楼的秘密，那就是你的成果必须要上升到哲学的高度，你才有机会能进到这层来。\n\n当然，上升到哲学高度只是一个必要条件，牛顿的万有引力似乎也上升到了哲学的高度，因为不知道引力到底是怎么来的，但是牛顿没有被划到这一层，因为进到这层还有另外的条件，那就是你的成果必须引起了哲学上的深度思考，并能让人们的世界观向前跨进一大步。窃以为牛顿、爱因斯坦等人的成就还达不到让人们世界观向前跨进一大步的程度。\n\n所以，这层楼中的人的成就对我们普通人认识世界非常重要，你可以不学相对论，但是你不可以不对这层楼的人所作出的成就不了解，否则你的世界观就是极其不完整的，会犯许多认识上的错误。不幸的是，中国的科普知识普及还不够到位，知道这层楼成就的人好像并不多，程序员中恐怕更少。下面就来看看这些用一只手的手指数得清的大哲们，到底有什么成就，能比万有引力定律和相对论还重要。\n \n**1、希尔伯特 (1862～1943)**\n第1位进到此楼层是一位名叫“希尔伯特”的大数学家，如果你学过《泛函分析》，那么你在学习希尔伯特空间时可能已经对这位大数学家有所了解；如果你不是学数学出身的，又对数学史不感兴趣的话，恐怕你从来没有听说过这个名字。不过如果我问一下，知不知道二次世界大战前世界数学中心在那里，你肯定会有兴趣想知道。\n\n不妨说一下，二战前整个世界的数学中心就在德国的哥廷根，而我们这位大数学家希尔伯特便是它的统帅和灵魂人物。即使在二战期间，希特勒和丘吉尔也有协定，德国不轰炸牛津和剑桥，作为回报，英国不轰炸海德堡和哥廷根。\n\n整个二十世纪上半期的超一流数学家，几乎都出自其门下。这里不妨举几个我们熟悉的人物，例如冯·诺伊曼就曾受到他和他的学生施密特和外尔的思想影响，还到哥廷根大学任过希尔伯特的助手，钱学森的老师冯·卡门是在哥廷根取得博士学位的。顺便提一下，这位大数学家发现当时物理学上出了很多大的成果如相对论和量子力学，但是这些物理学家的数学功力明显不足，因此有一段时间带领他的学生们研究过物理学，并独立发现了广义相对论，只是不好意思和物理学家争功劳，将广义相对论的功劳全部让给了爱因斯坦。\n\n广义相对论相对于这位大数学家在数学上的贡献，其实是算不了什么的，只是由此可看出这位大数学家品格的高尚之处。如果再去看看牛顿之流的人物的品行，整天和莱布尼茨、虎克等人争功劳，利用自己的优势地位打压他人，甚至闹得上法庭，和这位希尔伯特先生比起来，简直就是个小丑。\n\n说到这里，你可能对这位大数学家“希尔伯特”有了一些初步映象，感觉到了他的重要性，不过他在数学上的主要成就可不是几句话说得清楚的。首先，他是一位集大成者，精通当时数学所有分支领域，在数学的各个领域都有较大的贡献，当然这些成就只能让他成为一个大科学家，不能带他进入这层楼。事实上这位“希尔伯特”解决的任何一个数学问题都够不到这层楼的高度，那么他怎么混到这层楼来了呢？\n\n话得从1900年说起，当时还很年轻的希尔伯特在当时的世界数学大会上做了一个报告，高屋建瓯地提出了著名的23个未解决的数学问题，然后整个二十世纪上半期，全世界的数学家们都在这23个问题的指导下展开研究，直到现在仍然有许多数学家受这23个问题的指导在进行研究。例如我们熟知的哥德巴赫猜想，就属于其中第8个问题素数分布的一个子问题。\n\n如果用“高瞻远瞩”来形容这位大数学家的话，那么这个世界上恐怕没有第二个人再配得上“高瞻远瞩”这四个字，不论是欧拉、高斯、牛顿、爱因斯坦还是被誉为最有才华的数学家伽罗华，概不例外。\n\n虽然那23个问题是归纳总结出来的，并不全是原创，但是其中有不少问题是可以上升到哲学的高度，引起深度思考的。可能大多数人都会觉得希尔伯特是进不到这层楼的，我们知道提出问题的人和解决问题的人是一样伟大的，何况他提出的问题是如此之多，基于这点，个人觉得应该让希尔伯特跨进这层楼的门槛里。\n看完这位希尔伯特的成就，你可能会觉得对你的世界观并没有产生任何影响。确实如此，他提出的问题不是用来影响你的，而是用来影响其他大科学家和大哲的，下面再来说说另一位对他提出的23个问题中的第2个问题有杰出贡献的大哲，你就会感觉到大哲们的成果的威力了。\n \n**2、哥德尔 (1906~1978)**\n这位大哲的名字叫“哥德尔 (G?del) ”，你可能从来也没有听说过这个名字，即使你读了一个数学系的博士学位，如果你的研究方向不和这位大哲对口的话，你也不一定了解这位大哲的成就，更不知道他的成果对我们这个世界有何意义。\n\n简单地说，这位大哲20多岁时就证明了两个定理，一个叫做“哥德尔完全性定理”，另一个更重要的叫做“哥德尔不完全性定理”。你也许会觉得奇怪，第9层楼的成就就已经上升到了公理的高度，这种证明定理的事情不是学者和大师们做的事情吗？怎么能比第9层楼的成就还高呢？下面就来简单说一下这两个定理的含义，你就会明白这属于系统级的定理，绝不是普通的定理和公理所能比拟的。\n\n“哥德尔完全性定理”证明了逻辑学的几条公理是完备的，即任何一个由这些公理所产生出的问题，在这个公理系统内可以判定它是真的还是假的，这个结论表明了我们人类所拥有的逻辑思维能力是完备的。这条定理并不能将其带入这层楼来，带其进入这层楼的是另一条定理。\n\n“哥德尔不完全性定理”是在1930年证明的，它证明了现有数学的几条公理（ZF公理系统）是不完备的，即由这些公理产生出的问题，无法由这几条公理判断它是真的还是假的。例如希尔伯特23个问题中的第1个问题，也就是著名的康托尔连续统假设，哥德尔在1938年证明了现有公理系统中不能证明它是“假”的，科恩（Cohen，或许也可以称得上是“半”个大哲）在1963年证明了现有公理系统不能证明它是“真”的。最有趣的是，即使你将某个不可判定的问题，作为一条新的公理加入进去，所组成的新的公理系统仍然是不完备的，即你无法构造一个有限条公理的系统，让这个公理系统是完备的。\n\n也许你仍然无法理解上面这段话的含义，不妨先说一下它对我们现实世界的影响。你可能知道1936年出现的图灵机是现代计算机的理论模型，如果没有哥德尔不完全性定理的思想，图灵机什么时候能出来是很难说的，所以这位哥德尔可以算作计算机理论的奠基者的奠基者。计算机对我们这个世界产生的影响比原子弹大了多少，我想不用我说大家也都清楚。当然，对现实世界的影响只能把哥德尔同图灵等人一样划到大科学家那一层去，能进入这层乃是另有原因。\n\n\n可能你看过《未来战士》、《黑客帝国》、《I，Robot》之类的科幻电影，于是你产生制造一个和人一样或者比人更高一级的智能机器人的想法，这就引入了一个达到哲学高度的问题，“人到底能不能制造出具有和人一样的思维能力的机器来？”。\n我只能告诉你，“你的愿望是良好的，但现实是残酷的”。如果你仔细思考一下不完全性定理的含义，并结合现代计算机所具有的能力分析一下，你会发现这个问题的答案暂时是否定的。如果你想造出和人一样思维能力的机器，那么你需要去好好学习这位大哲及其后续研究者的成果，并在他们的基础上有新的突破才行。\n为了说明这位大哲所研究领域的重要性，这里顺便再讨论一个我们日常争议不休的问题，那就是孔夫子的“人之初、性本善”以及西方认为“人之初、性本恶”的观点孰优孰劣的问题。可能有许多人发现西方社会现在领先我们，于是就认为“性本恶”是对的，“性本善”是错的，中国应该抛弃以前的旧思想，改用西方的思想。当然也有一些老学究们，认为中国的人文思想是领先于西方的，自然而然地认为“性本善”是对的，“性本恶”是错的。\n\n如果你学过大哲用过的公理化的分析方法，你就知道一套系统的多条公理间只要不会推导出矛盾的地方，即可以自圆其说，那么它可以看作是对的。这样你可以很轻易地给这个问题下一个结论，即“性本善”和“性本恶”是对等的，不存在孰优孰劣的问题，更不存在谁对谁错的问题。只要你不同时将“性本善”和“性本恶”放入一个系统内，那么是不会有问题的，甚至你也可以认为“人之初、既无善、亦无恶”，或者认为“人之初、部分善、部分恶”，都是可以自圆其说的，所以我们的老祖宗提出的思想并没有问题，之所以落后乃是其他原因造成的。这个问题其实在高斯所处的时代就有了结论，那时有人提出了非欧几何，即平行线公理问题，有人认为过一点可以作多条平行线，还有人认为平行线在无穷远点是相交的，和欧氏几何关于过一点只能作一条平行线的公理都是矛盾的，但是他们各自的系统内推导出的结论都是正确的。\n\n上面说的只是对哥德尔不完全性定理的一些粗浅解析，实际上如果深入思考一下它的含义的话，你会发现它对物理学等许多学科有重大影响，包含的道理实在是深刻，远非一般的思想所能比拟，有兴趣者不妨“google”或“百度”一下“哥德尔”。或许只有我们的老祖宗“老子”提出的哲学思想，深度可以有得一比。\n\n哥德尔不完全性定理也给那些认为科学是严谨的人当头一棒，原来连数学这样的纯理论学科都是不严谨的，其他学科就更不用说了。\n\n\n至此，已经说完数学上的大哲，下面不妨再看看物理学上的大哲，物理学上好像只出过一位叫“海森堡”的大哲（注：由于本人对物理学不甚了解，不知道“霍金”够不够得上大哲的称号）。\n \n**3、海森堡 (1901~1976)**\n海森堡这个名字相信没有几个人不知道的，大部分人在学习物理时都学过他的“测不准关系”，也就是因为这个“测不准关系”，海森堡爬到了第十层楼。\n\n如果你看过《时间简史》和《霍金讲演录－黑洞、婴儿宇宙及其他》，你也许已经了解测不准关系的威力，所以这里不想做过多的讨论，只谈一些和本土产生的哲学思想相关的东西。\n\n首先看看争论了几千年，并且现在仍然有人在争论不休的“宿命论”问题。霍金认为，只要这个宇宙有一个初始状态，粒子的运动是按照一定物理定律进行的（比如相对论、量子力学属于这些物理定律的一部分），那么所有的粒子运动轨迹将是确定的，然后只要你承认唯物论，即精神是由物质决定的，那么宿命论就是“对”的。当然由于测不准关系的存在，对人而言，又是无法准确预测的，因此也可以将其看作是“不对”的。简单的说，可以认为宿命论是“对”的是绝对的，宿命论是“不对”的是相对的。\n可能上面这段话你现在仍然难以理解，或许你又觉得你的命运并不是上天注定的，而是可以通过自己的努力可以改变的。我要告诉你的是，你在想什么也是事先已注定的，包括你在预测本身也是事先注定的，因为大脑思考问题最终是基本粒子运动的结果，而这些粒子的运动必然要遵循物理定律进行，所以你会不会努力，想不想努力，包括你在想你该不该努力这件事本身也是事先注定的。顺便说一下，你现在正在看这篇文章，可能正在想这个宿命论问题值得怀疑，或者觉得写得不够好，准备砸个板砖上来；或者你在想这篇问题写得有点意思，准备看完后转给朋友看一看；又或者你看到这里，觉得很累了，准备休息一下；…；这些都是上天事先就注定的。从你自身的相对角度看，因为你事先不知道后来会发生什么，也可以认为不是事先注定的，可能这句话有些不好理解，不妨好好理解前面说过的公理化思想。\n\n如果你没看过《霍金讲演录－黑洞、婴儿宇宙及其他》，你可能会觉得很惊讶，宿命论历来不都被认为是唯心论吗，怎么由唯物论推导出了宿命论呢？现实就是这样和你开了一个大的玩笑，不过这个玩笑也是事先注定的。如果你再仔细用公理化的方法思考一下唯物论和唯心论的矛盾性，就像前面分析性善论和性恶论一样，你会发现唯物论、唯心论不一定就是冲突的，矛盾的双方是可以统一的，只要你不要同时将唯物和唯心放进同一个系统中就行。\n\n当然也有聪明者仍然会怀疑宿命论问题的正确性，因为这里有一个前提条件，即宇宙要有一个初始状态。宇宙有没有初始状态，我们并不知道啊，虽然有大爆炸学说，但那也只是假说而已，并没有得到确证，有些人就认为宇宙是一直都存在的。这样看来似乎你又有合理的理由在怀疑宿命论了，不过我仍然要告诉你，你现在在怀疑宿命论仍然是事先注定的，不相信的话就来看看下面的分析。\n\n虽然宇宙的初始状态值得怀疑，但是这个宇宙至少已经存在了一段时间，这点我想是毋庸置疑的。我们可以在我们已知的宇宙存在的这段时间内，任意取一个时间点t0，那么在这个时间点t0上，所有的粒子都有一个运动状态。在时间点t0之后的时间里，由于粒子运动是按照物理定律进行的，因此粒子运动轨迹由时间点t0的状态决定。说白一点，如果取100年前的一个时间点作为t0，那么现在的所有粒子运动状态100年前就已经确定了，如果取10000年前一个时间点作为t0，那么最近10000年内所有粒子运动的轨迹在10000年前就确定了，当然，你可以取更早的时间，比如100亿年前的时间点。\n\n总之，现在你会发现宇宙有没有初始状态并不会影响宿命论的正确性，所以这个世界的一切都是注定的。只不过由于粒子间相互影响过于复杂，我们无法知道这些粒子的运动轨迹而已。当然，如果将测不准关系用上的话，那么就是这个运动轨迹对人来说是无法准确预测的，所以不妨开个玩笑：“算命先生经常算得不准大概是测不准关系的缘故吧”。\n如果你再深入思考一下测不准关系，你会发现这是一个测量系统的问题。由于宿命论的存在，这个世界本身实际上是确定的，是“准“的，之所以测不准乃是我们人类所具有的测量能力依赖于基本粒子造成的。所以我在前面说宿命论是“不对”的是相对的，它是相对于我们人类的测量能力而言的。根岑（Gentzen，曾任希尔伯特的助手）在一个更强的系统内证明了ZF系统内的问题都是可判定的，从一个侧面说明这个世界本身是确定的。（注：它和哥德尔不完全性定理并不矛盾，由于数学上的复杂性，这里就不详细解释了）\n\n不妨再想想我们老祖宗提出的“是庄周梦见了蝴蝶？还是蝴蝶梦见了庄周？”，“风动？幡动？还是心动？”之类的问题，当然以前你都认为这是纯粹的唯心主义，甚至认为是封建糟粕，但是如果结合测不准关系的内涵，再结合前面所说的公理化分析方法进行分析，估计你现在不敢轻易地下结论。\n   \n也许到现在你仍然无法理解为什么把大哲们划在了大科学家的上一层，你可能仍然觉得万有引力、相对论等成果是最伟大的。下面就来谈谈为什么大哲比大科学家高一层。\n\n如果把人类在现有能力情况下，将来所能够拥有的知识总集看成是一个集合A，人类现在已有的知识总集看成是集合B，显然，集合B只是集合A的一个子集，并且是很小的一个子集。牛顿力学、相对论这些理论只能算作集合B里的一个子集，相对于集合A，只能算作是沧海一粟。 换句话说，在人类现有能力可做的事情集合中，牛顿力学和相对论等理论给出了详细的办法让你可以做其中的一些事情，当然剩下的更多的事情是牛顿力学和相对论所无法解决的。\n\n哥德尔不完全性定理和测不准关系的意义在于，它指出集合A的范围，即将人类现有能力发挥到极限的情况下，那些事情是你能做到的，那些是你不能做到的。当然，它并没有给出具体的方法让你去做你能做到的事情，它只是告诉我们我们人类现在发现的能力所能达到的极限。或许将来发现人类有其他新的未发现的能力，那么这个极限就被打破了。比如将来能发现不依赖于基本粒子的其他测量方法，并且测量过程中不会改变其他粒子的状态，那么测不准关系就被打破了。\n\n 看到这里，估计你已经发现了一些秘密，科学兜了一大圈，最终还是回到了哲学，也就是我们所认为的玄学上。同时你也会发现，我们老祖宗提出的所谓玄学，原来和现代科学是相通的，并非象某些人想像的那样全是糟粕。如果有人认为西方现代暂时领先我们，进而就认为西方古代就已经超越我们，我们老祖宗就已经落后西方，他们的思想都是糟粕的话，那么我认为他可能犯了崇洋媚外的毛病。我不得不化用一句周杰伦在春晚上的歌词送给他：“你不妨抓一副我们祖传的中医良方，治一治你那崇洋媚外的内伤”。顺便告诉他一下，中医用的阴阳五行理论，它的前提假设就是宿命论。\n \n上面说的这几位大哲的成果，可能对你的世界观会有很大的影响，于是你可能会羡慕起这些大哲们的成果来。如果你有大志的话，你会希望有朝一日你也能变成大哲，但是你发现上面的大哲是研究数学和物理学的，而你是学计算机的程序员，那么是不是没有机会变成大哲呢？\n\n如果你能将NP难题给彻底解决掉，意味着计算机内的计算的奥秘基本被揭开，或许你可以进到这层楼来；或者你能发现另外一套计算机可以理解的数学公理系统，并且这个公理系统是完备的，那么计算机取代人类进行思维的一个必要条件就满足了，计算机将具有真正意义上的“逻辑思维和推理能力”，你可以轻松地进到这层楼来。如果你发现了新的方法可以打破测不准关系，同样你也可以轻松地进到这层楼来。\n\n如果你能彻底揭开人类抽象思维的奥妙，并让计算机懂得了如何创建抽象，具备抽象思维能力，那么也就具备了“设计能力”，可以取代人类进行各种设计了，你也可以轻松地进到这层楼来。顺便说一下，如果你对软件设计有真正深刻理解的话，就会明白这不是在写科幻小说。对此感兴趣者，不妨好好地研究一下程序切片方面的技术，会让你对软件设计和测试等方面的理解有质的提高，或许有一天你能打开这扇大门。\n当然，计算机要完全取代人还有其他必要条件，后面还会提及。\n\n值得一提的是，虽然第10层楼是本文中所写的最高层，但是大哲们并没有觉得他们到了顶层，他们通常都还会努力寻找通往更高一层的楼梯。如果你也有成为天下第一的想法，那么你或许会想要做什么事情才能超越大哲们的成就，当然，这都得依赖于找到更高一层楼的楼梯。\n\n个人认为，再往上一层楼的楼梯是通往天堂的道路，也就是说第11层楼的名字叫“天堂”，是“上帝”住的地方，而不是人住的地方。如果将来某天有人能爬到天堂的话，那么他已经不是人了，而是由人变成了“上帝”。\n\n你也许会怀疑这个世界到底有没有“天堂”，“上帝”是否根本就不存在，我也很有同感。因此有必要再写上一段文字，讨论一下“上帝”的问题。如果你想了解天堂的奥妙，有没有办法让你变成“上帝”，不妨看看继续往下看看第11层楼的玄妙。注意我这里用的是“玄妙”二字，因为上帝在大部分人眼里估计都是“玄之又玄”的东西。\n \n###  第11层 上帝\n看了上面的小标题，你可能会觉得奇怪，这篇文章不是讲“程序员的十层楼”吗？怎么冒出了第11层来了？\n其实这并不矛盾，程序员确实只有十层楼，因为爬到第11层时，已经变成上帝，不再是程序员了；所以超出10层楼本身并不重要，关键的问题是看你有没有能力变成上帝。\n**1、谁是上帝？**\n菜鸟们认为Linus Torvalds是程序员中的上帝，看完了前面各层楼的介绍，此时再看到这句话，相信你要忍不住在心里笑起来。当然，你会不会笑起来是事先注定的。Don Knuth也不是上帝，他离上帝还有三层楼的距离。即使是大哲们，他们离天堂也还差一层楼，因此这个世界上有史以来还没有任何一个人变成过上帝。\n\n我们感兴趣的是，将来会不会有人爬到比大哲们更高的楼层上，变成了上帝。\n要变成上帝，你得有上帝一样的能力，上帝会造人，你会吗？\n\n你也许会怯生生地问：“我可以和爱人生小孩，算不算造人？”，你可能还会理直气壮地说：“现在生物学上都可以克隆人了，早就有人掌握了造人的方法”。\n\n事实上克隆人需要有人的体细胞，必须要先有人才会有体细胞。上帝造人时，这个世界上并没有人，是从无生命的物质“尘土”中创造出的人。因此，用最原始的方法生人和克隆人都是从有生命信息的物质中生人，不能算作造人。\n\n这样看来，你根本不会造人，不过我可以告诉你一个“玄方”，让你有机会学会如何造人。\n\n如果你揭开了人类情感的奥秘，让计算机也可以拥有和人类一样的情感，那么计算机将可以理解人类的需求，具有了“情商”，将具有完整的和人一样的能力。此时，人类进化到了机器人，科幻小说将变成现实，也就是说你已经掌握了真正的造人能力，晋升为“上帝”了。\n\n未来到底有没有人能变成“上帝”，人能不能进化到机器人，这是宿命论中事先注定了的。说到这里，不妨再告诉你一个打破宿命论的方法，这个方法就是你要爬到比上帝还要高的楼层。\n“还有比上帝还高的楼层？”，你可能会第1时间内冒出这个问题，其实我也有同样的怀疑。因此在写第12层楼前，有必要弄清楚它到底存不存在，即你可不可以骑到上帝的头上的问题。\n\n**2. 骑到上帝的头上？**\n为了解决是否可以骑到上帝的头上这个问题，不妨先假设存在比上帝高的楼层，也就是存在打破宿命论的方法。\n宿命论的本质原因是因为时间是单向运行，不可逆转造成的。如果你找到一种可以使时间逆转的方法，那么你就打破了宿命论，爬到了比上帝还高的楼层。\n看到这里，你也许会摆脱刚才陷于宿命论的困惑情绪，变得充满希望般高兴起来。不过，如果你的逻辑思维能力足够好，仔细思考一下，会发现存在一个逻辑上的悖论。\n在你找到时间逆转的方法之前，显然这个世界仍然是需要服从宿命论的，也就是说你能不能找到打破宿命论的方法是事先注定的。假设你在某个时间点t0处找到了打破宿命论的方法，你在打破宿命论后，想利用时间逆转的方法回到某个时间点t2。下面来看看你到底能不能回到时间点t2。\n\n取位于t0和t2之间的任意一个时间点t1，你在回到时间点t2之前，必须先经过时间点t1，考虑你到达t1的那一时刻，由于t1比t0要早，这个时间点上你还没有找到时间逆转的方法，所以到了时间t1点后，你无法再使用时间逆转的能力回到时间点t2去，所以你永远也回不到时间点t2，由于时间点t2是任意取的，因此，你永远也无法使时间逆转，或者说你根本就没打破过宿命论，这与你在时间点t0打破了宿命论产生了矛盾。\n\n上面这段话看起来似乎有点像“人永远迈不出一步”的诡辩一样，你可能会想返回到时间点t1时，仍然可以拥有时间逆转能力啊。不过你又会发现一个新的问题，时间点t1本来是没有时间逆转能力的，现在又认为时间点t1又有时间逆转能力，那时间点t1到底是有还是没有时间逆转能力呢？或者说在时间点t0前，宿命论注定了时间点t1是没有时间逆转能力的，现在你又认为时间点t1具有时间逆转能力，那么这两个时间点t1究竟是不是同一个时间点？如果不是同一个时间点，说明你没有回到过去；如果是同一个时间点的话，岂不是自相矛盾吗？\n\n为了说得更形象一些，不妨假设你坐一艘超光速飞船，准备从时间点t0回到时间点t2去，假设你回到t2后，随着时间的流逝，又达到了时间点t0，如果这时你又再次坐超光速飞船返回时间点t2，那么一个值得思考的问题就出现了，“你在时间点t2能不能看到上次返回时间点t2的飞船？”\n\n如果回答不能看到飞船，那么上次返回的飞船那里去了呢？显然很难解释通。如果回答能看到飞船，那么你可以到达时间点t2后，下次时间到达t0时，你又坐飞船返回t2，这次你将可以看到上两次的两艘飞船。如果这样一直循环下去，最后你会发现你可以在时间点t2看到无穷多的飞船。用程序员的术语说，叫做“程序陷入了死循环”，最后系统必然会出现“Out of Memory”现象而崩溃。\n\n当然，你也可以认为有其他的方法，不需要飞船，可以一次性从时间点t0直接跳跃到时间点t2，并不需要经过时间点t1。下面不妨来分析一下这个方法是否可行。\n既然是直接跳跃到时间点t2，那么你必然是在一个无穷小的时间里出现在时间点t2的某个空间里，例如你要在时间点t2回到某个广场上。首先说明一下为什么是无穷小的时间里出现的，因为如果不是无穷小的时间里出现的话，那么必然可以取到一个时间点t1，会导致前面所说的时间点t1上出现悖论。\n\n你在广场上出现的时，广场上的空气必然要为你让开空间，而这是在无穷小的时间里完成的，那么很容易推导出你周围的空气获得的加速度和速度都是无穷大，因而它具有的动能也是无穷大，无穷大的能量和无穷大的速度意味着什么？一只鸟都可以将飞机撞下来，如果宇宙是有限大的话，它可以让这个宇宙炸毁无穷次；即使宇宙是无限大，它也足以让宇宙炸毁一次。宇宙都毁灭了，又何来的时间？还能说你回到了时间点t2吗？\n\n也许上面说的这些你仍然难以相信，不妨再说得更现实一些，假设你要回到100年前的一个时间点，这100年中，天上有多少流星湮灭了？有多少新星生成了？宇宙膨胀了多少？你有能力让湮灭的流星复原、生成的新星重新返回未生成前的状态，膨胀的宇宙收缩回去吗？如果这些东西的状态没有回复到100年前，又怎么能说明你回到的是100年前的时间点呢?\n\n根据上面的推导和分析，个人认为使时间逆转的方法是不存在的，所以第12层楼是不存在的，自然没有人可以骑到“上帝”的头上。\n**宿命论将在有时间的时间里永远统治这个世界。**\n居天下之广居，立天下之正位，行天下之大道，得志与民由之，不得志独行其道，富贵不能淫，贫贱不能移，威武不能屈，此之谓大丈夫。\n> 转载自\n**Copyright © 1900-2016, NORYES, All Rights Reserved.**\n**[http://www.cnblogs.com/noryes/](http://www.cnblogs.com/noryes/)**\n","source":"_posts/-📣📣--软件工程师的十大层次.md","raw":"---\ntitle: \"-📣📣--软件工程师的十大层次\"\ndate: 2023-06-25\ntags: \n- 开发日常\n---\n自西方文艺复兴以来，中国在自然科学方面落后西方很多，软件领域也不例外。当然现在中国的许多程序员们对此可能有许多不同的意见，有些人认为中国的程序员水平远落后于西方，有些则认为中国的程序员个人能力并不比西方的程序员差，只是整个软件产业落后而已。\n\n那么，到底中国的程序员水平比西方程序员水平差，还是中国有许多优秀的程序员达到或超过了西方程序员同等水平呢？要解决这个问题，必须先知道程序员有多少种技术层级，每个层级需要什么样的技术水平，然后再比较中国和西方在各个技术层级的人数，就可以知道到底有没有差距，差距有多大。\n当然，对于如何划分程序员的技术层级，不同公司或不同人会有不同的划分标准，下面的划分仅代表个人的观点，如有不当之处，还请砸板砖予以纠正。\n \n### 第1层 菜鸟\n   第1层楼属于地板层，迈进这层楼的门槛是很低的。基本上懂计算机的基本操作，了解计算机专业的一些基础知识，掌握一门基本的编程语言如C/C++，或者Java，或者JavaScript，…，均可入门迈进这层。\n   \n在这层上，中国有着绝对的优势，除了从计算机专业毕业的众多人数外，还有大量的通信、自动化、数学等相关专业的人士进入这一行，此外还有众多的其他专业转行的人士，人数绝对比西方多出甚多。并且还有一个优势就是我们这层人员的平均智商比西方肯定高。\n\n没有多少人愿意一辈子做菜鸟，因为做”菜鸟”的滋味实在是不咋的，整天被老大们吆喝着去装装机器，搭建一下测试环境，或者对照着别人写好的测试用例做一些黑盒测试，好一点的可以被安排去写一点测试代码。当然如果运气”好”的话，碰到了国内的一些作坊式的公司，也有机会去写一些正式的代码。\n所以，菜鸟们总是在努力学习，希望爬更高的一层楼去。\n \n###  第2层 大虾\n   从第1层爬到第2层相对容易一些，以C/C++程序员为例，只要熟练掌握C/C++编程语言，掌握C标准库和常用的各种数据结构算法，掌握STL的基本实现和使用方法，掌握多线程编程基础知识，掌握一种开发环境，再对各种操作系统的API都去使用一下，搞网络编程的当然对socket编程要好好掌握一下，然后再学习一些面向对象的设计知识和设计模式等，学习一些测试、软件工程和质量控制的基本知识，大部分人经过2～3年的努力，都可以爬到第2层，晋升为”大虾”。\n\n中国的”大虾”数量和”菜鸟”数量估计不会少多少，所以这层上仍然远领先于西方。\n 大虾们通常还是有些自知之明，知道自己只能实现一些简单的功能，做不了大的东西，有时候还会遇到一些疑难问题给卡住，所以他们对那些大牛级的人物通常是非常崇拜的，国外的如Robert C. Martin、Linus Torvalds，国内的如求伯君、王志东等通常是他们崇拜的对象。其中的有些人希望有一天也能达到这些大牛级人物的水平，所以他们继续往楼上爬去。\n \n###  第3层 牛人\n由于”大虾”们经常被一些疑难问题给卡住，所以有了”大虾”们只好继续学习，他们需要将原来所学的知识进一步熟练掌握，比如以熟练掌握C++编程语言为例，除了学一些基础性的C++书籍如《C++ Primer》，《Effective C++》，《Think in C++》，《Exception C++》等之外，更重要的是需要了解C++编译器的原理和实现机制，了解操作系统中的内部机制如内存管理、进程和线程的管理机制，了解处理器的基础知识和代码优化的方法，此外还需要更深入地学习更多的数据结构与算法，掌握更深入的测试和调试知识以及质量管理和控制方法，对各种设计方法有更好的理解等。\n\n学习上面说的这些知识不是一挥而就的，不看个三五十本书并掌握它是做不到的。以数据结构算法来说，至少要看个5～10本这方面的著作；以软件设计来说，光懂结构化设计、面向对象设计和一些设计模式是不够的，还要了解软件架构设计、交互设计、面向方面的设计、面向使用的设计、面向数据结构算法的设计、情感化设计等，否则是很难进到这个楼层的。\n\n当然除了上面说的知识外，大虾们还需要去学习各种经验和技巧。当然这点难不倒他们，现在出版的书籍众多，网络上的技术文章更是不胜数，然后再去各种专业论坛里泡一泡，把这些书籍和文章中的各种经验、技能、技巧掌握下来，再去学习一些知名的开源项目如Apache或Linux操作系统的源代码实现等。此时对付一般的疑难问题通常都不在话下，菜鸟和大虾们会觉得你很”牛”，你也就爬到了第3层，晋升为”牛人”了。\n\n看了上面所讲的要求，可能有些大虾要晕过去了，成为牛人要学这么多东西啊！要求是不是太高了？其实要求一点也不高，这么点东西都掌握不了的话，怎么能让别人觉得你”牛”呢？\n需要提一下的是，进入多核时代后，从第2层爬到第3层增加了一道多核编程的门槛。当然要迈过这道门槛并不难，已经有很多前辈高人迈进了这道门槛，只要循着他们的足迹前进就可以了。想迈进这道门槛者不妨去学习一下TBB开源项目的源代码(链接：http://www.threadingbuildingblocks.org/)，然后上Intel的博客（http://softwareblogs-zho.intel.com/）和多核论坛（http://forum.csdn.net/Intel/IntelMulti-core/）去看看相关文章，再买上几本相关的书籍学习一下。\n在国内， 一旦成为”牛人”，通常可以到许多知名的公司里去，运气好者可以挂上一个架构师的头衔，甚至挂上一个”首席架构师”或者”首席xx学家”的头衔也不足为奇。有不少爬到这层的人就以为到了楼顶了，可以眼睛往天上看了，开始目空一切起来，以为自己什么都可以做了，什么都懂了，经常在网络上乱砸板砖是这个群体的最好写照。由此也看出，国内的牛人数量仍然众多，远多于西方的牛人数量，在这层上仍然是领先的。\n\n也有不少谦虚的”牛人”，知道自己现在还不到半桶水阶段。他们深知爬楼的游戏就像猴子上树一样，往下看是笑脸，往上看是屁股。为了多看笑脸，少看屁股，他们并没有在此停步不前，而是继续寻找到更上一层的楼梯，以便继续往上爬。\n \n###  第4层 大牛\n从第3层爬到第4层可不像上面说过的那几层一样容易，要成为大牛的话，你必须要能做牛人们做不了的事情，解决牛人们解决不了问题。比如牛人们通常都不懂写操作系统，不会写编译器，不懂得TCP/IP协议的底层实现，如果你有能力将其中的任何一个实现得象模象样的话，那么你就从牛人升级为”大牛”了。\n\n当然，由于各个专业领域的差别，这里举操作系统、编译器、TCP/IP协议只是作为例子，并不代表成为”大牛”一定需要掌握这些知识，以时下热门的多核编程来说，如果你能比牛人们更深入地掌握其中的各种思想原理，能更加自如的运用，并有能力去实现一个象开源项目TBB库一样的东西，也可以成为”大牛”，又或者你能写出一个类似Apache一样的服务器，或者写出一个数据库，都可以成为”大牛”。\n\n要成为”大牛”并不是一件简单的事情，需要付出比牛人们多得多的努力，一般来说，至少要看过200~400本左右的专业书籍并好好掌握它，除此之外，还得经常关注网络和期刊杂志上的各种最新信息。\n\n当”牛人”晋升为”大牛”，让”牛人们”发现有比他们更牛的人时，对”牛人”们的心灵的震撼是可想而知的。由于牛人们的数量庞大，并且牛人对大虾和菜鸟阶层有言传身教的影响，所以大牛们通常能获得非常高的社会知名度，几乎可以用”引无数菜鸟、大虾、牛人竞折腰”来形容，看看前面提过的Linus Torvalds等大牛，应该知道此言不虚。\n\n虽然成为”大牛”的条件看起来似乎很高似的，但是这层楼并不是很难爬的一层，只要通过一定的努力，素质不是很差，还是有许多”牛人”可以爬到这一层的。由此可知，”大牛”这个楼层的人数其实并不像想像的那么少，例如比尔·盖茨之类的人好像也是属于这一层的。\n\n由于”大牛”这层的人数不少，所以也很难统计除到底是中国的”大牛”数量多还是西方的大牛数量多？我估计应该是个旗鼓相当的数量，或者中国的”大牛”们会更多一些。\n\n看到这里，可能会有很多人会以为我在这里说瞎话，Linus Torvalds写出了著名的Linux操作系统，我国并没有人写出过类似的东西啊，我国的”大牛”怎么能和西方的比呢? 不知大家注意到没有，Linus Torvalds只是写出了一个”象模象样”的操作系统雏形，Linux后来真正发展成闻名全球的开源操作系统期间，完全是因为许多支持开源的商业公司如IBM等，派出了许多比Linus Torvalds更高楼层的幕后英雄在里面把它开发出来的。\n\n可能有些菜鸟认为Linus Torvalds是程序员中的上帝，不妨说个小故事：\nLinus，Richard Stallman和Don Knuth（高德纳）一同参加一个会议。\nLinus 说：”上帝说我创造了世界上最优秀的操作系统。”\n\nRichard Stallman自然不甘示弱地说：”上帝说我创造了世界上最好用的编译器。”\nDon Knuth一脸疑惑的说：”等等，等等，我什么时候说过这些话？”\n\n由此可以看出，Linus Torvalds的技术水平并不像想像中那么高，只是”牛人”和”大虾”觉得”大牛”比他们更牛吧了。在我国，有一些当时还处于”大虾”层的人物，也能写出介绍如何写操作系统的书，并且书写得非常出色，而且写出了一个有那么一点点象模象样的操作系统来。我想中国的”大牛”们是不会比西方差的，之所以没有人写出类似的商业产品来，完全是社会环境的原因，并不是技术能力达不到的原因。\n\n“大牛”们之所以成为大牛，主要的原因是因为把”牛人”给盖了下去，并不是他们自己觉得如何牛。也许有很多菜鸟、大虾甚至牛人觉得”大牛”这层已经到顶了，但大多数”大牛”估计应该是有自知之明的，他们知道自己现在还没有爬到半山腰，也就勉强能算个半桶水的水平，其中有些爬到这层没有累趴下，仍然能量充沛，并且又有志者，还是会继续往更上一层楼爬的。\n\n看到这里，也许有些菜鸟、大虾、牛人想不明白了，还有比”大牛”们更高的楼层，那会是什么样的楼层？下面就来看看第5层楼的奥妙。\n \n###  第5层 专家\n当大牛们真正动手做一个操作系统或者类似的其他软件时，他们就会发现自己的基本功仍然有很多的不足。以内存管理为例，如果直接抄袭Linux或者其他开源操作系统的内存管理算法，会被人看不起的，如果自动动手实现一个内存管理算法，他会发现现在有关内存管理方法的算法数量众多，自己并没有全部学过和实践过，不知道到底该用那种内存管理算法。\n\n看到这里，可能有些人已经明白第5层楼的奥妙了，那就是需要做基础研究，当然在计算机里，最重要的就是”计算”二字，程序员要做基础研究，主要的内容就是研究非数值”计算”。\n\n非数值计算可是一个非常庞大的领域，不仅时下热门的”多核计算”与”云计算”属于非数值计算范畴，就是软件需求、设计、测试、调试、评估、质量控制、软件工程等本质上也属于非数值计算的范畴，甚至芯片硬件设计也同样牵涉到非数值计算。如果你还没有真正领悟”计算”二字的含义，那么你就没有机会进到这层楼来。\n可能有人仍然没有明白为什么比尔·盖茨被划在了大牛层，没有进到这层来。虽然比尔·盖茨大学未毕业，学历不够，但是家有藏书2万余册，进入软件这个行业比绝大部分人都早，撇开他的商业才能不谈，即使只看他的技术水平，也可以算得上是学富五车，顶上几个普通的计算机软件博士之和是没有问题的，比起Linus Torvalds之类的”大牛”们应该技高一筹才对，怎么还进不了这层楼呢？\n\n非常遗憾的是，从Windows操作系统的实现来看，其对计算的理解是很肤浅的，如果把Google对计算方面的理解比做大学生，比尔·盖茨只能算做一个初中生，所以比尔·盖茨永远只能做个大牛人，成不了”专家”。\n\n看到这里，也许国内的大牛们要高兴起来了，原来比尔·盖茨也只和我等在同一个层次，只要再升一层就可以超越比尔·盖茨了。不过爬到这层可没有从”牛人”升为”大牛”那么简单，人家比尔·盖茨都家有2万多册书，让你看个500~1000本以上的专业书籍并掌握好它应该要求不高吧。当然，这并不是主要的条件，更重要的是，需要到专业的学术站点去学习了，到ACM，IEEE，Elsevier，SpringerLink，SIAM等地方去下载论文应该成为你的定期功课，使用Google搜索引擎中的学术搜索更是应该成为你的日常必修课。此外，你还得经常关注是否有与你研究相关的开源项目冒出来，例如当听到有TBB这样针对多核的开源项目时，你应该第一时间到Google里输入”TBB”搜索一下，将其源代码下载下来好好研究一番，这样也许你的一只脚已经快迈进了这层楼的门槛。\n\n当你象我上面说的那样去做了以后，随着时间的推移，总会有某天，你发现，在很多小的领域里，你已经学不到什么新东西了，所有最新出来的研究成果你几乎都知道。此时你会发现你比在做”牛人”和”大牛”时的水平不知高出了多少，但是你一点也”牛”不起来，因为你学的知识和思想都是别人提出来的，你自己并没有多少自己的知识和思想分享给别人，所以你还得继续往楼上爬才行。\n我不知道国内的”专家”到底有多少，不过有一点可以肯定的是，如果把那些专门蒙大家的”砖家”也算上的话，我们的砖家比西方的要多得多。\n \n###  第6层 学者\n当”专家”们想继续往上一层楼爬时，他们几乎一眼就可以看到楼梯的入口，不过令他们吃惊的是，楼梯入口处竖了一道高高的门槛，上面写着”创新”二字。不幸的是，大多数人在爬到第5层楼时已经体能消耗过度，无力翻过这道门槛。\n\n有少数体能充足者，可以轻易翻越这道门槛，但是并不意味着体力消耗过度者就无法翻越，因为你只是暂时还没有掌握恢复体能的方法而已，当掌握了恢复体能的方法，将体能恢复后，你就可以轻易地翻越这道门槛了。\n\n怎么才能将体能恢复呢？我们的老祖宗”孔子”早就教导过我们”温故而知新”，在英文里，研究的单词是”research”，其前缀”re”和”search”分别是什么意思不用我解释吧。或许有些人觉得”温故而知新”和”research”有些抽象，不好理解，我再给打个简单的比方，比如你在爬一座高山，爬了半天，中途体力不支，怎么恢复体力呢？自然是休息一下，重新进食一些食物，体力很快就可以得到恢复。\n\n由此可知，对体能消耗过度者，休息＋重新进食通常是恢复体能的最佳选择。可惜的是，国内的老板们并不懂得这点，他们的公司里不仅连正常国家规定的休息时间都不给足，有些公司甚至有员工”过劳死”出现。所以国内能翻越”创新”这道门槛的人是”少之又少”，和西方比起来估计是数量级的差别。\n\n再说说重新进食的问题，这个重新进食是有讲究的，需要进食一些基础性易消化的简单食物，不能进食山珍海味级的复杂食物，否则很难快速吸收。以查找为例，并不是去天天盯着那些复杂的查找结构和算法进行研究，你需要做的是将二分查找、哈希查找、普通二叉树查找等基础性的知识好好地复习几遍。\n\n以哈希查找为例，首先你需要去将各种冲突解决方法如链式结构、二次哈希等编写一遍，再试试不同种类的哈希函数，然后还需要试试在硬盘中如何实现哈希查找，并考虑数据从硬盘读到内存后，如何组织硬盘中的数据才能快速地在内存中构建出哈希表来，…，这样你可能需要将一个哈希表写上十几个不同的版本，并比较各个版本的性能、功能方面的区别和适用范围。\n\n总之，对任何一种简单的东西，你需要考虑各种各样的需求，以需求来驱动研究。最后你将各种最基础性的查找结构和算法都了然于胸后，或许某天你再看其他更复杂的查找算法，或者你在散步时，脑袋里灵光一现，突然间就发现了更好的方法，也就从专家晋升为”学者”了。\n\n学者所做的事情，通常都是在前人的基础上，进行一些小的优化和改进，例如别人发明了链式基数排序的方法，你第1个发现使用一定的方法，可以用数组替代链表进行基数排序，性能还能得到进一步提高。\n由于学者需要的只是一些小的优化改进，因此中国还是有一定数量的学者。不过和国外的数量比起来，估计少了一个数量级而已。\n也许有人会觉得现在中国许多公司申请专利的数量达到甚至超过西方发达国家了，我们的学者数量应该不会比他们少多少。因此，有必要把专利和这里说的创新的区别解释一下。\n\n所谓专利者，只要是以前没有的，新的东西，都可以申请专利；甚至是以前有的东西，你把他用到了一个新的领域的产品里去，也可以申请专利。比如你在房子里造一个水泥柱子，只要以前没有人就这件事申请专利，那么你就可以申请专利，并且下次你把水泥柱子挪一个位置，又可以申请一个新的专利；或者你在一个柜子上打上几个孔，下次又把孔的位置改一改，…，均可申请专利。\n\n这层楼里所说的创新，是指学术层面的创新，是基础研究方面的创新，和专利的概念是完全不同的，难度也是完全不同的。你即使申请了一万个象那种打孔一类的专利，加起来也够不到这层楼里的一个创新。\n\n当你爬到第6层楼时，你也许会有一种突破极限的快感，因为你终于把那道高高的写着”创新”二字的门槛给翻过去了，实现了”0”的突破。这时，你也许有一种”独上高楼，欲望尽天涯路”的感觉，但是很快你会发现看到的都是比较近的路，远处的路根本看不清楚。如果你还有足够的体力的话，你会想爬到更高一层的楼层去。\n \n###  第7层 大师\n从第6层楼爬到第7层楼，并没有多少捷径可走，主要看你有没有足够的能量。你如果能象Hoare一样设计出一个快速排序的算法；或者象Eugene W. Myers一样设计出了一个用编辑图的最短路径模型来解决diff问题的算法；或者象M.J.D. Powell一样提出了一个能够处理非线性规划问题的SQP方法；或者你发现基于比较的排序算法，它的复杂度下界为O(NLogN)；或者你发现用栈可以将递归的算法变成非递归的；或者你设计出一个红黑树或者AVL树之类的查找结构；或者你设计出一个象C++或Java一样的语言；或者你发明了UML；…，你就爬到了第7层，晋升为”大师”了。\n\n上面举的这些例子中，其中有些人站的楼层比这层高，这里只是为了形象说明而举例他们的某个成就。从上面列出的一些大师的贡献可以看出，成为大师必须要有较大的贡献。首先解决问题必须是比较重要的，其次你要比前辈们在某方面有一个较大的提高，或者你解决的是一个全新的以前没有解决过的问题；最重要的是，主要的思路和方法必须是你自己提供的，不再是在别人的思路基础上进行的优化和改进。\n看了上面这些要求，如果能量不够的话，你也许会觉得有些困难，所以不是每个人都能成为”大师”的。中国软件业里能称得上是”大师”的人，用屈指可数来形容，估计是绰绰有余。值得一提的是，国外的”大师”就象我们的”大牛”一样满天飞的多。\n\n我把我猜测本国有可能进到这层楼的大师列一下，以起个抛砖引玉的作用。汉王的”手写识别”技术由于是完全保密的，不知道它里面用了什么思想，原创思想占的比重有多少，因此不知道该把它划到这层楼还是更高一层楼去。原山东大学王小云教授破解DES和MD5算法时，用到的方法不知道是不是完全原创的，如果是的话也可进到这层楼来。\n陈景润虽然没有彻底解决哥德巴赫猜想，但他在解决问题时所用的方法是创新的，因此也可以进到这层楼来。当然，如果能彻底解决哥德巴赫猜想，那么可以算到更高的楼层去。\n\n求伯君和王志东等大牛们，他们在做WPS和表格处理之类的软件时，不知是否有较大的原创算法在里面，如果有的话就算我错把他们划到了大牛层。由于所学有限，不知道国内还有那些人能够得上”大师”的级别，或许有少量做研究的教授、院士们，可以达到这个级别，有知道的不妨回个帖子晾一晾。\n\n鉴于”大师”这个称号的光环效应，相信有不少人梦想着成为”大师”。或许你看了前面举的一些大师的例子，你会觉得要成为大师非常困难。不妨说一下，现在有一条通往”大师”之路的捷径打开了，那就是多核计算领域，有大量的处女地等待大家去挖掘。\n以前在单核时代开发的各种算法，现在都需要改写成并行的。数据结构与算法、图像处理、数值计算、操作系统、编译器、测试调试等各个领域，都存在大量的机会，可以让你进到这层楼来，甚至有可能让你进到更高一层楼去。\n \n### 第8层 科学家\n科学家向来都是一个神圣的称号，因此我把他放在了“大师”之上。要成为科学家，你的贡献必须超越大师，不妨随便举一些例子。\n\n如果你象Dijkstra一样设计了ALGOL语言，提出了程序设计的三种基本结构：顺序、选择、循环，那么你可以爬到第8层楼来。顺便说一下，即使抛开这个成果，Dijkstra凭他的PV操作和信号量概念的提出，同样可以进到这层楼。\n\n如果你象Don Knuth一样，是数据结构与算法这门学科的重要奠基者，你也可以进到这层楼来。当然，数据结构和算法这门学科不是某个人开创的，是许多大师和科学家集体开创的。\n\n如果你象巴科斯一样发明了Fortran语言，并提出了巴科斯范式，对高级程序语言的发展起了重要作用，你也可以进到这层楼来。\n\n或者你象Ken Thompson、Dennis Ritchie一样发明了Unix操作系统和功能强大、高效、灵活、表达力强的C语言，对操作系统理论和高级编程语言均作出重大贡献，那么你也可以进到这层楼来。\n\n或者你有Frederick P. Brooks一样机会，可以去领导开发IBM的大型计算机System/360和OS/360操作系统，并在失败后反思总结，写出《人月神话》，对软件工程作出里程碑式的贡献，你也可以进到这层来。\n\n或者你提出了面向对象设计的基本思想，或者你设计了互联网的TCP/IP协议，或者你象Steven A.Cook一样奠定NP完全性的理论基础，或者你象Frances Allen一样专注于并行计算来实现编译技术，在编译优化理论和技术取得基础性的成就，…，均可进入这层。\n\n当然，如果你发明了C++语言或者Java语言，你进不到这层来，因为你用到的主要思想都是这层楼中的科学家提出的，你自己并没有没有多少原创思想在里面。\n\n看了上面列出的科学家的成就，你会发现，要成为“科学家”，通常要开创一门分支学科，或者是这个分支学科的奠基者，或者在某个分支学科里作出里程碑式的重大贡献。如果做不到这些的话，那么你能象Andrew C. Yao（姚期智）一样在对计算理论的多个方向如伪随机数生成，密码学与通信复杂度等各个方向上作出重要贡献，成为集大成者，也可以进入这层楼。\n\n成为“科学家”后，如果你有幸象Dijkstra一样，出现在一个非常重视科学的国度。当你去世时，你家乡满城的人都会自动地去为你送葬。不过如果不幸生错地方的话，能不挨“板砖”估计就算万幸了。\n\n从上面随便举的一些例子中，你可能能猜到，西方科学家的数量是非常多的，于是你会想中国应该也有少量的科学家吧？我可以很负责任地告诉你一个不幸的结果，中国本土产生的科学家的数量为0。目前在国内，软件领域的唯一的科学家就是上面提过的姚期智，还是国外请回来的，并不是本土产生的。\n\n可能你不同意我说的本土科学家数量为0的结论，因为你经常看到有许多公司里都有所谓“首席XX科学家”的头衔。我想说的是，这些所谓的“首席XX科学家”都是远远够不到这层楼的级别的，有些人的水平估计也就是一个“牛人”或“大牛”的级别，好一点的最多也就一个“学者”的级别。尤其是那些被称作“首席经X学家”的，基本上可以把称号改为“首席坑大家”。\n\n虽然我国没有人能爬到这层楼上来，但是西方国家仍然有许多人爬到了比这层更高的楼上。如果要问我们比西方落后多少？那么可以简单地回答为：“落后了三层楼”。下面就来看看我们做梦都没有到过的更高一层楼的秘密。\n \n### 第9层 大科学家\n进入这层楼的门槛通常需要一些运气，比如某天有个苹果砸到你头上时，你碰巧发现了万有引力，那么你可以进到这层楼来。当然，万有引力几百年前就被人发现了，如果你现在到处嚷嚷着说你发现了万有引力，恐怕马上会有人打110，然后警察会把你送到不正常人类的聚集地去。因此，这里举万有引力的例子，只是说你要有类似的成就才能进到这层楼来。\n\n牛顿发现万有引力定律开创了经典物理运动力学这门学科，如果你也能开创一门大的学科，那么你就从科学家晋升为“大科学家”。比如爱因斯坦创建了相对论，从一个小职员变成了大科学家。当然大科学家可远不止这两人，数学界里比物理学界更是多得多，如欧几里得创建了平面几何，笛卡尔开创解析几何，还有欧拉、高斯、莱布尼茨等数不清的人物，跟计算相关的大科学家则有图灵等人。\n\n从上面列出的一些大科学家可以发现，他们的成就不仅是开创了一个大的学科，更重要的是他们的成就上升到了“公理”的层面。发现公理通常是需要一点运气的，如果你的运气不够好的话，另外还有一个笨办法也可以进到这层楼来，那就是成为集大成者。例如冯·诺伊曼，对数学的所有分支都非常了解，许多领域都有较大的贡献，即使撇开他对计算机的开创贡献，成为大科学家照样绰绰有余。\n\n当然，程序员们最关心的是自己有没有机会变成大科学家。既然计算机这门大学科的开创性成果早就被冯·诺伊曼、图灵等人摘走了，那么程序员们是不是没有机会变成大科学家了呢？我们的古人说得好：“江山代有才人出，各领风骚数百年”，现在在计算机这门学科下面诞生了许多非常重要的大的分支，所以你还是有足够的机会进到这层楼的。\n\n如果你能够彻底解决自然语言理解（机器翻译）这门学科中的核心问题， 或者你在人工智能或者机器视觉（图像识别）方面有突破性的发现，那么你同样可以轻易地晋升为“大科学家”。这样当某天你老了去世时，或许那天国人已经觉醒，你也能享受到如Dijkstra一样的待遇，有满城甚至全国的人去为你送葬。\n\n现在还剩下另外一个大家感兴趣的问题没有讨论，那就是这层中已经出现了牛顿、爱因斯坦、高斯等我们平常人都认为是顶级的科学家，是不是这层已经是楼顶了呢？相信还记得本文标题的人应该知道现在仅仅是第9层，还有第10层没有到达呢。可能不少人现在要感到困惑了，难道还有人站在比牛顿、爱因斯坦、高斯等人更高的楼层上？\n这个世界上确实存在可以用一只手的手指数得清的那么几个人，他们爬到了第10层楼上。因此，第10层楼不是虚构的，而是确实存在的。如果对此有疑惑或者认为我在胡诌一番的话，那么不妨继续往下看下去，窥一下第10层楼的秘密。\n \n###  第10层 大哲\n看了这层楼的名字“大哲”，可能不少人已经猜到了这层楼的秘密，那就是你的成果必须要上升到哲学的高度，你才有机会能进到这层来。\n\n当然，上升到哲学高度只是一个必要条件，牛顿的万有引力似乎也上升到了哲学的高度，因为不知道引力到底是怎么来的，但是牛顿没有被划到这一层，因为进到这层还有另外的条件，那就是你的成果必须引起了哲学上的深度思考，并能让人们的世界观向前跨进一大步。窃以为牛顿、爱因斯坦等人的成就还达不到让人们世界观向前跨进一大步的程度。\n\n所以，这层楼中的人的成就对我们普通人认识世界非常重要，你可以不学相对论，但是你不可以不对这层楼的人所作出的成就不了解，否则你的世界观就是极其不完整的，会犯许多认识上的错误。不幸的是，中国的科普知识普及还不够到位，知道这层楼成就的人好像并不多，程序员中恐怕更少。下面就来看看这些用一只手的手指数得清的大哲们，到底有什么成就，能比万有引力定律和相对论还重要。\n \n**1、希尔伯特 (1862～1943)**\n第1位进到此楼层是一位名叫“希尔伯特”的大数学家，如果你学过《泛函分析》，那么你在学习希尔伯特空间时可能已经对这位大数学家有所了解；如果你不是学数学出身的，又对数学史不感兴趣的话，恐怕你从来没有听说过这个名字。不过如果我问一下，知不知道二次世界大战前世界数学中心在那里，你肯定会有兴趣想知道。\n\n不妨说一下，二战前整个世界的数学中心就在德国的哥廷根，而我们这位大数学家希尔伯特便是它的统帅和灵魂人物。即使在二战期间，希特勒和丘吉尔也有协定，德国不轰炸牛津和剑桥，作为回报，英国不轰炸海德堡和哥廷根。\n\n整个二十世纪上半期的超一流数学家，几乎都出自其门下。这里不妨举几个我们熟悉的人物，例如冯·诺伊曼就曾受到他和他的学生施密特和外尔的思想影响，还到哥廷根大学任过希尔伯特的助手，钱学森的老师冯·卡门是在哥廷根取得博士学位的。顺便提一下，这位大数学家发现当时物理学上出了很多大的成果如相对论和量子力学，但是这些物理学家的数学功力明显不足，因此有一段时间带领他的学生们研究过物理学，并独立发现了广义相对论，只是不好意思和物理学家争功劳，将广义相对论的功劳全部让给了爱因斯坦。\n\n广义相对论相对于这位大数学家在数学上的贡献，其实是算不了什么的，只是由此可看出这位大数学家品格的高尚之处。如果再去看看牛顿之流的人物的品行，整天和莱布尼茨、虎克等人争功劳，利用自己的优势地位打压他人，甚至闹得上法庭，和这位希尔伯特先生比起来，简直就是个小丑。\n\n说到这里，你可能对这位大数学家“希尔伯特”有了一些初步映象，感觉到了他的重要性，不过他在数学上的主要成就可不是几句话说得清楚的。首先，他是一位集大成者，精通当时数学所有分支领域，在数学的各个领域都有较大的贡献，当然这些成就只能让他成为一个大科学家，不能带他进入这层楼。事实上这位“希尔伯特”解决的任何一个数学问题都够不到这层楼的高度，那么他怎么混到这层楼来了呢？\n\n话得从1900年说起，当时还很年轻的希尔伯特在当时的世界数学大会上做了一个报告，高屋建瓯地提出了著名的23个未解决的数学问题，然后整个二十世纪上半期，全世界的数学家们都在这23个问题的指导下展开研究，直到现在仍然有许多数学家受这23个问题的指导在进行研究。例如我们熟知的哥德巴赫猜想，就属于其中第8个问题素数分布的一个子问题。\n\n如果用“高瞻远瞩”来形容这位大数学家的话，那么这个世界上恐怕没有第二个人再配得上“高瞻远瞩”这四个字，不论是欧拉、高斯、牛顿、爱因斯坦还是被誉为最有才华的数学家伽罗华，概不例外。\n\n虽然那23个问题是归纳总结出来的，并不全是原创，但是其中有不少问题是可以上升到哲学的高度，引起深度思考的。可能大多数人都会觉得希尔伯特是进不到这层楼的，我们知道提出问题的人和解决问题的人是一样伟大的，何况他提出的问题是如此之多，基于这点，个人觉得应该让希尔伯特跨进这层楼的门槛里。\n看完这位希尔伯特的成就，你可能会觉得对你的世界观并没有产生任何影响。确实如此，他提出的问题不是用来影响你的，而是用来影响其他大科学家和大哲的，下面再来说说另一位对他提出的23个问题中的第2个问题有杰出贡献的大哲，你就会感觉到大哲们的成果的威力了。\n \n**2、哥德尔 (1906~1978)**\n这位大哲的名字叫“哥德尔 (G?del) ”，你可能从来也没有听说过这个名字，即使你读了一个数学系的博士学位，如果你的研究方向不和这位大哲对口的话，你也不一定了解这位大哲的成就，更不知道他的成果对我们这个世界有何意义。\n\n简单地说，这位大哲20多岁时就证明了两个定理，一个叫做“哥德尔完全性定理”，另一个更重要的叫做“哥德尔不完全性定理”。你也许会觉得奇怪，第9层楼的成就就已经上升到了公理的高度，这种证明定理的事情不是学者和大师们做的事情吗？怎么能比第9层楼的成就还高呢？下面就来简单说一下这两个定理的含义，你就会明白这属于系统级的定理，绝不是普通的定理和公理所能比拟的。\n\n“哥德尔完全性定理”证明了逻辑学的几条公理是完备的，即任何一个由这些公理所产生出的问题，在这个公理系统内可以判定它是真的还是假的，这个结论表明了我们人类所拥有的逻辑思维能力是完备的。这条定理并不能将其带入这层楼来，带其进入这层楼的是另一条定理。\n\n“哥德尔不完全性定理”是在1930年证明的，它证明了现有数学的几条公理（ZF公理系统）是不完备的，即由这些公理产生出的问题，无法由这几条公理判断它是真的还是假的。例如希尔伯特23个问题中的第1个问题，也就是著名的康托尔连续统假设，哥德尔在1938年证明了现有公理系统中不能证明它是“假”的，科恩（Cohen，或许也可以称得上是“半”个大哲）在1963年证明了现有公理系统不能证明它是“真”的。最有趣的是，即使你将某个不可判定的问题，作为一条新的公理加入进去，所组成的新的公理系统仍然是不完备的，即你无法构造一个有限条公理的系统，让这个公理系统是完备的。\n\n也许你仍然无法理解上面这段话的含义，不妨先说一下它对我们现实世界的影响。你可能知道1936年出现的图灵机是现代计算机的理论模型，如果没有哥德尔不完全性定理的思想，图灵机什么时候能出来是很难说的，所以这位哥德尔可以算作计算机理论的奠基者的奠基者。计算机对我们这个世界产生的影响比原子弹大了多少，我想不用我说大家也都清楚。当然，对现实世界的影响只能把哥德尔同图灵等人一样划到大科学家那一层去，能进入这层乃是另有原因。\n\n\n可能你看过《未来战士》、《黑客帝国》、《I，Robot》之类的科幻电影，于是你产生制造一个和人一样或者比人更高一级的智能机器人的想法，这就引入了一个达到哲学高度的问题，“人到底能不能制造出具有和人一样的思维能力的机器来？”。\n我只能告诉你，“你的愿望是良好的，但现实是残酷的”。如果你仔细思考一下不完全性定理的含义，并结合现代计算机所具有的能力分析一下，你会发现这个问题的答案暂时是否定的。如果你想造出和人一样思维能力的机器，那么你需要去好好学习这位大哲及其后续研究者的成果，并在他们的基础上有新的突破才行。\n为了说明这位大哲所研究领域的重要性，这里顺便再讨论一个我们日常争议不休的问题，那就是孔夫子的“人之初、性本善”以及西方认为“人之初、性本恶”的观点孰优孰劣的问题。可能有许多人发现西方社会现在领先我们，于是就认为“性本恶”是对的，“性本善”是错的，中国应该抛弃以前的旧思想，改用西方的思想。当然也有一些老学究们，认为中国的人文思想是领先于西方的，自然而然地认为“性本善”是对的，“性本恶”是错的。\n\n如果你学过大哲用过的公理化的分析方法，你就知道一套系统的多条公理间只要不会推导出矛盾的地方，即可以自圆其说，那么它可以看作是对的。这样你可以很轻易地给这个问题下一个结论，即“性本善”和“性本恶”是对等的，不存在孰优孰劣的问题，更不存在谁对谁错的问题。只要你不同时将“性本善”和“性本恶”放入一个系统内，那么是不会有问题的，甚至你也可以认为“人之初、既无善、亦无恶”，或者认为“人之初、部分善、部分恶”，都是可以自圆其说的，所以我们的老祖宗提出的思想并没有问题，之所以落后乃是其他原因造成的。这个问题其实在高斯所处的时代就有了结论，那时有人提出了非欧几何，即平行线公理问题，有人认为过一点可以作多条平行线，还有人认为平行线在无穷远点是相交的，和欧氏几何关于过一点只能作一条平行线的公理都是矛盾的，但是他们各自的系统内推导出的结论都是正确的。\n\n上面说的只是对哥德尔不完全性定理的一些粗浅解析，实际上如果深入思考一下它的含义的话，你会发现它对物理学等许多学科有重大影响，包含的道理实在是深刻，远非一般的思想所能比拟，有兴趣者不妨“google”或“百度”一下“哥德尔”。或许只有我们的老祖宗“老子”提出的哲学思想，深度可以有得一比。\n\n哥德尔不完全性定理也给那些认为科学是严谨的人当头一棒，原来连数学这样的纯理论学科都是不严谨的，其他学科就更不用说了。\n\n\n至此，已经说完数学上的大哲，下面不妨再看看物理学上的大哲，物理学上好像只出过一位叫“海森堡”的大哲（注：由于本人对物理学不甚了解，不知道“霍金”够不够得上大哲的称号）。\n \n**3、海森堡 (1901~1976)**\n海森堡这个名字相信没有几个人不知道的，大部分人在学习物理时都学过他的“测不准关系”，也就是因为这个“测不准关系”，海森堡爬到了第十层楼。\n\n如果你看过《时间简史》和《霍金讲演录－黑洞、婴儿宇宙及其他》，你也许已经了解测不准关系的威力，所以这里不想做过多的讨论，只谈一些和本土产生的哲学思想相关的东西。\n\n首先看看争论了几千年，并且现在仍然有人在争论不休的“宿命论”问题。霍金认为，只要这个宇宙有一个初始状态，粒子的运动是按照一定物理定律进行的（比如相对论、量子力学属于这些物理定律的一部分），那么所有的粒子运动轨迹将是确定的，然后只要你承认唯物论，即精神是由物质决定的，那么宿命论就是“对”的。当然由于测不准关系的存在，对人而言，又是无法准确预测的，因此也可以将其看作是“不对”的。简单的说，可以认为宿命论是“对”的是绝对的，宿命论是“不对”的是相对的。\n可能上面这段话你现在仍然难以理解，或许你又觉得你的命运并不是上天注定的，而是可以通过自己的努力可以改变的。我要告诉你的是，你在想什么也是事先已注定的，包括你在预测本身也是事先注定的，因为大脑思考问题最终是基本粒子运动的结果，而这些粒子的运动必然要遵循物理定律进行，所以你会不会努力，想不想努力，包括你在想你该不该努力这件事本身也是事先注定的。顺便说一下，你现在正在看这篇文章，可能正在想这个宿命论问题值得怀疑，或者觉得写得不够好，准备砸个板砖上来；或者你在想这篇问题写得有点意思，准备看完后转给朋友看一看；又或者你看到这里，觉得很累了，准备休息一下；…；这些都是上天事先就注定的。从你自身的相对角度看，因为你事先不知道后来会发生什么，也可以认为不是事先注定的，可能这句话有些不好理解，不妨好好理解前面说过的公理化思想。\n\n如果你没看过《霍金讲演录－黑洞、婴儿宇宙及其他》，你可能会觉得很惊讶，宿命论历来不都被认为是唯心论吗，怎么由唯物论推导出了宿命论呢？现实就是这样和你开了一个大的玩笑，不过这个玩笑也是事先注定的。如果你再仔细用公理化的方法思考一下唯物论和唯心论的矛盾性，就像前面分析性善论和性恶论一样，你会发现唯物论、唯心论不一定就是冲突的，矛盾的双方是可以统一的，只要你不要同时将唯物和唯心放进同一个系统中就行。\n\n当然也有聪明者仍然会怀疑宿命论问题的正确性，因为这里有一个前提条件，即宇宙要有一个初始状态。宇宙有没有初始状态，我们并不知道啊，虽然有大爆炸学说，但那也只是假说而已，并没有得到确证，有些人就认为宇宙是一直都存在的。这样看来似乎你又有合理的理由在怀疑宿命论了，不过我仍然要告诉你，你现在在怀疑宿命论仍然是事先注定的，不相信的话就来看看下面的分析。\n\n虽然宇宙的初始状态值得怀疑，但是这个宇宙至少已经存在了一段时间，这点我想是毋庸置疑的。我们可以在我们已知的宇宙存在的这段时间内，任意取一个时间点t0，那么在这个时间点t0上，所有的粒子都有一个运动状态。在时间点t0之后的时间里，由于粒子运动是按照物理定律进行的，因此粒子运动轨迹由时间点t0的状态决定。说白一点，如果取100年前的一个时间点作为t0，那么现在的所有粒子运动状态100年前就已经确定了，如果取10000年前一个时间点作为t0，那么最近10000年内所有粒子运动的轨迹在10000年前就确定了，当然，你可以取更早的时间，比如100亿年前的时间点。\n\n总之，现在你会发现宇宙有没有初始状态并不会影响宿命论的正确性，所以这个世界的一切都是注定的。只不过由于粒子间相互影响过于复杂，我们无法知道这些粒子的运动轨迹而已。当然，如果将测不准关系用上的话，那么就是这个运动轨迹对人来说是无法准确预测的，所以不妨开个玩笑：“算命先生经常算得不准大概是测不准关系的缘故吧”。\n如果你再深入思考一下测不准关系，你会发现这是一个测量系统的问题。由于宿命论的存在，这个世界本身实际上是确定的，是“准“的，之所以测不准乃是我们人类所具有的测量能力依赖于基本粒子造成的。所以我在前面说宿命论是“不对”的是相对的，它是相对于我们人类的测量能力而言的。根岑（Gentzen，曾任希尔伯特的助手）在一个更强的系统内证明了ZF系统内的问题都是可判定的，从一个侧面说明这个世界本身是确定的。（注：它和哥德尔不完全性定理并不矛盾，由于数学上的复杂性，这里就不详细解释了）\n\n不妨再想想我们老祖宗提出的“是庄周梦见了蝴蝶？还是蝴蝶梦见了庄周？”，“风动？幡动？还是心动？”之类的问题，当然以前你都认为这是纯粹的唯心主义，甚至认为是封建糟粕，但是如果结合测不准关系的内涵，再结合前面所说的公理化分析方法进行分析，估计你现在不敢轻易地下结论。\n   \n也许到现在你仍然无法理解为什么把大哲们划在了大科学家的上一层，你可能仍然觉得万有引力、相对论等成果是最伟大的。下面就来谈谈为什么大哲比大科学家高一层。\n\n如果把人类在现有能力情况下，将来所能够拥有的知识总集看成是一个集合A，人类现在已有的知识总集看成是集合B，显然，集合B只是集合A的一个子集，并且是很小的一个子集。牛顿力学、相对论这些理论只能算作集合B里的一个子集，相对于集合A，只能算作是沧海一粟。 换句话说，在人类现有能力可做的事情集合中，牛顿力学和相对论等理论给出了详细的办法让你可以做其中的一些事情，当然剩下的更多的事情是牛顿力学和相对论所无法解决的。\n\n哥德尔不完全性定理和测不准关系的意义在于，它指出集合A的范围，即将人类现有能力发挥到极限的情况下，那些事情是你能做到的，那些是你不能做到的。当然，它并没有给出具体的方法让你去做你能做到的事情，它只是告诉我们我们人类现在发现的能力所能达到的极限。或许将来发现人类有其他新的未发现的能力，那么这个极限就被打破了。比如将来能发现不依赖于基本粒子的其他测量方法，并且测量过程中不会改变其他粒子的状态，那么测不准关系就被打破了。\n\n 看到这里，估计你已经发现了一些秘密，科学兜了一大圈，最终还是回到了哲学，也就是我们所认为的玄学上。同时你也会发现，我们老祖宗提出的所谓玄学，原来和现代科学是相通的，并非象某些人想像的那样全是糟粕。如果有人认为西方现代暂时领先我们，进而就认为西方古代就已经超越我们，我们老祖宗就已经落后西方，他们的思想都是糟粕的话，那么我认为他可能犯了崇洋媚外的毛病。我不得不化用一句周杰伦在春晚上的歌词送给他：“你不妨抓一副我们祖传的中医良方，治一治你那崇洋媚外的内伤”。顺便告诉他一下，中医用的阴阳五行理论，它的前提假设就是宿命论。\n \n上面说的这几位大哲的成果，可能对你的世界观会有很大的影响，于是你可能会羡慕起这些大哲们的成果来。如果你有大志的话，你会希望有朝一日你也能变成大哲，但是你发现上面的大哲是研究数学和物理学的，而你是学计算机的程序员，那么是不是没有机会变成大哲呢？\n\n如果你能将NP难题给彻底解决掉，意味着计算机内的计算的奥秘基本被揭开，或许你可以进到这层楼来；或者你能发现另外一套计算机可以理解的数学公理系统，并且这个公理系统是完备的，那么计算机取代人类进行思维的一个必要条件就满足了，计算机将具有真正意义上的“逻辑思维和推理能力”，你可以轻松地进到这层楼来。如果你发现了新的方法可以打破测不准关系，同样你也可以轻松地进到这层楼来。\n\n如果你能彻底揭开人类抽象思维的奥妙，并让计算机懂得了如何创建抽象，具备抽象思维能力，那么也就具备了“设计能力”，可以取代人类进行各种设计了，你也可以轻松地进到这层楼来。顺便说一下，如果你对软件设计有真正深刻理解的话，就会明白这不是在写科幻小说。对此感兴趣者，不妨好好地研究一下程序切片方面的技术，会让你对软件设计和测试等方面的理解有质的提高，或许有一天你能打开这扇大门。\n当然，计算机要完全取代人还有其他必要条件，后面还会提及。\n\n值得一提的是，虽然第10层楼是本文中所写的最高层，但是大哲们并没有觉得他们到了顶层，他们通常都还会努力寻找通往更高一层的楼梯。如果你也有成为天下第一的想法，那么你或许会想要做什么事情才能超越大哲们的成就，当然，这都得依赖于找到更高一层楼的楼梯。\n\n个人认为，再往上一层楼的楼梯是通往天堂的道路，也就是说第11层楼的名字叫“天堂”，是“上帝”住的地方，而不是人住的地方。如果将来某天有人能爬到天堂的话，那么他已经不是人了，而是由人变成了“上帝”。\n\n你也许会怀疑这个世界到底有没有“天堂”，“上帝”是否根本就不存在，我也很有同感。因此有必要再写上一段文字，讨论一下“上帝”的问题。如果你想了解天堂的奥妙，有没有办法让你变成“上帝”，不妨看看继续往下看看第11层楼的玄妙。注意我这里用的是“玄妙”二字，因为上帝在大部分人眼里估计都是“玄之又玄”的东西。\n \n###  第11层 上帝\n看了上面的小标题，你可能会觉得奇怪，这篇文章不是讲“程序员的十层楼”吗？怎么冒出了第11层来了？\n其实这并不矛盾，程序员确实只有十层楼，因为爬到第11层时，已经变成上帝，不再是程序员了；所以超出10层楼本身并不重要，关键的问题是看你有没有能力变成上帝。\n**1、谁是上帝？**\n菜鸟们认为Linus Torvalds是程序员中的上帝，看完了前面各层楼的介绍，此时再看到这句话，相信你要忍不住在心里笑起来。当然，你会不会笑起来是事先注定的。Don Knuth也不是上帝，他离上帝还有三层楼的距离。即使是大哲们，他们离天堂也还差一层楼，因此这个世界上有史以来还没有任何一个人变成过上帝。\n\n我们感兴趣的是，将来会不会有人爬到比大哲们更高的楼层上，变成了上帝。\n要变成上帝，你得有上帝一样的能力，上帝会造人，你会吗？\n\n你也许会怯生生地问：“我可以和爱人生小孩，算不算造人？”，你可能还会理直气壮地说：“现在生物学上都可以克隆人了，早就有人掌握了造人的方法”。\n\n事实上克隆人需要有人的体细胞，必须要先有人才会有体细胞。上帝造人时，这个世界上并没有人，是从无生命的物质“尘土”中创造出的人。因此，用最原始的方法生人和克隆人都是从有生命信息的物质中生人，不能算作造人。\n\n这样看来，你根本不会造人，不过我可以告诉你一个“玄方”，让你有机会学会如何造人。\n\n如果你揭开了人类情感的奥秘，让计算机也可以拥有和人类一样的情感，那么计算机将可以理解人类的需求，具有了“情商”，将具有完整的和人一样的能力。此时，人类进化到了机器人，科幻小说将变成现实，也就是说你已经掌握了真正的造人能力，晋升为“上帝”了。\n\n未来到底有没有人能变成“上帝”，人能不能进化到机器人，这是宿命论中事先注定了的。说到这里，不妨再告诉你一个打破宿命论的方法，这个方法就是你要爬到比上帝还要高的楼层。\n“还有比上帝还高的楼层？”，你可能会第1时间内冒出这个问题，其实我也有同样的怀疑。因此在写第12层楼前，有必要弄清楚它到底存不存在，即你可不可以骑到上帝的头上的问题。\n\n**2. 骑到上帝的头上？**\n为了解决是否可以骑到上帝的头上这个问题，不妨先假设存在比上帝高的楼层，也就是存在打破宿命论的方法。\n宿命论的本质原因是因为时间是单向运行，不可逆转造成的。如果你找到一种可以使时间逆转的方法，那么你就打破了宿命论，爬到了比上帝还高的楼层。\n看到这里，你也许会摆脱刚才陷于宿命论的困惑情绪，变得充满希望般高兴起来。不过，如果你的逻辑思维能力足够好，仔细思考一下，会发现存在一个逻辑上的悖论。\n在你找到时间逆转的方法之前，显然这个世界仍然是需要服从宿命论的，也就是说你能不能找到打破宿命论的方法是事先注定的。假设你在某个时间点t0处找到了打破宿命论的方法，你在打破宿命论后，想利用时间逆转的方法回到某个时间点t2。下面来看看你到底能不能回到时间点t2。\n\n取位于t0和t2之间的任意一个时间点t1，你在回到时间点t2之前，必须先经过时间点t1，考虑你到达t1的那一时刻，由于t1比t0要早，这个时间点上你还没有找到时间逆转的方法，所以到了时间t1点后，你无法再使用时间逆转的能力回到时间点t2去，所以你永远也回不到时间点t2，由于时间点t2是任意取的，因此，你永远也无法使时间逆转，或者说你根本就没打破过宿命论，这与你在时间点t0打破了宿命论产生了矛盾。\n\n上面这段话看起来似乎有点像“人永远迈不出一步”的诡辩一样，你可能会想返回到时间点t1时，仍然可以拥有时间逆转能力啊。不过你又会发现一个新的问题，时间点t1本来是没有时间逆转能力的，现在又认为时间点t1又有时间逆转能力，那时间点t1到底是有还是没有时间逆转能力呢？或者说在时间点t0前，宿命论注定了时间点t1是没有时间逆转能力的，现在你又认为时间点t1具有时间逆转能力，那么这两个时间点t1究竟是不是同一个时间点？如果不是同一个时间点，说明你没有回到过去；如果是同一个时间点的话，岂不是自相矛盾吗？\n\n为了说得更形象一些，不妨假设你坐一艘超光速飞船，准备从时间点t0回到时间点t2去，假设你回到t2后，随着时间的流逝，又达到了时间点t0，如果这时你又再次坐超光速飞船返回时间点t2，那么一个值得思考的问题就出现了，“你在时间点t2能不能看到上次返回时间点t2的飞船？”\n\n如果回答不能看到飞船，那么上次返回的飞船那里去了呢？显然很难解释通。如果回答能看到飞船，那么你可以到达时间点t2后，下次时间到达t0时，你又坐飞船返回t2，这次你将可以看到上两次的两艘飞船。如果这样一直循环下去，最后你会发现你可以在时间点t2看到无穷多的飞船。用程序员的术语说，叫做“程序陷入了死循环”，最后系统必然会出现“Out of Memory”现象而崩溃。\n\n当然，你也可以认为有其他的方法，不需要飞船，可以一次性从时间点t0直接跳跃到时间点t2，并不需要经过时间点t1。下面不妨来分析一下这个方法是否可行。\n既然是直接跳跃到时间点t2，那么你必然是在一个无穷小的时间里出现在时间点t2的某个空间里，例如你要在时间点t2回到某个广场上。首先说明一下为什么是无穷小的时间里出现的，因为如果不是无穷小的时间里出现的话，那么必然可以取到一个时间点t1，会导致前面所说的时间点t1上出现悖论。\n\n你在广场上出现的时，广场上的空气必然要为你让开空间，而这是在无穷小的时间里完成的，那么很容易推导出你周围的空气获得的加速度和速度都是无穷大，因而它具有的动能也是无穷大，无穷大的能量和无穷大的速度意味着什么？一只鸟都可以将飞机撞下来，如果宇宙是有限大的话，它可以让这个宇宙炸毁无穷次；即使宇宙是无限大，它也足以让宇宙炸毁一次。宇宙都毁灭了，又何来的时间？还能说你回到了时间点t2吗？\n\n也许上面说的这些你仍然难以相信，不妨再说得更现实一些，假设你要回到100年前的一个时间点，这100年中，天上有多少流星湮灭了？有多少新星生成了？宇宙膨胀了多少？你有能力让湮灭的流星复原、生成的新星重新返回未生成前的状态，膨胀的宇宙收缩回去吗？如果这些东西的状态没有回复到100年前，又怎么能说明你回到的是100年前的时间点呢?\n\n根据上面的推导和分析，个人认为使时间逆转的方法是不存在的，所以第12层楼是不存在的，自然没有人可以骑到“上帝”的头上。\n**宿命论将在有时间的时间里永远统治这个世界。**\n居天下之广居，立天下之正位，行天下之大道，得志与民由之，不得志独行其道，富贵不能淫，贫贱不能移，威武不能屈，此之谓大丈夫。\n> 转载自\n**Copyright © 1900-2016, NORYES, All Rights Reserved.**\n**[http://www.cnblogs.com/noryes/](http://www.cnblogs.com/noryes/)**\n","slug":"-📣📣--软件工程师的十大层次","published":1,"updated":"2024-05-16T07:39:11.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ln000a2omvh93ud84u","content":"<p>自西方文艺复兴以来，中国在自然科学方面落后西方很多，软件领域也不例外。当然现在中国的许多程序员们对此可能有许多不同的意见，有些人认为中国的程序员水平远落后于西方，有些则认为中国的程序员个人能力并不比西方的程序员差，只是整个软件产业落后而已。</p>\n<p>那么，到底中国的程序员水平比西方程序员水平差，还是中国有许多优秀的程序员达到或超过了西方程序员同等水平呢？要解决这个问题，必须先知道程序员有多少种技术层级，每个层级需要什么样的技术水平，然后再比较中国和西方在各个技术层级的人数，就可以知道到底有没有差距，差距有多大。<br>当然，对于如何划分程序员的技术层级，不同公司或不同人会有不同的划分标准，下面的划分仅代表个人的观点，如有不当之处，还请砸板砖予以纠正。</p>\n<h3 id=\"第1层-菜鸟\"><a href=\"#第1层-菜鸟\" class=\"headerlink\" title=\"第1层 菜鸟\"></a>第1层 菜鸟</h3><p>   第1层楼属于地板层，迈进这层楼的门槛是很低的。基本上懂计算机的基本操作，了解计算机专业的一些基础知识，掌握一门基本的编程语言如C&#x2F;C++，或者Java，或者JavaScript，…，均可入门迈进这层。</p>\n<p>在这层上，中国有着绝对的优势，除了从计算机专业毕业的众多人数外，还有大量的通信、自动化、数学等相关专业的人士进入这一行，此外还有众多的其他专业转行的人士，人数绝对比西方多出甚多。并且还有一个优势就是我们这层人员的平均智商比西方肯定高。</p>\n<p>没有多少人愿意一辈子做菜鸟，因为做”菜鸟”的滋味实在是不咋的，整天被老大们吆喝着去装装机器，搭建一下测试环境，或者对照着别人写好的测试用例做一些黑盒测试，好一点的可以被安排去写一点测试代码。当然如果运气”好”的话，碰到了国内的一些作坊式的公司，也有机会去写一些正式的代码。<br>所以，菜鸟们总是在努力学习，希望爬更高的一层楼去。</p>\n<h3 id=\"第2层-大虾\"><a href=\"#第2层-大虾\" class=\"headerlink\" title=\"第2层 大虾\"></a>第2层 大虾</h3><p>   从第1层爬到第2层相对容易一些，以C&#x2F;C++程序员为例，只要熟练掌握C&#x2F;C++编程语言，掌握C标准库和常用的各种数据结构算法，掌握STL的基本实现和使用方法，掌握多线程编程基础知识，掌握一种开发环境，再对各种操作系统的API都去使用一下，搞网络编程的当然对socket编程要好好掌握一下，然后再学习一些面向对象的设计知识和设计模式等，学习一些测试、软件工程和质量控制的基本知识，大部分人经过2～3年的努力，都可以爬到第2层，晋升为”大虾”。</p>\n<p>中国的”大虾”数量和”菜鸟”数量估计不会少多少，所以这层上仍然远领先于西方。<br> 大虾们通常还是有些自知之明，知道自己只能实现一些简单的功能，做不了大的东西，有时候还会遇到一些疑难问题给卡住，所以他们对那些大牛级的人物通常是非常崇拜的，国外的如Robert C. Martin、Linus Torvalds，国内的如求伯君、王志东等通常是他们崇拜的对象。其中的有些人希望有一天也能达到这些大牛级人物的水平，所以他们继续往楼上爬去。</p>\n<h3 id=\"第3层-牛人\"><a href=\"#第3层-牛人\" class=\"headerlink\" title=\"第3层 牛人\"></a>第3层 牛人</h3><p>由于”大虾”们经常被一些疑难问题给卡住，所以有了”大虾”们只好继续学习，他们需要将原来所学的知识进一步熟练掌握，比如以熟练掌握C++编程语言为例，除了学一些基础性的C++书籍如《C++ Primer》，《Effective C++》，《Think in C++》，《Exception C++》等之外，更重要的是需要了解C++编译器的原理和实现机制，了解操作系统中的内部机制如内存管理、进程和线程的管理机制，了解处理器的基础知识和代码优化的方法，此外还需要更深入地学习更多的数据结构与算法，掌握更深入的测试和调试知识以及质量管理和控制方法，对各种设计方法有更好的理解等。</p>\n<p>学习上面说的这些知识不是一挥而就的，不看个三五十本书并掌握它是做不到的。以数据结构算法来说，至少要看个5～10本这方面的著作；以软件设计来说，光懂结构化设计、面向对象设计和一些设计模式是不够的，还要了解软件架构设计、交互设计、面向方面的设计、面向使用的设计、面向数据结构算法的设计、情感化设计等，否则是很难进到这个楼层的。</p>\n<p>当然除了上面说的知识外，大虾们还需要去学习各种经验和技巧。当然这点难不倒他们，现在出版的书籍众多，网络上的技术文章更是不胜数，然后再去各种专业论坛里泡一泡，把这些书籍和文章中的各种经验、技能、技巧掌握下来，再去学习一些知名的开源项目如Apache或Linux操作系统的源代码实现等。此时对付一般的疑难问题通常都不在话下，菜鸟和大虾们会觉得你很”牛”，你也就爬到了第3层，晋升为”牛人”了。</p>\n<p>看了上面所讲的要求，可能有些大虾要晕过去了，成为牛人要学这么多东西啊！要求是不是太高了？其实要求一点也不高，这么点东西都掌握不了的话，怎么能让别人觉得你”牛”呢？<br>需要提一下的是，进入多核时代后，从第2层爬到第3层增加了一道多核编程的门槛。当然要迈过这道门槛并不难，已经有很多前辈高人迈进了这道门槛，只要循着他们的足迹前进就可以了。想迈进这道门槛者不妨去学习一下TBB开源项目的源代码(链接：<a href=\"http://www.threadingbuildingblocks.org/)%EF%BC%8C%E7%84%B6%E5%90%8E%E4%B8%8AIntel%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88http://softwareblogs-zho.intel.com/%EF%BC%89%E5%92%8C%E5%A4%9A%E6%A0%B8%E8%AE%BA%E5%9D%9B%EF%BC%88http://forum.csdn.net/Intel/IntelMulti-core/%EF%BC%89%E5%8E%BB%E7%9C%8B%E7%9C%8B%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0%EF%BC%8C%E5%86%8D%E4%B9%B0%E4%B8%8A%E5%87%A0%E6%9C%AC%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8B%E3%80%82\">http://www.threadingbuildingblocks.org/)，然后上Intel的博客（http://softwareblogs-zho.intel.com/）和多核论坛（http://forum.csdn.net/Intel/IntelMulti-core/）去看看相关文章，再买上几本相关的书籍学习一下。</a><br>在国内， 一旦成为”牛人”，通常可以到许多知名的公司里去，运气好者可以挂上一个架构师的头衔，甚至挂上一个”首席架构师”或者”首席xx学家”的头衔也不足为奇。有不少爬到这层的人就以为到了楼顶了，可以眼睛往天上看了，开始目空一切起来，以为自己什么都可以做了，什么都懂了，经常在网络上乱砸板砖是这个群体的最好写照。由此也看出，国内的牛人数量仍然众多，远多于西方的牛人数量，在这层上仍然是领先的。</p>\n<p>也有不少谦虚的”牛人”，知道自己现在还不到半桶水阶段。他们深知爬楼的游戏就像猴子上树一样，往下看是笑脸，往上看是屁股。为了多看笑脸，少看屁股，他们并没有在此停步不前，而是继续寻找到更上一层的楼梯，以便继续往上爬。</p>\n<h3 id=\"第4层-大牛\"><a href=\"#第4层-大牛\" class=\"headerlink\" title=\"第4层 大牛\"></a>第4层 大牛</h3><p>从第3层爬到第4层可不像上面说过的那几层一样容易，要成为大牛的话，你必须要能做牛人们做不了的事情，解决牛人们解决不了问题。比如牛人们通常都不懂写操作系统，不会写编译器，不懂得TCP&#x2F;IP协议的底层实现，如果你有能力将其中的任何一个实现得象模象样的话，那么你就从牛人升级为”大牛”了。</p>\n<p>当然，由于各个专业领域的差别，这里举操作系统、编译器、TCP&#x2F;IP协议只是作为例子，并不代表成为”大牛”一定需要掌握这些知识，以时下热门的多核编程来说，如果你能比牛人们更深入地掌握其中的各种思想原理，能更加自如的运用，并有能力去实现一个象开源项目TBB库一样的东西，也可以成为”大牛”，又或者你能写出一个类似Apache一样的服务器，或者写出一个数据库，都可以成为”大牛”。</p>\n<p>要成为”大牛”并不是一件简单的事情，需要付出比牛人们多得多的努力，一般来说，至少要看过200~400本左右的专业书籍并好好掌握它，除此之外，还得经常关注网络和期刊杂志上的各种最新信息。</p>\n<p>当”牛人”晋升为”大牛”，让”牛人们”发现有比他们更牛的人时，对”牛人”们的心灵的震撼是可想而知的。由于牛人们的数量庞大，并且牛人对大虾和菜鸟阶层有言传身教的影响，所以大牛们通常能获得非常高的社会知名度，几乎可以用”引无数菜鸟、大虾、牛人竞折腰”来形容，看看前面提过的Linus Torvalds等大牛，应该知道此言不虚。</p>\n<p>虽然成为”大牛”的条件看起来似乎很高似的，但是这层楼并不是很难爬的一层，只要通过一定的努力，素质不是很差，还是有许多”牛人”可以爬到这一层的。由此可知，”大牛”这个楼层的人数其实并不像想像的那么少，例如比尔·盖茨之类的人好像也是属于这一层的。</p>\n<p>由于”大牛”这层的人数不少，所以也很难统计除到底是中国的”大牛”数量多还是西方的大牛数量多？我估计应该是个旗鼓相当的数量，或者中国的”大牛”们会更多一些。</p>\n<p>看到这里，可能会有很多人会以为我在这里说瞎话，Linus Torvalds写出了著名的Linux操作系统，我国并没有人写出过类似的东西啊，我国的”大牛”怎么能和西方的比呢? 不知大家注意到没有，Linus Torvalds只是写出了一个”象模象样”的操作系统雏形，Linux后来真正发展成闻名全球的开源操作系统期间，完全是因为许多支持开源的商业公司如IBM等，派出了许多比Linus Torvalds更高楼层的幕后英雄在里面把它开发出来的。</p>\n<p>可能有些菜鸟认为Linus Torvalds是程序员中的上帝，不妨说个小故事：<br>Linus，Richard Stallman和Don Knuth（高德纳）一同参加一个会议。<br>Linus 说：”上帝说我创造了世界上最优秀的操作系统。”</p>\n<p>Richard Stallman自然不甘示弱地说：”上帝说我创造了世界上最好用的编译器。”<br>Don Knuth一脸疑惑的说：”等等，等等，我什么时候说过这些话？”</p>\n<p>由此可以看出，Linus Torvalds的技术水平并不像想像中那么高，只是”牛人”和”大虾”觉得”大牛”比他们更牛吧了。在我国，有一些当时还处于”大虾”层的人物，也能写出介绍如何写操作系统的书，并且书写得非常出色，而且写出了一个有那么一点点象模象样的操作系统来。我想中国的”大牛”们是不会比西方差的，之所以没有人写出类似的商业产品来，完全是社会环境的原因，并不是技术能力达不到的原因。</p>\n<p>“大牛”们之所以成为大牛，主要的原因是因为把”牛人”给盖了下去，并不是他们自己觉得如何牛。也许有很多菜鸟、大虾甚至牛人觉得”大牛”这层已经到顶了，但大多数”大牛”估计应该是有自知之明的，他们知道自己现在还没有爬到半山腰，也就勉强能算个半桶水的水平，其中有些爬到这层没有累趴下，仍然能量充沛，并且又有志者，还是会继续往更上一层楼爬的。</p>\n<p>看到这里，也许有些菜鸟、大虾、牛人想不明白了，还有比”大牛”们更高的楼层，那会是什么样的楼层？下面就来看看第5层楼的奥妙。</p>\n<h3 id=\"第5层-专家\"><a href=\"#第5层-专家\" class=\"headerlink\" title=\"第5层 专家\"></a>第5层 专家</h3><p>当大牛们真正动手做一个操作系统或者类似的其他软件时，他们就会发现自己的基本功仍然有很多的不足。以内存管理为例，如果直接抄袭Linux或者其他开源操作系统的内存管理算法，会被人看不起的，如果自动动手实现一个内存管理算法，他会发现现在有关内存管理方法的算法数量众多，自己并没有全部学过和实践过，不知道到底该用那种内存管理算法。</p>\n<p>看到这里，可能有些人已经明白第5层楼的奥妙了，那就是需要做基础研究，当然在计算机里，最重要的就是”计算”二字，程序员要做基础研究，主要的内容就是研究非数值”计算”。</p>\n<p>非数值计算可是一个非常庞大的领域，不仅时下热门的”多核计算”与”云计算”属于非数值计算范畴，就是软件需求、设计、测试、调试、评估、质量控制、软件工程等本质上也属于非数值计算的范畴，甚至芯片硬件设计也同样牵涉到非数值计算。如果你还没有真正领悟”计算”二字的含义，那么你就没有机会进到这层楼来。<br>可能有人仍然没有明白为什么比尔·盖茨被划在了大牛层，没有进到这层来。虽然比尔·盖茨大学未毕业，学历不够，但是家有藏书2万余册，进入软件这个行业比绝大部分人都早，撇开他的商业才能不谈，即使只看他的技术水平，也可以算得上是学富五车，顶上几个普通的计算机软件博士之和是没有问题的，比起Linus Torvalds之类的”大牛”们应该技高一筹才对，怎么还进不了这层楼呢？</p>\n<p>非常遗憾的是，从Windows操作系统的实现来看，其对计算的理解是很肤浅的，如果把Google对计算方面的理解比做大学生，比尔·盖茨只能算做一个初中生，所以比尔·盖茨永远只能做个大牛人，成不了”专家”。</p>\n<p>看到这里，也许国内的大牛们要高兴起来了，原来比尔·盖茨也只和我等在同一个层次，只要再升一层就可以超越比尔·盖茨了。不过爬到这层可没有从”牛人”升为”大牛”那么简单，人家比尔·盖茨都家有2万多册书，让你看个500~1000本以上的专业书籍并掌握好它应该要求不高吧。当然，这并不是主要的条件，更重要的是，需要到专业的学术站点去学习了，到ACM，IEEE，Elsevier，SpringerLink，SIAM等地方去下载论文应该成为你的定期功课，使用Google搜索引擎中的学术搜索更是应该成为你的日常必修课。此外，你还得经常关注是否有与你研究相关的开源项目冒出来，例如当听到有TBB这样针对多核的开源项目时，你应该第一时间到Google里输入”TBB”搜索一下，将其源代码下载下来好好研究一番，这样也许你的一只脚已经快迈进了这层楼的门槛。</p>\n<p>当你象我上面说的那样去做了以后，随着时间的推移，总会有某天，你发现，在很多小的领域里，你已经学不到什么新东西了，所有最新出来的研究成果你几乎都知道。此时你会发现你比在做”牛人”和”大牛”时的水平不知高出了多少，但是你一点也”牛”不起来，因为你学的知识和思想都是别人提出来的，你自己并没有多少自己的知识和思想分享给别人，所以你还得继续往楼上爬才行。<br>我不知道国内的”专家”到底有多少，不过有一点可以肯定的是，如果把那些专门蒙大家的”砖家”也算上的话，我们的砖家比西方的要多得多。</p>\n<h3 id=\"第6层-学者\"><a href=\"#第6层-学者\" class=\"headerlink\" title=\"第6层 学者\"></a>第6层 学者</h3><p>当”专家”们想继续往上一层楼爬时，他们几乎一眼就可以看到楼梯的入口，不过令他们吃惊的是，楼梯入口处竖了一道高高的门槛，上面写着”创新”二字。不幸的是，大多数人在爬到第5层楼时已经体能消耗过度，无力翻过这道门槛。</p>\n<p>有少数体能充足者，可以轻易翻越这道门槛，但是并不意味着体力消耗过度者就无法翻越，因为你只是暂时还没有掌握恢复体能的方法而已，当掌握了恢复体能的方法，将体能恢复后，你就可以轻易地翻越这道门槛了。</p>\n<p>怎么才能将体能恢复呢？我们的老祖宗”孔子”早就教导过我们”温故而知新”，在英文里，研究的单词是”research”，其前缀”re”和”search”分别是什么意思不用我解释吧。或许有些人觉得”温故而知新”和”research”有些抽象，不好理解，我再给打个简单的比方，比如你在爬一座高山，爬了半天，中途体力不支，怎么恢复体力呢？自然是休息一下，重新进食一些食物，体力很快就可以得到恢复。</p>\n<p>由此可知，对体能消耗过度者，休息＋重新进食通常是恢复体能的最佳选择。可惜的是，国内的老板们并不懂得这点，他们的公司里不仅连正常国家规定的休息时间都不给足，有些公司甚至有员工”过劳死”出现。所以国内能翻越”创新”这道门槛的人是”少之又少”，和西方比起来估计是数量级的差别。</p>\n<p>再说说重新进食的问题，这个重新进食是有讲究的，需要进食一些基础性易消化的简单食物，不能进食山珍海味级的复杂食物，否则很难快速吸收。以查找为例，并不是去天天盯着那些复杂的查找结构和算法进行研究，你需要做的是将二分查找、哈希查找、普通二叉树查找等基础性的知识好好地复习几遍。</p>\n<p>以哈希查找为例，首先你需要去将各种冲突解决方法如链式结构、二次哈希等编写一遍，再试试不同种类的哈希函数，然后还需要试试在硬盘中如何实现哈希查找，并考虑数据从硬盘读到内存后，如何组织硬盘中的数据才能快速地在内存中构建出哈希表来，…，这样你可能需要将一个哈希表写上十几个不同的版本，并比较各个版本的性能、功能方面的区别和适用范围。</p>\n<p>总之，对任何一种简单的东西，你需要考虑各种各样的需求，以需求来驱动研究。最后你将各种最基础性的查找结构和算法都了然于胸后，或许某天你再看其他更复杂的查找算法，或者你在散步时，脑袋里灵光一现，突然间就发现了更好的方法，也就从专家晋升为”学者”了。</p>\n<p>学者所做的事情，通常都是在前人的基础上，进行一些小的优化和改进，例如别人发明了链式基数排序的方法，你第1个发现使用一定的方法，可以用数组替代链表进行基数排序，性能还能得到进一步提高。<br>由于学者需要的只是一些小的优化改进，因此中国还是有一定数量的学者。不过和国外的数量比起来，估计少了一个数量级而已。<br>也许有人会觉得现在中国许多公司申请专利的数量达到甚至超过西方发达国家了，我们的学者数量应该不会比他们少多少。因此，有必要把专利和这里说的创新的区别解释一下。</p>\n<p>所谓专利者，只要是以前没有的，新的东西，都可以申请专利；甚至是以前有的东西，你把他用到了一个新的领域的产品里去，也可以申请专利。比如你在房子里造一个水泥柱子，只要以前没有人就这件事申请专利，那么你就可以申请专利，并且下次你把水泥柱子挪一个位置，又可以申请一个新的专利；或者你在一个柜子上打上几个孔，下次又把孔的位置改一改，…，均可申请专利。</p>\n<p>这层楼里所说的创新，是指学术层面的创新，是基础研究方面的创新，和专利的概念是完全不同的，难度也是完全不同的。你即使申请了一万个象那种打孔一类的专利，加起来也够不到这层楼里的一个创新。</p>\n<p>当你爬到第6层楼时，你也许会有一种突破极限的快感，因为你终于把那道高高的写着”创新”二字的门槛给翻过去了，实现了”0”的突破。这时，你也许有一种”独上高楼，欲望尽天涯路”的感觉，但是很快你会发现看到的都是比较近的路，远处的路根本看不清楚。如果你还有足够的体力的话，你会想爬到更高一层的楼层去。</p>\n<h3 id=\"第7层-大师\"><a href=\"#第7层-大师\" class=\"headerlink\" title=\"第7层 大师\"></a>第7层 大师</h3><p>从第6层楼爬到第7层楼，并没有多少捷径可走，主要看你有没有足够的能量。你如果能象Hoare一样设计出一个快速排序的算法；或者象Eugene W. Myers一样设计出了一个用编辑图的最短路径模型来解决diff问题的算法；或者象M.J.D. Powell一样提出了一个能够处理非线性规划问题的SQP方法；或者你发现基于比较的排序算法，它的复杂度下界为O(NLogN)；或者你发现用栈可以将递归的算法变成非递归的；或者你设计出一个红黑树或者AVL树之类的查找结构；或者你设计出一个象C++或Java一样的语言；或者你发明了UML；…，你就爬到了第7层，晋升为”大师”了。</p>\n<p>上面举的这些例子中，其中有些人站的楼层比这层高，这里只是为了形象说明而举例他们的某个成就。从上面列出的一些大师的贡献可以看出，成为大师必须要有较大的贡献。首先解决问题必须是比较重要的，其次你要比前辈们在某方面有一个较大的提高，或者你解决的是一个全新的以前没有解决过的问题；最重要的是，主要的思路和方法必须是你自己提供的，不再是在别人的思路基础上进行的优化和改进。<br>看了上面这些要求，如果能量不够的话，你也许会觉得有些困难，所以不是每个人都能成为”大师”的。中国软件业里能称得上是”大师”的人，用屈指可数来形容，估计是绰绰有余。值得一提的是，国外的”大师”就象我们的”大牛”一样满天飞的多。</p>\n<p>我把我猜测本国有可能进到这层楼的大师列一下，以起个抛砖引玉的作用。汉王的”手写识别”技术由于是完全保密的，不知道它里面用了什么思想，原创思想占的比重有多少，因此不知道该把它划到这层楼还是更高一层楼去。原山东大学王小云教授破解DES和MD5算法时，用到的方法不知道是不是完全原创的，如果是的话也可进到这层楼来。<br>陈景润虽然没有彻底解决哥德巴赫猜想，但他在解决问题时所用的方法是创新的，因此也可以进到这层楼来。当然，如果能彻底解决哥德巴赫猜想，那么可以算到更高的楼层去。</p>\n<p>求伯君和王志东等大牛们，他们在做WPS和表格处理之类的软件时，不知是否有较大的原创算法在里面，如果有的话就算我错把他们划到了大牛层。由于所学有限，不知道国内还有那些人能够得上”大师”的级别，或许有少量做研究的教授、院士们，可以达到这个级别，有知道的不妨回个帖子晾一晾。</p>\n<p>鉴于”大师”这个称号的光环效应，相信有不少人梦想着成为”大师”。或许你看了前面举的一些大师的例子，你会觉得要成为大师非常困难。不妨说一下，现在有一条通往”大师”之路的捷径打开了，那就是多核计算领域，有大量的处女地等待大家去挖掘。<br>以前在单核时代开发的各种算法，现在都需要改写成并行的。数据结构与算法、图像处理、数值计算、操作系统、编译器、测试调试等各个领域，都存在大量的机会，可以让你进到这层楼来，甚至有可能让你进到更高一层楼去。</p>\n<h3 id=\"第8层-科学家\"><a href=\"#第8层-科学家\" class=\"headerlink\" title=\"第8层 科学家\"></a>第8层 科学家</h3><p>科学家向来都是一个神圣的称号，因此我把他放在了“大师”之上。要成为科学家，你的贡献必须超越大师，不妨随便举一些例子。</p>\n<p>如果你象Dijkstra一样设计了ALGOL语言，提出了程序设计的三种基本结构：顺序、选择、循环，那么你可以爬到第8层楼来。顺便说一下，即使抛开这个成果，Dijkstra凭他的PV操作和信号量概念的提出，同样可以进到这层楼。</p>\n<p>如果你象Don Knuth一样，是数据结构与算法这门学科的重要奠基者，你也可以进到这层楼来。当然，数据结构和算法这门学科不是某个人开创的，是许多大师和科学家集体开创的。</p>\n<p>如果你象巴科斯一样发明了Fortran语言，并提出了巴科斯范式，对高级程序语言的发展起了重要作用，你也可以进到这层楼来。</p>\n<p>或者你象Ken Thompson、Dennis Ritchie一样发明了Unix操作系统和功能强大、高效、灵活、表达力强的C语言，对操作系统理论和高级编程语言均作出重大贡献，那么你也可以进到这层楼来。</p>\n<p>或者你有Frederick P. Brooks一样机会，可以去领导开发IBM的大型计算机System&#x2F;360和OS&#x2F;360操作系统，并在失败后反思总结，写出《人月神话》，对软件工程作出里程碑式的贡献，你也可以进到这层来。</p>\n<p>或者你提出了面向对象设计的基本思想，或者你设计了互联网的TCP&#x2F;IP协议，或者你象Steven A.Cook一样奠定NP完全性的理论基础，或者你象Frances Allen一样专注于并行计算来实现编译技术，在编译优化理论和技术取得基础性的成就，…，均可进入这层。</p>\n<p>当然，如果你发明了C++语言或者Java语言，你进不到这层来，因为你用到的主要思想都是这层楼中的科学家提出的，你自己并没有没有多少原创思想在里面。</p>\n<p>看了上面列出的科学家的成就，你会发现，要成为“科学家”，通常要开创一门分支学科，或者是这个分支学科的奠基者，或者在某个分支学科里作出里程碑式的重大贡献。如果做不到这些的话，那么你能象Andrew C. Yao（姚期智）一样在对计算理论的多个方向如伪随机数生成，密码学与通信复杂度等各个方向上作出重要贡献，成为集大成者，也可以进入这层楼。</p>\n<p>成为“科学家”后，如果你有幸象Dijkstra一样，出现在一个非常重视科学的国度。当你去世时，你家乡满城的人都会自动地去为你送葬。不过如果不幸生错地方的话，能不挨“板砖”估计就算万幸了。</p>\n<p>从上面随便举的一些例子中，你可能能猜到，西方科学家的数量是非常多的，于是你会想中国应该也有少量的科学家吧？我可以很负责任地告诉你一个不幸的结果，中国本土产生的科学家的数量为0。目前在国内，软件领域的唯一的科学家就是上面提过的姚期智，还是国外请回来的，并不是本土产生的。</p>\n<p>可能你不同意我说的本土科学家数量为0的结论，因为你经常看到有许多公司里都有所谓“首席XX科学家”的头衔。我想说的是，这些所谓的“首席XX科学家”都是远远够不到这层楼的级别的，有些人的水平估计也就是一个“牛人”或“大牛”的级别，好一点的最多也就一个“学者”的级别。尤其是那些被称作“首席经X学家”的，基本上可以把称号改为“首席坑大家”。</p>\n<p>虽然我国没有人能爬到这层楼上来，但是西方国家仍然有许多人爬到了比这层更高的楼上。如果要问我们比西方落后多少？那么可以简单地回答为：“落后了三层楼”。下面就来看看我们做梦都没有到过的更高一层楼的秘密。</p>\n<h3 id=\"第9层-大科学家\"><a href=\"#第9层-大科学家\" class=\"headerlink\" title=\"第9层 大科学家\"></a>第9层 大科学家</h3><p>进入这层楼的门槛通常需要一些运气，比如某天有个苹果砸到你头上时，你碰巧发现了万有引力，那么你可以进到这层楼来。当然，万有引力几百年前就被人发现了，如果你现在到处嚷嚷着说你发现了万有引力，恐怕马上会有人打110，然后警察会把你送到不正常人类的聚集地去。因此，这里举万有引力的例子，只是说你要有类似的成就才能进到这层楼来。</p>\n<p>牛顿发现万有引力定律开创了经典物理运动力学这门学科，如果你也能开创一门大的学科，那么你就从科学家晋升为“大科学家”。比如爱因斯坦创建了相对论，从一个小职员变成了大科学家。当然大科学家可远不止这两人，数学界里比物理学界更是多得多，如欧几里得创建了平面几何，笛卡尔开创解析几何，还有欧拉、高斯、莱布尼茨等数不清的人物，跟计算相关的大科学家则有图灵等人。</p>\n<p>从上面列出的一些大科学家可以发现，他们的成就不仅是开创了一个大的学科，更重要的是他们的成就上升到了“公理”的层面。发现公理通常是需要一点运气的，如果你的运气不够好的话，另外还有一个笨办法也可以进到这层楼来，那就是成为集大成者。例如冯·诺伊曼，对数学的所有分支都非常了解，许多领域都有较大的贡献，即使撇开他对计算机的开创贡献，成为大科学家照样绰绰有余。</p>\n<p>当然，程序员们最关心的是自己有没有机会变成大科学家。既然计算机这门大学科的开创性成果早就被冯·诺伊曼、图灵等人摘走了，那么程序员们是不是没有机会变成大科学家了呢？我们的古人说得好：“江山代有才人出，各领风骚数百年”，现在在计算机这门学科下面诞生了许多非常重要的大的分支，所以你还是有足够的机会进到这层楼的。</p>\n<p>如果你能够彻底解决自然语言理解（机器翻译）这门学科中的核心问题， 或者你在人工智能或者机器视觉（图像识别）方面有突破性的发现，那么你同样可以轻易地晋升为“大科学家”。这样当某天你老了去世时，或许那天国人已经觉醒，你也能享受到如Dijkstra一样的待遇，有满城甚至全国的人去为你送葬。</p>\n<p>现在还剩下另外一个大家感兴趣的问题没有讨论，那就是这层中已经出现了牛顿、爱因斯坦、高斯等我们平常人都认为是顶级的科学家，是不是这层已经是楼顶了呢？相信还记得本文标题的人应该知道现在仅仅是第9层，还有第10层没有到达呢。可能不少人现在要感到困惑了，难道还有人站在比牛顿、爱因斯坦、高斯等人更高的楼层上？<br>这个世界上确实存在可以用一只手的手指数得清的那么几个人，他们爬到了第10层楼上。因此，第10层楼不是虚构的，而是确实存在的。如果对此有疑惑或者认为我在胡诌一番的话，那么不妨继续往下看下去，窥一下第10层楼的秘密。</p>\n<h3 id=\"第10层-大哲\"><a href=\"#第10层-大哲\" class=\"headerlink\" title=\"第10层 大哲\"></a>第10层 大哲</h3><p>看了这层楼的名字“大哲”，可能不少人已经猜到了这层楼的秘密，那就是你的成果必须要上升到哲学的高度，你才有机会能进到这层来。</p>\n<p>当然，上升到哲学高度只是一个必要条件，牛顿的万有引力似乎也上升到了哲学的高度，因为不知道引力到底是怎么来的，但是牛顿没有被划到这一层，因为进到这层还有另外的条件，那就是你的成果必须引起了哲学上的深度思考，并能让人们的世界观向前跨进一大步。窃以为牛顿、爱因斯坦等人的成就还达不到让人们世界观向前跨进一大步的程度。</p>\n<p>所以，这层楼中的人的成就对我们普通人认识世界非常重要，你可以不学相对论，但是你不可以不对这层楼的人所作出的成就不了解，否则你的世界观就是极其不完整的，会犯许多认识上的错误。不幸的是，中国的科普知识普及还不够到位，知道这层楼成就的人好像并不多，程序员中恐怕更少。下面就来看看这些用一只手的手指数得清的大哲们，到底有什么成就，能比万有引力定律和相对论还重要。</p>\n<p><strong>1、希尔伯特 (1862～1943)</strong><br>第1位进到此楼层是一位名叫“希尔伯特”的大数学家，如果你学过《泛函分析》，那么你在学习希尔伯特空间时可能已经对这位大数学家有所了解；如果你不是学数学出身的，又对数学史不感兴趣的话，恐怕你从来没有听说过这个名字。不过如果我问一下，知不知道二次世界大战前世界数学中心在那里，你肯定会有兴趣想知道。</p>\n<p>不妨说一下，二战前整个世界的数学中心就在德国的哥廷根，而我们这位大数学家希尔伯特便是它的统帅和灵魂人物。即使在二战期间，希特勒和丘吉尔也有协定，德国不轰炸牛津和剑桥，作为回报，英国不轰炸海德堡和哥廷根。</p>\n<p>整个二十世纪上半期的超一流数学家，几乎都出自其门下。这里不妨举几个我们熟悉的人物，例如冯·诺伊曼就曾受到他和他的学生施密特和外尔的思想影响，还到哥廷根大学任过希尔伯特的助手，钱学森的老师冯·卡门是在哥廷根取得博士学位的。顺便提一下，这位大数学家发现当时物理学上出了很多大的成果如相对论和量子力学，但是这些物理学家的数学功力明显不足，因此有一段时间带领他的学生们研究过物理学，并独立发现了广义相对论，只是不好意思和物理学家争功劳，将广义相对论的功劳全部让给了爱因斯坦。</p>\n<p>广义相对论相对于这位大数学家在数学上的贡献，其实是算不了什么的，只是由此可看出这位大数学家品格的高尚之处。如果再去看看牛顿之流的人物的品行，整天和莱布尼茨、虎克等人争功劳，利用自己的优势地位打压他人，甚至闹得上法庭，和这位希尔伯特先生比起来，简直就是个小丑。</p>\n<p>说到这里，你可能对这位大数学家“希尔伯特”有了一些初步映象，感觉到了他的重要性，不过他在数学上的主要成就可不是几句话说得清楚的。首先，他是一位集大成者，精通当时数学所有分支领域，在数学的各个领域都有较大的贡献，当然这些成就只能让他成为一个大科学家，不能带他进入这层楼。事实上这位“希尔伯特”解决的任何一个数学问题都够不到这层楼的高度，那么他怎么混到这层楼来了呢？</p>\n<p>话得从1900年说起，当时还很年轻的希尔伯特在当时的世界数学大会上做了一个报告，高屋建瓯地提出了著名的23个未解决的数学问题，然后整个二十世纪上半期，全世界的数学家们都在这23个问题的指导下展开研究，直到现在仍然有许多数学家受这23个问题的指导在进行研究。例如我们熟知的哥德巴赫猜想，就属于其中第8个问题素数分布的一个子问题。</p>\n<p>如果用“高瞻远瞩”来形容这位大数学家的话，那么这个世界上恐怕没有第二个人再配得上“高瞻远瞩”这四个字，不论是欧拉、高斯、牛顿、爱因斯坦还是被誉为最有才华的数学家伽罗华，概不例外。</p>\n<p>虽然那23个问题是归纳总结出来的，并不全是原创，但是其中有不少问题是可以上升到哲学的高度，引起深度思考的。可能大多数人都会觉得希尔伯特是进不到这层楼的，我们知道提出问题的人和解决问题的人是一样伟大的，何况他提出的问题是如此之多，基于这点，个人觉得应该让希尔伯特跨进这层楼的门槛里。<br>看完这位希尔伯特的成就，你可能会觉得对你的世界观并没有产生任何影响。确实如此，他提出的问题不是用来影响你的，而是用来影响其他大科学家和大哲的，下面再来说说另一位对他提出的23个问题中的第2个问题有杰出贡献的大哲，你就会感觉到大哲们的成果的威力了。</p>\n<p><strong>2、哥德尔 (1906~1978)</strong><br>这位大哲的名字叫“哥德尔 (G?del) ”，你可能从来也没有听说过这个名字，即使你读了一个数学系的博士学位，如果你的研究方向不和这位大哲对口的话，你也不一定了解这位大哲的成就，更不知道他的成果对我们这个世界有何意义。</p>\n<p>简单地说，这位大哲20多岁时就证明了两个定理，一个叫做“哥德尔完全性定理”，另一个更重要的叫做“哥德尔不完全性定理”。你也许会觉得奇怪，第9层楼的成就就已经上升到了公理的高度，这种证明定理的事情不是学者和大师们做的事情吗？怎么能比第9层楼的成就还高呢？下面就来简单说一下这两个定理的含义，你就会明白这属于系统级的定理，绝不是普通的定理和公理所能比拟的。</p>\n<p>“哥德尔完全性定理”证明了逻辑学的几条公理是完备的，即任何一个由这些公理所产生出的问题，在这个公理系统内可以判定它是真的还是假的，这个结论表明了我们人类所拥有的逻辑思维能力是完备的。这条定理并不能将其带入这层楼来，带其进入这层楼的是另一条定理。</p>\n<p>“哥德尔不完全性定理”是在1930年证明的，它证明了现有数学的几条公理（ZF公理系统）是不完备的，即由这些公理产生出的问题，无法由这几条公理判断它是真的还是假的。例如希尔伯特23个问题中的第1个问题，也就是著名的康托尔连续统假设，哥德尔在1938年证明了现有公理系统中不能证明它是“假”的，科恩（Cohen，或许也可以称得上是“半”个大哲）在1963年证明了现有公理系统不能证明它是“真”的。最有趣的是，即使你将某个不可判定的问题，作为一条新的公理加入进去，所组成的新的公理系统仍然是不完备的，即你无法构造一个有限条公理的系统，让这个公理系统是完备的。</p>\n<p>也许你仍然无法理解上面这段话的含义，不妨先说一下它对我们现实世界的影响。你可能知道1936年出现的图灵机是现代计算机的理论模型，如果没有哥德尔不完全性定理的思想，图灵机什么时候能出来是很难说的，所以这位哥德尔可以算作计算机理论的奠基者的奠基者。计算机对我们这个世界产生的影响比原子弹大了多少，我想不用我说大家也都清楚。当然，对现实世界的影响只能把哥德尔同图灵等人一样划到大科学家那一层去，能进入这层乃是另有原因。</p>\n<p>可能你看过《未来战士》、《黑客帝国》、《I，Robot》之类的科幻电影，于是你产生制造一个和人一样或者比人更高一级的智能机器人的想法，这就引入了一个达到哲学高度的问题，“人到底能不能制造出具有和人一样的思维能力的机器来？”。<br>我只能告诉你，“你的愿望是良好的，但现实是残酷的”。如果你仔细思考一下不完全性定理的含义，并结合现代计算机所具有的能力分析一下，你会发现这个问题的答案暂时是否定的。如果你想造出和人一样思维能力的机器，那么你需要去好好学习这位大哲及其后续研究者的成果，并在他们的基础上有新的突破才行。<br>为了说明这位大哲所研究领域的重要性，这里顺便再讨论一个我们日常争议不休的问题，那就是孔夫子的“人之初、性本善”以及西方认为“人之初、性本恶”的观点孰优孰劣的问题。可能有许多人发现西方社会现在领先我们，于是就认为“性本恶”是对的，“性本善”是错的，中国应该抛弃以前的旧思想，改用西方的思想。当然也有一些老学究们，认为中国的人文思想是领先于西方的，自然而然地认为“性本善”是对的，“性本恶”是错的。</p>\n<p>如果你学过大哲用过的公理化的分析方法，你就知道一套系统的多条公理间只要不会推导出矛盾的地方，即可以自圆其说，那么它可以看作是对的。这样你可以很轻易地给这个问题下一个结论，即“性本善”和“性本恶”是对等的，不存在孰优孰劣的问题，更不存在谁对谁错的问题。只要你不同时将“性本善”和“性本恶”放入一个系统内，那么是不会有问题的，甚至你也可以认为“人之初、既无善、亦无恶”，或者认为“人之初、部分善、部分恶”，都是可以自圆其说的，所以我们的老祖宗提出的思想并没有问题，之所以落后乃是其他原因造成的。这个问题其实在高斯所处的时代就有了结论，那时有人提出了非欧几何，即平行线公理问题，有人认为过一点可以作多条平行线，还有人认为平行线在无穷远点是相交的，和欧氏几何关于过一点只能作一条平行线的公理都是矛盾的，但是他们各自的系统内推导出的结论都是正确的。</p>\n<p>上面说的只是对哥德尔不完全性定理的一些粗浅解析，实际上如果深入思考一下它的含义的话，你会发现它对物理学等许多学科有重大影响，包含的道理实在是深刻，远非一般的思想所能比拟，有兴趣者不妨“google”或“百度”一下“哥德尔”。或许只有我们的老祖宗“老子”提出的哲学思想，深度可以有得一比。</p>\n<p>哥德尔不完全性定理也给那些认为科学是严谨的人当头一棒，原来连数学这样的纯理论学科都是不严谨的，其他学科就更不用说了。</p>\n<p>至此，已经说完数学上的大哲，下面不妨再看看物理学上的大哲，物理学上好像只出过一位叫“海森堡”的大哲（注：由于本人对物理学不甚了解，不知道“霍金”够不够得上大哲的称号）。</p>\n<p><strong>3、海森堡 (1901~1976)</strong><br>海森堡这个名字相信没有几个人不知道的，大部分人在学习物理时都学过他的“测不准关系”，也就是因为这个“测不准关系”，海森堡爬到了第十层楼。</p>\n<p>如果你看过《时间简史》和《霍金讲演录－黑洞、婴儿宇宙及其他》，你也许已经了解测不准关系的威力，所以这里不想做过多的讨论，只谈一些和本土产生的哲学思想相关的东西。</p>\n<p>首先看看争论了几千年，并且现在仍然有人在争论不休的“宿命论”问题。霍金认为，只要这个宇宙有一个初始状态，粒子的运动是按照一定物理定律进行的（比如相对论、量子力学属于这些物理定律的一部分），那么所有的粒子运动轨迹将是确定的，然后只要你承认唯物论，即精神是由物质决定的，那么宿命论就是“对”的。当然由于测不准关系的存在，对人而言，又是无法准确预测的，因此也可以将其看作是“不对”的。简单的说，可以认为宿命论是“对”的是绝对的，宿命论是“不对”的是相对的。<br>可能上面这段话你现在仍然难以理解，或许你又觉得你的命运并不是上天注定的，而是可以通过自己的努力可以改变的。我要告诉你的是，你在想什么也是事先已注定的，包括你在预测本身也是事先注定的，因为大脑思考问题最终是基本粒子运动的结果，而这些粒子的运动必然要遵循物理定律进行，所以你会不会努力，想不想努力，包括你在想你该不该努力这件事本身也是事先注定的。顺便说一下，你现在正在看这篇文章，可能正在想这个宿命论问题值得怀疑，或者觉得写得不够好，准备砸个板砖上来；或者你在想这篇问题写得有点意思，准备看完后转给朋友看一看；又或者你看到这里，觉得很累了，准备休息一下；…；这些都是上天事先就注定的。从你自身的相对角度看，因为你事先不知道后来会发生什么，也可以认为不是事先注定的，可能这句话有些不好理解，不妨好好理解前面说过的公理化思想。</p>\n<p>如果你没看过《霍金讲演录－黑洞、婴儿宇宙及其他》，你可能会觉得很惊讶，宿命论历来不都被认为是唯心论吗，怎么由唯物论推导出了宿命论呢？现实就是这样和你开了一个大的玩笑，不过这个玩笑也是事先注定的。如果你再仔细用公理化的方法思考一下唯物论和唯心论的矛盾性，就像前面分析性善论和性恶论一样，你会发现唯物论、唯心论不一定就是冲突的，矛盾的双方是可以统一的，只要你不要同时将唯物和唯心放进同一个系统中就行。</p>\n<p>当然也有聪明者仍然会怀疑宿命论问题的正确性，因为这里有一个前提条件，即宇宙要有一个初始状态。宇宙有没有初始状态，我们并不知道啊，虽然有大爆炸学说，但那也只是假说而已，并没有得到确证，有些人就认为宇宙是一直都存在的。这样看来似乎你又有合理的理由在怀疑宿命论了，不过我仍然要告诉你，你现在在怀疑宿命论仍然是事先注定的，不相信的话就来看看下面的分析。</p>\n<p>虽然宇宙的初始状态值得怀疑，但是这个宇宙至少已经存在了一段时间，这点我想是毋庸置疑的。我们可以在我们已知的宇宙存在的这段时间内，任意取一个时间点t0，那么在这个时间点t0上，所有的粒子都有一个运动状态。在时间点t0之后的时间里，由于粒子运动是按照物理定律进行的，因此粒子运动轨迹由时间点t0的状态决定。说白一点，如果取100年前的一个时间点作为t0，那么现在的所有粒子运动状态100年前就已经确定了，如果取10000年前一个时间点作为t0，那么最近10000年内所有粒子运动的轨迹在10000年前就确定了，当然，你可以取更早的时间，比如100亿年前的时间点。</p>\n<p>总之，现在你会发现宇宙有没有初始状态并不会影响宿命论的正确性，所以这个世界的一切都是注定的。只不过由于粒子间相互影响过于复杂，我们无法知道这些粒子的运动轨迹而已。当然，如果将测不准关系用上的话，那么就是这个运动轨迹对人来说是无法准确预测的，所以不妨开个玩笑：“算命先生经常算得不准大概是测不准关系的缘故吧”。<br>如果你再深入思考一下测不准关系，你会发现这是一个测量系统的问题。由于宿命论的存在，这个世界本身实际上是确定的，是“准“的，之所以测不准乃是我们人类所具有的测量能力依赖于基本粒子造成的。所以我在前面说宿命论是“不对”的是相对的，它是相对于我们人类的测量能力而言的。根岑（Gentzen，曾任希尔伯特的助手）在一个更强的系统内证明了ZF系统内的问题都是可判定的，从一个侧面说明这个世界本身是确定的。（注：它和哥德尔不完全性定理并不矛盾，由于数学上的复杂性，这里就不详细解释了）</p>\n<p>不妨再想想我们老祖宗提出的“是庄周梦见了蝴蝶？还是蝴蝶梦见了庄周？”，“风动？幡动？还是心动？”之类的问题，当然以前你都认为这是纯粹的唯心主义，甚至认为是封建糟粕，但是如果结合测不准关系的内涵，再结合前面所说的公理化分析方法进行分析，估计你现在不敢轻易地下结论。</p>\n<p>也许到现在你仍然无法理解为什么把大哲们划在了大科学家的上一层，你可能仍然觉得万有引力、相对论等成果是最伟大的。下面就来谈谈为什么大哲比大科学家高一层。</p>\n<p>如果把人类在现有能力情况下，将来所能够拥有的知识总集看成是一个集合A，人类现在已有的知识总集看成是集合B，显然，集合B只是集合A的一个子集，并且是很小的一个子集。牛顿力学、相对论这些理论只能算作集合B里的一个子集，相对于集合A，只能算作是沧海一粟。 换句话说，在人类现有能力可做的事情集合中，牛顿力学和相对论等理论给出了详细的办法让你可以做其中的一些事情，当然剩下的更多的事情是牛顿力学和相对论所无法解决的。</p>\n<p>哥德尔不完全性定理和测不准关系的意义在于，它指出集合A的范围，即将人类现有能力发挥到极限的情况下，那些事情是你能做到的，那些是你不能做到的。当然，它并没有给出具体的方法让你去做你能做到的事情，它只是告诉我们我们人类现在发现的能力所能达到的极限。或许将来发现人类有其他新的未发现的能力，那么这个极限就被打破了。比如将来能发现不依赖于基本粒子的其他测量方法，并且测量过程中不会改变其他粒子的状态，那么测不准关系就被打破了。</p>\n<p> 看到这里，估计你已经发现了一些秘密，科学兜了一大圈，最终还是回到了哲学，也就是我们所认为的玄学上。同时你也会发现，我们老祖宗提出的所谓玄学，原来和现代科学是相通的，并非象某些人想像的那样全是糟粕。如果有人认为西方现代暂时领先我们，进而就认为西方古代就已经超越我们，我们老祖宗就已经落后西方，他们的思想都是糟粕的话，那么我认为他可能犯了崇洋媚外的毛病。我不得不化用一句周杰伦在春晚上的歌词送给他：“你不妨抓一副我们祖传的中医良方，治一治你那崇洋媚外的内伤”。顺便告诉他一下，中医用的阴阳五行理论，它的前提假设就是宿命论。</p>\n<p>上面说的这几位大哲的成果，可能对你的世界观会有很大的影响，于是你可能会羡慕起这些大哲们的成果来。如果你有大志的话，你会希望有朝一日你也能变成大哲，但是你发现上面的大哲是研究数学和物理学的，而你是学计算机的程序员，那么是不是没有机会变成大哲呢？</p>\n<p>如果你能将NP难题给彻底解决掉，意味着计算机内的计算的奥秘基本被揭开，或许你可以进到这层楼来；或者你能发现另外一套计算机可以理解的数学公理系统，并且这个公理系统是完备的，那么计算机取代人类进行思维的一个必要条件就满足了，计算机将具有真正意义上的“逻辑思维和推理能力”，你可以轻松地进到这层楼来。如果你发现了新的方法可以打破测不准关系，同样你也可以轻松地进到这层楼来。</p>\n<p>如果你能彻底揭开人类抽象思维的奥妙，并让计算机懂得了如何创建抽象，具备抽象思维能力，那么也就具备了“设计能力”，可以取代人类进行各种设计了，你也可以轻松地进到这层楼来。顺便说一下，如果你对软件设计有真正深刻理解的话，就会明白这不是在写科幻小说。对此感兴趣者，不妨好好地研究一下程序切片方面的技术，会让你对软件设计和测试等方面的理解有质的提高，或许有一天你能打开这扇大门。<br>当然，计算机要完全取代人还有其他必要条件，后面还会提及。</p>\n<p>值得一提的是，虽然第10层楼是本文中所写的最高层，但是大哲们并没有觉得他们到了顶层，他们通常都还会努力寻找通往更高一层的楼梯。如果你也有成为天下第一的想法，那么你或许会想要做什么事情才能超越大哲们的成就，当然，这都得依赖于找到更高一层楼的楼梯。</p>\n<p>个人认为，再往上一层楼的楼梯是通往天堂的道路，也就是说第11层楼的名字叫“天堂”，是“上帝”住的地方，而不是人住的地方。如果将来某天有人能爬到天堂的话，那么他已经不是人了，而是由人变成了“上帝”。</p>\n<p>你也许会怀疑这个世界到底有没有“天堂”，“上帝”是否根本就不存在，我也很有同感。因此有必要再写上一段文字，讨论一下“上帝”的问题。如果你想了解天堂的奥妙，有没有办法让你变成“上帝”，不妨看看继续往下看看第11层楼的玄妙。注意我这里用的是“玄妙”二字，因为上帝在大部分人眼里估计都是“玄之又玄”的东西。</p>\n<h3 id=\"第11层-上帝\"><a href=\"#第11层-上帝\" class=\"headerlink\" title=\"第11层 上帝\"></a>第11层 上帝</h3><p>看了上面的小标题，你可能会觉得奇怪，这篇文章不是讲“程序员的十层楼”吗？怎么冒出了第11层来了？<br>其实这并不矛盾，程序员确实只有十层楼，因为爬到第11层时，已经变成上帝，不再是程序员了；所以超出10层楼本身并不重要，关键的问题是看你有没有能力变成上帝。<br><strong>1、谁是上帝？</strong><br>菜鸟们认为Linus Torvalds是程序员中的上帝，看完了前面各层楼的介绍，此时再看到这句话，相信你要忍不住在心里笑起来。当然，你会不会笑起来是事先注定的。Don Knuth也不是上帝，他离上帝还有三层楼的距离。即使是大哲们，他们离天堂也还差一层楼，因此这个世界上有史以来还没有任何一个人变成过上帝。</p>\n<p>我们感兴趣的是，将来会不会有人爬到比大哲们更高的楼层上，变成了上帝。<br>要变成上帝，你得有上帝一样的能力，上帝会造人，你会吗？</p>\n<p>你也许会怯生生地问：“我可以和爱人生小孩，算不算造人？”，你可能还会理直气壮地说：“现在生物学上都可以克隆人了，早就有人掌握了造人的方法”。</p>\n<p>事实上克隆人需要有人的体细胞，必须要先有人才会有体细胞。上帝造人时，这个世界上并没有人，是从无生命的物质“尘土”中创造出的人。因此，用最原始的方法生人和克隆人都是从有生命信息的物质中生人，不能算作造人。</p>\n<p>这样看来，你根本不会造人，不过我可以告诉你一个“玄方”，让你有机会学会如何造人。</p>\n<p>如果你揭开了人类情感的奥秘，让计算机也可以拥有和人类一样的情感，那么计算机将可以理解人类的需求，具有了“情商”，将具有完整的和人一样的能力。此时，人类进化到了机器人，科幻小说将变成现实，也就是说你已经掌握了真正的造人能力，晋升为“上帝”了。</p>\n<p>未来到底有没有人能变成“上帝”，人能不能进化到机器人，这是宿命论中事先注定了的。说到这里，不妨再告诉你一个打破宿命论的方法，这个方法就是你要爬到比上帝还要高的楼层。<br>“还有比上帝还高的楼层？”，你可能会第1时间内冒出这个问题，其实我也有同样的怀疑。因此在写第12层楼前，有必要弄清楚它到底存不存在，即你可不可以骑到上帝的头上的问题。</p>\n<p><strong>2. 骑到上帝的头上？</strong><br>为了解决是否可以骑到上帝的头上这个问题，不妨先假设存在比上帝高的楼层，也就是存在打破宿命论的方法。<br>宿命论的本质原因是因为时间是单向运行，不可逆转造成的。如果你找到一种可以使时间逆转的方法，那么你就打破了宿命论，爬到了比上帝还高的楼层。<br>看到这里，你也许会摆脱刚才陷于宿命论的困惑情绪，变得充满希望般高兴起来。不过，如果你的逻辑思维能力足够好，仔细思考一下，会发现存在一个逻辑上的悖论。<br>在你找到时间逆转的方法之前，显然这个世界仍然是需要服从宿命论的，也就是说你能不能找到打破宿命论的方法是事先注定的。假设你在某个时间点t0处找到了打破宿命论的方法，你在打破宿命论后，想利用时间逆转的方法回到某个时间点t2。下面来看看你到底能不能回到时间点t2。</p>\n<p>取位于t0和t2之间的任意一个时间点t1，你在回到时间点t2之前，必须先经过时间点t1，考虑你到达t1的那一时刻，由于t1比t0要早，这个时间点上你还没有找到时间逆转的方法，所以到了时间t1点后，你无法再使用时间逆转的能力回到时间点t2去，所以你永远也回不到时间点t2，由于时间点t2是任意取的，因此，你永远也无法使时间逆转，或者说你根本就没打破过宿命论，这与你在时间点t0打破了宿命论产生了矛盾。</p>\n<p>上面这段话看起来似乎有点像“人永远迈不出一步”的诡辩一样，你可能会想返回到时间点t1时，仍然可以拥有时间逆转能力啊。不过你又会发现一个新的问题，时间点t1本来是没有时间逆转能力的，现在又认为时间点t1又有时间逆转能力，那时间点t1到底是有还是没有时间逆转能力呢？或者说在时间点t0前，宿命论注定了时间点t1是没有时间逆转能力的，现在你又认为时间点t1具有时间逆转能力，那么这两个时间点t1究竟是不是同一个时间点？如果不是同一个时间点，说明你没有回到过去；如果是同一个时间点的话，岂不是自相矛盾吗？</p>\n<p>为了说得更形象一些，不妨假设你坐一艘超光速飞船，准备从时间点t0回到时间点t2去，假设你回到t2后，随着时间的流逝，又达到了时间点t0，如果这时你又再次坐超光速飞船返回时间点t2，那么一个值得思考的问题就出现了，“你在时间点t2能不能看到上次返回时间点t2的飞船？”</p>\n<p>如果回答不能看到飞船，那么上次返回的飞船那里去了呢？显然很难解释通。如果回答能看到飞船，那么你可以到达时间点t2后，下次时间到达t0时，你又坐飞船返回t2，这次你将可以看到上两次的两艘飞船。如果这样一直循环下去，最后你会发现你可以在时间点t2看到无穷多的飞船。用程序员的术语说，叫做“程序陷入了死循环”，最后系统必然会出现“Out of Memory”现象而崩溃。</p>\n<p>当然，你也可以认为有其他的方法，不需要飞船，可以一次性从时间点t0直接跳跃到时间点t2，并不需要经过时间点t1。下面不妨来分析一下这个方法是否可行。<br>既然是直接跳跃到时间点t2，那么你必然是在一个无穷小的时间里出现在时间点t2的某个空间里，例如你要在时间点t2回到某个广场上。首先说明一下为什么是无穷小的时间里出现的，因为如果不是无穷小的时间里出现的话，那么必然可以取到一个时间点t1，会导致前面所说的时间点t1上出现悖论。</p>\n<p>你在广场上出现的时，广场上的空气必然要为你让开空间，而这是在无穷小的时间里完成的，那么很容易推导出你周围的空气获得的加速度和速度都是无穷大，因而它具有的动能也是无穷大，无穷大的能量和无穷大的速度意味着什么？一只鸟都可以将飞机撞下来，如果宇宙是有限大的话，它可以让这个宇宙炸毁无穷次；即使宇宙是无限大，它也足以让宇宙炸毁一次。宇宙都毁灭了，又何来的时间？还能说你回到了时间点t2吗？</p>\n<p>也许上面说的这些你仍然难以相信，不妨再说得更现实一些，假设你要回到100年前的一个时间点，这100年中，天上有多少流星湮灭了？有多少新星生成了？宇宙膨胀了多少？你有能力让湮灭的流星复原、生成的新星重新返回未生成前的状态，膨胀的宇宙收缩回去吗？如果这些东西的状态没有回复到100年前，又怎么能说明你回到的是100年前的时间点呢?</p>\n<p>根据上面的推导和分析，个人认为使时间逆转的方法是不存在的，所以第12层楼是不存在的，自然没有人可以骑到“上帝”的头上。<br><strong>宿命论将在有时间的时间里永远统治这个世界。</strong><br>居天下之广居，立天下之正位，行天下之大道，得志与民由之，不得志独行其道，富贵不能淫，贫贱不能移，威武不能屈，此之谓大丈夫。</p>\n<blockquote>\n<p>转载自<br><strong>Copyright © 1900-2016, NORYES, All Rights Reserved.</strong><br><strong><a href=\"http://www.cnblogs.com/noryes/\">http://www.cnblogs.com/noryes/</a></strong></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p>自西方文艺复兴以来，中国在自然科学方面落后西方很多，软件领域也不例外。当然现在中国的许多程序员们对此可能有许多不同的意见，有些人认为中国的程序员水平远落后于西方，有些则认为中国的程序员个人能力并不比西方的程序员差，只是整个软件产业落后而已。</p>\n<p>那么，到底中国的程序员水平比西方程序员水平差，还是中国有许多优秀的程序员达到或超过了西方程序员同等水平呢？要解决这个问题，必须先知道程序员有多少种技术层级，每个层级需要什么样的技术水平，然后再比较中国和西方在各个技术层级的人数，就可以知道到底有没有差距，差距有多大。<br>当然，对于如何划分程序员的技术层级，不同公司或不同人会有不同的划分标准，下面的划分仅代表个人的观点，如有不当之处，还请砸板砖予以纠正。</p>\n<h3 id=\"第1层-菜鸟\"><a href=\"#第1层-菜鸟\" class=\"headerlink\" title=\"第1层 菜鸟\"></a>第1层 菜鸟</h3><p>   第1层楼属于地板层，迈进这层楼的门槛是很低的。基本上懂计算机的基本操作，了解计算机专业的一些基础知识，掌握一门基本的编程语言如C&#x2F;C++，或者Java，或者JavaScript，…，均可入门迈进这层。</p>\n<p>在这层上，中国有着绝对的优势，除了从计算机专业毕业的众多人数外，还有大量的通信、自动化、数学等相关专业的人士进入这一行，此外还有众多的其他专业转行的人士，人数绝对比西方多出甚多。并且还有一个优势就是我们这层人员的平均智商比西方肯定高。</p>\n<p>没有多少人愿意一辈子做菜鸟，因为做”菜鸟”的滋味实在是不咋的，整天被老大们吆喝着去装装机器，搭建一下测试环境，或者对照着别人写好的测试用例做一些黑盒测试，好一点的可以被安排去写一点测试代码。当然如果运气”好”的话，碰到了国内的一些作坊式的公司，也有机会去写一些正式的代码。<br>所以，菜鸟们总是在努力学习，希望爬更高的一层楼去。</p>\n<h3 id=\"第2层-大虾\"><a href=\"#第2层-大虾\" class=\"headerlink\" title=\"第2层 大虾\"></a>第2层 大虾</h3><p>   从第1层爬到第2层相对容易一些，以C&#x2F;C++程序员为例，只要熟练掌握C&#x2F;C++编程语言，掌握C标准库和常用的各种数据结构算法，掌握STL的基本实现和使用方法，掌握多线程编程基础知识，掌握一种开发环境，再对各种操作系统的API都去使用一下，搞网络编程的当然对socket编程要好好掌握一下，然后再学习一些面向对象的设计知识和设计模式等，学习一些测试、软件工程和质量控制的基本知识，大部分人经过2～3年的努力，都可以爬到第2层，晋升为”大虾”。</p>\n<p>中国的”大虾”数量和”菜鸟”数量估计不会少多少，所以这层上仍然远领先于西方。<br> 大虾们通常还是有些自知之明，知道自己只能实现一些简单的功能，做不了大的东西，有时候还会遇到一些疑难问题给卡住，所以他们对那些大牛级的人物通常是非常崇拜的，国外的如Robert C. Martin、Linus Torvalds，国内的如求伯君、王志东等通常是他们崇拜的对象。其中的有些人希望有一天也能达到这些大牛级人物的水平，所以他们继续往楼上爬去。</p>\n<h3 id=\"第3层-牛人\"><a href=\"#第3层-牛人\" class=\"headerlink\" title=\"第3层 牛人\"></a>第3层 牛人</h3><p>由于”大虾”们经常被一些疑难问题给卡住，所以有了”大虾”们只好继续学习，他们需要将原来所学的知识进一步熟练掌握，比如以熟练掌握C++编程语言为例，除了学一些基础性的C++书籍如《C++ Primer》，《Effective C++》，《Think in C++》，《Exception C++》等之外，更重要的是需要了解C++编译器的原理和实现机制，了解操作系统中的内部机制如内存管理、进程和线程的管理机制，了解处理器的基础知识和代码优化的方法，此外还需要更深入地学习更多的数据结构与算法，掌握更深入的测试和调试知识以及质量管理和控制方法，对各种设计方法有更好的理解等。</p>\n<p>学习上面说的这些知识不是一挥而就的，不看个三五十本书并掌握它是做不到的。以数据结构算法来说，至少要看个5～10本这方面的著作；以软件设计来说，光懂结构化设计、面向对象设计和一些设计模式是不够的，还要了解软件架构设计、交互设计、面向方面的设计、面向使用的设计、面向数据结构算法的设计、情感化设计等，否则是很难进到这个楼层的。</p>\n<p>当然除了上面说的知识外，大虾们还需要去学习各种经验和技巧。当然这点难不倒他们，现在出版的书籍众多，网络上的技术文章更是不胜数，然后再去各种专业论坛里泡一泡，把这些书籍和文章中的各种经验、技能、技巧掌握下来，再去学习一些知名的开源项目如Apache或Linux操作系统的源代码实现等。此时对付一般的疑难问题通常都不在话下，菜鸟和大虾们会觉得你很”牛”，你也就爬到了第3层，晋升为”牛人”了。</p>\n<p>看了上面所讲的要求，可能有些大虾要晕过去了，成为牛人要学这么多东西啊！要求是不是太高了？其实要求一点也不高，这么点东西都掌握不了的话，怎么能让别人觉得你”牛”呢？<br>需要提一下的是，进入多核时代后，从第2层爬到第3层增加了一道多核编程的门槛。当然要迈过这道门槛并不难，已经有很多前辈高人迈进了这道门槛，只要循着他们的足迹前进就可以了。想迈进这道门槛者不妨去学习一下TBB开源项目的源代码(链接：<a href=\"http://www.threadingbuildingblocks.org/)%EF%BC%8C%E7%84%B6%E5%90%8E%E4%B8%8AIntel%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%88http://softwareblogs-zho.intel.com/%EF%BC%89%E5%92%8C%E5%A4%9A%E6%A0%B8%E8%AE%BA%E5%9D%9B%EF%BC%88http://forum.csdn.net/Intel/IntelMulti-core/%EF%BC%89%E5%8E%BB%E7%9C%8B%E7%9C%8B%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0%EF%BC%8C%E5%86%8D%E4%B9%B0%E4%B8%8A%E5%87%A0%E6%9C%AC%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B9%A6%E7%B1%8D%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8B%E3%80%82\">http://www.threadingbuildingblocks.org/)，然后上Intel的博客（http://softwareblogs-zho.intel.com/）和多核论坛（http://forum.csdn.net/Intel/IntelMulti-core/）去看看相关文章，再买上几本相关的书籍学习一下。</a><br>在国内， 一旦成为”牛人”，通常可以到许多知名的公司里去，运气好者可以挂上一个架构师的头衔，甚至挂上一个”首席架构师”或者”首席xx学家”的头衔也不足为奇。有不少爬到这层的人就以为到了楼顶了，可以眼睛往天上看了，开始目空一切起来，以为自己什么都可以做了，什么都懂了，经常在网络上乱砸板砖是这个群体的最好写照。由此也看出，国内的牛人数量仍然众多，远多于西方的牛人数量，在这层上仍然是领先的。</p>\n<p>也有不少谦虚的”牛人”，知道自己现在还不到半桶水阶段。他们深知爬楼的游戏就像猴子上树一样，往下看是笑脸，往上看是屁股。为了多看笑脸，少看屁股，他们并没有在此停步不前，而是继续寻找到更上一层的楼梯，以便继续往上爬。</p>\n<h3 id=\"第4层-大牛\"><a href=\"#第4层-大牛\" class=\"headerlink\" title=\"第4层 大牛\"></a>第4层 大牛</h3><p>从第3层爬到第4层可不像上面说过的那几层一样容易，要成为大牛的话，你必须要能做牛人们做不了的事情，解决牛人们解决不了问题。比如牛人们通常都不懂写操作系统，不会写编译器，不懂得TCP&#x2F;IP协议的底层实现，如果你有能力将其中的任何一个实现得象模象样的话，那么你就从牛人升级为”大牛”了。</p>\n<p>当然，由于各个专业领域的差别，这里举操作系统、编译器、TCP&#x2F;IP协议只是作为例子，并不代表成为”大牛”一定需要掌握这些知识，以时下热门的多核编程来说，如果你能比牛人们更深入地掌握其中的各种思想原理，能更加自如的运用，并有能力去实现一个象开源项目TBB库一样的东西，也可以成为”大牛”，又或者你能写出一个类似Apache一样的服务器，或者写出一个数据库，都可以成为”大牛”。</p>\n<p>要成为”大牛”并不是一件简单的事情，需要付出比牛人们多得多的努力，一般来说，至少要看过200~400本左右的专业书籍并好好掌握它，除此之外，还得经常关注网络和期刊杂志上的各种最新信息。</p>\n<p>当”牛人”晋升为”大牛”，让”牛人们”发现有比他们更牛的人时，对”牛人”们的心灵的震撼是可想而知的。由于牛人们的数量庞大，并且牛人对大虾和菜鸟阶层有言传身教的影响，所以大牛们通常能获得非常高的社会知名度，几乎可以用”引无数菜鸟、大虾、牛人竞折腰”来形容，看看前面提过的Linus Torvalds等大牛，应该知道此言不虚。</p>\n<p>虽然成为”大牛”的条件看起来似乎很高似的，但是这层楼并不是很难爬的一层，只要通过一定的努力，素质不是很差，还是有许多”牛人”可以爬到这一层的。由此可知，”大牛”这个楼层的人数其实并不像想像的那么少，例如比尔·盖茨之类的人好像也是属于这一层的。</p>\n<p>由于”大牛”这层的人数不少，所以也很难统计除到底是中国的”大牛”数量多还是西方的大牛数量多？我估计应该是个旗鼓相当的数量，或者中国的”大牛”们会更多一些。</p>\n<p>看到这里，可能会有很多人会以为我在这里说瞎话，Linus Torvalds写出了著名的Linux操作系统，我国并没有人写出过类似的东西啊，我国的”大牛”怎么能和西方的比呢? 不知大家注意到没有，Linus Torvalds只是写出了一个”象模象样”的操作系统雏形，Linux后来真正发展成闻名全球的开源操作系统期间，完全是因为许多支持开源的商业公司如IBM等，派出了许多比Linus Torvalds更高楼层的幕后英雄在里面把它开发出来的。</p>\n<p>可能有些菜鸟认为Linus Torvalds是程序员中的上帝，不妨说个小故事：<br>Linus，Richard Stallman和Don Knuth（高德纳）一同参加一个会议。<br>Linus 说：”上帝说我创造了世界上最优秀的操作系统。”</p>\n<p>Richard Stallman自然不甘示弱地说：”上帝说我创造了世界上最好用的编译器。”<br>Don Knuth一脸疑惑的说：”等等，等等，我什么时候说过这些话？”</p>\n<p>由此可以看出，Linus Torvalds的技术水平并不像想像中那么高，只是”牛人”和”大虾”觉得”大牛”比他们更牛吧了。在我国，有一些当时还处于”大虾”层的人物，也能写出介绍如何写操作系统的书，并且书写得非常出色，而且写出了一个有那么一点点象模象样的操作系统来。我想中国的”大牛”们是不会比西方差的，之所以没有人写出类似的商业产品来，完全是社会环境的原因，并不是技术能力达不到的原因。</p>\n<p>“大牛”们之所以成为大牛，主要的原因是因为把”牛人”给盖了下去，并不是他们自己觉得如何牛。也许有很多菜鸟、大虾甚至牛人觉得”大牛”这层已经到顶了，但大多数”大牛”估计应该是有自知之明的，他们知道自己现在还没有爬到半山腰，也就勉强能算个半桶水的水平，其中有些爬到这层没有累趴下，仍然能量充沛，并且又有志者，还是会继续往更上一层楼爬的。</p>\n<p>看到这里，也许有些菜鸟、大虾、牛人想不明白了，还有比”大牛”们更高的楼层，那会是什么样的楼层？下面就来看看第5层楼的奥妙。</p>\n<h3 id=\"第5层-专家\"><a href=\"#第5层-专家\" class=\"headerlink\" title=\"第5层 专家\"></a>第5层 专家</h3><p>当大牛们真正动手做一个操作系统或者类似的其他软件时，他们就会发现自己的基本功仍然有很多的不足。以内存管理为例，如果直接抄袭Linux或者其他开源操作系统的内存管理算法，会被人看不起的，如果自动动手实现一个内存管理算法，他会发现现在有关内存管理方法的算法数量众多，自己并没有全部学过和实践过，不知道到底该用那种内存管理算法。</p>\n<p>看到这里，可能有些人已经明白第5层楼的奥妙了，那就是需要做基础研究，当然在计算机里，最重要的就是”计算”二字，程序员要做基础研究，主要的内容就是研究非数值”计算”。</p>\n<p>非数值计算可是一个非常庞大的领域，不仅时下热门的”多核计算”与”云计算”属于非数值计算范畴，就是软件需求、设计、测试、调试、评估、质量控制、软件工程等本质上也属于非数值计算的范畴，甚至芯片硬件设计也同样牵涉到非数值计算。如果你还没有真正领悟”计算”二字的含义，那么你就没有机会进到这层楼来。<br>可能有人仍然没有明白为什么比尔·盖茨被划在了大牛层，没有进到这层来。虽然比尔·盖茨大学未毕业，学历不够，但是家有藏书2万余册，进入软件这个行业比绝大部分人都早，撇开他的商业才能不谈，即使只看他的技术水平，也可以算得上是学富五车，顶上几个普通的计算机软件博士之和是没有问题的，比起Linus Torvalds之类的”大牛”们应该技高一筹才对，怎么还进不了这层楼呢？</p>\n<p>非常遗憾的是，从Windows操作系统的实现来看，其对计算的理解是很肤浅的，如果把Google对计算方面的理解比做大学生，比尔·盖茨只能算做一个初中生，所以比尔·盖茨永远只能做个大牛人，成不了”专家”。</p>\n<p>看到这里，也许国内的大牛们要高兴起来了，原来比尔·盖茨也只和我等在同一个层次，只要再升一层就可以超越比尔·盖茨了。不过爬到这层可没有从”牛人”升为”大牛”那么简单，人家比尔·盖茨都家有2万多册书，让你看个500~1000本以上的专业书籍并掌握好它应该要求不高吧。当然，这并不是主要的条件，更重要的是，需要到专业的学术站点去学习了，到ACM，IEEE，Elsevier，SpringerLink，SIAM等地方去下载论文应该成为你的定期功课，使用Google搜索引擎中的学术搜索更是应该成为你的日常必修课。此外，你还得经常关注是否有与你研究相关的开源项目冒出来，例如当听到有TBB这样针对多核的开源项目时，你应该第一时间到Google里输入”TBB”搜索一下，将其源代码下载下来好好研究一番，这样也许你的一只脚已经快迈进了这层楼的门槛。</p>\n<p>当你象我上面说的那样去做了以后，随着时间的推移，总会有某天，你发现，在很多小的领域里，你已经学不到什么新东西了，所有最新出来的研究成果你几乎都知道。此时你会发现你比在做”牛人”和”大牛”时的水平不知高出了多少，但是你一点也”牛”不起来，因为你学的知识和思想都是别人提出来的，你自己并没有多少自己的知识和思想分享给别人，所以你还得继续往楼上爬才行。<br>我不知道国内的”专家”到底有多少，不过有一点可以肯定的是，如果把那些专门蒙大家的”砖家”也算上的话，我们的砖家比西方的要多得多。</p>\n<h3 id=\"第6层-学者\"><a href=\"#第6层-学者\" class=\"headerlink\" title=\"第6层 学者\"></a>第6层 学者</h3><p>当”专家”们想继续往上一层楼爬时，他们几乎一眼就可以看到楼梯的入口，不过令他们吃惊的是，楼梯入口处竖了一道高高的门槛，上面写着”创新”二字。不幸的是，大多数人在爬到第5层楼时已经体能消耗过度，无力翻过这道门槛。</p>\n<p>有少数体能充足者，可以轻易翻越这道门槛，但是并不意味着体力消耗过度者就无法翻越，因为你只是暂时还没有掌握恢复体能的方法而已，当掌握了恢复体能的方法，将体能恢复后，你就可以轻易地翻越这道门槛了。</p>\n<p>怎么才能将体能恢复呢？我们的老祖宗”孔子”早就教导过我们”温故而知新”，在英文里，研究的单词是”research”，其前缀”re”和”search”分别是什么意思不用我解释吧。或许有些人觉得”温故而知新”和”research”有些抽象，不好理解，我再给打个简单的比方，比如你在爬一座高山，爬了半天，中途体力不支，怎么恢复体力呢？自然是休息一下，重新进食一些食物，体力很快就可以得到恢复。</p>\n<p>由此可知，对体能消耗过度者，休息＋重新进食通常是恢复体能的最佳选择。可惜的是，国内的老板们并不懂得这点，他们的公司里不仅连正常国家规定的休息时间都不给足，有些公司甚至有员工”过劳死”出现。所以国内能翻越”创新”这道门槛的人是”少之又少”，和西方比起来估计是数量级的差别。</p>\n<p>再说说重新进食的问题，这个重新进食是有讲究的，需要进食一些基础性易消化的简单食物，不能进食山珍海味级的复杂食物，否则很难快速吸收。以查找为例，并不是去天天盯着那些复杂的查找结构和算法进行研究，你需要做的是将二分查找、哈希查找、普通二叉树查找等基础性的知识好好地复习几遍。</p>\n<p>以哈希查找为例，首先你需要去将各种冲突解决方法如链式结构、二次哈希等编写一遍，再试试不同种类的哈希函数，然后还需要试试在硬盘中如何实现哈希查找，并考虑数据从硬盘读到内存后，如何组织硬盘中的数据才能快速地在内存中构建出哈希表来，…，这样你可能需要将一个哈希表写上十几个不同的版本，并比较各个版本的性能、功能方面的区别和适用范围。</p>\n<p>总之，对任何一种简单的东西，你需要考虑各种各样的需求，以需求来驱动研究。最后你将各种最基础性的查找结构和算法都了然于胸后，或许某天你再看其他更复杂的查找算法，或者你在散步时，脑袋里灵光一现，突然间就发现了更好的方法，也就从专家晋升为”学者”了。</p>\n<p>学者所做的事情，通常都是在前人的基础上，进行一些小的优化和改进，例如别人发明了链式基数排序的方法，你第1个发现使用一定的方法，可以用数组替代链表进行基数排序，性能还能得到进一步提高。<br>由于学者需要的只是一些小的优化改进，因此中国还是有一定数量的学者。不过和国外的数量比起来，估计少了一个数量级而已。<br>也许有人会觉得现在中国许多公司申请专利的数量达到甚至超过西方发达国家了，我们的学者数量应该不会比他们少多少。因此，有必要把专利和这里说的创新的区别解释一下。</p>\n<p>所谓专利者，只要是以前没有的，新的东西，都可以申请专利；甚至是以前有的东西，你把他用到了一个新的领域的产品里去，也可以申请专利。比如你在房子里造一个水泥柱子，只要以前没有人就这件事申请专利，那么你就可以申请专利，并且下次你把水泥柱子挪一个位置，又可以申请一个新的专利；或者你在一个柜子上打上几个孔，下次又把孔的位置改一改，…，均可申请专利。</p>\n<p>这层楼里所说的创新，是指学术层面的创新，是基础研究方面的创新，和专利的概念是完全不同的，难度也是完全不同的。你即使申请了一万个象那种打孔一类的专利，加起来也够不到这层楼里的一个创新。</p>\n<p>当你爬到第6层楼时，你也许会有一种突破极限的快感，因为你终于把那道高高的写着”创新”二字的门槛给翻过去了，实现了”0”的突破。这时，你也许有一种”独上高楼，欲望尽天涯路”的感觉，但是很快你会发现看到的都是比较近的路，远处的路根本看不清楚。如果你还有足够的体力的话，你会想爬到更高一层的楼层去。</p>\n<h3 id=\"第7层-大师\"><a href=\"#第7层-大师\" class=\"headerlink\" title=\"第7层 大师\"></a>第7层 大师</h3><p>从第6层楼爬到第7层楼，并没有多少捷径可走，主要看你有没有足够的能量。你如果能象Hoare一样设计出一个快速排序的算法；或者象Eugene W. Myers一样设计出了一个用编辑图的最短路径模型来解决diff问题的算法；或者象M.J.D. Powell一样提出了一个能够处理非线性规划问题的SQP方法；或者你发现基于比较的排序算法，它的复杂度下界为O(NLogN)；或者你发现用栈可以将递归的算法变成非递归的；或者你设计出一个红黑树或者AVL树之类的查找结构；或者你设计出一个象C++或Java一样的语言；或者你发明了UML；…，你就爬到了第7层，晋升为”大师”了。</p>\n<p>上面举的这些例子中，其中有些人站的楼层比这层高，这里只是为了形象说明而举例他们的某个成就。从上面列出的一些大师的贡献可以看出，成为大师必须要有较大的贡献。首先解决问题必须是比较重要的，其次你要比前辈们在某方面有一个较大的提高，或者你解决的是一个全新的以前没有解决过的问题；最重要的是，主要的思路和方法必须是你自己提供的，不再是在别人的思路基础上进行的优化和改进。<br>看了上面这些要求，如果能量不够的话，你也许会觉得有些困难，所以不是每个人都能成为”大师”的。中国软件业里能称得上是”大师”的人，用屈指可数来形容，估计是绰绰有余。值得一提的是，国外的”大师”就象我们的”大牛”一样满天飞的多。</p>\n<p>我把我猜测本国有可能进到这层楼的大师列一下，以起个抛砖引玉的作用。汉王的”手写识别”技术由于是完全保密的，不知道它里面用了什么思想，原创思想占的比重有多少，因此不知道该把它划到这层楼还是更高一层楼去。原山东大学王小云教授破解DES和MD5算法时，用到的方法不知道是不是完全原创的，如果是的话也可进到这层楼来。<br>陈景润虽然没有彻底解决哥德巴赫猜想，但他在解决问题时所用的方法是创新的，因此也可以进到这层楼来。当然，如果能彻底解决哥德巴赫猜想，那么可以算到更高的楼层去。</p>\n<p>求伯君和王志东等大牛们，他们在做WPS和表格处理之类的软件时，不知是否有较大的原创算法在里面，如果有的话就算我错把他们划到了大牛层。由于所学有限，不知道国内还有那些人能够得上”大师”的级别，或许有少量做研究的教授、院士们，可以达到这个级别，有知道的不妨回个帖子晾一晾。</p>\n<p>鉴于”大师”这个称号的光环效应，相信有不少人梦想着成为”大师”。或许你看了前面举的一些大师的例子，你会觉得要成为大师非常困难。不妨说一下，现在有一条通往”大师”之路的捷径打开了，那就是多核计算领域，有大量的处女地等待大家去挖掘。<br>以前在单核时代开发的各种算法，现在都需要改写成并行的。数据结构与算法、图像处理、数值计算、操作系统、编译器、测试调试等各个领域，都存在大量的机会，可以让你进到这层楼来，甚至有可能让你进到更高一层楼去。</p>\n<h3 id=\"第8层-科学家\"><a href=\"#第8层-科学家\" class=\"headerlink\" title=\"第8层 科学家\"></a>第8层 科学家</h3><p>科学家向来都是一个神圣的称号，因此我把他放在了“大师”之上。要成为科学家，你的贡献必须超越大师，不妨随便举一些例子。</p>\n<p>如果你象Dijkstra一样设计了ALGOL语言，提出了程序设计的三种基本结构：顺序、选择、循环，那么你可以爬到第8层楼来。顺便说一下，即使抛开这个成果，Dijkstra凭他的PV操作和信号量概念的提出，同样可以进到这层楼。</p>\n<p>如果你象Don Knuth一样，是数据结构与算法这门学科的重要奠基者，你也可以进到这层楼来。当然，数据结构和算法这门学科不是某个人开创的，是许多大师和科学家集体开创的。</p>\n<p>如果你象巴科斯一样发明了Fortran语言，并提出了巴科斯范式，对高级程序语言的发展起了重要作用，你也可以进到这层楼来。</p>\n<p>或者你象Ken Thompson、Dennis Ritchie一样发明了Unix操作系统和功能强大、高效、灵活、表达力强的C语言，对操作系统理论和高级编程语言均作出重大贡献，那么你也可以进到这层楼来。</p>\n<p>或者你有Frederick P. Brooks一样机会，可以去领导开发IBM的大型计算机System&#x2F;360和OS&#x2F;360操作系统，并在失败后反思总结，写出《人月神话》，对软件工程作出里程碑式的贡献，你也可以进到这层来。</p>\n<p>或者你提出了面向对象设计的基本思想，或者你设计了互联网的TCP&#x2F;IP协议，或者你象Steven A.Cook一样奠定NP完全性的理论基础，或者你象Frances Allen一样专注于并行计算来实现编译技术，在编译优化理论和技术取得基础性的成就，…，均可进入这层。</p>\n<p>当然，如果你发明了C++语言或者Java语言，你进不到这层来，因为你用到的主要思想都是这层楼中的科学家提出的，你自己并没有没有多少原创思想在里面。</p>\n<p>看了上面列出的科学家的成就，你会发现，要成为“科学家”，通常要开创一门分支学科，或者是这个分支学科的奠基者，或者在某个分支学科里作出里程碑式的重大贡献。如果做不到这些的话，那么你能象Andrew C. Yao（姚期智）一样在对计算理论的多个方向如伪随机数生成，密码学与通信复杂度等各个方向上作出重要贡献，成为集大成者，也可以进入这层楼。</p>\n<p>成为“科学家”后，如果你有幸象Dijkstra一样，出现在一个非常重视科学的国度。当你去世时，你家乡满城的人都会自动地去为你送葬。不过如果不幸生错地方的话，能不挨“板砖”估计就算万幸了。</p>\n<p>从上面随便举的一些例子中，你可能能猜到，西方科学家的数量是非常多的，于是你会想中国应该也有少量的科学家吧？我可以很负责任地告诉你一个不幸的结果，中国本土产生的科学家的数量为0。目前在国内，软件领域的唯一的科学家就是上面提过的姚期智，还是国外请回来的，并不是本土产生的。</p>\n<p>可能你不同意我说的本土科学家数量为0的结论，因为你经常看到有许多公司里都有所谓“首席XX科学家”的头衔。我想说的是，这些所谓的“首席XX科学家”都是远远够不到这层楼的级别的，有些人的水平估计也就是一个“牛人”或“大牛”的级别，好一点的最多也就一个“学者”的级别。尤其是那些被称作“首席经X学家”的，基本上可以把称号改为“首席坑大家”。</p>\n<p>虽然我国没有人能爬到这层楼上来，但是西方国家仍然有许多人爬到了比这层更高的楼上。如果要问我们比西方落后多少？那么可以简单地回答为：“落后了三层楼”。下面就来看看我们做梦都没有到过的更高一层楼的秘密。</p>\n<h3 id=\"第9层-大科学家\"><a href=\"#第9层-大科学家\" class=\"headerlink\" title=\"第9层 大科学家\"></a>第9层 大科学家</h3><p>进入这层楼的门槛通常需要一些运气，比如某天有个苹果砸到你头上时，你碰巧发现了万有引力，那么你可以进到这层楼来。当然，万有引力几百年前就被人发现了，如果你现在到处嚷嚷着说你发现了万有引力，恐怕马上会有人打110，然后警察会把你送到不正常人类的聚集地去。因此，这里举万有引力的例子，只是说你要有类似的成就才能进到这层楼来。</p>\n<p>牛顿发现万有引力定律开创了经典物理运动力学这门学科，如果你也能开创一门大的学科，那么你就从科学家晋升为“大科学家”。比如爱因斯坦创建了相对论，从一个小职员变成了大科学家。当然大科学家可远不止这两人，数学界里比物理学界更是多得多，如欧几里得创建了平面几何，笛卡尔开创解析几何，还有欧拉、高斯、莱布尼茨等数不清的人物，跟计算相关的大科学家则有图灵等人。</p>\n<p>从上面列出的一些大科学家可以发现，他们的成就不仅是开创了一个大的学科，更重要的是他们的成就上升到了“公理”的层面。发现公理通常是需要一点运气的，如果你的运气不够好的话，另外还有一个笨办法也可以进到这层楼来，那就是成为集大成者。例如冯·诺伊曼，对数学的所有分支都非常了解，许多领域都有较大的贡献，即使撇开他对计算机的开创贡献，成为大科学家照样绰绰有余。</p>\n<p>当然，程序员们最关心的是自己有没有机会变成大科学家。既然计算机这门大学科的开创性成果早就被冯·诺伊曼、图灵等人摘走了，那么程序员们是不是没有机会变成大科学家了呢？我们的古人说得好：“江山代有才人出，各领风骚数百年”，现在在计算机这门学科下面诞生了许多非常重要的大的分支，所以你还是有足够的机会进到这层楼的。</p>\n<p>如果你能够彻底解决自然语言理解（机器翻译）这门学科中的核心问题， 或者你在人工智能或者机器视觉（图像识别）方面有突破性的发现，那么你同样可以轻易地晋升为“大科学家”。这样当某天你老了去世时，或许那天国人已经觉醒，你也能享受到如Dijkstra一样的待遇，有满城甚至全国的人去为你送葬。</p>\n<p>现在还剩下另外一个大家感兴趣的问题没有讨论，那就是这层中已经出现了牛顿、爱因斯坦、高斯等我们平常人都认为是顶级的科学家，是不是这层已经是楼顶了呢？相信还记得本文标题的人应该知道现在仅仅是第9层，还有第10层没有到达呢。可能不少人现在要感到困惑了，难道还有人站在比牛顿、爱因斯坦、高斯等人更高的楼层上？<br>这个世界上确实存在可以用一只手的手指数得清的那么几个人，他们爬到了第10层楼上。因此，第10层楼不是虚构的，而是确实存在的。如果对此有疑惑或者认为我在胡诌一番的话，那么不妨继续往下看下去，窥一下第10层楼的秘密。</p>\n<h3 id=\"第10层-大哲\"><a href=\"#第10层-大哲\" class=\"headerlink\" title=\"第10层 大哲\"></a>第10层 大哲</h3><p>看了这层楼的名字“大哲”，可能不少人已经猜到了这层楼的秘密，那就是你的成果必须要上升到哲学的高度，你才有机会能进到这层来。</p>\n<p>当然，上升到哲学高度只是一个必要条件，牛顿的万有引力似乎也上升到了哲学的高度，因为不知道引力到底是怎么来的，但是牛顿没有被划到这一层，因为进到这层还有另外的条件，那就是你的成果必须引起了哲学上的深度思考，并能让人们的世界观向前跨进一大步。窃以为牛顿、爱因斯坦等人的成就还达不到让人们世界观向前跨进一大步的程度。</p>\n<p>所以，这层楼中的人的成就对我们普通人认识世界非常重要，你可以不学相对论，但是你不可以不对这层楼的人所作出的成就不了解，否则你的世界观就是极其不完整的，会犯许多认识上的错误。不幸的是，中国的科普知识普及还不够到位，知道这层楼成就的人好像并不多，程序员中恐怕更少。下面就来看看这些用一只手的手指数得清的大哲们，到底有什么成就，能比万有引力定律和相对论还重要。</p>\n<p><strong>1、希尔伯特 (1862～1943)</strong><br>第1位进到此楼层是一位名叫“希尔伯特”的大数学家，如果你学过《泛函分析》，那么你在学习希尔伯特空间时可能已经对这位大数学家有所了解；如果你不是学数学出身的，又对数学史不感兴趣的话，恐怕你从来没有听说过这个名字。不过如果我问一下，知不知道二次世界大战前世界数学中心在那里，你肯定会有兴趣想知道。</p>\n<p>不妨说一下，二战前整个世界的数学中心就在德国的哥廷根，而我们这位大数学家希尔伯特便是它的统帅和灵魂人物。即使在二战期间，希特勒和丘吉尔也有协定，德国不轰炸牛津和剑桥，作为回报，英国不轰炸海德堡和哥廷根。</p>\n<p>整个二十世纪上半期的超一流数学家，几乎都出自其门下。这里不妨举几个我们熟悉的人物，例如冯·诺伊曼就曾受到他和他的学生施密特和外尔的思想影响，还到哥廷根大学任过希尔伯特的助手，钱学森的老师冯·卡门是在哥廷根取得博士学位的。顺便提一下，这位大数学家发现当时物理学上出了很多大的成果如相对论和量子力学，但是这些物理学家的数学功力明显不足，因此有一段时间带领他的学生们研究过物理学，并独立发现了广义相对论，只是不好意思和物理学家争功劳，将广义相对论的功劳全部让给了爱因斯坦。</p>\n<p>广义相对论相对于这位大数学家在数学上的贡献，其实是算不了什么的，只是由此可看出这位大数学家品格的高尚之处。如果再去看看牛顿之流的人物的品行，整天和莱布尼茨、虎克等人争功劳，利用自己的优势地位打压他人，甚至闹得上法庭，和这位希尔伯特先生比起来，简直就是个小丑。</p>\n<p>说到这里，你可能对这位大数学家“希尔伯特”有了一些初步映象，感觉到了他的重要性，不过他在数学上的主要成就可不是几句话说得清楚的。首先，他是一位集大成者，精通当时数学所有分支领域，在数学的各个领域都有较大的贡献，当然这些成就只能让他成为一个大科学家，不能带他进入这层楼。事实上这位“希尔伯特”解决的任何一个数学问题都够不到这层楼的高度，那么他怎么混到这层楼来了呢？</p>\n<p>话得从1900年说起，当时还很年轻的希尔伯特在当时的世界数学大会上做了一个报告，高屋建瓯地提出了著名的23个未解决的数学问题，然后整个二十世纪上半期，全世界的数学家们都在这23个问题的指导下展开研究，直到现在仍然有许多数学家受这23个问题的指导在进行研究。例如我们熟知的哥德巴赫猜想，就属于其中第8个问题素数分布的一个子问题。</p>\n<p>如果用“高瞻远瞩”来形容这位大数学家的话，那么这个世界上恐怕没有第二个人再配得上“高瞻远瞩”这四个字，不论是欧拉、高斯、牛顿、爱因斯坦还是被誉为最有才华的数学家伽罗华，概不例外。</p>\n<p>虽然那23个问题是归纳总结出来的，并不全是原创，但是其中有不少问题是可以上升到哲学的高度，引起深度思考的。可能大多数人都会觉得希尔伯特是进不到这层楼的，我们知道提出问题的人和解决问题的人是一样伟大的，何况他提出的问题是如此之多，基于这点，个人觉得应该让希尔伯特跨进这层楼的门槛里。<br>看完这位希尔伯特的成就，你可能会觉得对你的世界观并没有产生任何影响。确实如此，他提出的问题不是用来影响你的，而是用来影响其他大科学家和大哲的，下面再来说说另一位对他提出的23个问题中的第2个问题有杰出贡献的大哲，你就会感觉到大哲们的成果的威力了。</p>\n<p><strong>2、哥德尔 (1906~1978)</strong><br>这位大哲的名字叫“哥德尔 (G?del) ”，你可能从来也没有听说过这个名字，即使你读了一个数学系的博士学位，如果你的研究方向不和这位大哲对口的话，你也不一定了解这位大哲的成就，更不知道他的成果对我们这个世界有何意义。</p>\n<p>简单地说，这位大哲20多岁时就证明了两个定理，一个叫做“哥德尔完全性定理”，另一个更重要的叫做“哥德尔不完全性定理”。你也许会觉得奇怪，第9层楼的成就就已经上升到了公理的高度，这种证明定理的事情不是学者和大师们做的事情吗？怎么能比第9层楼的成就还高呢？下面就来简单说一下这两个定理的含义，你就会明白这属于系统级的定理，绝不是普通的定理和公理所能比拟的。</p>\n<p>“哥德尔完全性定理”证明了逻辑学的几条公理是完备的，即任何一个由这些公理所产生出的问题，在这个公理系统内可以判定它是真的还是假的，这个结论表明了我们人类所拥有的逻辑思维能力是完备的。这条定理并不能将其带入这层楼来，带其进入这层楼的是另一条定理。</p>\n<p>“哥德尔不完全性定理”是在1930年证明的，它证明了现有数学的几条公理（ZF公理系统）是不完备的，即由这些公理产生出的问题，无法由这几条公理判断它是真的还是假的。例如希尔伯特23个问题中的第1个问题，也就是著名的康托尔连续统假设，哥德尔在1938年证明了现有公理系统中不能证明它是“假”的，科恩（Cohen，或许也可以称得上是“半”个大哲）在1963年证明了现有公理系统不能证明它是“真”的。最有趣的是，即使你将某个不可判定的问题，作为一条新的公理加入进去，所组成的新的公理系统仍然是不完备的，即你无法构造一个有限条公理的系统，让这个公理系统是完备的。</p>\n<p>也许你仍然无法理解上面这段话的含义，不妨先说一下它对我们现实世界的影响。你可能知道1936年出现的图灵机是现代计算机的理论模型，如果没有哥德尔不完全性定理的思想，图灵机什么时候能出来是很难说的，所以这位哥德尔可以算作计算机理论的奠基者的奠基者。计算机对我们这个世界产生的影响比原子弹大了多少，我想不用我说大家也都清楚。当然，对现实世界的影响只能把哥德尔同图灵等人一样划到大科学家那一层去，能进入这层乃是另有原因。</p>\n<p>可能你看过《未来战士》、《黑客帝国》、《I，Robot》之类的科幻电影，于是你产生制造一个和人一样或者比人更高一级的智能机器人的想法，这就引入了一个达到哲学高度的问题，“人到底能不能制造出具有和人一样的思维能力的机器来？”。<br>我只能告诉你，“你的愿望是良好的，但现实是残酷的”。如果你仔细思考一下不完全性定理的含义，并结合现代计算机所具有的能力分析一下，你会发现这个问题的答案暂时是否定的。如果你想造出和人一样思维能力的机器，那么你需要去好好学习这位大哲及其后续研究者的成果，并在他们的基础上有新的突破才行。<br>为了说明这位大哲所研究领域的重要性，这里顺便再讨论一个我们日常争议不休的问题，那就是孔夫子的“人之初、性本善”以及西方认为“人之初、性本恶”的观点孰优孰劣的问题。可能有许多人发现西方社会现在领先我们，于是就认为“性本恶”是对的，“性本善”是错的，中国应该抛弃以前的旧思想，改用西方的思想。当然也有一些老学究们，认为中国的人文思想是领先于西方的，自然而然地认为“性本善”是对的，“性本恶”是错的。</p>\n<p>如果你学过大哲用过的公理化的分析方法，你就知道一套系统的多条公理间只要不会推导出矛盾的地方，即可以自圆其说，那么它可以看作是对的。这样你可以很轻易地给这个问题下一个结论，即“性本善”和“性本恶”是对等的，不存在孰优孰劣的问题，更不存在谁对谁错的问题。只要你不同时将“性本善”和“性本恶”放入一个系统内，那么是不会有问题的，甚至你也可以认为“人之初、既无善、亦无恶”，或者认为“人之初、部分善、部分恶”，都是可以自圆其说的，所以我们的老祖宗提出的思想并没有问题，之所以落后乃是其他原因造成的。这个问题其实在高斯所处的时代就有了结论，那时有人提出了非欧几何，即平行线公理问题，有人认为过一点可以作多条平行线，还有人认为平行线在无穷远点是相交的，和欧氏几何关于过一点只能作一条平行线的公理都是矛盾的，但是他们各自的系统内推导出的结论都是正确的。</p>\n<p>上面说的只是对哥德尔不完全性定理的一些粗浅解析，实际上如果深入思考一下它的含义的话，你会发现它对物理学等许多学科有重大影响，包含的道理实在是深刻，远非一般的思想所能比拟，有兴趣者不妨“google”或“百度”一下“哥德尔”。或许只有我们的老祖宗“老子”提出的哲学思想，深度可以有得一比。</p>\n<p>哥德尔不完全性定理也给那些认为科学是严谨的人当头一棒，原来连数学这样的纯理论学科都是不严谨的，其他学科就更不用说了。</p>\n<p>至此，已经说完数学上的大哲，下面不妨再看看物理学上的大哲，物理学上好像只出过一位叫“海森堡”的大哲（注：由于本人对物理学不甚了解，不知道“霍金”够不够得上大哲的称号）。</p>\n<p><strong>3、海森堡 (1901~1976)</strong><br>海森堡这个名字相信没有几个人不知道的，大部分人在学习物理时都学过他的“测不准关系”，也就是因为这个“测不准关系”，海森堡爬到了第十层楼。</p>\n<p>如果你看过《时间简史》和《霍金讲演录－黑洞、婴儿宇宙及其他》，你也许已经了解测不准关系的威力，所以这里不想做过多的讨论，只谈一些和本土产生的哲学思想相关的东西。</p>\n<p>首先看看争论了几千年，并且现在仍然有人在争论不休的“宿命论”问题。霍金认为，只要这个宇宙有一个初始状态，粒子的运动是按照一定物理定律进行的（比如相对论、量子力学属于这些物理定律的一部分），那么所有的粒子运动轨迹将是确定的，然后只要你承认唯物论，即精神是由物质决定的，那么宿命论就是“对”的。当然由于测不准关系的存在，对人而言，又是无法准确预测的，因此也可以将其看作是“不对”的。简单的说，可以认为宿命论是“对”的是绝对的，宿命论是“不对”的是相对的。<br>可能上面这段话你现在仍然难以理解，或许你又觉得你的命运并不是上天注定的，而是可以通过自己的努力可以改变的。我要告诉你的是，你在想什么也是事先已注定的，包括你在预测本身也是事先注定的，因为大脑思考问题最终是基本粒子运动的结果，而这些粒子的运动必然要遵循物理定律进行，所以你会不会努力，想不想努力，包括你在想你该不该努力这件事本身也是事先注定的。顺便说一下，你现在正在看这篇文章，可能正在想这个宿命论问题值得怀疑，或者觉得写得不够好，准备砸个板砖上来；或者你在想这篇问题写得有点意思，准备看完后转给朋友看一看；又或者你看到这里，觉得很累了，准备休息一下；…；这些都是上天事先就注定的。从你自身的相对角度看，因为你事先不知道后来会发生什么，也可以认为不是事先注定的，可能这句话有些不好理解，不妨好好理解前面说过的公理化思想。</p>\n<p>如果你没看过《霍金讲演录－黑洞、婴儿宇宙及其他》，你可能会觉得很惊讶，宿命论历来不都被认为是唯心论吗，怎么由唯物论推导出了宿命论呢？现实就是这样和你开了一个大的玩笑，不过这个玩笑也是事先注定的。如果你再仔细用公理化的方法思考一下唯物论和唯心论的矛盾性，就像前面分析性善论和性恶论一样，你会发现唯物论、唯心论不一定就是冲突的，矛盾的双方是可以统一的，只要你不要同时将唯物和唯心放进同一个系统中就行。</p>\n<p>当然也有聪明者仍然会怀疑宿命论问题的正确性，因为这里有一个前提条件，即宇宙要有一个初始状态。宇宙有没有初始状态，我们并不知道啊，虽然有大爆炸学说，但那也只是假说而已，并没有得到确证，有些人就认为宇宙是一直都存在的。这样看来似乎你又有合理的理由在怀疑宿命论了，不过我仍然要告诉你，你现在在怀疑宿命论仍然是事先注定的，不相信的话就来看看下面的分析。</p>\n<p>虽然宇宙的初始状态值得怀疑，但是这个宇宙至少已经存在了一段时间，这点我想是毋庸置疑的。我们可以在我们已知的宇宙存在的这段时间内，任意取一个时间点t0，那么在这个时间点t0上，所有的粒子都有一个运动状态。在时间点t0之后的时间里，由于粒子运动是按照物理定律进行的，因此粒子运动轨迹由时间点t0的状态决定。说白一点，如果取100年前的一个时间点作为t0，那么现在的所有粒子运动状态100年前就已经确定了，如果取10000年前一个时间点作为t0，那么最近10000年内所有粒子运动的轨迹在10000年前就确定了，当然，你可以取更早的时间，比如100亿年前的时间点。</p>\n<p>总之，现在你会发现宇宙有没有初始状态并不会影响宿命论的正确性，所以这个世界的一切都是注定的。只不过由于粒子间相互影响过于复杂，我们无法知道这些粒子的运动轨迹而已。当然，如果将测不准关系用上的话，那么就是这个运动轨迹对人来说是无法准确预测的，所以不妨开个玩笑：“算命先生经常算得不准大概是测不准关系的缘故吧”。<br>如果你再深入思考一下测不准关系，你会发现这是一个测量系统的问题。由于宿命论的存在，这个世界本身实际上是确定的，是“准“的，之所以测不准乃是我们人类所具有的测量能力依赖于基本粒子造成的。所以我在前面说宿命论是“不对”的是相对的，它是相对于我们人类的测量能力而言的。根岑（Gentzen，曾任希尔伯特的助手）在一个更强的系统内证明了ZF系统内的问题都是可判定的，从一个侧面说明这个世界本身是确定的。（注：它和哥德尔不完全性定理并不矛盾，由于数学上的复杂性，这里就不详细解释了）</p>\n<p>不妨再想想我们老祖宗提出的“是庄周梦见了蝴蝶？还是蝴蝶梦见了庄周？”，“风动？幡动？还是心动？”之类的问题，当然以前你都认为这是纯粹的唯心主义，甚至认为是封建糟粕，但是如果结合测不准关系的内涵，再结合前面所说的公理化分析方法进行分析，估计你现在不敢轻易地下结论。</p>\n<p>也许到现在你仍然无法理解为什么把大哲们划在了大科学家的上一层，你可能仍然觉得万有引力、相对论等成果是最伟大的。下面就来谈谈为什么大哲比大科学家高一层。</p>\n<p>如果把人类在现有能力情况下，将来所能够拥有的知识总集看成是一个集合A，人类现在已有的知识总集看成是集合B，显然，集合B只是集合A的一个子集，并且是很小的一个子集。牛顿力学、相对论这些理论只能算作集合B里的一个子集，相对于集合A，只能算作是沧海一粟。 换句话说，在人类现有能力可做的事情集合中，牛顿力学和相对论等理论给出了详细的办法让你可以做其中的一些事情，当然剩下的更多的事情是牛顿力学和相对论所无法解决的。</p>\n<p>哥德尔不完全性定理和测不准关系的意义在于，它指出集合A的范围，即将人类现有能力发挥到极限的情况下，那些事情是你能做到的，那些是你不能做到的。当然，它并没有给出具体的方法让你去做你能做到的事情，它只是告诉我们我们人类现在发现的能力所能达到的极限。或许将来发现人类有其他新的未发现的能力，那么这个极限就被打破了。比如将来能发现不依赖于基本粒子的其他测量方法，并且测量过程中不会改变其他粒子的状态，那么测不准关系就被打破了。</p>\n<p> 看到这里，估计你已经发现了一些秘密，科学兜了一大圈，最终还是回到了哲学，也就是我们所认为的玄学上。同时你也会发现，我们老祖宗提出的所谓玄学，原来和现代科学是相通的，并非象某些人想像的那样全是糟粕。如果有人认为西方现代暂时领先我们，进而就认为西方古代就已经超越我们，我们老祖宗就已经落后西方，他们的思想都是糟粕的话，那么我认为他可能犯了崇洋媚外的毛病。我不得不化用一句周杰伦在春晚上的歌词送给他：“你不妨抓一副我们祖传的中医良方，治一治你那崇洋媚外的内伤”。顺便告诉他一下，中医用的阴阳五行理论，它的前提假设就是宿命论。</p>\n<p>上面说的这几位大哲的成果，可能对你的世界观会有很大的影响，于是你可能会羡慕起这些大哲们的成果来。如果你有大志的话，你会希望有朝一日你也能变成大哲，但是你发现上面的大哲是研究数学和物理学的，而你是学计算机的程序员，那么是不是没有机会变成大哲呢？</p>\n<p>如果你能将NP难题给彻底解决掉，意味着计算机内的计算的奥秘基本被揭开，或许你可以进到这层楼来；或者你能发现另外一套计算机可以理解的数学公理系统，并且这个公理系统是完备的，那么计算机取代人类进行思维的一个必要条件就满足了，计算机将具有真正意义上的“逻辑思维和推理能力”，你可以轻松地进到这层楼来。如果你发现了新的方法可以打破测不准关系，同样你也可以轻松地进到这层楼来。</p>\n<p>如果你能彻底揭开人类抽象思维的奥妙，并让计算机懂得了如何创建抽象，具备抽象思维能力，那么也就具备了“设计能力”，可以取代人类进行各种设计了，你也可以轻松地进到这层楼来。顺便说一下，如果你对软件设计有真正深刻理解的话，就会明白这不是在写科幻小说。对此感兴趣者，不妨好好地研究一下程序切片方面的技术，会让你对软件设计和测试等方面的理解有质的提高，或许有一天你能打开这扇大门。<br>当然，计算机要完全取代人还有其他必要条件，后面还会提及。</p>\n<p>值得一提的是，虽然第10层楼是本文中所写的最高层，但是大哲们并没有觉得他们到了顶层，他们通常都还会努力寻找通往更高一层的楼梯。如果你也有成为天下第一的想法，那么你或许会想要做什么事情才能超越大哲们的成就，当然，这都得依赖于找到更高一层楼的楼梯。</p>\n<p>个人认为，再往上一层楼的楼梯是通往天堂的道路，也就是说第11层楼的名字叫“天堂”，是“上帝”住的地方，而不是人住的地方。如果将来某天有人能爬到天堂的话，那么他已经不是人了，而是由人变成了“上帝”。</p>\n<p>你也许会怀疑这个世界到底有没有“天堂”，“上帝”是否根本就不存在，我也很有同感。因此有必要再写上一段文字，讨论一下“上帝”的问题。如果你想了解天堂的奥妙，有没有办法让你变成“上帝”，不妨看看继续往下看看第11层楼的玄妙。注意我这里用的是“玄妙”二字，因为上帝在大部分人眼里估计都是“玄之又玄”的东西。</p>\n<h3 id=\"第11层-上帝\"><a href=\"#第11层-上帝\" class=\"headerlink\" title=\"第11层 上帝\"></a>第11层 上帝</h3><p>看了上面的小标题，你可能会觉得奇怪，这篇文章不是讲“程序员的十层楼”吗？怎么冒出了第11层来了？<br>其实这并不矛盾，程序员确实只有十层楼，因为爬到第11层时，已经变成上帝，不再是程序员了；所以超出10层楼本身并不重要，关键的问题是看你有没有能力变成上帝。<br><strong>1、谁是上帝？</strong><br>菜鸟们认为Linus Torvalds是程序员中的上帝，看完了前面各层楼的介绍，此时再看到这句话，相信你要忍不住在心里笑起来。当然，你会不会笑起来是事先注定的。Don Knuth也不是上帝，他离上帝还有三层楼的距离。即使是大哲们，他们离天堂也还差一层楼，因此这个世界上有史以来还没有任何一个人变成过上帝。</p>\n<p>我们感兴趣的是，将来会不会有人爬到比大哲们更高的楼层上，变成了上帝。<br>要变成上帝，你得有上帝一样的能力，上帝会造人，你会吗？</p>\n<p>你也许会怯生生地问：“我可以和爱人生小孩，算不算造人？”，你可能还会理直气壮地说：“现在生物学上都可以克隆人了，早就有人掌握了造人的方法”。</p>\n<p>事实上克隆人需要有人的体细胞，必须要先有人才会有体细胞。上帝造人时，这个世界上并没有人，是从无生命的物质“尘土”中创造出的人。因此，用最原始的方法生人和克隆人都是从有生命信息的物质中生人，不能算作造人。</p>\n<p>这样看来，你根本不会造人，不过我可以告诉你一个“玄方”，让你有机会学会如何造人。</p>\n<p>如果你揭开了人类情感的奥秘，让计算机也可以拥有和人类一样的情感，那么计算机将可以理解人类的需求，具有了“情商”，将具有完整的和人一样的能力。此时，人类进化到了机器人，科幻小说将变成现实，也就是说你已经掌握了真正的造人能力，晋升为“上帝”了。</p>\n<p>未来到底有没有人能变成“上帝”，人能不能进化到机器人，这是宿命论中事先注定了的。说到这里，不妨再告诉你一个打破宿命论的方法，这个方法就是你要爬到比上帝还要高的楼层。<br>“还有比上帝还高的楼层？”，你可能会第1时间内冒出这个问题，其实我也有同样的怀疑。因此在写第12层楼前，有必要弄清楚它到底存不存在，即你可不可以骑到上帝的头上的问题。</p>\n<p><strong>2. 骑到上帝的头上？</strong><br>为了解决是否可以骑到上帝的头上这个问题，不妨先假设存在比上帝高的楼层，也就是存在打破宿命论的方法。<br>宿命论的本质原因是因为时间是单向运行，不可逆转造成的。如果你找到一种可以使时间逆转的方法，那么你就打破了宿命论，爬到了比上帝还高的楼层。<br>看到这里，你也许会摆脱刚才陷于宿命论的困惑情绪，变得充满希望般高兴起来。不过，如果你的逻辑思维能力足够好，仔细思考一下，会发现存在一个逻辑上的悖论。<br>在你找到时间逆转的方法之前，显然这个世界仍然是需要服从宿命论的，也就是说你能不能找到打破宿命论的方法是事先注定的。假设你在某个时间点t0处找到了打破宿命论的方法，你在打破宿命论后，想利用时间逆转的方法回到某个时间点t2。下面来看看你到底能不能回到时间点t2。</p>\n<p>取位于t0和t2之间的任意一个时间点t1，你在回到时间点t2之前，必须先经过时间点t1，考虑你到达t1的那一时刻，由于t1比t0要早，这个时间点上你还没有找到时间逆转的方法，所以到了时间t1点后，你无法再使用时间逆转的能力回到时间点t2去，所以你永远也回不到时间点t2，由于时间点t2是任意取的，因此，你永远也无法使时间逆转，或者说你根本就没打破过宿命论，这与你在时间点t0打破了宿命论产生了矛盾。</p>\n<p>上面这段话看起来似乎有点像“人永远迈不出一步”的诡辩一样，你可能会想返回到时间点t1时，仍然可以拥有时间逆转能力啊。不过你又会发现一个新的问题，时间点t1本来是没有时间逆转能力的，现在又认为时间点t1又有时间逆转能力，那时间点t1到底是有还是没有时间逆转能力呢？或者说在时间点t0前，宿命论注定了时间点t1是没有时间逆转能力的，现在你又认为时间点t1具有时间逆转能力，那么这两个时间点t1究竟是不是同一个时间点？如果不是同一个时间点，说明你没有回到过去；如果是同一个时间点的话，岂不是自相矛盾吗？</p>\n<p>为了说得更形象一些，不妨假设你坐一艘超光速飞船，准备从时间点t0回到时间点t2去，假设你回到t2后，随着时间的流逝，又达到了时间点t0，如果这时你又再次坐超光速飞船返回时间点t2，那么一个值得思考的问题就出现了，“你在时间点t2能不能看到上次返回时间点t2的飞船？”</p>\n<p>如果回答不能看到飞船，那么上次返回的飞船那里去了呢？显然很难解释通。如果回答能看到飞船，那么你可以到达时间点t2后，下次时间到达t0时，你又坐飞船返回t2，这次你将可以看到上两次的两艘飞船。如果这样一直循环下去，最后你会发现你可以在时间点t2看到无穷多的飞船。用程序员的术语说，叫做“程序陷入了死循环”，最后系统必然会出现“Out of Memory”现象而崩溃。</p>\n<p>当然，你也可以认为有其他的方法，不需要飞船，可以一次性从时间点t0直接跳跃到时间点t2，并不需要经过时间点t1。下面不妨来分析一下这个方法是否可行。<br>既然是直接跳跃到时间点t2，那么你必然是在一个无穷小的时间里出现在时间点t2的某个空间里，例如你要在时间点t2回到某个广场上。首先说明一下为什么是无穷小的时间里出现的，因为如果不是无穷小的时间里出现的话，那么必然可以取到一个时间点t1，会导致前面所说的时间点t1上出现悖论。</p>\n<p>你在广场上出现的时，广场上的空气必然要为你让开空间，而这是在无穷小的时间里完成的，那么很容易推导出你周围的空气获得的加速度和速度都是无穷大，因而它具有的动能也是无穷大，无穷大的能量和无穷大的速度意味着什么？一只鸟都可以将飞机撞下来，如果宇宙是有限大的话，它可以让这个宇宙炸毁无穷次；即使宇宙是无限大，它也足以让宇宙炸毁一次。宇宙都毁灭了，又何来的时间？还能说你回到了时间点t2吗？</p>\n<p>也许上面说的这些你仍然难以相信，不妨再说得更现实一些，假设你要回到100年前的一个时间点，这100年中，天上有多少流星湮灭了？有多少新星生成了？宇宙膨胀了多少？你有能力让湮灭的流星复原、生成的新星重新返回未生成前的状态，膨胀的宇宙收缩回去吗？如果这些东西的状态没有回复到100年前，又怎么能说明你回到的是100年前的时间点呢?</p>\n<p>根据上面的推导和分析，个人认为使时间逆转的方法是不存在的，所以第12层楼是不存在的，自然没有人可以骑到“上帝”的头上。<br><strong>宿命论将在有时间的时间里永远统治这个世界。</strong><br>居天下之广居，立天下之正位，行天下之大道，得志与民由之，不得志独行其道，富贵不能淫，贫贱不能移，威武不能屈，此之谓大丈夫。</p>\n<blockquote>\n<p>转载自<br><strong>Copyright © 1900-2016, NORYES, All Rights Reserved.</strong><br><strong><a href=\"http://www.cnblogs.com/noryes/\">http://www.cnblogs.com/noryes/</a></strong></p>\n</blockquote>\n"},{"title":"-📣📣-科学---技术---工程学---手艺---艺术","date":"2022-12-16T16:00:00.000Z","_content":"#### 手艺\n一张通过不断练习就可以拥有的东西，比如庖丁解牛，卖油翁，与它，唯手熟尔，主要在实践中锻炼提升，所谓道可道非常道，它不是一种理论，无法用语言说清楚。一万个小时理论和《刻意练习》说的就是这个道理。\n\n#### 科学\n通过实验证明，自然的秘密和客观规律，重在发现，比如物理学，化学，数学都是一种客观规律，具有可证伪性。\n比如物理学中的相对论，水只有在100度才会沸腾。这是未知之谜，等待你去探。科学是自由的，非功利性的，它的目的不是改变世界而是认识世界。西方科学的有两个重要节点，一个是亚里士多德形式逻辑的提出，一个是文艺复兴用实验验证现象传统的确立。\n\n#### 技术\n依赖自然现象，在物理现象范围内，可以封装，集成的可嵌入的理论实践的黑箱，是可以复制的，具有绝对稳定性，比如核聚变技术、芯片、互联网、硬盘存储技术、通信技术，技术是一步一步积累出来的，比如美国第N代发动机，先进技术发生于之前的组合；技术可以脱离人的主观能动性存在，比如现在人可以根据古人留下的书籍制作弓弩和药物；技术是功利性的，非自由的，技术的目的是提高生产力或者提升某一领域场景的效率。\n\n手艺和技术的区别:\n\n手艺和技术的主要差别是手艺需要人的参与，需要动手不断练习才能掌握，形成肌肉记忆，比如踢足球，用筷子。技术执行主体是机器，比如包饺子和饺子机，开车自动驾驶。\n\n#### 工程学\n工程学本质主要在于创造不存在的东西，可以说是技术和科学的运用，偏重于实践，比如金字塔，航天飞机，星链，地下排水系统，人类文明至今有数不胜数的工程，方便了人类的生活，所以工程师需要有创新精神和意识很重要。\n\n#### 艺术\n不可复制，无法文档化，和人的主观意志有主要关系，艺术家明显的特点是后来的作品很难超过之前的，比如一些导演歌手画家，容易江郎才尽，复制艺术不是艺术，比如临摹字帖，只是临摹没有主观意识的参与。\n\n#### 常识\n非系统化、理论化的东西，主要应对日常生活问题，比如历史知识，日常常识，太阳从东方升起，候鸟冬季南迁，南极有企鹅等。\n\n技术和常识的区别:\n常识具有唯一的答案，技术是人选择的结果\n以上的几个概念罗列的是主要特点，并没有泾渭分明，所以遇到某事不要钻牛角尖。\n","source":"_posts/-📣📣-科学---技术---工程学---手艺---艺术.md","raw":"---\ntitle: \"-📣📣-科学---技术---工程学---手艺---艺术\"\ndate: 2022-12-17\ntags: \n- 开发日常\n---\n#### 手艺\n一张通过不断练习就可以拥有的东西，比如庖丁解牛，卖油翁，与它，唯手熟尔，主要在实践中锻炼提升，所谓道可道非常道，它不是一种理论，无法用语言说清楚。一万个小时理论和《刻意练习》说的就是这个道理。\n\n#### 科学\n通过实验证明，自然的秘密和客观规律，重在发现，比如物理学，化学，数学都是一种客观规律，具有可证伪性。\n比如物理学中的相对论，水只有在100度才会沸腾。这是未知之谜，等待你去探。科学是自由的，非功利性的，它的目的不是改变世界而是认识世界。西方科学的有两个重要节点，一个是亚里士多德形式逻辑的提出，一个是文艺复兴用实验验证现象传统的确立。\n\n#### 技术\n依赖自然现象，在物理现象范围内，可以封装，集成的可嵌入的理论实践的黑箱，是可以复制的，具有绝对稳定性，比如核聚变技术、芯片、互联网、硬盘存储技术、通信技术，技术是一步一步积累出来的，比如美国第N代发动机，先进技术发生于之前的组合；技术可以脱离人的主观能动性存在，比如现在人可以根据古人留下的书籍制作弓弩和药物；技术是功利性的，非自由的，技术的目的是提高生产力或者提升某一领域场景的效率。\n\n手艺和技术的区别:\n\n手艺和技术的主要差别是手艺需要人的参与，需要动手不断练习才能掌握，形成肌肉记忆，比如踢足球，用筷子。技术执行主体是机器，比如包饺子和饺子机，开车自动驾驶。\n\n#### 工程学\n工程学本质主要在于创造不存在的东西，可以说是技术和科学的运用，偏重于实践，比如金字塔，航天飞机，星链，地下排水系统，人类文明至今有数不胜数的工程，方便了人类的生活，所以工程师需要有创新精神和意识很重要。\n\n#### 艺术\n不可复制，无法文档化，和人的主观意志有主要关系，艺术家明显的特点是后来的作品很难超过之前的，比如一些导演歌手画家，容易江郎才尽，复制艺术不是艺术，比如临摹字帖，只是临摹没有主观意识的参与。\n\n#### 常识\n非系统化、理论化的东西，主要应对日常生活问题，比如历史知识，日常常识，太阳从东方升起，候鸟冬季南迁，南极有企鹅等。\n\n技术和常识的区别:\n常识具有唯一的答案，技术是人选择的结果\n以上的几个概念罗列的是主要特点，并没有泾渭分明，所以遇到某事不要钻牛角尖。\n","slug":"-📣📣-科学---技术---工程学---手艺---艺术","published":1,"updated":"2024-05-16T07:39:11.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094lp000d2omvcxm8btby","content":"<h4 id=\"手艺\"><a href=\"#手艺\" class=\"headerlink\" title=\"手艺\"></a>手艺</h4><p>一张通过不断练习就可以拥有的东西，比如庖丁解牛，卖油翁，与它，唯手熟尔，主要在实践中锻炼提升，所谓道可道非常道，它不是一种理论，无法用语言说清楚。一万个小时理论和《刻意练习》说的就是这个道理。</p>\n<h4 id=\"科学\"><a href=\"#科学\" class=\"headerlink\" title=\"科学\"></a>科学</h4><p>通过实验证明，自然的秘密和客观规律，重在发现，比如物理学，化学，数学都是一种客观规律，具有可证伪性。<br>比如物理学中的相对论，水只有在100度才会沸腾。这是未知之谜，等待你去探。科学是自由的，非功利性的，它的目的不是改变世界而是认识世界。西方科学的有两个重要节点，一个是亚里士多德形式逻辑的提出，一个是文艺复兴用实验验证现象传统的确立。</p>\n<h4 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h4><p>依赖自然现象，在物理现象范围内，可以封装，集成的可嵌入的理论实践的黑箱，是可以复制的，具有绝对稳定性，比如核聚变技术、芯片、互联网、硬盘存储技术、通信技术，技术是一步一步积累出来的，比如美国第N代发动机，先进技术发生于之前的组合；技术可以脱离人的主观能动性存在，比如现在人可以根据古人留下的书籍制作弓弩和药物；技术是功利性的，非自由的，技术的目的是提高生产力或者提升某一领域场景的效率。</p>\n<p>手艺和技术的区别:</p>\n<p>手艺和技术的主要差别是手艺需要人的参与，需要动手不断练习才能掌握，形成肌肉记忆，比如踢足球，用筷子。技术执行主体是机器，比如包饺子和饺子机，开车自动驾驶。</p>\n<h4 id=\"工程学\"><a href=\"#工程学\" class=\"headerlink\" title=\"工程学\"></a>工程学</h4><p>工程学本质主要在于创造不存在的东西，可以说是技术和科学的运用，偏重于实践，比如金字塔，航天飞机，星链，地下排水系统，人类文明至今有数不胜数的工程，方便了人类的生活，所以工程师需要有创新精神和意识很重要。</p>\n<h4 id=\"艺术\"><a href=\"#艺术\" class=\"headerlink\" title=\"艺术\"></a>艺术</h4><p>不可复制，无法文档化，和人的主观意志有主要关系，艺术家明显的特点是后来的作品很难超过之前的，比如一些导演歌手画家，容易江郎才尽，复制艺术不是艺术，比如临摹字帖，只是临摹没有主观意识的参与。</p>\n<h4 id=\"常识\"><a href=\"#常识\" class=\"headerlink\" title=\"常识\"></a>常识</h4><p>非系统化、理论化的东西，主要应对日常生活问题，比如历史知识，日常常识，太阳从东方升起，候鸟冬季南迁，南极有企鹅等。</p>\n<p>技术和常识的区别:<br>常识具有唯一的答案，技术是人选择的结果<br>以上的几个概念罗列的是主要特点，并没有泾渭分明，所以遇到某事不要钻牛角尖。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"手艺\"><a href=\"#手艺\" class=\"headerlink\" title=\"手艺\"></a>手艺</h4><p>一张通过不断练习就可以拥有的东西，比如庖丁解牛，卖油翁，与它，唯手熟尔，主要在实践中锻炼提升，所谓道可道非常道，它不是一种理论，无法用语言说清楚。一万个小时理论和《刻意练习》说的就是这个道理。</p>\n<h4 id=\"科学\"><a href=\"#科学\" class=\"headerlink\" title=\"科学\"></a>科学</h4><p>通过实验证明，自然的秘密和客观规律，重在发现，比如物理学，化学，数学都是一种客观规律，具有可证伪性。<br>比如物理学中的相对论，水只有在100度才会沸腾。这是未知之谜，等待你去探。科学是自由的，非功利性的，它的目的不是改变世界而是认识世界。西方科学的有两个重要节点，一个是亚里士多德形式逻辑的提出，一个是文艺复兴用实验验证现象传统的确立。</p>\n<h4 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h4><p>依赖自然现象，在物理现象范围内，可以封装，集成的可嵌入的理论实践的黑箱，是可以复制的，具有绝对稳定性，比如核聚变技术、芯片、互联网、硬盘存储技术、通信技术，技术是一步一步积累出来的，比如美国第N代发动机，先进技术发生于之前的组合；技术可以脱离人的主观能动性存在，比如现在人可以根据古人留下的书籍制作弓弩和药物；技术是功利性的，非自由的，技术的目的是提高生产力或者提升某一领域场景的效率。</p>\n<p>手艺和技术的区别:</p>\n<p>手艺和技术的主要差别是手艺需要人的参与，需要动手不断练习才能掌握，形成肌肉记忆，比如踢足球，用筷子。技术执行主体是机器，比如包饺子和饺子机，开车自动驾驶。</p>\n<h4 id=\"工程学\"><a href=\"#工程学\" class=\"headerlink\" title=\"工程学\"></a>工程学</h4><p>工程学本质主要在于创造不存在的东西，可以说是技术和科学的运用，偏重于实践，比如金字塔，航天飞机，星链，地下排水系统，人类文明至今有数不胜数的工程，方便了人类的生活，所以工程师需要有创新精神和意识很重要。</p>\n<h4 id=\"艺术\"><a href=\"#艺术\" class=\"headerlink\" title=\"艺术\"></a>艺术</h4><p>不可复制，无法文档化，和人的主观意志有主要关系，艺术家明显的特点是后来的作品很难超过之前的，比如一些导演歌手画家，容易江郎才尽，复制艺术不是艺术，比如临摹字帖，只是临摹没有主观意识的参与。</p>\n<h4 id=\"常识\"><a href=\"#常识\" class=\"headerlink\" title=\"常识\"></a>常识</h4><p>非系统化、理论化的东西，主要应对日常生活问题，比如历史知识，日常常识，太阳从东方升起，候鸟冬季南迁，南极有企鹅等。</p>\n<p>技术和常识的区别:<br>常识具有唯一的答案，技术是人选择的结果<br>以上的几个概念罗列的是主要特点，并没有泾渭分明，所以遇到某事不要钻牛角尖。</p>\n"},{"title":"-📣📣《计算机·一部历史》","date":"2022-09-26T16:00:00.000Z","_content":"《计算机·一部历史》是一部计算机科普书，文笔流畅，通俗易懂，通过几个关键人物和关键技术的发展概述了计算机不到百年的发展史，我从中整理加上个人的见解，罗列了几条关键线简单概括这部书的脉络。\n\n**20世纪30年代，人们越来越热衷于发明自动计算机。**\n\n1935年，为了解决希尔伯特提出的问题，**图灵**提出了计算机基础理论，包括内存，中央处理器。\n\n1937年，21岁的香农是麻省理工学院的硕士研究生，他在其硕士论文**《继电器和开关电路的符号分析》**中提出，将布尔代数应用于电子领域。\n\n1945年6月，冯诺伊曼在火车上完成了，“**关于埃德瓦克的报告初稿**”，奠定了计算机理论的基础。\n\n1946年，电子数字积分计算机（**ENIAC**）—第一台真正意义上的电子计算机。\n\n1948年香农发布**《通信的数学理论》**阐述了二进制传输信息的方法，奠定了信息论的基础。\n\n1950左右，莫里斯·威尔克斯提出**CPU指令集**，**模块化编程**，汇编语言理论。\n\n1957年，IBM 的约翰·巴库斯发明了第一种编译型高级语言，称为**FORTRAN**，很快，其他编程语言也开始纷纷效法，比如**ALGOL**、列表处理语言**LISP**，Pascal。\n\n后来的几年，威尔克斯继续投入计算机语言的研究，他在改良算法语言**ALGOL 60**的基础上发明了**CPL**编程语言。这种语言并没有受到热烈的反响，但是却奠定了**BCPL**语言的基础。BCPL 进一步发展演变，推动了B 语言和**C**语言的问世。\n\n1965年，戈登·摩尔提出**摩尔定律**。\n\n1968年10月，NATO 召开的计算机科学会议上，Fritz Bauer 首次提出“**软件工程**”的概念，企图将工程化方法应用于软件开发上。\n\n1968年12月，恩格尔巴特及其研究小组展示了图形界面成果，首次提出**窗口概念**。\n\n1971年9月，贝尔实验室发布**unix**内部手册，同时还伴随着c语言的问世。\n\n1971年11月15日，第一款微处理器–英特尔**4004芯片**的出现，一切都开始发生了改变，此前都是机械控制。\n\n1972年，罗伯特·卡恩（Robert Kahn ）和 文特·瑟夫 发明 **TCP/IP**协议。\n\n1981年，施乐推出了Star 工作站（施乐8010信息系统），这是第一款采用**图形用户界面**的商用机。\n\n1981年，**TCP/IP** 成为了阿帕网的标准协议，逐渐普及。\n\n1983年，苹果Lisa 正式发布。另一款计算机麦金塔（**Macintosh** ）也于1984年亮相市场。\n\n1985年，IBM旗下的MS—DOS 系统的图形用户界面横空出世，这就是日后名声大噪的**Windows**。\n\n1989年，伯纳斯—李创建了**web系统**，包括URL，超文本标记语言，HTTP协议。\n\n1991年8月6日，**Info.cern.ch**上线，这是世界第一个网站，同时也伴随第一个浏览器的问世。\n\n1994年，伯纳斯—李在麻省理工学院创立了万维网联盟（**W3C**）。\n\n1999年，无线上网技术（Wi-Fi）。\n\n2007年6月29日，第一代**iPhone**开售，人类由PC进入**移动电脑**时代。\n","source":"_posts/-📣📣《计算机·一部历史》.md","raw":"---\ntitle: \"-📣📣《计算机·一部历史》\"\ndate: 2022-09-27\ntags: \n- 开发日常\n---\n《计算机·一部历史》是一部计算机科普书，文笔流畅，通俗易懂，通过几个关键人物和关键技术的发展概述了计算机不到百年的发展史，我从中整理加上个人的见解，罗列了几条关键线简单概括这部书的脉络。\n\n**20世纪30年代，人们越来越热衷于发明自动计算机。**\n\n1935年，为了解决希尔伯特提出的问题，**图灵**提出了计算机基础理论，包括内存，中央处理器。\n\n1937年，21岁的香农是麻省理工学院的硕士研究生，他在其硕士论文**《继电器和开关电路的符号分析》**中提出，将布尔代数应用于电子领域。\n\n1945年6月，冯诺伊曼在火车上完成了，“**关于埃德瓦克的报告初稿**”，奠定了计算机理论的基础。\n\n1946年，电子数字积分计算机（**ENIAC**）—第一台真正意义上的电子计算机。\n\n1948年香农发布**《通信的数学理论》**阐述了二进制传输信息的方法，奠定了信息论的基础。\n\n1950左右，莫里斯·威尔克斯提出**CPU指令集**，**模块化编程**，汇编语言理论。\n\n1957年，IBM 的约翰·巴库斯发明了第一种编译型高级语言，称为**FORTRAN**，很快，其他编程语言也开始纷纷效法，比如**ALGOL**、列表处理语言**LISP**，Pascal。\n\n后来的几年，威尔克斯继续投入计算机语言的研究，他在改良算法语言**ALGOL 60**的基础上发明了**CPL**编程语言。这种语言并没有受到热烈的反响，但是却奠定了**BCPL**语言的基础。BCPL 进一步发展演变，推动了B 语言和**C**语言的问世。\n\n1965年，戈登·摩尔提出**摩尔定律**。\n\n1968年10月，NATO 召开的计算机科学会议上，Fritz Bauer 首次提出“**软件工程**”的概念，企图将工程化方法应用于软件开发上。\n\n1968年12月，恩格尔巴特及其研究小组展示了图形界面成果，首次提出**窗口概念**。\n\n1971年9月，贝尔实验室发布**unix**内部手册，同时还伴随着c语言的问世。\n\n1971年11月15日，第一款微处理器–英特尔**4004芯片**的出现，一切都开始发生了改变，此前都是机械控制。\n\n1972年，罗伯特·卡恩（Robert Kahn ）和 文特·瑟夫 发明 **TCP/IP**协议。\n\n1981年，施乐推出了Star 工作站（施乐8010信息系统），这是第一款采用**图形用户界面**的商用机。\n\n1981年，**TCP/IP** 成为了阿帕网的标准协议，逐渐普及。\n\n1983年，苹果Lisa 正式发布。另一款计算机麦金塔（**Macintosh** ）也于1984年亮相市场。\n\n1985年，IBM旗下的MS—DOS 系统的图形用户界面横空出世，这就是日后名声大噪的**Windows**。\n\n1989年，伯纳斯—李创建了**web系统**，包括URL，超文本标记语言，HTTP协议。\n\n1991年8月6日，**Info.cern.ch**上线，这是世界第一个网站，同时也伴随第一个浏览器的问世。\n\n1994年，伯纳斯—李在麻省理工学院创立了万维网联盟（**W3C**）。\n\n1999年，无线上网技术（Wi-Fi）。\n\n2007年6月29日，第一代**iPhone**开售，人类由PC进入**移动电脑**时代。\n","slug":"-📣📣《计算机·一部历史》","published":1,"updated":"2024-05-16T07:39:11.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094lq000f2omvhwn63adv","content":"<p>《计算机·一部历史》是一部计算机科普书，文笔流畅，通俗易懂，通过几个关键人物和关键技术的发展概述了计算机不到百年的发展史，我从中整理加上个人的见解，罗列了几条关键线简单概括这部书的脉络。</p>\n<p><strong>20世纪30年代，人们越来越热衷于发明自动计算机。</strong></p>\n<p>1935年，为了解决希尔伯特提出的问题，<strong>图灵</strong>提出了计算机基础理论，包括内存，中央处理器。</p>\n<p>1937年，21岁的香农是麻省理工学院的硕士研究生，他在其硕士论文<strong>《继电器和开关电路的符号分析》</strong>中提出，将布尔代数应用于电子领域。</p>\n<p>1945年6月，冯诺伊曼在火车上完成了，“<strong>关于埃德瓦克的报告初稿</strong>”，奠定了计算机理论的基础。</p>\n<p>1946年，电子数字积分计算机（<strong>ENIAC</strong>）—第一台真正意义上的电子计算机。</p>\n<p>1948年香农发布<strong>《通信的数学理论》</strong>阐述了二进制传输信息的方法，奠定了信息论的基础。</p>\n<p>1950左右，莫里斯·威尔克斯提出<strong>CPU指令集</strong>，<strong>模块化编程</strong>，汇编语言理论。</p>\n<p>1957年，IBM 的约翰·巴库斯发明了第一种编译型高级语言，称为<strong>FORTRAN</strong>，很快，其他编程语言也开始纷纷效法，比如<strong>ALGOL</strong>、列表处理语言<strong>LISP</strong>，Pascal。</p>\n<p>后来的几年，威尔克斯继续投入计算机语言的研究，他在改良算法语言<strong>ALGOL 60</strong>的基础上发明了<strong>CPL</strong>编程语言。这种语言并没有受到热烈的反响，但是却奠定了<strong>BCPL</strong>语言的基础。BCPL 进一步发展演变，推动了B 语言和<strong>C</strong>语言的问世。</p>\n<p>1965年，戈登·摩尔提出<strong>摩尔定律</strong>。</p>\n<p>1968年10月，NATO 召开的计算机科学会议上，Fritz Bauer 首次提出“<strong>软件工程</strong>”的概念，企图将工程化方法应用于软件开发上。</p>\n<p>1968年12月，恩格尔巴特及其研究小组展示了图形界面成果，首次提出<strong>窗口概念</strong>。</p>\n<p>1971年9月，贝尔实验室发布<strong>unix</strong>内部手册，同时还伴随着c语言的问世。</p>\n<p>1971年11月15日，第一款微处理器–英特尔<strong>4004芯片</strong>的出现，一切都开始发生了改变，此前都是机械控制。</p>\n<p>1972年，罗伯特·卡恩（Robert Kahn ）和 文特·瑟夫 发明 <strong>TCP&#x2F;IP</strong>协议。</p>\n<p>1981年，施乐推出了Star 工作站（施乐8010信息系统），这是第一款采用<strong>图形用户界面</strong>的商用机。</p>\n<p>1981年，<strong>TCP&#x2F;IP</strong> 成为了阿帕网的标准协议，逐渐普及。</p>\n<p>1983年，苹果Lisa 正式发布。另一款计算机麦金塔（<strong>Macintosh</strong> ）也于1984年亮相市场。</p>\n<p>1985年，IBM旗下的MS—DOS 系统的图形用户界面横空出世，这就是日后名声大噪的<strong>Windows</strong>。</p>\n<p>1989年，伯纳斯—李创建了<strong>web系统</strong>，包括URL，超文本标记语言，HTTP协议。</p>\n<p>1991年8月6日，<strong>Info.cern.ch</strong>上线，这是世界第一个网站，同时也伴随第一个浏览器的问世。</p>\n<p>1994年，伯纳斯—李在麻省理工学院创立了万维网联盟（<strong>W3C</strong>）。</p>\n<p>1999年，无线上网技术（Wi-Fi）。</p>\n<p>2007年6月29日，第一代<strong>iPhone</strong>开售，人类由PC进入<strong>移动电脑</strong>时代。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>《计算机·一部历史》是一部计算机科普书，文笔流畅，通俗易懂，通过几个关键人物和关键技术的发展概述了计算机不到百年的发展史，我从中整理加上个人的见解，罗列了几条关键线简单概括这部书的脉络。</p>\n<p><strong>20世纪30年代，人们越来越热衷于发明自动计算机。</strong></p>\n<p>1935年，为了解决希尔伯特提出的问题，<strong>图灵</strong>提出了计算机基础理论，包括内存，中央处理器。</p>\n<p>1937年，21岁的香农是麻省理工学院的硕士研究生，他在其硕士论文<strong>《继电器和开关电路的符号分析》</strong>中提出，将布尔代数应用于电子领域。</p>\n<p>1945年6月，冯诺伊曼在火车上完成了，“<strong>关于埃德瓦克的报告初稿</strong>”，奠定了计算机理论的基础。</p>\n<p>1946年，电子数字积分计算机（<strong>ENIAC</strong>）—第一台真正意义上的电子计算机。</p>\n<p>1948年香农发布<strong>《通信的数学理论》</strong>阐述了二进制传输信息的方法，奠定了信息论的基础。</p>\n<p>1950左右，莫里斯·威尔克斯提出<strong>CPU指令集</strong>，<strong>模块化编程</strong>，汇编语言理论。</p>\n<p>1957年，IBM 的约翰·巴库斯发明了第一种编译型高级语言，称为<strong>FORTRAN</strong>，很快，其他编程语言也开始纷纷效法，比如<strong>ALGOL</strong>、列表处理语言<strong>LISP</strong>，Pascal。</p>\n<p>后来的几年，威尔克斯继续投入计算机语言的研究，他在改良算法语言<strong>ALGOL 60</strong>的基础上发明了<strong>CPL</strong>编程语言。这种语言并没有受到热烈的反响，但是却奠定了<strong>BCPL</strong>语言的基础。BCPL 进一步发展演变，推动了B 语言和<strong>C</strong>语言的问世。</p>\n<p>1965年，戈登·摩尔提出<strong>摩尔定律</strong>。</p>\n<p>1968年10月，NATO 召开的计算机科学会议上，Fritz Bauer 首次提出“<strong>软件工程</strong>”的概念，企图将工程化方法应用于软件开发上。</p>\n<p>1968年12月，恩格尔巴特及其研究小组展示了图形界面成果，首次提出<strong>窗口概念</strong>。</p>\n<p>1971年9月，贝尔实验室发布<strong>unix</strong>内部手册，同时还伴随着c语言的问世。</p>\n<p>1971年11月15日，第一款微处理器–英特尔<strong>4004芯片</strong>的出现，一切都开始发生了改变，此前都是机械控制。</p>\n<p>1972年，罗伯特·卡恩（Robert Kahn ）和 文特·瑟夫 发明 <strong>TCP&#x2F;IP</strong>协议。</p>\n<p>1981年，施乐推出了Star 工作站（施乐8010信息系统），这是第一款采用<strong>图形用户界面</strong>的商用机。</p>\n<p>1981年，<strong>TCP&#x2F;IP</strong> 成为了阿帕网的标准协议，逐渐普及。</p>\n<p>1983年，苹果Lisa 正式发布。另一款计算机麦金塔（<strong>Macintosh</strong> ）也于1984年亮相市场。</p>\n<p>1985年，IBM旗下的MS—DOS 系统的图形用户界面横空出世，这就是日后名声大噪的<strong>Windows</strong>。</p>\n<p>1989年，伯纳斯—李创建了<strong>web系统</strong>，包括URL，超文本标记语言，HTTP协议。</p>\n<p>1991年8月6日，<strong>Info.cern.ch</strong>上线，这是世界第一个网站，同时也伴随第一个浏览器的问世。</p>\n<p>1994年，伯纳斯—李在麻省理工学院创立了万维网联盟（<strong>W3C</strong>）。</p>\n<p>1999年，无线上网技术（Wi-Fi）。</p>\n<p>2007年6月29日，第一代<strong>iPhone</strong>开售，人类由PC进入<strong>移动电脑</strong>时代。</p>\n"},{"title":"-📣📣几个哲学问题.html","date":"2022-11-05T16:00:00.000Z","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2022-11-06- 📣📣几个哲学问题</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2022-11-06- 📣📣几个哲学问题</h1>\n        <div class=\"show-content\">\n          <p>1.当代社会，科技与资本的组合完成的进步强制和异化。</p><p>2.是否能在工作中找到精神家园。</p><p>3.佛学就像膏药能治病，去除你的妄念，但是人不能靠药活下去，要吃粮食，这就是儒学了。</p><p>4.命理学真实存在的，君子素位而行</p><p>5.工作不是事业，是饭碗</p><p>6.人生的意义，无论富贵还是贫贱，追求理性自律的圆满。</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n","source":"_posts/-📣📣几个哲学问题.html","raw":"---\ntitle: \"-📣📣几个哲学问题.html\"\ndate: 2022-11-06\ntags: \n- 开发日常\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2022-11-06- 📣📣几个哲学问题</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2022-11-06- 📣📣几个哲学问题</h1>\n        <div class=\"show-content\">\n          <p>1.当代社会，科技与资本的组合完成的进步强制和异化。</p><p>2.是否能在工作中找到精神家园。</p><p>3.佛学就像膏药能治病，去除你的妄念，但是人不能靠药活下去，要吃粮食，这就是儒学了。</p><p>4.命理学真实存在的，君子素位而行</p><p>5.工作不是事业，是饭碗</p><p>6.人生的意义，无论富贵还是贫贱，追求理性自律的圆满。</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n","slug":"-📣📣几个哲学问题","published":1,"updated":"2024-05-16T07:39:11.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094lt000h2omvgd7a1l4s","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2022-11-06- 📣📣几个哲学问题</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2022-11-06- 📣📣几个哲学问题</h1>\n        <div class=\"show-content\">\n          <p>1.当代社会，科技与资本的组合完成的进步强制和异化。</p><p>2.是否能在工作中找到精神家园。</p><p>3.佛学就像膏药能治病，去除你的妄念，但是人不能靠药活下去，要吃粮食，这就是儒学了。</p><p>4.命理学真实存在的，君子素位而行</p><p>5.工作不是事业，是饭碗</p><p>6.人生的意义，无论富贵还是贫贱，追求理性自律的圆满。</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2022-11-06- 📣📣几个哲学问题</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2022-11-06- 📣📣几个哲学问题</h1>\n        <div class=\"show-content\">\n          <p>1.当代社会，科技与资本的组合完成的进步强制和异化。</p><p>2.是否能在工作中找到精神家园。</p><p>3.佛学就像膏药能治病，去除你的妄念，但是人不能靠药活下去，要吃粮食，这就是儒学了。</p><p>4.命理学真实存在的，君子素位而行</p><p>5.工作不是事业，是饭碗</p><p>6.人生的意义，无论富贵还是贫贱，追求理性自律的圆满。</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n"},{"title":"2023-06-24.html","date":"2021-01-10T16:00:00.000Z","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2023-06-24</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2023-06-24</h1>\n        <div class=\"show-content\">\n          <p>人生是概率论，原子习惯是因果关系</p><p>态度：屈身守份，以待天时</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n","source":"_posts/2023-06-24.html","raw":"---\ntitle: \"2023-06-24.html\"\ndate: 2021-01-11\ntags: \n- 开发日常\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2023-06-24</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2023-06-24</h1>\n        <div class=\"show-content\">\n          <p>人生是概率论，原子习惯是因果关系</p><p>态度：屈身守份，以待天时</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n","slug":"2023-06-24","published":1,"updated":"2024-05-16T07:39:11.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094lv000j2omv2k0s8i7t","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2023-06-24</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2023-06-24</h1>\n        <div class=\"show-content\">\n          <p>人生是概率论，原子习惯是因果关系</p><p>态度：屈身守份，以待天时</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2023-06-24</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2023-06-24</h1>\n        <div class=\"show-content\">\n          <p>人生是概率论，原子习惯是因果关系</p><p>态度：屈身守份，以待天时</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n"},{"title":"ivew-modal-验证，关闭再打开，验证错误","date":"2021-01-18T16:00:00.000Z","_content":"ivew 里弹框存在表单验证时，再次打开出现校验问题；\n\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-f2a366b87632f04a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.\n```\n用 v-if 把modal内容包起来\n```\n2.把 visable放在 \n```\n\nthis.formData = {\nkey: value,\n.....\n}\nthis.$nextTick(() => {\n    this.visable = true;\n})\n```\n","source":"_posts/ivew-modal-验证，关闭再打开，验证错误.md","raw":"---\ntitle: \"ivew-modal-验证，关闭再打开，验证错误\"\ndate: 2021-01-19\ntags: \n- 开发日常\n---\nivew 里弹框存在表单验证时，再次打开出现校验问题；\n\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-f2a366b87632f04a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.\n```\n用 v-if 把modal内容包起来\n```\n2.把 visable放在 \n```\n\nthis.formData = {\nkey: value,\n.....\n}\nthis.$nextTick(() => {\n    this.visable = true;\n})\n```\n","slug":"ivew-modal-验证，关闭再打开，验证错误","published":1,"updated":"2024-05-16T07:39:11.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094lw000l2omv1kbictjw","content":"<p>ivew 里弹框存在表单验证时，再次打开出现校验问题；</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f2a366b87632f04a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<ol>\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用 v-if 把modal内容包起来</span><br></pre></td></tr></table></figure>\n2.把 visable放在 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">this.formData = &#123;</span><br><span class=\"line\">key: value,</span><br><span class=\"line\">.....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">    this.visable = true;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n\n","site":{"data":{}},"excerpt":"","more":"<p>ivew 里弹框存在表单验证时，再次打开出现校验问题；</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f2a366b87632f04a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<ol>\n<li><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用 v-if 把modal内容包起来</span><br></pre></td></tr></table></figure>\n2.把 visable放在 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">this.formData = &#123;</span><br><span class=\"line\">key: value,</span><br><span class=\"line\">.....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">    this.visable = true;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"☀️☀️-编程范式----JS-必包-VS-c语言","date":"2021-01-10T16:00:00.000Z","_content":"\n","source":"_posts/☀️☀️-编程范式----JS-必包-VS-c语言.md","raw":"---\ntitle: \"☀️☀️-编程范式----JS-必包-VS-c语言\"\ndate: 2021-01-11\ntags: \n- 编程范式\n---\n\n","slug":"☀️☀️-编程范式----JS-必包-VS-c语言","published":1,"updated":"2024-05-16T07:39:11.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094lx000n2omvbzvpflxp","content":"\n","site":{"data":{}},"excerpt":"","more":""},{"title":"ivew-radio-单选-1,0-字符串和数字怎么传","date":"2021-02-01T16:00:00.000Z","_content":"字符串,label不用加:\n```\n<template>\n      <RadioGroup v-model=\"hasDelay\">\n              <Radio label=1>是</Radio>\n              <Radio label=0>否</Radio>\n     </RadioGroup>\n</template>\n<script>\n    export default {\n        watch: {\n          hasDelay(v) {\n            console.log(v)\n          }\n        },\n        data () {\n            return {\n                hasDelay: '0'\n            }\n        }\n    }\n</script>\n\n```\n数字\n```\n<template>\n      <RadioGroup v-model=\"hasDelay\">\n              <Radio :label=1>是</Radio>\n              <Radio :label=0>否</Radio>\n     </RadioGroup>\n</template>\n<script>\n    export default {\n        watch: {\n          hasDelay(v) {\n            console.log(v)\n          }\n        },\n        data () {\n            return {\n                hasDelay: 0\n            }\n        }\n    }\n</script>\n\n```\n","source":"_posts/ivew-radio-单选-1,0-字符串和数字怎么传.md","raw":"---\ntitle: \"ivew-radio-单选-1,0-字符串和数字怎么传\"\ndate: 2021-02-02\ntags: \n- 开发日常\n---\n字符串,label不用加:\n```\n<template>\n      <RadioGroup v-model=\"hasDelay\">\n              <Radio label=1>是</Radio>\n              <Radio label=0>否</Radio>\n     </RadioGroup>\n</template>\n<script>\n    export default {\n        watch: {\n          hasDelay(v) {\n            console.log(v)\n          }\n        },\n        data () {\n            return {\n                hasDelay: '0'\n            }\n        }\n    }\n</script>\n\n```\n数字\n```\n<template>\n      <RadioGroup v-model=\"hasDelay\">\n              <Radio :label=1>是</Radio>\n              <Radio :label=0>否</Radio>\n     </RadioGroup>\n</template>\n<script>\n    export default {\n        watch: {\n          hasDelay(v) {\n            console.log(v)\n          }\n        },\n        data () {\n            return {\n                hasDelay: 0\n            }\n        }\n    }\n</script>\n\n```\n","slug":"ivew-radio-单选-1,0-字符串和数字怎么传","published":1,"updated":"2024-05-16T07:39:11.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ly000p2omv7cwsf1kq","content":"<p>字符串,label不用加:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">      &lt;RadioGroup v-model=&quot;hasDelay&quot;&gt;</span><br><span class=\"line\">              &lt;Radio label=1&gt;是&lt;/Radio&gt;</span><br><span class=\"line\">              &lt;Radio label=0&gt;否&lt;/Radio&gt;</span><br><span class=\"line\">     &lt;/RadioGroup&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        watch: &#123;</span><br><span class=\"line\">          hasDelay(v) &#123;</span><br><span class=\"line\">            console.log(v)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data () &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                hasDelay: &#x27;0&#x27;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>数字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">      &lt;RadioGroup v-model=&quot;hasDelay&quot;&gt;</span><br><span class=\"line\">              &lt;Radio :label=1&gt;是&lt;/Radio&gt;</span><br><span class=\"line\">              &lt;Radio :label=0&gt;否&lt;/Radio&gt;</span><br><span class=\"line\">     &lt;/RadioGroup&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        watch: &#123;</span><br><span class=\"line\">          hasDelay(v) &#123;</span><br><span class=\"line\">            console.log(v)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data () &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                hasDelay: 0</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>字符串,label不用加:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">      &lt;RadioGroup v-model=&quot;hasDelay&quot;&gt;</span><br><span class=\"line\">              &lt;Radio label=1&gt;是&lt;/Radio&gt;</span><br><span class=\"line\">              &lt;Radio label=0&gt;否&lt;/Radio&gt;</span><br><span class=\"line\">     &lt;/RadioGroup&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        watch: &#123;</span><br><span class=\"line\">          hasDelay(v) &#123;</span><br><span class=\"line\">            console.log(v)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data () &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                hasDelay: &#x27;0&#x27;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>数字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">      &lt;RadioGroup v-model=&quot;hasDelay&quot;&gt;</span><br><span class=\"line\">              &lt;Radio :label=1&gt;是&lt;/Radio&gt;</span><br><span class=\"line\">              &lt;Radio :label=0&gt;否&lt;/Radio&gt;</span><br><span class=\"line\">     &lt;/RadioGroup&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        watch: &#123;</span><br><span class=\"line\">          hasDelay(v) &#123;</span><br><span class=\"line\">            console.log(v)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data () &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                hasDelay: 0</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"☀️☀️-编程范式----shell-子文件异步模式-VS--JS-async-await","date":"2021-09-12T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-4eed4d9a728d558a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n问题：在 shell 下有 A、B、C、D 四个命令,\n需要先执行 A\n再执行 B、C \n最后执行 D\n\n其中, B、C 耗时较多， 但是，互不干扰，可以同步执\n针对以上情形，bash提供了一个内置的命令来帮助管理异步执行。\nwait命令可以让父脚本暂停，直到指定的进程（比如子脚本）结束。\n## shell子进程 和 wait\n```\n./A\n./B &  # 设为子进程\n./C &\npid=$1\nwait (pid)\n./D\n```\n## javascript async\njs 中的 async await 设计类似shell 中的这种异步模式，区别是 await 需要new Promise 包裹起来\n```\nasync AllProcess = () => {\n  A();\n  await B();\n  await C();\n  D();\n}\n```\n在shell中本身是文件包裹，相当于一个Promise了\n","source":"_posts/☀️☀️-编程范式----shell-子文件异步模式-VS--JS-async-await.md","raw":"---\ntitle: \"☀️☀️-编程范式----shell-子文件异步模式-VS--JS-async-await\"\ndate: 2021-09-13\ntags: \n- 编程范式\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-4eed4d9a728d558a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n问题：在 shell 下有 A、B、C、D 四个命令,\n需要先执行 A\n再执行 B、C \n最后执行 D\n\n其中, B、C 耗时较多， 但是，互不干扰，可以同步执\n针对以上情形，bash提供了一个内置的命令来帮助管理异步执行。\nwait命令可以让父脚本暂停，直到指定的进程（比如子脚本）结束。\n## shell子进程 和 wait\n```\n./A\n./B &  # 设为子进程\n./C &\npid=$1\nwait (pid)\n./D\n```\n## javascript async\njs 中的 async await 设计类似shell 中的这种异步模式，区别是 await 需要new Promise 包裹起来\n```\nasync AllProcess = () => {\n  A();\n  await B();\n  await C();\n  D();\n}\n```\n在shell中本身是文件包裹，相当于一个Promise了\n","slug":"☀️☀️-编程范式----shell-子文件异步模式-VS--JS-async-await","published":1,"updated":"2024-05-16T07:39:11.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094m0000s2omveghtffs7","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4eed4d9a728d558a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>问题：在 shell 下有 A、B、C、D 四个命令,<br>需要先执行 A<br>再执行 B、C<br>最后执行 D</p>\n<p>其中, B、C 耗时较多， 但是，互不干扰，可以同步执<br>针对以上情形，bash提供了一个内置的命令来帮助管理异步执行。<br>wait命令可以让父脚本暂停，直到指定的进程（比如子脚本）结束。</p>\n<div class=\"\"><h2 id=\"shell子进程-和-wait\"><a href=\"#shell子进程-和-wait\" class=\"headerlink\" title=\"shell子进程 和 wait\"></a>shell子进程 和 wait</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./A</span><br><span class=\"line\">./B &amp;  # 设为子进程</span><br><span class=\"line\">./C &amp;</span><br><span class=\"line\">pid=$1</span><br><span class=\"line\">wait (pid)</span><br><span class=\"line\">./D</span><br></pre></td></tr></table></figure>\n</div><div class=\"\"><h2 id=\"javascript-async\"><a href=\"#javascript-async\" class=\"headerlink\" title=\"javascript async\"></a>javascript async</h2><p>js 中的 async await 设计类似shell 中的这种异步模式，区别是 await 需要new Promise 包裹起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async AllProcess = () =&gt; &#123;</span><br><span class=\"line\">  A();</span><br><span class=\"line\">  await B();</span><br><span class=\"line\">  await C();</span><br><span class=\"line\">  D();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在shell中本身是文件包裹，相当于一个Promise了</p>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4eed4d9a728d558a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>问题：在 shell 下有 A、B、C、D 四个命令,<br>需要先执行 A<br>再执行 B、C<br>最后执行 D</p>\n<p>其中, B、C 耗时较多， 但是，互不干扰，可以同步执<br>针对以上情形，bash提供了一个内置的命令来帮助管理异步执行。<br>wait命令可以让父脚本暂停，直到指定的进程（比如子脚本）结束。</p>\n<h2 id=\"shell子进程-和-wait\"><a href=\"#shell子进程-和-wait\" class=\"headerlink\" title=\"shell子进程 和 wait\"></a>shell子进程 和 wait</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./A</span><br><span class=\"line\">./B &amp;  # 设为子进程</span><br><span class=\"line\">./C &amp;</span><br><span class=\"line\">pid=$1</span><br><span class=\"line\">wait (pid)</span><br><span class=\"line\">./D</span><br></pre></td></tr></table></figure>\n<h2 id=\"javascript-async\"><a href=\"#javascript-async\" class=\"headerlink\" title=\"javascript async\"></a>javascript async</h2><p>js 中的 async await 设计类似shell 中的这种异步模式，区别是 await 需要new Promise 包裹起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async AllProcess = () =&gt; &#123;</span><br><span class=\"line\">  A();</span><br><span class=\"line\">  await B();</span><br><span class=\"line\">  await C();</span><br><span class=\"line\">  D();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在shell中本身是文件包裹，相当于一个Promise了</p>\n"},{"title":"☀️☀️UI开发的几个历史阶段","date":"2022-05-10T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-591658c5c6261719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.过程化绘制时代 - 直接调用 drawLine / drawRect 风格的 API 来绘制像素。在我的树莓派里，只要 include X11 的头文件，就能用 C 语言体验这种硬派的 GUI 开发了。HTML5 中的 Canvas，其实也属于这种风格。\n\n2.面向对象抽象时代 - 纯粹过程化的代码，并不利于维护事件驱动的业务逻辑。比如，你需要自行计算来判断出某次点击应该选中哪个 UI 元素。在 MFC 和 GTK 的时代，人们实现了面向对象风格的 UI 框架。按钮、输入框等 UI 控件具备了实例方法，能更好地组织代码。\n\n3.界面与样式分离时代 - 用 C++ 系语言的代码来描述 UI，很容易写出面条式的丑陋代码。因此人们又引入了 XML 风格的语言，专门来表达嵌套式的界面。DirectUI 和 HTML / CSS / JS 基础上的经典 Web，都是这个时代的产物。\n\n4.MVC 与 MVVM 时代 - 如何维护日益复杂的 UI 交互逻辑？许多框架引入了软件工程中的 MVC 和 MVVM 等设计模式。这个时代的代表产物有苹果的 Cocoa 和微软的 WPF，以及 Web 上的 Angular 1 框架。\n\n5.声明式组件化时代 - 为什么我们必须编写连接 UI 布局语言和业务逻辑的面条代码呢？Facebook 的 React 提出了新的 UI 开发思路。通过 JSX，很容易用 JS 来编写嵌套的、声明式的、更易维护的 UI 组件，并借助 JavaScript 的动态性来实时调试 UI。当前风口上的 Vue，Flutter 和 SwiftUI，都明显地借鉴了这种思想。\n","source":"_posts/☀️☀️UI开发的几个历史阶段.md","raw":"---\ntitle: \"☀️☀️UI开发的几个历史阶段\"\ndate: 2022-05-11\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-591658c5c6261719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.过程化绘制时代 - 直接调用 drawLine / drawRect 风格的 API 来绘制像素。在我的树莓派里，只要 include X11 的头文件，就能用 C 语言体验这种硬派的 GUI 开发了。HTML5 中的 Canvas，其实也属于这种风格。\n\n2.面向对象抽象时代 - 纯粹过程化的代码，并不利于维护事件驱动的业务逻辑。比如，你需要自行计算来判断出某次点击应该选中哪个 UI 元素。在 MFC 和 GTK 的时代，人们实现了面向对象风格的 UI 框架。按钮、输入框等 UI 控件具备了实例方法，能更好地组织代码。\n\n3.界面与样式分离时代 - 用 C++ 系语言的代码来描述 UI，很容易写出面条式的丑陋代码。因此人们又引入了 XML 风格的语言，专门来表达嵌套式的界面。DirectUI 和 HTML / CSS / JS 基础上的经典 Web，都是这个时代的产物。\n\n4.MVC 与 MVVM 时代 - 如何维护日益复杂的 UI 交互逻辑？许多框架引入了软件工程中的 MVC 和 MVVM 等设计模式。这个时代的代表产物有苹果的 Cocoa 和微软的 WPF，以及 Web 上的 Angular 1 框架。\n\n5.声明式组件化时代 - 为什么我们必须编写连接 UI 布局语言和业务逻辑的面条代码呢？Facebook 的 React 提出了新的 UI 开发思路。通过 JSX，很容易用 JS 来编写嵌套的、声明式的、更易维护的 UI 组件，并借助 JavaScript 的动态性来实时调试 UI。当前风口上的 Vue，Flutter 和 SwiftUI，都明显地借鉴了这种思想。\n","slug":"☀️☀️UI开发的几个历史阶段","published":1,"updated":"2024-05-16T07:39:11.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094m2000u2omvd45ibmjl","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-591658c5c6261719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>1.过程化绘制时代 - 直接调用 drawLine &#x2F; drawRect 风格的 API 来绘制像素。在我的树莓派里，只要 include X11 的头文件，就能用 C 语言体验这种硬派的 GUI 开发了。HTML5 中的 Canvas，其实也属于这种风格。</p>\n<p>2.面向对象抽象时代 - 纯粹过程化的代码，并不利于维护事件驱动的业务逻辑。比如，你需要自行计算来判断出某次点击应该选中哪个 UI 元素。在 MFC 和 GTK 的时代，人们实现了面向对象风格的 UI 框架。按钮、输入框等 UI 控件具备了实例方法，能更好地组织代码。</p>\n<p>3.界面与样式分离时代 - 用 C++ 系语言的代码来描述 UI，很容易写出面条式的丑陋代码。因此人们又引入了 XML 风格的语言，专门来表达嵌套式的界面。DirectUI 和 HTML &#x2F; CSS &#x2F; JS 基础上的经典 Web，都是这个时代的产物。</p>\n<p>4.MVC 与 MVVM 时代 - 如何维护日益复杂的 UI 交互逻辑？许多框架引入了软件工程中的 MVC 和 MVVM 等设计模式。这个时代的代表产物有苹果的 Cocoa 和微软的 WPF，以及 Web 上的 Angular 1 框架。</p>\n<p>5.声明式组件化时代 - 为什么我们必须编写连接 UI 布局语言和业务逻辑的面条代码呢？Facebook 的 React 提出了新的 UI 开发思路。通过 JSX，很容易用 JS 来编写嵌套的、声明式的、更易维护的 UI 组件，并借助 JavaScript 的动态性来实时调试 UI。当前风口上的 Vue，Flutter 和 SwiftUI，都明显地借鉴了这种思想。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-591658c5c6261719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>1.过程化绘制时代 - 直接调用 drawLine &#x2F; drawRect 风格的 API 来绘制像素。在我的树莓派里，只要 include X11 的头文件，就能用 C 语言体验这种硬派的 GUI 开发了。HTML5 中的 Canvas，其实也属于这种风格。</p>\n<p>2.面向对象抽象时代 - 纯粹过程化的代码，并不利于维护事件驱动的业务逻辑。比如，你需要自行计算来判断出某次点击应该选中哪个 UI 元素。在 MFC 和 GTK 的时代，人们实现了面向对象风格的 UI 框架。按钮、输入框等 UI 控件具备了实例方法，能更好地组织代码。</p>\n<p>3.界面与样式分离时代 - 用 C++ 系语言的代码来描述 UI，很容易写出面条式的丑陋代码。因此人们又引入了 XML 风格的语言，专门来表达嵌套式的界面。DirectUI 和 HTML &#x2F; CSS &#x2F; JS 基础上的经典 Web，都是这个时代的产物。</p>\n<p>4.MVC 与 MVVM 时代 - 如何维护日益复杂的 UI 交互逻辑？许多框架引入了软件工程中的 MVC 和 MVVM 等设计模式。这个时代的代表产物有苹果的 Cocoa 和微软的 WPF，以及 Web 上的 Angular 1 框架。</p>\n<p>5.声明式组件化时代 - 为什么我们必须编写连接 UI 布局语言和业务逻辑的面条代码呢？Facebook 的 React 提出了新的 UI 开发思路。通过 JSX，很容易用 JS 来编写嵌套的、声明式的、更易维护的 UI 组件，并借助 JavaScript 的动态性来实时调试 UI。当前风口上的 Vue，Flutter 和 SwiftUI，都明显地借鉴了这种思想。</p>\n"},{"title":"☀️☀️单例模式","date":"2022-03-19T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-c1dffa5a482f3544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 介绍\n单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n\n这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\n意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n主要解决：一个全局使用的类频繁地创建与销毁。\n\n何时使用：当您想控制实例数目，节省系统资源的时候。\n\n如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。\n\n关键代码：构造函数是私有的。\n\n#### 应用实例：\n\n- 1、一个班级只有一个班主任。\n- 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。\n - 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。\n优点：\n\n- 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。\n- 2、避免对资源的多重占用（比如写文件操作）。\n缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n\n#### 使用场景：\n\n1、要求生产唯一序列号。\n2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。\n3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。\n注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化\n\n#### 前端单例模式实例\n\n##### Vuex \nVuex基本原理，在vue上挂一个store属性，所以这个store属性一定要单一，而且不能被覆盖掉。\n![](https://upload-images.jianshu.io/upload_images/15312191-3dcb456281a55499.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nVuex 是vue 状态管理工具，如果在一个项目里有多个store,一定乱套了，所以Vuex一定是单例模式的。\n\nVuex单例模式实现方式\n```js\nlet Vue // bind on install\nexport function install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (__DEV__) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      )\n    }\n    return\n  }\n  Vue = _Vue\n  applyMixin(Vue)\n}\n```\n\ninstall的时候，把真Vue 赋值给 假Vue, 再次install的时候，就会提醒`'[vuex] already installed. Vue.use(Vuex) should be called only once.'`\n##### 弹出框\n\n前端点击弹出一个dialog是非常普遍的需求。\n\n我们在弹出一个dialog时，要保证window中没有相同dialog，比如点击一个按钮，弹出一个登录框，我们不可能需要两个登录框。\n![](https://upload-images.jianshu.io/upload_images/15312191-d9cc001d4eed5deb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n- 创建弹框，显示弹框：\n```html\n        <html>\n            <body>\n              <button id=\"loginBtn\">登录</button>\n            </body>\n\n        <script>\n            var createLoginLayer = function(){\n              var div = document.createElement( 'div' );\n              div.innerHTML = ’我是登录浮窗’;\n              div.style.display = 'none';\n              document.body.appendChild( div );\n              return div;\n            };\n\n            document.getElementById( 'loginBtn' ).onclick = function(){\n              var loginLayer = createLoginLayer();\n              loginLayer.style.display = 'block';\n            };\n        </script>\n        </html>\n```\n\n刚开始我们不需要单例模式，只需要设置关闭按钮，这样打开关闭，但是会有频繁的dom操作。\n- 惰性单例模式：\n```\n        var createLoginLayer = (function(){\n            var div;\n            return function(){\n              if ( ! div ){ // \n                  div = document.createElement( 'div' );\n                  div.innerHTML = ’我是登录浮窗’;\n                  div.style.display = 'none';\n                  document.body.appendChild( div );\n              }\n\n              return div;\n            }\n        })();\n        document.getElementById( 'loginBtn' ).onclick = function(){\n    \n            var loginLayer = createLoginLayer();\n            \n            loginLayer.style.display = 'block';\n        };\n```\ndiv创建后为什么没有被销毁？\n\n这是因为当执行var loginLayer = createLoginLayer()；时，loginLayer返回了一个匿名函数的引用，它可以访问到createLoginLayer()被调用时产生的环境，而局部变量div一直处在这个环境里。既然局部变量所在的环境还能被外界访问，这个局部变量就有了不被销毁的理由。在这里产生了一个闭包结构，局部变量的生命看起来被延续了\n> 《JavaScript设计模式与开发实践》\n","source":"_posts/☀️☀️单例模式.md","raw":"---\ntitle: \"☀️☀️单例模式\"\ndate: 2022-03-20\ntags: \n- 编程范式\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-c1dffa5a482f3544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 介绍\n单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n\n这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\n意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n主要解决：一个全局使用的类频繁地创建与销毁。\n\n何时使用：当您想控制实例数目，节省系统资源的时候。\n\n如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。\n\n关键代码：构造函数是私有的。\n\n#### 应用实例：\n\n- 1、一个班级只有一个班主任。\n- 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。\n - 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。\n优点：\n\n- 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。\n- 2、避免对资源的多重占用（比如写文件操作）。\n缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。\n\n#### 使用场景：\n\n1、要求生产唯一序列号。\n2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。\n3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。\n注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化\n\n#### 前端单例模式实例\n\n##### Vuex \nVuex基本原理，在vue上挂一个store属性，所以这个store属性一定要单一，而且不能被覆盖掉。\n![](https://upload-images.jianshu.io/upload_images/15312191-3dcb456281a55499.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nVuex 是vue 状态管理工具，如果在一个项目里有多个store,一定乱套了，所以Vuex一定是单例模式的。\n\nVuex单例模式实现方式\n```js\nlet Vue // bind on install\nexport function install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (__DEV__) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      )\n    }\n    return\n  }\n  Vue = _Vue\n  applyMixin(Vue)\n}\n```\n\ninstall的时候，把真Vue 赋值给 假Vue, 再次install的时候，就会提醒`'[vuex] already installed. Vue.use(Vuex) should be called only once.'`\n##### 弹出框\n\n前端点击弹出一个dialog是非常普遍的需求。\n\n我们在弹出一个dialog时，要保证window中没有相同dialog，比如点击一个按钮，弹出一个登录框，我们不可能需要两个登录框。\n![](https://upload-images.jianshu.io/upload_images/15312191-d9cc001d4eed5deb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n- 创建弹框，显示弹框：\n```html\n        <html>\n            <body>\n              <button id=\"loginBtn\">登录</button>\n            </body>\n\n        <script>\n            var createLoginLayer = function(){\n              var div = document.createElement( 'div' );\n              div.innerHTML = ’我是登录浮窗’;\n              div.style.display = 'none';\n              document.body.appendChild( div );\n              return div;\n            };\n\n            document.getElementById( 'loginBtn' ).onclick = function(){\n              var loginLayer = createLoginLayer();\n              loginLayer.style.display = 'block';\n            };\n        </script>\n        </html>\n```\n\n刚开始我们不需要单例模式，只需要设置关闭按钮，这样打开关闭，但是会有频繁的dom操作。\n- 惰性单例模式：\n```\n        var createLoginLayer = (function(){\n            var div;\n            return function(){\n              if ( ! div ){ // \n                  div = document.createElement( 'div' );\n                  div.innerHTML = ’我是登录浮窗’;\n                  div.style.display = 'none';\n                  document.body.appendChild( div );\n              }\n\n              return div;\n            }\n        })();\n        document.getElementById( 'loginBtn' ).onclick = function(){\n    \n            var loginLayer = createLoginLayer();\n            \n            loginLayer.style.display = 'block';\n        };\n```\ndiv创建后为什么没有被销毁？\n\n这是因为当执行var loginLayer = createLoginLayer()；时，loginLayer返回了一个匿名函数的引用，它可以访问到createLoginLayer()被调用时产生的环境，而局部变量div一直处在这个环境里。既然局部变量所在的环境还能被外界访问，这个局部变量就有了不被销毁的理由。在这里产生了一个闭包结构，局部变量的生命看起来被延续了\n> 《JavaScript设计模式与开发实践》\n","slug":"☀️☀️单例模式","published":1,"updated":"2024-05-16T07:39:11.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094m3000w2omv3b4s4leq","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c1dffa5a482f3544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p>主要解决：一个全局使用的类频繁地创建与销毁。</p>\n<p>何时使用：当您想控制实例数目，节省系统资源的时候。</p>\n<p>如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p>\n<p>关键代码：构造函数是私有的。</p>\n<h4 id=\"应用实例：\"><a href=\"#应用实例：\" class=\"headerlink\" title=\"应用实例：\"></a>应用实例：</h4><ul>\n<li><p>1、一个班级只有一个班主任。</p>\n</li>\n<li><p>2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</p>\n</li>\n<li><p>3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。<br>优点：</p>\n</li>\n<li><p>1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</p>\n</li>\n<li><p>2、避免对资源的多重占用（比如写文件操作）。<br>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>\n</li>\n</ul>\n<h4 id=\"使用场景：\"><a href=\"#使用场景：\" class=\"headerlink\" title=\"使用场景：\"></a>使用场景：</h4><p>1、要求生产唯一序列号。<br>2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。<br>3、创建的一个对象需要消耗的资源过多，比如 I&#x2F;O 与数据库的连接等。<br>注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化</p>\n<h4 id=\"前端单例模式实例\"><a href=\"#前端单例模式实例\" class=\"headerlink\" title=\"前端单例模式实例\"></a>前端单例模式实例</h4><h5 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h5><p>Vuex基本原理，在vue上挂一个store属性，所以这个store属性一定要单一，而且不能被覆盖掉。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3dcb456281a55499.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>Vuex 是vue 状态管理工具，如果在一个项目里有多个store,一定乱套了，所以Vuex一定是单例模式的。</p>\n<p>Vuex单例模式实现方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Vue</span> <span class=\"comment\">// bind on install</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">install</span> (_Vue) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Vue</span> &amp;&amp; _Vue === <span class=\"title class_\">Vue</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">        <span class=\"string\">&#x27;[vuex] already installed. Vue.use(Vuex) should be called only once.&#x27;</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Vue</span> = _Vue</span><br><span class=\"line\">  <span class=\"title function_\">applyMixin</span>(<span class=\"title class_\">Vue</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>install的时候，把真Vue 赋值给 假Vue, 再次install的时候，就会提醒<code>&#39;[vuex] already installed. Vue.use(Vuex) should be called only once.&#39;</code></p>\n<h5 id=\"弹出框\"><a href=\"#弹出框\" class=\"headerlink\" title=\"弹出框\"></a>弹出框</h5><p>前端点击弹出一个dialog是非常普遍的需求。</p>\n<p>我们在弹出一个dialog时，要保证window中没有相同dialog，比如点击一个按钮，弹出一个登录框，我们不可能需要两个登录框。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-d9cc001d4eed5deb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ul>\n<li>创建弹框，显示弹框：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loginBtn&quot;</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> createLoginLayer = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>( <span class=\"string\">&#x27;div&#x27;</span> );</span></span><br><span class=\"line\"><span class=\"language-javascript\">      div.<span class=\"property\">innerHTML</span> = ’我是登录浮窗’;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      div.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&#x27;none&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>( div );</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> div;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>( <span class=\"string\">&#x27;loginBtn&#x27;</span> ).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> loginLayer = <span class=\"title function_\">createLoginLayer</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      loginLayer.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&#x27;block&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>刚开始我们不需要单例模式，只需要设置关闭按钮，这样打开关闭，但是会有频繁的dom操作。</p>\n<ul>\n<li>惰性单例模式：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var createLoginLayer = (function()&#123;</span><br><span class=\"line\">    var div;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">      if ( ! div )&#123; // </span><br><span class=\"line\">          div = document.createElement( &#x27;div&#x27; );</span><br><span class=\"line\">          div.innerHTML = ’我是登录浮窗’;</span><br><span class=\"line\">          div.style.display = &#x27;none&#x27;;</span><br><span class=\"line\">          document.body.appendChild( div );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      return div;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">document.getElementById( &#x27;loginBtn&#x27; ).onclick = function()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var loginLayer = createLoginLayer();</span><br><span class=\"line\">    </span><br><span class=\"line\">    loginLayer.style.display = &#x27;block&#x27;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\ndiv创建后为什么没有被销毁？</li>\n</ul>\n<p>这是因为当执行var loginLayer &#x3D; createLoginLayer()；时，loginLayer返回了一个匿名函数的引用，它可以访问到createLoginLayer()被调用时产生的环境，而局部变量div一直处在这个环境里。既然局部变量所在的环境还能被外界访问，这个局部变量就有了不被销毁的理由。在这里产生了一个闭包结构，局部变量的生命看起来被延续了</p>\n<blockquote>\n<p>《JavaScript设计模式与开发实践》</p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c1dffa5a482f3544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p>主要解决：一个全局使用的类频繁地创建与销毁。</p>\n<p>何时使用：当您想控制实例数目，节省系统资源的时候。</p>\n<p>如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p>\n<p>关键代码：构造函数是私有的。</p>\n<h4 id=\"应用实例：\"><a href=\"#应用实例：\" class=\"headerlink\" title=\"应用实例：\"></a>应用实例：</h4><ul>\n<li><p>1、一个班级只有一个班主任。</p>\n</li>\n<li><p>2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</p>\n</li>\n<li><p>3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。<br>优点：</p>\n</li>\n<li><p>1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</p>\n</li>\n<li><p>2、避免对资源的多重占用（比如写文件操作）。<br>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>\n</li>\n</ul>\n<h4 id=\"使用场景：\"><a href=\"#使用场景：\" class=\"headerlink\" title=\"使用场景：\"></a>使用场景：</h4><p>1、要求生产唯一序列号。<br>2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。<br>3、创建的一个对象需要消耗的资源过多，比如 I&#x2F;O 与数据库的连接等。<br>注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化</p>\n<h4 id=\"前端单例模式实例\"><a href=\"#前端单例模式实例\" class=\"headerlink\" title=\"前端单例模式实例\"></a>前端单例模式实例</h4><h5 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h5><p>Vuex基本原理，在vue上挂一个store属性，所以这个store属性一定要单一，而且不能被覆盖掉。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3dcb456281a55499.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>Vuex 是vue 状态管理工具，如果在一个项目里有多个store,一定乱套了，所以Vuex一定是单例模式的。</p>\n<p>Vuex单例模式实现方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Vue</span> <span class=\"comment\">// bind on install</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">install</span> (_Vue) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Vue</span> &amp;&amp; _Vue === <span class=\"title class_\">Vue</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">        <span class=\"string\">&#x27;[vuex] already installed. Vue.use(Vuex) should be called only once.&#x27;</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Vue</span> = _Vue</span><br><span class=\"line\">  <span class=\"title function_\">applyMixin</span>(<span class=\"title class_\">Vue</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>install的时候，把真Vue 赋值给 假Vue, 再次install的时候，就会提醒<code>&#39;[vuex] already installed. Vue.use(Vuex) should be called only once.&#39;</code></p>\n<h5 id=\"弹出框\"><a href=\"#弹出框\" class=\"headerlink\" title=\"弹出框\"></a>弹出框</h5><p>前端点击弹出一个dialog是非常普遍的需求。</p>\n<p>我们在弹出一个dialog时，要保证window中没有相同dialog，比如点击一个按钮，弹出一个登录框，我们不可能需要两个登录框。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-d9cc001d4eed5deb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ul>\n<li>创建弹框，显示弹框：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loginBtn&quot;</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> createLoginLayer = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>( <span class=\"string\">&#x27;div&#x27;</span> );</span></span><br><span class=\"line\"><span class=\"language-javascript\">      div.<span class=\"property\">innerHTML</span> = ’我是登录浮窗’;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      div.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&#x27;none&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>( div );</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> div;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>( <span class=\"string\">&#x27;loginBtn&#x27;</span> ).<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> loginLayer = <span class=\"title function_\">createLoginLayer</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      loginLayer.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&#x27;block&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>刚开始我们不需要单例模式，只需要设置关闭按钮，这样打开关闭，但是会有频繁的dom操作。</p>\n<ul>\n<li>惰性单例模式：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var createLoginLayer = (function()&#123;</span><br><span class=\"line\">    var div;</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">      if ( ! div )&#123; // </span><br><span class=\"line\">          div = document.createElement( &#x27;div&#x27; );</span><br><span class=\"line\">          div.innerHTML = ’我是登录浮窗’;</span><br><span class=\"line\">          div.style.display = &#x27;none&#x27;;</span><br><span class=\"line\">          document.body.appendChild( div );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      return div;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">document.getElementById( &#x27;loginBtn&#x27; ).onclick = function()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var loginLayer = createLoginLayer();</span><br><span class=\"line\">    </span><br><span class=\"line\">    loginLayer.style.display = &#x27;block&#x27;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\ndiv创建后为什么没有被销毁？</li>\n</ul>\n<p>这是因为当执行var loginLayer &#x3D; createLoginLayer()；时，loginLayer返回了一个匿名函数的引用，它可以访问到createLoginLayer()被调用时产生的环境，而局部变量div一直处在这个环境里。既然局部变量所在的环境还能被外界访问，这个局部变量就有了不被销毁的理由。在这里产生了一个闭包结构，局部变量的生命看起来被延续了</p>\n<blockquote>\n<p>《JavaScript设计模式与开发实践》</p>\n</blockquote>\n"},{"title":"☀️☀️装饰器模式实现","date":"2022-05-24T16:00:00.000Z","_content":"\n","source":"_posts/☀️☀️装饰器模式实现.md","raw":"---\ntitle: \"☀️☀️装饰器模式实现\"\ndate: 2022-05-25\ntags: \n- 编程范式\n---\n\n","slug":"☀️☀️装饰器模式实现","published":1,"updated":"2024-05-16T07:39:11.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094m4000z2omvgi3r35ug","content":"\n","site":{"data":{}},"excerpt":"","more":""},{"title":"☀️☀️设计模式在react项目中的落地","date":"2021-09-06T16:00:00.000Z","_content":"\n\n![](https://upload-images.jianshu.io/upload_images/15312191-2f8f9332f549e364.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 1.订阅发布模式\n一句话总结：**创造事件，等待一个事件的发生。**\n\n比如小明（订阅者）去到报亭的大爷（发布者）那订了一份报纸，第二天报纸来了，大爷通知小明来取报纸。\n\n众所周知，react中没有bus这个概念，如果遇到react中使用bus的情况，怎么办呢\n首先 , 什么是bus, event Bus is only a Global Function Register;\n```js\n\nlet Bus = function () {\n  this.cache = [];\n};\n// register\nBus.prototype.$on = function (handleEvent, fn) {\n  for (let i = 0; i < this.cache.length; i++) {\n    let [first] = Object.keys(this.cache[i]);\n    if (first === handleEvent) {\n      return;\n    }\n  }\n  this.cache.push({\n    [handleEvent]: fn\n  });\n};\n// trigger\nBus.prototype.$emit = function (handleEvent) {\n  const [first, ...rest] = Array.from(arguments);\n  for (let i = 0; i < this.cache.length; i++) {\n    if (this.cache[i][handleEvent]) {\n      this.cache[i][handleEvent](...rest);\n    }\n  }\n};\n// cancel register\nBus.prototype.$off = function (handleEvent) {\n  for (let i = 0; i < this.cache.length; i++) {\n    let [first] = Object.keys(this.cache[i]);\n    if (first === handleEvent) {\n      this.cache.splice(i, 1);\n      i = i - 1;\n    }\n  }\n};\n\n```\n\nExample：\n\n```js\n\nlet bus = new Bus();\nbus.$on(\"send\",()=>{\n  console.log(\"onSend\")\n})\nbus.$emit(\"send\") // onSend\n\n```\n\n相对而言，Vue就无脑多了，内部已经集成了。\n\n```js\nimport Vue from \"vue\";\nVue.prototype.bus = new Vue();\n```\n```js\n\nthis.bus.$on('event',(record) => {\n  // 返回参数\n})\n\nthis.bus.$emit('event', param)\n```\n## \n\n#### 2.装饰器模式\njs 本身没有装饰器 @语法糖，我们可以借助babel插件\n```js\n\nnpm i @babel/plugin-proposal-decorators @babel/plugin-proposal-class-properties -S\n\n```\n然后配置 babal-loader\n\n```js\n {\n    test: /\\.(tsx?|jsx)$/,\n    exclude: /node_modules/,\n    use: {\n      loader: \"babel-loader\",\n      options: {\n        sourceMaps: true,\n        presets: [\n          [\"@babel/preset-typescript\", { isTSX: true, allExtensions: true}]\n        ],\n        plugins: [\n          [\n            \"@babel/plugin-proposal-decorators\",\n            {\n              \"legacy\": true\n            }\n          ],\n          [\n            \"@babel/plugin-proposal-class-properties\",\n            {\n              \"loose\": true\n            }\n          ]\n        ]\n      }\n    }\n  };\n```\n\ncool，我们接下来可以愉快的使用装饰者了，\n\nExample:\n在软件开发中，我们经常碰到，连续点击导致问题的情况,此时我们可以采用debounce（防抖）和throttle（节流）的方式来减少调用频率，同时又不影响实际效果.\n已 debounce为例：\nApp.jsx\n```js\n\nimport debounce from \"./debounce\"\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  @debounce(500, false)\n  handleOk() {\n     this.post('xxx')\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={handleOk.bind(this)}\n        </button>\n      </div>\n    );\n  }\n}\n\n```\ndebounce.js\n```js\n\nfunction _debounce(func, wait) {\n  let timeout;\n  return function () {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    } else {\n      timeout = setTimeout(() => {\n        func.apply(this);\n      }, wait);\n    }\n  };\n}\n\nconst debounce = wait => {\n  return function handleDescriptor(target, key, descriptor) {\n    const callback = descriptor.value;\n    if (typeof callback !== \"function\") {\n      throw new SyntaxError(\"Only functions can be debounced\");\n    }\n    const fn = _debounce(callback, wait);\n    return {\n      ...descriptor,\n      value() {\n        fn.apply(this);\n      }\n    };\n  };\n};\nexport default debounce;\n\n```\n#### 3.代理模式\n代理模式符合设计模式中单一原则，react HOC本身就是代理模式的变种。\n作用：通过一个中间模块去调用别的模块，实现功能分离和组合。\n\nEasy Example:\n\n```js\n\n        /**************** 计算乘积 *****************/\n        var mult = function(){\n            var a = 1;\n            for ( var i = 0, l = arguments.length; i < l; i++ ){\n              a = a * arguments[i];\n            }\n            return a;\n        };\n\n        /**************** 计算加和 *****************/\n        var plus = function(){\n            var a = 0;\n            for ( var i = 0, l = arguments.length; i < l; i++ ){\n              a = a + arguments[i];\n            }\n            return a;\n        };\n\n        /**************** 创建缓存代理的工厂 *****************/\n        var createProxyFactory = function( fn ){\n            var cache = {};\n            return function(){\n              var args = Array.prototype.join.call( arguments, ', ' );\n              if ( args in cache ){\n                  return cache[ args ];\n              }\n              return  cache[ args ] = fn.apply( this, arguments );\n            }\n        };\n\n        var proxyMult = createProxyFactory( mult ),\n        proxyPlus = createProxyFactory( plus );\n\n        alert ( proxyMult( 1, 2, 3, 4 ) );    // 输出：24\n        alert ( proxyMult( 1, 2, 3, 4 ) );    // 输出：24\n        alert ( proxyPlus( 1, 2, 3, 4 ) );    // 输出：10\n        alert ( proxyPlus( 1, 2, 3, 4 ) );    // 输出：10\n\n```\n\nReact HOC Example:\n\n在一个软件中，有许多表格类，网页，每个网页都有搜索栏，表格页码，联动，如果每个页面我们都要组合这些组件，写搜索逻辑，it's waste，应该把这部分重复的内容放在高阶组建里;\n\nhotc.js\n\n```js\nimport { getLocation } from \"@haier/router\";\nconst tableHotc = Hotc => {\n  return class WrapComponet extends Hotc {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: [],\n        // 搜索参数\n        fetchListParams: {},\n        // 页码，数量，可选页码数\n        pagination: {\n          pageSizeOptions: [\"20\", \"50\", \"100\"],\n          pageNum: 1,\n          pageSize: 20,\n          total: 0\n        }\n      };\n    }\n    componentDidMount() {\n      this.fetchList();\n    }\n    // 搜索之前参数的操作\n    recombineUrlParams() {\n      const res = {};\n      for (let i of mergeURls) {\n        if (i in location.params) {\n          res[i] = !isNaN(location.params[i]) && location.params[i] ? Number(location.params[i]) : location.params[i];\n        }\n      }\n      return res;\n    }\n    // 列表接口\n    fetchList(\n      params,\n      pagination = { pageNum: this.state.pagination.pageNum, pageSize: this.state.pagination.pageSize }\n    ) {\n      params = params || this.fetchListParams || {};\n      params = { ...params, ...this.recombineUrlParams() };\n      params = this.recombination && this.recombination(params);\n      params[\"pageNum\"] = pagination.pageNum;\n      params[\"pageSize\"] = pagination.pageSize;\n      this.fetchListParams = params;\n      this.fetchListApi(params).then(res => {\n        // 请求成功之后，页码改变，数据分配\n        if (res.success && res.data) {\n          this.setState({\n            data: res.data.list || res.data\n          });\n        }\n        const total = res.data.total;\n        const pageSize = pagination.pageSize;\n        const obPagination = Object.assign({}, this.state.pagination, { total, pageSize });\n        this.setState({\n          pagination: obPagination\n        });\n      });\n      this.fetchListCallback && this.fetchListCallback(params);\n    }\n    // 搜索动作\n    handleChange(pagination) {\n      const { current, pageSize } = pagination;\n      const pageNum = current;\n      const obPagination = Object.assign({}, this.state.pagination, { pageNum });\n      this.setState({ pagination: obPagination });\n      this.fetchList(this.fetchListParams, {\n        pageNum: current,\n        pageSize\n      });\n    }\n    render() {\n      return (\n        <div>\n          <Hotc\n            {...this.props}\n            state={this.state}\n            fetchList={this.fetchList.bind(this)}\n            handleChange={this.handleChange.bind(this)}\n          />\n        </div>\n      );\n    }\n  };\n};\n\nexport default tableHotc;\n```\n\ntable.js\n\n```js\nimport tableHotc from \"~/hotc/tableHotc\";\nclass Table extends React.Component {\n  state = {\n    loadingTable: false,\n    selectedRowKeys: [],\n    data: []\n  };\n  childRef = React.createRef();\n  tableParam = {\n    scroll: { x: 1500, y: 400 },\n    bordered: true,\n    columns: [\n      {\n        title: \"商品SKU\",\n        dataIndex: \"sku\",\n        key: \"sku\",\n        width: 200,\n        fixed: \"left\",\n        ellipsis: {\n          showTitle: true\n        }\n      },\n      {\n        title: \"商品名称\",\n        dataIndex: \"name\",\n        key: \"name\",\n        width: 200,\n        ellipsis: {\n          showTitle: true\n        }\n      },\n      {\n        title: \"规格\",\n        dataIndex: \"spec\",\n        key: \"spec\",\n        width: 100\n      },\n      {\n        title: \"重量\",\n        dataIndex: \"weight\",\n        key: \"weight\",\n        width: 100\n      }\n      }\n    ]\n  };\n\n  fetchListApi = productList;\n  recombination(params: Object) {\n    params.state = \"02,10\";\n    return params;\n  }\n  render() {\n    const { data, pagination } = this.props.state;\n    return (\n      <div>\n        <Card>\n          <Table\n            {...(this.tableParam as any)}\n            dataSource={data}\n            pagination={pagination}\n            onChange={this.props.handleChange.bind(this)}\n          />\n        </Card>\n      </div>\n    );\n  }\n}\n\n// 通过访问table， 调用tableHotc，实现功能代理。\nexport default tableHotc(Table);\n```\ntable.js 通过**this.props.xxx**调用 hotc.js中的属性方法。\nhotc.js 通过**this.xxx**调用 table.js中的属性方法。\n","source":"_posts/☀️☀️设计模式在react项目中的落地.md","raw":"---\ntitle: \"☀️☀️设计模式在react项目中的落地\"\ndate: 2021-09-07\ntags: \n- 编程范式\n---\n\n\n![](https://upload-images.jianshu.io/upload_images/15312191-2f8f9332f549e364.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 1.订阅发布模式\n一句话总结：**创造事件，等待一个事件的发生。**\n\n比如小明（订阅者）去到报亭的大爷（发布者）那订了一份报纸，第二天报纸来了，大爷通知小明来取报纸。\n\n众所周知，react中没有bus这个概念，如果遇到react中使用bus的情况，怎么办呢\n首先 , 什么是bus, event Bus is only a Global Function Register;\n```js\n\nlet Bus = function () {\n  this.cache = [];\n};\n// register\nBus.prototype.$on = function (handleEvent, fn) {\n  for (let i = 0; i < this.cache.length; i++) {\n    let [first] = Object.keys(this.cache[i]);\n    if (first === handleEvent) {\n      return;\n    }\n  }\n  this.cache.push({\n    [handleEvent]: fn\n  });\n};\n// trigger\nBus.prototype.$emit = function (handleEvent) {\n  const [first, ...rest] = Array.from(arguments);\n  for (let i = 0; i < this.cache.length; i++) {\n    if (this.cache[i][handleEvent]) {\n      this.cache[i][handleEvent](...rest);\n    }\n  }\n};\n// cancel register\nBus.prototype.$off = function (handleEvent) {\n  for (let i = 0; i < this.cache.length; i++) {\n    let [first] = Object.keys(this.cache[i]);\n    if (first === handleEvent) {\n      this.cache.splice(i, 1);\n      i = i - 1;\n    }\n  }\n};\n\n```\n\nExample：\n\n```js\n\nlet bus = new Bus();\nbus.$on(\"send\",()=>{\n  console.log(\"onSend\")\n})\nbus.$emit(\"send\") // onSend\n\n```\n\n相对而言，Vue就无脑多了，内部已经集成了。\n\n```js\nimport Vue from \"vue\";\nVue.prototype.bus = new Vue();\n```\n```js\n\nthis.bus.$on('event',(record) => {\n  // 返回参数\n})\n\nthis.bus.$emit('event', param)\n```\n## \n\n#### 2.装饰器模式\njs 本身没有装饰器 @语法糖，我们可以借助babel插件\n```js\n\nnpm i @babel/plugin-proposal-decorators @babel/plugin-proposal-class-properties -S\n\n```\n然后配置 babal-loader\n\n```js\n {\n    test: /\\.(tsx?|jsx)$/,\n    exclude: /node_modules/,\n    use: {\n      loader: \"babel-loader\",\n      options: {\n        sourceMaps: true,\n        presets: [\n          [\"@babel/preset-typescript\", { isTSX: true, allExtensions: true}]\n        ],\n        plugins: [\n          [\n            \"@babel/plugin-proposal-decorators\",\n            {\n              \"legacy\": true\n            }\n          ],\n          [\n            \"@babel/plugin-proposal-class-properties\",\n            {\n              \"loose\": true\n            }\n          ]\n        ]\n      }\n    }\n  };\n```\n\ncool，我们接下来可以愉快的使用装饰者了，\n\nExample:\n在软件开发中，我们经常碰到，连续点击导致问题的情况,此时我们可以采用debounce（防抖）和throttle（节流）的方式来减少调用频率，同时又不影响实际效果.\n已 debounce为例：\nApp.jsx\n```js\n\nimport debounce from \"./debounce\"\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  @debounce(500, false)\n  handleOk() {\n     this.post('xxx')\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={handleOk.bind(this)}\n        </button>\n      </div>\n    );\n  }\n}\n\n```\ndebounce.js\n```js\n\nfunction _debounce(func, wait) {\n  let timeout;\n  return function () {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    } else {\n      timeout = setTimeout(() => {\n        func.apply(this);\n      }, wait);\n    }\n  };\n}\n\nconst debounce = wait => {\n  return function handleDescriptor(target, key, descriptor) {\n    const callback = descriptor.value;\n    if (typeof callback !== \"function\") {\n      throw new SyntaxError(\"Only functions can be debounced\");\n    }\n    const fn = _debounce(callback, wait);\n    return {\n      ...descriptor,\n      value() {\n        fn.apply(this);\n      }\n    };\n  };\n};\nexport default debounce;\n\n```\n#### 3.代理模式\n代理模式符合设计模式中单一原则，react HOC本身就是代理模式的变种。\n作用：通过一个中间模块去调用别的模块，实现功能分离和组合。\n\nEasy Example:\n\n```js\n\n        /**************** 计算乘积 *****************/\n        var mult = function(){\n            var a = 1;\n            for ( var i = 0, l = arguments.length; i < l; i++ ){\n              a = a * arguments[i];\n            }\n            return a;\n        };\n\n        /**************** 计算加和 *****************/\n        var plus = function(){\n            var a = 0;\n            for ( var i = 0, l = arguments.length; i < l; i++ ){\n              a = a + arguments[i];\n            }\n            return a;\n        };\n\n        /**************** 创建缓存代理的工厂 *****************/\n        var createProxyFactory = function( fn ){\n            var cache = {};\n            return function(){\n              var args = Array.prototype.join.call( arguments, ', ' );\n              if ( args in cache ){\n                  return cache[ args ];\n              }\n              return  cache[ args ] = fn.apply( this, arguments );\n            }\n        };\n\n        var proxyMult = createProxyFactory( mult ),\n        proxyPlus = createProxyFactory( plus );\n\n        alert ( proxyMult( 1, 2, 3, 4 ) );    // 输出：24\n        alert ( proxyMult( 1, 2, 3, 4 ) );    // 输出：24\n        alert ( proxyPlus( 1, 2, 3, 4 ) );    // 输出：10\n        alert ( proxyPlus( 1, 2, 3, 4 ) );    // 输出：10\n\n```\n\nReact HOC Example:\n\n在一个软件中，有许多表格类，网页，每个网页都有搜索栏，表格页码，联动，如果每个页面我们都要组合这些组件，写搜索逻辑，it's waste，应该把这部分重复的内容放在高阶组建里;\n\nhotc.js\n\n```js\nimport { getLocation } from \"@haier/router\";\nconst tableHotc = Hotc => {\n  return class WrapComponet extends Hotc {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: [],\n        // 搜索参数\n        fetchListParams: {},\n        // 页码，数量，可选页码数\n        pagination: {\n          pageSizeOptions: [\"20\", \"50\", \"100\"],\n          pageNum: 1,\n          pageSize: 20,\n          total: 0\n        }\n      };\n    }\n    componentDidMount() {\n      this.fetchList();\n    }\n    // 搜索之前参数的操作\n    recombineUrlParams() {\n      const res = {};\n      for (let i of mergeURls) {\n        if (i in location.params) {\n          res[i] = !isNaN(location.params[i]) && location.params[i] ? Number(location.params[i]) : location.params[i];\n        }\n      }\n      return res;\n    }\n    // 列表接口\n    fetchList(\n      params,\n      pagination = { pageNum: this.state.pagination.pageNum, pageSize: this.state.pagination.pageSize }\n    ) {\n      params = params || this.fetchListParams || {};\n      params = { ...params, ...this.recombineUrlParams() };\n      params = this.recombination && this.recombination(params);\n      params[\"pageNum\"] = pagination.pageNum;\n      params[\"pageSize\"] = pagination.pageSize;\n      this.fetchListParams = params;\n      this.fetchListApi(params).then(res => {\n        // 请求成功之后，页码改变，数据分配\n        if (res.success && res.data) {\n          this.setState({\n            data: res.data.list || res.data\n          });\n        }\n        const total = res.data.total;\n        const pageSize = pagination.pageSize;\n        const obPagination = Object.assign({}, this.state.pagination, { total, pageSize });\n        this.setState({\n          pagination: obPagination\n        });\n      });\n      this.fetchListCallback && this.fetchListCallback(params);\n    }\n    // 搜索动作\n    handleChange(pagination) {\n      const { current, pageSize } = pagination;\n      const pageNum = current;\n      const obPagination = Object.assign({}, this.state.pagination, { pageNum });\n      this.setState({ pagination: obPagination });\n      this.fetchList(this.fetchListParams, {\n        pageNum: current,\n        pageSize\n      });\n    }\n    render() {\n      return (\n        <div>\n          <Hotc\n            {...this.props}\n            state={this.state}\n            fetchList={this.fetchList.bind(this)}\n            handleChange={this.handleChange.bind(this)}\n          />\n        </div>\n      );\n    }\n  };\n};\n\nexport default tableHotc;\n```\n\ntable.js\n\n```js\nimport tableHotc from \"~/hotc/tableHotc\";\nclass Table extends React.Component {\n  state = {\n    loadingTable: false,\n    selectedRowKeys: [],\n    data: []\n  };\n  childRef = React.createRef();\n  tableParam = {\n    scroll: { x: 1500, y: 400 },\n    bordered: true,\n    columns: [\n      {\n        title: \"商品SKU\",\n        dataIndex: \"sku\",\n        key: \"sku\",\n        width: 200,\n        fixed: \"left\",\n        ellipsis: {\n          showTitle: true\n        }\n      },\n      {\n        title: \"商品名称\",\n        dataIndex: \"name\",\n        key: \"name\",\n        width: 200,\n        ellipsis: {\n          showTitle: true\n        }\n      },\n      {\n        title: \"规格\",\n        dataIndex: \"spec\",\n        key: \"spec\",\n        width: 100\n      },\n      {\n        title: \"重量\",\n        dataIndex: \"weight\",\n        key: \"weight\",\n        width: 100\n      }\n      }\n    ]\n  };\n\n  fetchListApi = productList;\n  recombination(params: Object) {\n    params.state = \"02,10\";\n    return params;\n  }\n  render() {\n    const { data, pagination } = this.props.state;\n    return (\n      <div>\n        <Card>\n          <Table\n            {...(this.tableParam as any)}\n            dataSource={data}\n            pagination={pagination}\n            onChange={this.props.handleChange.bind(this)}\n          />\n        </Card>\n      </div>\n    );\n  }\n}\n\n// 通过访问table， 调用tableHotc，实现功能代理。\nexport default tableHotc(Table);\n```\ntable.js 通过**this.props.xxx**调用 hotc.js中的属性方法。\nhotc.js 通过**this.xxx**调用 table.js中的属性方法。\n","slug":"☀️☀️设计模式在react项目中的落地","published":1,"updated":"2024-05-16T07:39:11.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094m600112omv6cvb8doa","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-2f8f9332f549e364.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"1-订阅发布模式\"><a href=\"#1-订阅发布模式\" class=\"headerlink\" title=\"1.订阅发布模式\"></a>1.订阅发布模式</h4><p>一句话总结：<strong>创造事件，等待一个事件的发生。</strong></p>\n<p>比如小明（订阅者）去到报亭的大爷（发布者）那订了一份报纸，第二天报纸来了，大爷通知小明来取报纸。</p>\n<p>众所周知，react中没有bus这个概念，如果遇到react中使用bus的情况，怎么办呢<br>首先 , 什么是bus, event Bus is only a Global Function Register;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Bus</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// register</span></span><br><span class=\"line\"><span class=\"title class_\">Bus</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$on</span> = <span class=\"keyword\">function</span> (<span class=\"params\">handleEvent, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [first] = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>[i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first === handleEvent) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    [handleEvent]: fn</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// trigger</span></span><br><span class=\"line\"><span class=\"title class_\">Bus</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$emit</span> = <span class=\"keyword\">function</span> (<span class=\"params\">handleEvent</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [first, ...rest] = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>[i][handleEvent]) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>[i][handleEvent](...rest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// cancel register</span></span><br><span class=\"line\"><span class=\"title class_\">Bus</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$off</span> = <span class=\"keyword\">function</span> (<span class=\"params\">handleEvent</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [first] = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>[i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first === handleEvent) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">      i = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Example：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> bus = <span class=\"keyword\">new</span> <span class=\"title class_\">Bus</span>();</span><br><span class=\"line\">bus.$on(<span class=\"string\">&quot;send&quot;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;onSend&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">bus.$emit(<span class=\"string\">&quot;send&quot;</span>) <span class=\"comment\">// onSend</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>相对而言，Vue就无脑多了，内部已经集成了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bus</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">bus</span>.$on(<span class=\"string\">&#x27;event&#x27;</span>,<span class=\"function\">(<span class=\"params\">record</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回参数</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">bus</span>.$emit(<span class=\"string\">&#x27;event&#x27;</span>, param)</span><br></pre></td></tr></table></figure>\n<div class=\"\"><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h4 id=\"2-装饰器模式\"><a href=\"#2-装饰器模式\" class=\"headerlink\" title=\"2.装饰器模式\"></a>2.装饰器模式</h4><p>js 本身没有装饰器 @语法糖，我们可以借助babel插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm i @babel/plugin-proposal-decorators @babel/plugin-proposal-<span class=\"keyword\">class</span>-properties -S</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后配置 babal-loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(tsx?|jsx)$/</span>,</span><br><span class=\"line\">   <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">   <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">     <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">       <span class=\"attr\">sourceMaps</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">       <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">         [<span class=\"string\">&quot;@babel/preset-typescript&quot;</span>, &#123; <span class=\"attr\">isTSX</span>: <span class=\"literal\">true</span>, <span class=\"attr\">allExtensions</span>: <span class=\"literal\">true</span>&#125;]</span><br><span class=\"line\">       ],</span><br><span class=\"line\">       <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">         [</span><br><span class=\"line\">           <span class=\"string\">&quot;@babel/plugin-proposal-decorators&quot;</span>,</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">             <span class=\"string\">&quot;legacy&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         ],</span><br><span class=\"line\">         [</span><br><span class=\"line\">           <span class=\"string\">&quot;@babel/plugin-proposal-class-properties&quot;</span>,</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">             <span class=\"string\">&quot;loose&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         ]</span><br><span class=\"line\">       ]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>cool，我们接下来可以愉快的使用装饰者了，</p>\n<p>Example:<br>在软件开发中，我们经常碰到，连续点击导致问题的情况,此时我们可以采用debounce（防抖）和throttle（节流）的方式来减少调用频率，同时又不影响实际效果.<br>已 debounce为例：<br>App.jsx</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> debounce <span class=\"keyword\">from</span> <span class=\"string\">&quot;./debounce&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @<span class=\"title function_\">debounce</span>(<span class=\"number\">500</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"title function_\">handleOk</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleOk.bind(this)&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &lt;/<span class=\"attr\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>debounce.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_debounce</span>(<span class=\"params\">func, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        func.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">debounce</span> = wait =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleDescriptor</span>(<span class=\"params\">target, key, descriptor</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callback = descriptor.<span class=\"property\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SyntaxError</span>(<span class=\"string\">&quot;Only functions can be debounced&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn = <span class=\"title function_\">_debounce</span>(callback, wait);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...descriptor,</span><br><span class=\"line\">      <span class=\"title function_\">value</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> debounce;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-代理模式\"><a href=\"#3-代理模式\" class=\"headerlink\" title=\"3.代理模式\"></a>3.代理模式</h4><p>代理模式符合设计模式中单一原则，react HOC本身就是代理模式的变种。<br>作用：通过一个中间模块去调用别的模块，实现功能分离和组合。</p>\n<p>Easy Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************** 计算乘积 *****************/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mult = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i &lt; l; i++ )&#123;</span><br><span class=\"line\">      a = a * <span class=\"variable language_\">arguments</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************** 计算加和 *****************/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> plus = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i &lt; l; i++ )&#123;</span><br><span class=\"line\">      a = a + <span class=\"variable language_\">arguments</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************** 创建缓存代理的工厂 *****************/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> createProxyFactory = <span class=\"keyword\">function</span>(<span class=\"params\"> fn </span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">join</span>.<span class=\"title function_\">call</span>( <span class=\"variable language_\">arguments</span>, <span class=\"string\">&#x27;, &#x27;</span> );</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( args <span class=\"keyword\">in</span> cache )&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> cache[ args ];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>  cache[ args ] = fn.<span class=\"title function_\">apply</span>( <span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxyMult = <span class=\"title function_\">createProxyFactory</span>( mult ),</span><br><span class=\"line\">proxyPlus = <span class=\"title function_\">createProxyFactory</span>( plus );</span><br><span class=\"line\"></span><br><span class=\"line\">alert ( <span class=\"title function_\">proxyMult</span>( <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ) );    <span class=\"comment\">// 输出：24</span></span><br><span class=\"line\">alert ( <span class=\"title function_\">proxyMult</span>( <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ) );    <span class=\"comment\">// 输出：24</span></span><br><span class=\"line\">alert ( <span class=\"title function_\">proxyPlus</span>( <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ) );    <span class=\"comment\">// 输出：10</span></span><br><span class=\"line\">alert ( <span class=\"title function_\">proxyPlus</span>( <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ) );    <span class=\"comment\">// 输出：10</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>React HOC Example:</p>\n<p>在一个软件中，有许多表格类，网页，每个网页都有搜索栏，表格页码，联动，如果每个页面我们都要组合这些组件，写搜索逻辑，it’s waste，应该把这部分重复的内容放在高阶组建里;</p>\n<p>hotc.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getLocation &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@haier/router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">tableHotc</span> = <span class=\"title class_\">Hotc</span> =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WrapComponet</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Hotc</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [],</span><br><span class=\"line\">        <span class=\"comment\">// 搜索参数</span></span><br><span class=\"line\">        <span class=\"attr\">fetchListParams</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 页码，数量，可选页码数</span></span><br><span class=\"line\">        <span class=\"attr\">pagination</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">pageSizeOptions</span>: [<span class=\"string\">&quot;20&quot;</span>, <span class=\"string\">&quot;50&quot;</span>, <span class=\"string\">&quot;100&quot;</span>],</span><br><span class=\"line\">          <span class=\"attr\">pageNum</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">          <span class=\"attr\">pageSize</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">          <span class=\"attr\">total</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">fetchList</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 搜索之前参数的操作</span></span><br><span class=\"line\">    <span class=\"title function_\">recombineUrlParams</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> res = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> mergeURls) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> location.<span class=\"property\">params</span>) &#123;</span><br><span class=\"line\">          res[i] = !<span class=\"built_in\">isNaN</span>(location.<span class=\"property\">params</span>[i]) &amp;&amp; location.<span class=\"property\">params</span>[i] ? <span class=\"title class_\">Number</span>(location.<span class=\"property\">params</span>[i]) : location.<span class=\"property\">params</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 列表接口</span></span><br><span class=\"line\">    <span class=\"title function_\">fetchList</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">      params,</span></span><br><span class=\"line\"><span class=\"params\">      pagination = &#123; pageNum: <span class=\"variable language_\">this</span>.state.pagination.pageNum, pageSize: <span class=\"variable language_\">this</span>.state.pagination.pageSize &#125;</span></span><br><span class=\"line\"><span class=\"params\">    </span>) &#123;</span><br><span class=\"line\">      params = params || <span class=\"variable language_\">this</span>.<span class=\"property\">fetchListParams</span> || &#123;&#125;;</span><br><span class=\"line\">      params = &#123; ...params, ...<span class=\"variable language_\">this</span>.<span class=\"title function_\">recombineUrlParams</span>() &#125;;</span><br><span class=\"line\">      params = <span class=\"variable language_\">this</span>.<span class=\"property\">recombination</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">recombination</span>(params);</span><br><span class=\"line\">      params[<span class=\"string\">&quot;pageNum&quot;</span>] = pagination.<span class=\"property\">pageNum</span>;</span><br><span class=\"line\">      params[<span class=\"string\">&quot;pageSize&quot;</span>] = pagination.<span class=\"property\">pageSize</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fetchListParams</span> = params;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">fetchListApi</span>(params).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求成功之后，页码改变，数据分配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">success</span> &amp;&amp; res.<span class=\"property\">data</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: res.<span class=\"property\">data</span>.<span class=\"property\">list</span> || res.<span class=\"property\">data</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> total = res.<span class=\"property\">data</span>.<span class=\"property\">total</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageSize = pagination.<span class=\"property\">pageSize</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> obPagination = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">pagination</span>, &#123; total, pageSize &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">pagination</span>: obPagination</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fetchListCallback</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">fetchListCallback</span>(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 搜索动作</span></span><br><span class=\"line\">    <span class=\"title function_\">handleChange</span>(<span class=\"params\">pagination</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; current, pageSize &#125; = pagination;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pageNum = current;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> obPagination = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">pagination</span>, &#123; pageNum &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">pagination</span>: obPagination &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">fetchList</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">fetchListParams</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">pageNum</span>: current,</span><br><span class=\"line\">        pageSize</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Hotc</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &#123;<span class=\"attr\">...this.props</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">state</span>=<span class=\"string\">&#123;this.state&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">fetchList</span>=<span class=\"string\">&#123;this.fetchList.bind(this)&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">handleChange</span>=<span class=\"string\">&#123;this.handleChange.bind(this)&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> tableHotc;</span><br></pre></td></tr></table></figure>\n\n<p>table.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tableHotc <span class=\"keyword\">from</span> <span class=\"string\">&quot;~/hotc/tableHotc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Table</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">loadingTable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">selectedRowKeys</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">data</span>: []</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  childRef = <span class=\"title class_\">React</span>.<span class=\"title function_\">createRef</span>();</span><br><span class=\"line\">  tableParam = &#123;</span><br><span class=\"line\">    <span class=\"attr\">scroll</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">1500</span>, <span class=\"attr\">y</span>: <span class=\"number\">400</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">bordered</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">columns</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&quot;商品SKU&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataIndex</span>: <span class=\"string\">&quot;sku&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&quot;sku&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"attr\">fixed</span>: <span class=\"string\">&quot;left&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">ellipsis</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">showTitle</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&quot;商品名称&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataIndex</span>: <span class=\"string\">&quot;name&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&quot;name&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"attr\">ellipsis</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">showTitle</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&quot;规格&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataIndex</span>: <span class=\"string\">&quot;spec&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&quot;spec&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&quot;重量&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataIndex</span>: <span class=\"string\">&quot;weight&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&quot;weight&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchListApi = productList;</span><br><span class=\"line\">  <span class=\"title function_\">recombination</span>(<span class=\"params\">params: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">    params.<span class=\"property\">state</span> = <span class=\"string\">&quot;02,10&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> params;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data, pagination &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">state</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Card</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Table</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &#123;<span class=\"attr\">...</span>(<span class=\"attr\">this.tableParam</span> <span class=\"attr\">as</span> <span class=\"attr\">any</span>)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">dataSource</span>=<span class=\"string\">&#123;data&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">pagination</span>=<span class=\"string\">&#123;pagination&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.props.handleChange.bind(this)&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Card</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过访问table， 调用tableHotc，实现功能代理。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">tableHotc</span>(<span class=\"title class_\">Table</span>);</span><br></pre></td></tr></table></figure>\n<p>table.js 通过<strong>this.props.xxx</strong>调用 hotc.js中的属性方法。<br>hotc.js 通过<strong>this.xxx</strong>调用 table.js中的属性方法。</p>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-2f8f9332f549e364.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"1-订阅发布模式\"><a href=\"#1-订阅发布模式\" class=\"headerlink\" title=\"1.订阅发布模式\"></a>1.订阅发布模式</h4><p>一句话总结：<strong>创造事件，等待一个事件的发生。</strong></p>\n<p>比如小明（订阅者）去到报亭的大爷（发布者）那订了一份报纸，第二天报纸来了，大爷通知小明来取报纸。</p>\n<p>众所周知，react中没有bus这个概念，如果遇到react中使用bus的情况，怎么办呢<br>首先 , 什么是bus, event Bus is only a Global Function Register;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Bus</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// register</span></span><br><span class=\"line\"><span class=\"title class_\">Bus</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$on</span> = <span class=\"keyword\">function</span> (<span class=\"params\">handleEvent, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [first] = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>[i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first === handleEvent) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    [handleEvent]: fn</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// trigger</span></span><br><span class=\"line\"><span class=\"title class_\">Bus</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$emit</span> = <span class=\"keyword\">function</span> (<span class=\"params\">handleEvent</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [first, ...rest] = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>[i][handleEvent]) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>[i][handleEvent](...rest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// cancel register</span></span><br><span class=\"line\"><span class=\"title class_\">Bus</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$off</span> = <span class=\"keyword\">function</span> (<span class=\"params\">handleEvent</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [first] = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>[i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first === handleEvent) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">      i = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Example：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> bus = <span class=\"keyword\">new</span> <span class=\"title class_\">Bus</span>();</span><br><span class=\"line\">bus.$on(<span class=\"string\">&quot;send&quot;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;onSend&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">bus.$emit(<span class=\"string\">&quot;send&quot;</span>) <span class=\"comment\">// onSend</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>相对而言，Vue就无脑多了，内部已经集成了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bus</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">bus</span>.$on(<span class=\"string\">&#x27;event&#x27;</span>,<span class=\"function\">(<span class=\"params\">record</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回参数</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">bus</span>.$emit(<span class=\"string\">&#x27;event&#x27;</span>, param)</span><br></pre></td></tr></table></figure>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h4 id=\"2-装饰器模式\"><a href=\"#2-装饰器模式\" class=\"headerlink\" title=\"2.装饰器模式\"></a>2.装饰器模式</h4><p>js 本身没有装饰器 @语法糖，我们可以借助babel插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm i @babel/plugin-proposal-decorators @babel/plugin-proposal-<span class=\"keyword\">class</span>-properties -S</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后配置 babal-loader</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(tsx?|jsx)$/</span>,</span><br><span class=\"line\">   <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">   <span class=\"attr\">use</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">     <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">       <span class=\"attr\">sourceMaps</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">       <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">         [<span class=\"string\">&quot;@babel/preset-typescript&quot;</span>, &#123; <span class=\"attr\">isTSX</span>: <span class=\"literal\">true</span>, <span class=\"attr\">allExtensions</span>: <span class=\"literal\">true</span>&#125;]</span><br><span class=\"line\">       ],</span><br><span class=\"line\">       <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">         [</span><br><span class=\"line\">           <span class=\"string\">&quot;@babel/plugin-proposal-decorators&quot;</span>,</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">             <span class=\"string\">&quot;legacy&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         ],</span><br><span class=\"line\">         [</span><br><span class=\"line\">           <span class=\"string\">&quot;@babel/plugin-proposal-class-properties&quot;</span>,</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">             <span class=\"string\">&quot;loose&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         ]</span><br><span class=\"line\">       ]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>cool，我们接下来可以愉快的使用装饰者了，</p>\n<p>Example:<br>在软件开发中，我们经常碰到，连续点击导致问题的情况,此时我们可以采用debounce（防抖）和throttle（节流）的方式来减少调用频率，同时又不影响实际效果.<br>已 debounce为例：<br>App.jsx</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> debounce <span class=\"keyword\">from</span> <span class=\"string\">&quot;./debounce&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @<span class=\"title function_\">debounce</span>(<span class=\"number\">500</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"title function_\">handleOk</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleOk.bind(this)&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &lt;/<span class=\"attr\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>debounce.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_debounce</span>(<span class=\"params\">func, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        func.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">debounce</span> = wait =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleDescriptor</span>(<span class=\"params\">target, key, descriptor</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callback = descriptor.<span class=\"property\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SyntaxError</span>(<span class=\"string\">&quot;Only functions can be debounced&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn = <span class=\"title function_\">_debounce</span>(callback, wait);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...descriptor,</span><br><span class=\"line\">      <span class=\"title function_\">value</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> debounce;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-代理模式\"><a href=\"#3-代理模式\" class=\"headerlink\" title=\"3.代理模式\"></a>3.代理模式</h4><p>代理模式符合设计模式中单一原则，react HOC本身就是代理模式的变种。<br>作用：通过一个中间模块去调用别的模块，实现功能分离和组合。</p>\n<p>Easy Example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************** 计算乘积 *****************/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mult = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i &lt; l; i++ )&#123;</span><br><span class=\"line\">      a = a * <span class=\"variable language_\">arguments</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************** 计算加和 *****************/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> plus = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i &lt; l; i++ )&#123;</span><br><span class=\"line\">      a = a + <span class=\"variable language_\">arguments</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************** 创建缓存代理的工厂 *****************/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> createProxyFactory = <span class=\"keyword\">function</span>(<span class=\"params\"> fn </span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">join</span>.<span class=\"title function_\">call</span>( <span class=\"variable language_\">arguments</span>, <span class=\"string\">&#x27;, &#x27;</span> );</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( args <span class=\"keyword\">in</span> cache )&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> cache[ args ];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>  cache[ args ] = fn.<span class=\"title function_\">apply</span>( <span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxyMult = <span class=\"title function_\">createProxyFactory</span>( mult ),</span><br><span class=\"line\">proxyPlus = <span class=\"title function_\">createProxyFactory</span>( plus );</span><br><span class=\"line\"></span><br><span class=\"line\">alert ( <span class=\"title function_\">proxyMult</span>( <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ) );    <span class=\"comment\">// 输出：24</span></span><br><span class=\"line\">alert ( <span class=\"title function_\">proxyMult</span>( <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ) );    <span class=\"comment\">// 输出：24</span></span><br><span class=\"line\">alert ( <span class=\"title function_\">proxyPlus</span>( <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ) );    <span class=\"comment\">// 输出：10</span></span><br><span class=\"line\">alert ( <span class=\"title function_\">proxyPlus</span>( <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> ) );    <span class=\"comment\">// 输出：10</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>React HOC Example:</p>\n<p>在一个软件中，有许多表格类，网页，每个网页都有搜索栏，表格页码，联动，如果每个页面我们都要组合这些组件，写搜索逻辑，it’s waste，应该把这部分重复的内容放在高阶组建里;</p>\n<p>hotc.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getLocation &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@haier/router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">tableHotc</span> = <span class=\"title class_\">Hotc</span> =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WrapComponet</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Hotc</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [],</span><br><span class=\"line\">        <span class=\"comment\">// 搜索参数</span></span><br><span class=\"line\">        <span class=\"attr\">fetchListParams</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 页码，数量，可选页码数</span></span><br><span class=\"line\">        <span class=\"attr\">pagination</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">pageSizeOptions</span>: [<span class=\"string\">&quot;20&quot;</span>, <span class=\"string\">&quot;50&quot;</span>, <span class=\"string\">&quot;100&quot;</span>],</span><br><span class=\"line\">          <span class=\"attr\">pageNum</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">          <span class=\"attr\">pageSize</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">          <span class=\"attr\">total</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">fetchList</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 搜索之前参数的操作</span></span><br><span class=\"line\">    <span class=\"title function_\">recombineUrlParams</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> res = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> mergeURls) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> location.<span class=\"property\">params</span>) &#123;</span><br><span class=\"line\">          res[i] = !<span class=\"built_in\">isNaN</span>(location.<span class=\"property\">params</span>[i]) &amp;&amp; location.<span class=\"property\">params</span>[i] ? <span class=\"title class_\">Number</span>(location.<span class=\"property\">params</span>[i]) : location.<span class=\"property\">params</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 列表接口</span></span><br><span class=\"line\">    <span class=\"title function_\">fetchList</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">      params,</span></span><br><span class=\"line\"><span class=\"params\">      pagination = &#123; pageNum: <span class=\"variable language_\">this</span>.state.pagination.pageNum, pageSize: <span class=\"variable language_\">this</span>.state.pagination.pageSize &#125;</span></span><br><span class=\"line\"><span class=\"params\">    </span>) &#123;</span><br><span class=\"line\">      params = params || <span class=\"variable language_\">this</span>.<span class=\"property\">fetchListParams</span> || &#123;&#125;;</span><br><span class=\"line\">      params = &#123; ...params, ...<span class=\"variable language_\">this</span>.<span class=\"title function_\">recombineUrlParams</span>() &#125;;</span><br><span class=\"line\">      params = <span class=\"variable language_\">this</span>.<span class=\"property\">recombination</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">recombination</span>(params);</span><br><span class=\"line\">      params[<span class=\"string\">&quot;pageNum&quot;</span>] = pagination.<span class=\"property\">pageNum</span>;</span><br><span class=\"line\">      params[<span class=\"string\">&quot;pageSize&quot;</span>] = pagination.<span class=\"property\">pageSize</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fetchListParams</span> = params;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">fetchListApi</span>(params).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求成功之后，页码改变，数据分配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">success</span> &amp;&amp; res.<span class=\"property\">data</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: res.<span class=\"property\">data</span>.<span class=\"property\">list</span> || res.<span class=\"property\">data</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> total = res.<span class=\"property\">data</span>.<span class=\"property\">total</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageSize = pagination.<span class=\"property\">pageSize</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> obPagination = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">pagination</span>, &#123; total, pageSize &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">pagination</span>: obPagination</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fetchListCallback</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">fetchListCallback</span>(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 搜索动作</span></span><br><span class=\"line\">    <span class=\"title function_\">handleChange</span>(<span class=\"params\">pagination</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; current, pageSize &#125; = pagination;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pageNum = current;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> obPagination = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">pagination</span>, &#123; pageNum &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">pagination</span>: obPagination &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">fetchList</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">fetchListParams</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">pageNum</span>: current,</span><br><span class=\"line\">        pageSize</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Hotc</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &#123;<span class=\"attr\">...this.props</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">state</span>=<span class=\"string\">&#123;this.state&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">fetchList</span>=<span class=\"string\">&#123;this.fetchList.bind(this)&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">handleChange</span>=<span class=\"string\">&#123;this.handleChange.bind(this)&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> tableHotc;</span><br></pre></td></tr></table></figure>\n\n<p>table.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tableHotc <span class=\"keyword\">from</span> <span class=\"string\">&quot;~/hotc/tableHotc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Table</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">loadingTable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">selectedRowKeys</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">data</span>: []</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  childRef = <span class=\"title class_\">React</span>.<span class=\"title function_\">createRef</span>();</span><br><span class=\"line\">  tableParam = &#123;</span><br><span class=\"line\">    <span class=\"attr\">scroll</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">1500</span>, <span class=\"attr\">y</span>: <span class=\"number\">400</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">bordered</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">columns</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&quot;商品SKU&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataIndex</span>: <span class=\"string\">&quot;sku&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&quot;sku&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"attr\">fixed</span>: <span class=\"string\">&quot;left&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">ellipsis</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">showTitle</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&quot;商品名称&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataIndex</span>: <span class=\"string\">&quot;name&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&quot;name&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"attr\">ellipsis</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">showTitle</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&quot;规格&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataIndex</span>: <span class=\"string\">&quot;spec&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&quot;spec&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&quot;重量&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataIndex</span>: <span class=\"string\">&quot;weight&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">key</span>: <span class=\"string\">&quot;weight&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">width</span>: <span class=\"number\">100</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchListApi = productList;</span><br><span class=\"line\">  <span class=\"title function_\">recombination</span>(<span class=\"params\">params: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\">    params.<span class=\"property\">state</span> = <span class=\"string\">&quot;02,10&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> params;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data, pagination &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">state</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Card</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Table</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &#123;<span class=\"attr\">...</span>(<span class=\"attr\">this.tableParam</span> <span class=\"attr\">as</span> <span class=\"attr\">any</span>)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">dataSource</span>=<span class=\"string\">&#123;data&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">pagination</span>=<span class=\"string\">&#123;pagination&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.props.handleChange.bind(this)&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Card</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过访问table， 调用tableHotc，实现功能代理。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">tableHotc</span>(<span class=\"title class_\">Table</span>);</span><br></pre></td></tr></table></figure>\n<p>table.js 通过<strong>this.props.xxx</strong>调用 hotc.js中的属性方法。<br>hotc.js 通过<strong>this.xxx</strong>调用 table.js中的属性方法。</p>\n"},{"title":"☁️☁️-node-js常用工具包","date":"2021-10-17T16:00:00.000Z","_content":"\n![](https://upload-images.jianshu.io/upload_images/15312191-a2fc698a18d33959.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 进程版本管理\n\n#### node 版本管理工具 --n\n##### 安装:\n`npm install -g n`\n\n##### 列出可选择的 版本:\n`$ n`\n![](https://upload-images.jianshu.io/upload_images/15312191-91b5412616cf0d03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 安装某个 版本:\n`$ n <version>`\n\n#### npm 代理管理工具 -- nrm\n##### 安装:\n`npm install -g nrm`\n\n##### 列出可选择的源:\n\n$ `nrm ls`\n\n```js\n\n\n  npm ---- https://registry.npmjs.org/\n  cnpm --- http://r.cnpmjs.org/\n* taobao - https://registry.npm.taobao.org/\n  nj ----- https://registry.nodejitsu.com/\n  rednpm - http://registry.mirror.cqupt.edu.cn/\n  npmMirror  https://skimdb.npmjs.com/registry/\n  edunpm - http://registry.enpmjs.org/\n  \n```\n##### 切换使用的\n\n$ `nrm use npm`\n \n```            \n   Registry has been set to: https://registry.npmjs.org/\n```\n- [pm2](https://www.npmjs.com/package/pm2)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-3b0c37857ad77a75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n- [nodemon](https://www.npmjs.com/package/nodemon) 监测文件变化，神器\n- [yalc](https://www.npmjs.com/package/yalc) 代替 npm link，调试lib包，保证HRM\n\n### 服务端工具包\n---\n- [node-ssh](https://www.npmjs.com/package/node-ssh)\nnode端登录ssh登录工具\n\n- [fs-extra](https://www.npmjs.com/package/fs-extra)\npromise包裹的fs，便于同步操作\n- [download](https://www.npmjs.com/package/download)\n下载解析文件\n\n- [needle](https://www.npmjs.com/package/needle)\nThe leanest and most handsome HTTP client in the Nodelands.\nnode http传输工具\n - [compressing](https://www.npmjs.com/package/compressing)\nThe missing compressing and uncompressing lib for node.\n解压缩工具\n- [multiparty](https://www.npmjs.com/package/multiparty)\nmultipart/form-data格式解析\n\n- [http-proxy-middleware](https://www.npmjs.com/package/http-proxy-middleware)\nhttp代理转发\n- [cross-env](https://www.npmjs.com/package/cross-env)\n With POSIX, you use: $ENV_VAR and on windows you use %ENV_VAR%.\n跨平台变量设置\n- [serve](https://www.npmjs.com/package/serve) 静态文件服务器\n### Cli\n\n- [figlet](https://www.npmjs.com/package/figlet)\n控制台艺术字\n```\n___________.___  ________.__          __          __        \n\\_   _____/|   |/  _____/|  |   _____/  |_       |__| ______\n |    __)  |   /   \\  ___|  | _/ __ \\   __\\      |  |/  ___/\n |     \\   |   \\    \\_\\  \\  |_\\  ___/|  |        |  |\\___ \\\n \\___  /   |___|\\______  /____/\\___  >__| /\\ /\\__|  /____  >\n     \\/                \\/          \\/     \\/ \\______|    \\/\n```\n- [chalk](https://www.npmjs.com/package/chalk)\n\n   彩色字体打印\n\n![](https://upload-images.jianshu.io/upload_images/15312191-56166ee55f0bc179.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- [inquirer](https://www.npmjs.com/package/inquirer)\n控制台命令接口\n```\n? 请选择模板类型 (Use arrow keys)\n❯ vue\n  react\n```\n- [ora](https://www.npmjs.com/package/ora)\n控制台loading\n![](https://upload-images.jianshu.io/upload_images/15312191-c61215bfa11ad4a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- [download-git-repo](https://www.npmjs.com/package/download-git-repo)\ngit仓库下载\n\n","source":"_posts/☁️☁️-node-js常用工具包.md","raw":"---\ntitle: \"☁️☁️-node-js常用工具包\"\ndate: 2021-10-18\ntags: \n- 开发日常\n---\n\n![](https://upload-images.jianshu.io/upload_images/15312191-a2fc698a18d33959.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 进程版本管理\n\n#### node 版本管理工具 --n\n##### 安装:\n`npm install -g n`\n\n##### 列出可选择的 版本:\n`$ n`\n![](https://upload-images.jianshu.io/upload_images/15312191-91b5412616cf0d03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 安装某个 版本:\n`$ n <version>`\n\n#### npm 代理管理工具 -- nrm\n##### 安装:\n`npm install -g nrm`\n\n##### 列出可选择的源:\n\n$ `nrm ls`\n\n```js\n\n\n  npm ---- https://registry.npmjs.org/\n  cnpm --- http://r.cnpmjs.org/\n* taobao - https://registry.npm.taobao.org/\n  nj ----- https://registry.nodejitsu.com/\n  rednpm - http://registry.mirror.cqupt.edu.cn/\n  npmMirror  https://skimdb.npmjs.com/registry/\n  edunpm - http://registry.enpmjs.org/\n  \n```\n##### 切换使用的\n\n$ `nrm use npm`\n \n```            \n   Registry has been set to: https://registry.npmjs.org/\n```\n- [pm2](https://www.npmjs.com/package/pm2)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-3b0c37857ad77a75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n- [nodemon](https://www.npmjs.com/package/nodemon) 监测文件变化，神器\n- [yalc](https://www.npmjs.com/package/yalc) 代替 npm link，调试lib包，保证HRM\n\n### 服务端工具包\n---\n- [node-ssh](https://www.npmjs.com/package/node-ssh)\nnode端登录ssh登录工具\n\n- [fs-extra](https://www.npmjs.com/package/fs-extra)\npromise包裹的fs，便于同步操作\n- [download](https://www.npmjs.com/package/download)\n下载解析文件\n\n- [needle](https://www.npmjs.com/package/needle)\nThe leanest and most handsome HTTP client in the Nodelands.\nnode http传输工具\n - [compressing](https://www.npmjs.com/package/compressing)\nThe missing compressing and uncompressing lib for node.\n解压缩工具\n- [multiparty](https://www.npmjs.com/package/multiparty)\nmultipart/form-data格式解析\n\n- [http-proxy-middleware](https://www.npmjs.com/package/http-proxy-middleware)\nhttp代理转发\n- [cross-env](https://www.npmjs.com/package/cross-env)\n With POSIX, you use: $ENV_VAR and on windows you use %ENV_VAR%.\n跨平台变量设置\n- [serve](https://www.npmjs.com/package/serve) 静态文件服务器\n### Cli\n\n- [figlet](https://www.npmjs.com/package/figlet)\n控制台艺术字\n```\n___________.___  ________.__          __          __        \n\\_   _____/|   |/  _____/|  |   _____/  |_       |__| ______\n |    __)  |   /   \\  ___|  | _/ __ \\   __\\      |  |/  ___/\n |     \\   |   \\    \\_\\  \\  |_\\  ___/|  |        |  |\\___ \\\n \\___  /   |___|\\______  /____/\\___  >__| /\\ /\\__|  /____  >\n     \\/                \\/          \\/     \\/ \\______|    \\/\n```\n- [chalk](https://www.npmjs.com/package/chalk)\n\n   彩色字体打印\n\n![](https://upload-images.jianshu.io/upload_images/15312191-56166ee55f0bc179.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- [inquirer](https://www.npmjs.com/package/inquirer)\n控制台命令接口\n```\n? 请选择模板类型 (Use arrow keys)\n❯ vue\n  react\n```\n- [ora](https://www.npmjs.com/package/ora)\n控制台loading\n![](https://upload-images.jianshu.io/upload_images/15312191-c61215bfa11ad4a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- [download-git-repo](https://www.npmjs.com/package/download-git-repo)\ngit仓库下载\n\n","slug":"☁️☁️-node-js常用工具包","published":1,"updated":"2024-05-16T07:39:11.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094m700132omv48um8gdq","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a2fc698a18d33959.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"进程版本管理\"><a href=\"#进程版本管理\" class=\"headerlink\" title=\"进程版本管理\"></a>进程版本管理</h3><h4 id=\"node-版本管理工具-–n\"><a href=\"#node-版本管理工具-–n\" class=\"headerlink\" title=\"node 版本管理工具 –n\"></a>node 版本管理工具 –n</h4><h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装:\"></a>安装:</h5><p><code>npm install -g n</code></p>\n<h5 id=\"列出可选择的-版本\"><a href=\"#列出可选择的-版本\" class=\"headerlink\" title=\"列出可选择的 版本:\"></a>列出可选择的 版本:</h5><p><code>$ n</code><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-91b5412616cf0d03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"安装某个-版本\"><a href=\"#安装某个-版本\" class=\"headerlink\" title=\"安装某个 版本:\"></a>安装某个 版本:</h5><p><code>$ n &lt;version&gt;</code></p>\n<h4 id=\"npm-代理管理工具-–-nrm\"><a href=\"#npm-代理管理工具-–-nrm\" class=\"headerlink\" title=\"npm 代理管理工具 – nrm\"></a>npm 代理管理工具 – nrm</h4><h5 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装:\"></a>安装:</h5><p><code>npm install -g nrm</code></p>\n<h5 id=\"列出可选择的源\"><a href=\"#列出可选择的源\" class=\"headerlink\" title=\"列出可选择的源:\"></a>列出可选择的源:</h5><p>$ <code>nrm ls</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  npm ---- <span class=\"attr\">https</span>:<span class=\"comment\">//registry.npmjs.org/</span></span><br><span class=\"line\">  cnpm --- <span class=\"attr\">http</span>:<span class=\"comment\">//r.cnpmjs.org/</span></span><br><span class=\"line\">* taobao - <span class=\"attr\">https</span>:<span class=\"comment\">//registry.npm.taobao.org/</span></span><br><span class=\"line\">  nj ----- <span class=\"attr\">https</span>:<span class=\"comment\">//registry.nodejitsu.com/</span></span><br><span class=\"line\">  rednpm - <span class=\"attr\">http</span>:<span class=\"comment\">//registry.mirror.cqupt.edu.cn/</span></span><br><span class=\"line\">  npmMirror  <span class=\"attr\">https</span>:<span class=\"comment\">//skimdb.npmjs.com/registry/</span></span><br><span class=\"line\">  edunpm - <span class=\"attr\">http</span>:<span class=\"comment\">//registry.enpmjs.org/</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<h5 id=\"切换使用的\"><a href=\"#切换使用的\" class=\"headerlink\" title=\"切换使用的\"></a>切换使用的</h5><p>$ <code>nrm use npm</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Registry has been set to: https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/pm2\">pm2</a></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3b0c37857ad77a75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/nodemon\">nodemon</a> 监测文件变化，神器</li>\n<li><a href=\"https://www.npmjs.com/package/yalc\">yalc</a> 代替 npm link，调试lib包，保证HRM</li>\n</ul>\n<h3 id=\"服务端工具包\"><a href=\"#服务端工具包\" class=\"headerlink\" title=\"服务端工具包\"></a>服务端工具包</h3><hr>\n<ul>\n<li><p><a href=\"https://www.npmjs.com/package/node-ssh\">node-ssh</a><br>node端登录ssh登录工具</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/fs-extra\">fs-extra</a><br>promise包裹的fs，便于同步操作</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/download\">download</a><br>下载解析文件</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/needle\">needle</a><br>The leanest and most handsome HTTP client in the Nodelands.<br>node http传输工具</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/compressing\">compressing</a><br>The missing compressing and uncompressing lib for node.<br>解压缩工具</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/multiparty\">multiparty</a><br>multipart&#x2F;form-data格式解析</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/http-proxy-middleware\">http-proxy-middleware</a><br>http代理转发</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/cross-env\">cross-env</a><br> With POSIX, you use: $ENV_VAR and on windows you use %ENV_VAR%.<br>跨平台变量设置</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/serve\">serve</a> 静态文件服务器</p>\n<h3 id=\"Cli\"><a href=\"#Cli\" class=\"headerlink\" title=\"Cli\"></a>Cli</h3></li>\n<li><p><a href=\"https://www.npmjs.com/package/figlet\">figlet</a><br>控制台艺术字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">___________.___  ________.__          __          __        </span><br><span class=\"line\">\\_   _____/|   |/  _____/|  |   _____/  |_       |__| ______</span><br><span class=\"line\"> |    __)  |   /   \\  ___|  | _/ __ \\   __\\      |  |/  ___/</span><br><span class=\"line\"> |     \\   |   \\    \\_\\  \\  |_\\  ___/|  |        |  |\\___ \\</span><br><span class=\"line\"> \\___  /   |___|\\______  /____/\\___  &gt;__| /\\ /\\__|  /____  &gt;</span><br><span class=\"line\">     \\/                \\/          \\/     \\/ \\______|    \\/</span><br></pre></td></tr></table></figure></li>\n<li><p><a href=\"https://www.npmjs.com/package/chalk\">chalk</a></p>\n<p> 彩色字体打印</p>\n</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-56166ee55f0bc179.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ul>\n<li><p><a href=\"https://www.npmjs.com/package/inquirer\">inquirer</a><br>控制台命令接口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? 请选择模板类型 (Use arrow keys)</span><br><span class=\"line\">❯ vue</span><br><span class=\"line\">  react</span><br></pre></td></tr></table></figure></li>\n<li><p><a href=\"https://www.npmjs.com/package/ora\">ora</a><br>控制台loading<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c61215bfa11ad4a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/download-git-repo\">download-git-repo</a><br>git仓库下载</p>\n</li>\n</ul>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a2fc698a18d33959.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"进程版本管理\"><a href=\"#进程版本管理\" class=\"headerlink\" title=\"进程版本管理\"></a>进程版本管理</h3><h4 id=\"node-版本管理工具-–n\"><a href=\"#node-版本管理工具-–n\" class=\"headerlink\" title=\"node 版本管理工具 –n\"></a>node 版本管理工具 –n</h4><h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装:\"></a>安装:</h5><p><code>npm install -g n</code></p>\n<h5 id=\"列出可选择的-版本\"><a href=\"#列出可选择的-版本\" class=\"headerlink\" title=\"列出可选择的 版本:\"></a>列出可选择的 版本:</h5><p><code>$ n</code><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-91b5412616cf0d03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"安装某个-版本\"><a href=\"#安装某个-版本\" class=\"headerlink\" title=\"安装某个 版本:\"></a>安装某个 版本:</h5><p><code>$ n &lt;version&gt;</code></p>\n<h4 id=\"npm-代理管理工具-–-nrm\"><a href=\"#npm-代理管理工具-–-nrm\" class=\"headerlink\" title=\"npm 代理管理工具 – nrm\"></a>npm 代理管理工具 – nrm</h4><h5 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装:\"></a>安装:</h5><p><code>npm install -g nrm</code></p>\n<h5 id=\"列出可选择的源\"><a href=\"#列出可选择的源\" class=\"headerlink\" title=\"列出可选择的源:\"></a>列出可选择的源:</h5><p>$ <code>nrm ls</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  npm ---- <span class=\"attr\">https</span>:<span class=\"comment\">//registry.npmjs.org/</span></span><br><span class=\"line\">  cnpm --- <span class=\"attr\">http</span>:<span class=\"comment\">//r.cnpmjs.org/</span></span><br><span class=\"line\">* taobao - <span class=\"attr\">https</span>:<span class=\"comment\">//registry.npm.taobao.org/</span></span><br><span class=\"line\">  nj ----- <span class=\"attr\">https</span>:<span class=\"comment\">//registry.nodejitsu.com/</span></span><br><span class=\"line\">  rednpm - <span class=\"attr\">http</span>:<span class=\"comment\">//registry.mirror.cqupt.edu.cn/</span></span><br><span class=\"line\">  npmMirror  <span class=\"attr\">https</span>:<span class=\"comment\">//skimdb.npmjs.com/registry/</span></span><br><span class=\"line\">  edunpm - <span class=\"attr\">http</span>:<span class=\"comment\">//registry.enpmjs.org/</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<h5 id=\"切换使用的\"><a href=\"#切换使用的\" class=\"headerlink\" title=\"切换使用的\"></a>切换使用的</h5><p>$ <code>nrm use npm</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Registry has been set to: https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/pm2\">pm2</a></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3b0c37857ad77a75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/nodemon\">nodemon</a> 监测文件变化，神器</li>\n<li><a href=\"https://www.npmjs.com/package/yalc\">yalc</a> 代替 npm link，调试lib包，保证HRM</li>\n</ul>\n<h3 id=\"服务端工具包\"><a href=\"#服务端工具包\" class=\"headerlink\" title=\"服务端工具包\"></a>服务端工具包</h3><hr>\n<ul>\n<li><p><a href=\"https://www.npmjs.com/package/node-ssh\">node-ssh</a><br>node端登录ssh登录工具</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/fs-extra\">fs-extra</a><br>promise包裹的fs，便于同步操作</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/download\">download</a><br>下载解析文件</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/needle\">needle</a><br>The leanest and most handsome HTTP client in the Nodelands.<br>node http传输工具</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/compressing\">compressing</a><br>The missing compressing and uncompressing lib for node.<br>解压缩工具</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/multiparty\">multiparty</a><br>multipart&#x2F;form-data格式解析</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/http-proxy-middleware\">http-proxy-middleware</a><br>http代理转发</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/cross-env\">cross-env</a><br> With POSIX, you use: $ENV_VAR and on windows you use %ENV_VAR%.<br>跨平台变量设置</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/serve\">serve</a> 静态文件服务器</p>\n<h3 id=\"Cli\"><a href=\"#Cli\" class=\"headerlink\" title=\"Cli\"></a>Cli</h3></li>\n<li><p><a href=\"https://www.npmjs.com/package/figlet\">figlet</a><br>控制台艺术字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">___________.___  ________.__          __          __        </span><br><span class=\"line\">\\_   _____/|   |/  _____/|  |   _____/  |_       |__| ______</span><br><span class=\"line\"> |    __)  |   /   \\  ___|  | _/ __ \\   __\\      |  |/  ___/</span><br><span class=\"line\"> |     \\   |   \\    \\_\\  \\  |_\\  ___/|  |        |  |\\___ \\</span><br><span class=\"line\"> \\___  /   |___|\\______  /____/\\___  &gt;__| /\\ /\\__|  /____  &gt;</span><br><span class=\"line\">     \\/                \\/          \\/     \\/ \\______|    \\/</span><br></pre></td></tr></table></figure></li>\n<li><p><a href=\"https://www.npmjs.com/package/chalk\">chalk</a></p>\n<p> 彩色字体打印</p>\n</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-56166ee55f0bc179.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ul>\n<li><p><a href=\"https://www.npmjs.com/package/inquirer\">inquirer</a><br>控制台命令接口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? 请选择模板类型 (Use arrow keys)</span><br><span class=\"line\">❯ vue</span><br><span class=\"line\">  react</span><br></pre></td></tr></table></figure></li>\n<li><p><a href=\"https://www.npmjs.com/package/ora\">ora</a><br>控制台loading<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c61215bfa11ad4a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/download-git-repo\">download-git-repo</a><br>git仓库下载</p>\n</li>\n</ul>\n"},{"title":"⛵︎数图番外篇-文本和二进制互转","date":"2021-11-07T16:00:00.000Z","_content":"JS字符串与二进制的相互转化的方法，具体代码如下所示：\n\n// 字符串转ascii码，用charCodeAt();\n// ascii码转字符串，用fromCharCode();\n\n```\nvar str = \"A\";\nvar code = str.charCodeAt();\nvar str2 = String.fromCharCode(code);\n```\n\n#### 文本转二机制，基本示例\n\n```\nvar a = \"i\";\nconsole.log(a.charCodeAt()); //105\nconsole.log(a.charCodeAt().toString(2)); //1101001\n```\n\n```\nvar a = \"我\";\nconsole.log(a.charCodeAt()); //25105\nconsole.log(a.charCodeAt().toString(2)); //110001000010001 \n```\n\n```\nvar a = \"我们\";\nconsole.log(a.length); //2\nvar list = a.split(\"\");\nconsole.log(list.length); //2<br>console.log(a.charCodeAt().toString(2)); //110001000010001 100111011101100 \n\n```\n\n#### 二进制转文本\n\n```\nlet byte = \"110001000010001\"\nconst asciiCode = parseInt(byte,2);\nconst charValue = String.fromCharCode(asciiCode)\n// 我\n```\n\n\n#### 多个字符互转\n\n```\n\n// 将字符串转换成二进制形式，中间用空格隔开\nfunction strToBinary(str){\n  var result = [];\n  var list = str.split(\"\");\n  for(var i=0;i<list.length;i++){\n    if(i != 0){\n      result.push(\" \");\n    }\n    var item = list[i];\n    var binaryStr = item.charCodeAt().toString(2);\n    result.push(binartStr);\n  }  \n  return result.join(\"\");\n}\nconsole.log(strToBinary(\"我们\")); // 110001000010001 100111011101100\nconsole.log(strToBinary(\"@%$+\")); // 1000000 100101 100100 101011\n\n// 将二进制字符串转换成Unicode字符串\nfunction binaryToStr(str){\n  var result = [];\n  var list = str.split(\" \");\n  for(var i=0;i<list.length;i++){\n     var item = list[i];\n     var asciiCode = parseInt(item,2);\n     var charValue = String.fromCharCode(asciiCode);\n     result.push(charValue);\n  }\n  return result.join(\"\");\n} \nconsole.log(binaryToStr(\"110001000010001 100111011101100\")); // 我们\nconsole.log(binaryToStr(\"1000000 100101 100100 101011\")); // @%$+  \n```\n","source":"_posts/⛵︎数图番外篇-文本和二进制互转.md","raw":"---\ntitle: \"⛵︎数图番外篇-文本和二进制互转\"\ndate: 2021-11-08\ntags: \n- 开发日常\n---\nJS字符串与二进制的相互转化的方法，具体代码如下所示：\n\n// 字符串转ascii码，用charCodeAt();\n// ascii码转字符串，用fromCharCode();\n\n```\nvar str = \"A\";\nvar code = str.charCodeAt();\nvar str2 = String.fromCharCode(code);\n```\n\n#### 文本转二机制，基本示例\n\n```\nvar a = \"i\";\nconsole.log(a.charCodeAt()); //105\nconsole.log(a.charCodeAt().toString(2)); //1101001\n```\n\n```\nvar a = \"我\";\nconsole.log(a.charCodeAt()); //25105\nconsole.log(a.charCodeAt().toString(2)); //110001000010001 \n```\n\n```\nvar a = \"我们\";\nconsole.log(a.length); //2\nvar list = a.split(\"\");\nconsole.log(list.length); //2<br>console.log(a.charCodeAt().toString(2)); //110001000010001 100111011101100 \n\n```\n\n#### 二进制转文本\n\n```\nlet byte = \"110001000010001\"\nconst asciiCode = parseInt(byte,2);\nconst charValue = String.fromCharCode(asciiCode)\n// 我\n```\n\n\n#### 多个字符互转\n\n```\n\n// 将字符串转换成二进制形式，中间用空格隔开\nfunction strToBinary(str){\n  var result = [];\n  var list = str.split(\"\");\n  for(var i=0;i<list.length;i++){\n    if(i != 0){\n      result.push(\" \");\n    }\n    var item = list[i];\n    var binaryStr = item.charCodeAt().toString(2);\n    result.push(binartStr);\n  }  \n  return result.join(\"\");\n}\nconsole.log(strToBinary(\"我们\")); // 110001000010001 100111011101100\nconsole.log(strToBinary(\"@%$+\")); // 1000000 100101 100100 101011\n\n// 将二进制字符串转换成Unicode字符串\nfunction binaryToStr(str){\n  var result = [];\n  var list = str.split(\" \");\n  for(var i=0;i<list.length;i++){\n     var item = list[i];\n     var asciiCode = parseInt(item,2);\n     var charValue = String.fromCharCode(asciiCode);\n     result.push(charValue);\n  }\n  return result.join(\"\");\n} \nconsole.log(binaryToStr(\"110001000010001 100111011101100\")); // 我们\nconsole.log(binaryToStr(\"1000000 100101 100100 101011\")); // @%$+  \n```\n","slug":"⛵︎数图番外篇-文本和二进制互转","published":1,"updated":"2024-05-16T07:39:11.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094m800152omvcd2i4tu0","content":"<p>JS字符串与二进制的相互转化的方法，具体代码如下所示：</p>\n<p>&#x2F;&#x2F; 字符串转ascii码，用charCodeAt();<br>&#x2F;&#x2F; ascii码转字符串，用fromCharCode();</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;A&quot;;</span><br><span class=\"line\">var code = str.charCodeAt();</span><br><span class=\"line\">var str2 = String.fromCharCode(code);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文本转二机制，基本示例\"><a href=\"#文本转二机制，基本示例\" class=\"headerlink\" title=\"文本转二机制，基本示例\"></a>文本转二机制，基本示例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;i&quot;;</span><br><span class=\"line\">console.log(a.charCodeAt()); //105</span><br><span class=\"line\">console.log(a.charCodeAt().toString(2)); //1101001</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;我&quot;;</span><br><span class=\"line\">console.log(a.charCodeAt()); //25105</span><br><span class=\"line\">console.log(a.charCodeAt().toString(2)); //110001000010001 </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;我们&quot;;</span><br><span class=\"line\">console.log(a.length); //2</span><br><span class=\"line\">var list = a.split(&quot;&quot;);</span><br><span class=\"line\">console.log(list.length); //2&lt;br&gt;console.log(a.charCodeAt().toString(2)); //110001000010001 100111011101100 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二进制转文本\"><a href=\"#二进制转文本\" class=\"headerlink\" title=\"二进制转文本\"></a>二进制转文本</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let byte = &quot;110001000010001&quot;</span><br><span class=\"line\">const asciiCode = parseInt(byte,2);</span><br><span class=\"line\">const charValue = String.fromCharCode(asciiCode)</span><br><span class=\"line\">// 我</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"多个字符互转\"><a href=\"#多个字符互转\" class=\"headerlink\" title=\"多个字符互转\"></a>多个字符互转</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 将字符串转换成二进制形式，中间用空格隔开</span><br><span class=\"line\">function strToBinary(str)&#123;</span><br><span class=\"line\">  var result = [];</span><br><span class=\"line\">  var list = str.split(&quot;&quot;);</span><br><span class=\"line\">  for(var i=0;i&lt;list.length;i++)&#123;</span><br><span class=\"line\">    if(i != 0)&#123;</span><br><span class=\"line\">      result.push(&quot; &quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var item = list[i];</span><br><span class=\"line\">    var binaryStr = item.charCodeAt().toString(2);</span><br><span class=\"line\">    result.push(binartStr);</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  return result.join(&quot;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(strToBinary(&quot;我们&quot;)); // 110001000010001 100111011101100</span><br><span class=\"line\">console.log(strToBinary(&quot;@%$+&quot;)); // 1000000 100101 100100 101011</span><br><span class=\"line\"></span><br><span class=\"line\">// 将二进制字符串转换成Unicode字符串</span><br><span class=\"line\">function binaryToStr(str)&#123;</span><br><span class=\"line\">  var result = [];</span><br><span class=\"line\">  var list = str.split(&quot; &quot;);</span><br><span class=\"line\">  for(var i=0;i&lt;list.length;i++)&#123;</span><br><span class=\"line\">     var item = list[i];</span><br><span class=\"line\">     var asciiCode = parseInt(item,2);</span><br><span class=\"line\">     var charValue = String.fromCharCode(asciiCode);</span><br><span class=\"line\">     result.push(charValue);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return result.join(&quot;&quot;);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">console.log(binaryToStr(&quot;110001000010001 100111011101100&quot;)); // 我们</span><br><span class=\"line\">console.log(binaryToStr(&quot;1000000 100101 100100 101011&quot;)); // @%$+  </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>JS字符串与二进制的相互转化的方法，具体代码如下所示：</p>\n<p>&#x2F;&#x2F; 字符串转ascii码，用charCodeAt();<br>&#x2F;&#x2F; ascii码转字符串，用fromCharCode();</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;A&quot;;</span><br><span class=\"line\">var code = str.charCodeAt();</span><br><span class=\"line\">var str2 = String.fromCharCode(code);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文本转二机制，基本示例\"><a href=\"#文本转二机制，基本示例\" class=\"headerlink\" title=\"文本转二机制，基本示例\"></a>文本转二机制，基本示例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;i&quot;;</span><br><span class=\"line\">console.log(a.charCodeAt()); //105</span><br><span class=\"line\">console.log(a.charCodeAt().toString(2)); //1101001</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;我&quot;;</span><br><span class=\"line\">console.log(a.charCodeAt()); //25105</span><br><span class=\"line\">console.log(a.charCodeAt().toString(2)); //110001000010001 </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;我们&quot;;</span><br><span class=\"line\">console.log(a.length); //2</span><br><span class=\"line\">var list = a.split(&quot;&quot;);</span><br><span class=\"line\">console.log(list.length); //2&lt;br&gt;console.log(a.charCodeAt().toString(2)); //110001000010001 100111011101100 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二进制转文本\"><a href=\"#二进制转文本\" class=\"headerlink\" title=\"二进制转文本\"></a>二进制转文本</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let byte = &quot;110001000010001&quot;</span><br><span class=\"line\">const asciiCode = parseInt(byte,2);</span><br><span class=\"line\">const charValue = String.fromCharCode(asciiCode)</span><br><span class=\"line\">// 我</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"多个字符互转\"><a href=\"#多个字符互转\" class=\"headerlink\" title=\"多个字符互转\"></a>多个字符互转</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 将字符串转换成二进制形式，中间用空格隔开</span><br><span class=\"line\">function strToBinary(str)&#123;</span><br><span class=\"line\">  var result = [];</span><br><span class=\"line\">  var list = str.split(&quot;&quot;);</span><br><span class=\"line\">  for(var i=0;i&lt;list.length;i++)&#123;</span><br><span class=\"line\">    if(i != 0)&#123;</span><br><span class=\"line\">      result.push(&quot; &quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var item = list[i];</span><br><span class=\"line\">    var binaryStr = item.charCodeAt().toString(2);</span><br><span class=\"line\">    result.push(binartStr);</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  return result.join(&quot;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(strToBinary(&quot;我们&quot;)); // 110001000010001 100111011101100</span><br><span class=\"line\">console.log(strToBinary(&quot;@%$+&quot;)); // 1000000 100101 100100 101011</span><br><span class=\"line\"></span><br><span class=\"line\">// 将二进制字符串转换成Unicode字符串</span><br><span class=\"line\">function binaryToStr(str)&#123;</span><br><span class=\"line\">  var result = [];</span><br><span class=\"line\">  var list = str.split(&quot; &quot;);</span><br><span class=\"line\">  for(var i=0;i&lt;list.length;i++)&#123;</span><br><span class=\"line\">     var item = list[i];</span><br><span class=\"line\">     var asciiCode = parseInt(item,2);</span><br><span class=\"line\">     var charValue = String.fromCharCode(asciiCode);</span><br><span class=\"line\">     result.push(charValue);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return result.join(&quot;&quot;);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">console.log(binaryToStr(&quot;110001000010001 100111011101100&quot;)); // 我们</span><br><span class=\"line\">console.log(binaryToStr(&quot;1000000 100101 100100 101011&quot;)); // @%$+  </span><br></pre></td></tr></table></figure>\n"},{"title":"⛵︎数图番外篇-显卡构成","date":"2021-11-16T16:00:00.000Z","_content":"\n## 显卡构成\n#### 1.GPU(核心部件)\n![](https://upload-images.jianshu.io/upload_images/15312191-780412aa98ae6182.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](https://upload-images.jianshu.io/upload_images/15312191-27046c36fc0bb75f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-adee513a67f783f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**CPU vs GPU**\ngpu 线程多，计算能力强\ncpu 线程少，但逻辑处理能力强\n\n一般说来，衡量GPU工作能力的参数有三项：流处理器数量和核心、显存工作频率。\n##### 核心频率\n\n显卡的核心频率是指显示核心的工作频率，其工作频率在一定程度上可以反映出显示核心的性能，但显卡的性能是由核心频率、流处理器单元、显存频率、显存位宽等等多方面的情况所决定的。\n#### 2.显存\n显存的参数有：显存类型，容量，位宽，频率。按常理说三者是越高越好。\n##### 显存与分辨率\n1680 * 1050分辨率，1G显存\n1440 * 900及其一下，512M就可以\n1920 * 1080，至少1.5G显存。\n\n##### 显存类型\n由于现在显存都基于DDR系列内存改造，DDR因为能在时钟的上升沿和下降沿都能传送数据，所以比SDR同频效率高了一倍，因而就有了等效频率这一说法。GDDR3和DDR3都是等效两倍，而GDDR5是2倍于GDDR3的数据预取量和DQ并行总线，使得GDDR5显存的实际速度又快了一倍，等效4倍。\n\n显存容量（显存提供临时存储功能，大显存有用，但不是那么重要，架构不行显存再大也是耍流氓。比如显存是停车场，如果停车场马路不够宽（位宽bit），汽车速度不够快（显存频率MHz），那么这个停车场的吞吐量就很小，修个超大停车场纯属浪费资源。）\n#### 3.PCB板\n#### 4.风扇\n#### 5.显示输出接口\n显卡作为显示信息处理部件，处理了图像信息要有输出的地方，不然处理完也然并卵。\n目前显卡常见采用三种输出接口：VGA、HDMI(包含mini HDMI)、DVI、DP（包含miniDP）。\nVGA就是显卡上输出模拟信号的接口，VGA接口，也称作D-Sub接口。\nVGA接口是显卡上应用非常广泛的接口类型，常见于中低端显卡。\n而高端和旗舰显卡都取消了这款接口，使用VGA接口的要使用转接头进行转换。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-92315ec93ff88f02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 显卡用途分类\n\n#### GeForce:显示器用的，比如电脑的显卡，消费级显卡，打游戏用的\n采用 NVIDIA Ampere架构\n#### Quadro: 图形卡，超贵的专业卡，专业驱动+大显存版GeForce\n采用`Turing(图灵)架构`和RTX平台\n是用来做一些C4D、3D MAX等专业领域的显卡\n\n![](https://upload-images.jianshu.io/upload_images/15312191-9df908949c51f78a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### Titan:  图形卡，消费级卡皇，GeForce和Quadro的合体\n\n![](https://upload-images.jianshu.io/upload_images/15312191-6303a5addf8cd1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n配置了特殊的图形处理集群\n#### Tesla:  计算卡，人工智能和深度学习用\n采用 NVIDIA Ampere架构\n\n这类的显卡不只是性能强劲，更可以通过接口连接，并联串联来达到增强性能，达到更高性能的计算目的，所以在这种场所中这种类型的显卡也被称为计算卡。\n![](https://upload-images.jianshu.io/upload_images/15312191-f4cf138d780b7edd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 消费级显卡 参数对比\n#### 高端显卡\n\n**七彩虹（Colorful）九段iGame GeForce RTX 3090 Kudan 24G**\n![](https://upload-images.jianshu.io/upload_images/15312191-922ec00a4bfaa040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**影驰（Galaxy）GeForce RTX 3080 Ti 星曜 OC N卡/赛博朋克 电脑电竞游戏专业显卡参数**\n![](https://upload-images.jianshu.io/upload_images/15312191-6dc4dde7a4b7dbb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 中端显卡\n**七彩虹（Colorful）RTX3060Ti系列RTX3060Ti电竞游戏电脑显卡**\n![](https://upload-images.jianshu.io/upload_images/15312191-d51b2476d912f9ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**七彩虹 Colorful RTX 2060/2060**\n![](https://upload-images.jianshu.io/upload_images/15312191-9fe7124eb4c59aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-826ac10704d1f1ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n#### 低端显卡\n**七彩虹（Colorful） GTX/1650/710/1030/1050ti 游戏办公独立显卡**\n![](https://upload-images.jianshu.io/upload_images/15312191-5ebc877070b044d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 入门级显卡\n**七彩虹（Colorful）GT1030黄金版2G/710**\n![](https://upload-images.jianshu.io/upload_images/15312191-0ae9e83e5fe6558c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n**七彩虹（Colorful） GT710 黄金版**\n![](https://upload-images.jianshu.io/upload_images/15312191-b51c5c4f646d0390.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### NVIDIA 架构进化史\n![](https://upload-images.jianshu.io/upload_images/15312191-82483bfa1bedbe60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n> [教你深入浅出做个硬件知识小达人](http://in.ali213.net/news/201603/988_2.html)\n[电脑基础知识—显卡](https://zhuanlan.zhihu.com/p/69102013)\n[从GTX到RTX，NVIDIA GPU架构的变迁史](https://www.expreview.com/68156.html)\n[桌面显卡天梯图](https://www.mydrivers.com/zhuanti/tianti/gpu/index.html)\n[科普向——全面认识显卡构成和各类参数](https://new.qq.com/omn/20210929/20210929A08P5S00.html)\n","source":"_posts/⛵︎数图番外篇-显卡构成.md","raw":"---\ntitle: \"⛵︎数图番外篇-显卡构成\"\ndate: 2021-11-17\ntags: \n- 开发日常\n---\n\n## 显卡构成\n#### 1.GPU(核心部件)\n![](https://upload-images.jianshu.io/upload_images/15312191-780412aa98ae6182.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](https://upload-images.jianshu.io/upload_images/15312191-27046c36fc0bb75f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-adee513a67f783f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**CPU vs GPU**\ngpu 线程多，计算能力强\ncpu 线程少，但逻辑处理能力强\n\n一般说来，衡量GPU工作能力的参数有三项：流处理器数量和核心、显存工作频率。\n##### 核心频率\n\n显卡的核心频率是指显示核心的工作频率，其工作频率在一定程度上可以反映出显示核心的性能，但显卡的性能是由核心频率、流处理器单元、显存频率、显存位宽等等多方面的情况所决定的。\n#### 2.显存\n显存的参数有：显存类型，容量，位宽，频率。按常理说三者是越高越好。\n##### 显存与分辨率\n1680 * 1050分辨率，1G显存\n1440 * 900及其一下，512M就可以\n1920 * 1080，至少1.5G显存。\n\n##### 显存类型\n由于现在显存都基于DDR系列内存改造，DDR因为能在时钟的上升沿和下降沿都能传送数据，所以比SDR同频效率高了一倍，因而就有了等效频率这一说法。GDDR3和DDR3都是等效两倍，而GDDR5是2倍于GDDR3的数据预取量和DQ并行总线，使得GDDR5显存的实际速度又快了一倍，等效4倍。\n\n显存容量（显存提供临时存储功能，大显存有用，但不是那么重要，架构不行显存再大也是耍流氓。比如显存是停车场，如果停车场马路不够宽（位宽bit），汽车速度不够快（显存频率MHz），那么这个停车场的吞吐量就很小，修个超大停车场纯属浪费资源。）\n#### 3.PCB板\n#### 4.风扇\n#### 5.显示输出接口\n显卡作为显示信息处理部件，处理了图像信息要有输出的地方，不然处理完也然并卵。\n目前显卡常见采用三种输出接口：VGA、HDMI(包含mini HDMI)、DVI、DP（包含miniDP）。\nVGA就是显卡上输出模拟信号的接口，VGA接口，也称作D-Sub接口。\nVGA接口是显卡上应用非常广泛的接口类型，常见于中低端显卡。\n而高端和旗舰显卡都取消了这款接口，使用VGA接口的要使用转接头进行转换。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-92315ec93ff88f02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 显卡用途分类\n\n#### GeForce:显示器用的，比如电脑的显卡，消费级显卡，打游戏用的\n采用 NVIDIA Ampere架构\n#### Quadro: 图形卡，超贵的专业卡，专业驱动+大显存版GeForce\n采用`Turing(图灵)架构`和RTX平台\n是用来做一些C4D、3D MAX等专业领域的显卡\n\n![](https://upload-images.jianshu.io/upload_images/15312191-9df908949c51f78a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### Titan:  图形卡，消费级卡皇，GeForce和Quadro的合体\n\n![](https://upload-images.jianshu.io/upload_images/15312191-6303a5addf8cd1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n配置了特殊的图形处理集群\n#### Tesla:  计算卡，人工智能和深度学习用\n采用 NVIDIA Ampere架构\n\n这类的显卡不只是性能强劲，更可以通过接口连接，并联串联来达到增强性能，达到更高性能的计算目的，所以在这种场所中这种类型的显卡也被称为计算卡。\n![](https://upload-images.jianshu.io/upload_images/15312191-f4cf138d780b7edd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 消费级显卡 参数对比\n#### 高端显卡\n\n**七彩虹（Colorful）九段iGame GeForce RTX 3090 Kudan 24G**\n![](https://upload-images.jianshu.io/upload_images/15312191-922ec00a4bfaa040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**影驰（Galaxy）GeForce RTX 3080 Ti 星曜 OC N卡/赛博朋克 电脑电竞游戏专业显卡参数**\n![](https://upload-images.jianshu.io/upload_images/15312191-6dc4dde7a4b7dbb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 中端显卡\n**七彩虹（Colorful）RTX3060Ti系列RTX3060Ti电竞游戏电脑显卡**\n![](https://upload-images.jianshu.io/upload_images/15312191-d51b2476d912f9ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**七彩虹 Colorful RTX 2060/2060**\n![](https://upload-images.jianshu.io/upload_images/15312191-9fe7124eb4c59aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-826ac10704d1f1ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n#### 低端显卡\n**七彩虹（Colorful） GTX/1650/710/1030/1050ti 游戏办公独立显卡**\n![](https://upload-images.jianshu.io/upload_images/15312191-5ebc877070b044d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 入门级显卡\n**七彩虹（Colorful）GT1030黄金版2G/710**\n![](https://upload-images.jianshu.io/upload_images/15312191-0ae9e83e5fe6558c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n**七彩虹（Colorful） GT710 黄金版**\n![](https://upload-images.jianshu.io/upload_images/15312191-b51c5c4f646d0390.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### NVIDIA 架构进化史\n![](https://upload-images.jianshu.io/upload_images/15312191-82483bfa1bedbe60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n> [教你深入浅出做个硬件知识小达人](http://in.ali213.net/news/201603/988_2.html)\n[电脑基础知识—显卡](https://zhuanlan.zhihu.com/p/69102013)\n[从GTX到RTX，NVIDIA GPU架构的变迁史](https://www.expreview.com/68156.html)\n[桌面显卡天梯图](https://www.mydrivers.com/zhuanti/tianti/gpu/index.html)\n[科普向——全面认识显卡构成和各类参数](https://new.qq.com/omn/20210929/20210929A08P5S00.html)\n","slug":"⛵︎数图番外篇-显卡构成","published":1,"updated":"2024-05-16T07:39:11.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094m900172omvayap6lws","content":"<div class=\"\"><h2 id=\"显卡构成\"><a href=\"#显卡构成\" class=\"headerlink\" title=\"显卡构成\"></a>显卡构成</h2><h4 id=\"1-GPU-核心部件\"><a href=\"#1-GPU-核心部件\" class=\"headerlink\" title=\"1.GPU(核心部件)\"></a>1.GPU(核心部件)</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-780412aa98ae6182.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-27046c36fc0bb75f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-adee513a67f783f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><strong>CPU vs GPU</strong><br>gpu 线程多，计算能力强<br>cpu 线程少，但逻辑处理能力强</p>\n<p>一般说来，衡量GPU工作能力的参数有三项：流处理器数量和核心、显存工作频率。</p>\n<h5 id=\"核心频率\"><a href=\"#核心频率\" class=\"headerlink\" title=\"核心频率\"></a>核心频率</h5><p>显卡的核心频率是指显示核心的工作频率，其工作频率在一定程度上可以反映出显示核心的性能，但显卡的性能是由核心频率、流处理器单元、显存频率、显存位宽等等多方面的情况所决定的。</p>\n<h4 id=\"2-显存\"><a href=\"#2-显存\" class=\"headerlink\" title=\"2.显存\"></a>2.显存</h4><p>显存的参数有：显存类型，容量，位宽，频率。按常理说三者是越高越好。</p>\n<h5 id=\"显存与分辨率\"><a href=\"#显存与分辨率\" class=\"headerlink\" title=\"显存与分辨率\"></a>显存与分辨率</h5><p>1680 * 1050分辨率，1G显存<br>1440 * 900及其一下，512M就可以<br>1920 * 1080，至少1.5G显存。</p>\n<h5 id=\"显存类型\"><a href=\"#显存类型\" class=\"headerlink\" title=\"显存类型\"></a>显存类型</h5><p>由于现在显存都基于DDR系列内存改造，DDR因为能在时钟的上升沿和下降沿都能传送数据，所以比SDR同频效率高了一倍，因而就有了等效频率这一说法。GDDR3和DDR3都是等效两倍，而GDDR5是2倍于GDDR3的数据预取量和DQ并行总线，使得GDDR5显存的实际速度又快了一倍，等效4倍。</p>\n<p>显存容量（显存提供临时存储功能，大显存有用，但不是那么重要，架构不行显存再大也是耍流氓。比如显存是停车场，如果停车场马路不够宽（位宽bit），汽车速度不够快（显存频率MHz），那么这个停车场的吞吐量就很小，修个超大停车场纯属浪费资源。）</p>\n<h4 id=\"3-PCB板\"><a href=\"#3-PCB板\" class=\"headerlink\" title=\"3.PCB板\"></a>3.PCB板</h4><h4 id=\"4-风扇\"><a href=\"#4-风扇\" class=\"headerlink\" title=\"4.风扇\"></a>4.风扇</h4><h4 id=\"5-显示输出接口\"><a href=\"#5-显示输出接口\" class=\"headerlink\" title=\"5.显示输出接口\"></a>5.显示输出接口</h4><p>显卡作为显示信息处理部件，处理了图像信息要有输出的地方，不然处理完也然并卵。<br>目前显卡常见采用三种输出接口：VGA、HDMI(包含mini HDMI)、DVI、DP（包含miniDP）。<br>VGA就是显卡上输出模拟信号的接口，VGA接口，也称作D-Sub接口。<br>VGA接口是显卡上应用非常广泛的接口类型，常见于中低端显卡。<br>而高端和旗舰显卡都取消了这款接口，使用VGA接口的要使用转接头进行转换。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-92315ec93ff88f02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n</div><div class=\"\"><h2 id=\"显卡用途分类\"><a href=\"#显卡用途分类\" class=\"headerlink\" title=\"显卡用途分类\"></a>显卡用途分类</h2><h4 id=\"GeForce-显示器用的，比如电脑的显卡，消费级显卡，打游戏用的\"><a href=\"#GeForce-显示器用的，比如电脑的显卡，消费级显卡，打游戏用的\" class=\"headerlink\" title=\"GeForce:显示器用的，比如电脑的显卡，消费级显卡，打游戏用的\"></a>GeForce:显示器用的，比如电脑的显卡，消费级显卡，打游戏用的</h4><p>采用 NVIDIA Ampere架构</p>\n<h4 id=\"Quadro-图形卡，超贵的专业卡，专业驱动-大显存版GeForce\"><a href=\"#Quadro-图形卡，超贵的专业卡，专业驱动-大显存版GeForce\" class=\"headerlink\" title=\"Quadro: 图形卡，超贵的专业卡，专业驱动+大显存版GeForce\"></a>Quadro: 图形卡，超贵的专业卡，专业驱动+大显存版GeForce</h4><p>采用<code>Turing(图灵)架构</code>和RTX平台<br>是用来做一些C4D、3D MAX等专业领域的显卡</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9df908949c51f78a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"Titan-图形卡，消费级卡皇，GeForce和Quadro的合体\"><a href=\"#Titan-图形卡，消费级卡皇，GeForce和Quadro的合体\" class=\"headerlink\" title=\"Titan:  图形卡，消费级卡皇，GeForce和Quadro的合体\"></a>Titan:  图形卡，消费级卡皇，GeForce和Quadro的合体</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6303a5addf8cd1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>配置了特殊的图形处理集群</p>\n<h4 id=\"Tesla-计算卡，人工智能和深度学习用\"><a href=\"#Tesla-计算卡，人工智能和深度学习用\" class=\"headerlink\" title=\"Tesla:  计算卡，人工智能和深度学习用\"></a>Tesla:  计算卡，人工智能和深度学习用</h4><p>采用 NVIDIA Ampere架构</p>\n<p>这类的显卡不只是性能强劲，更可以通过接口连接，并联串联来达到增强性能，达到更高性能的计算目的，所以在这种场所中这种类型的显卡也被称为计算卡。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f4cf138d780b7edd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n</div><div class=\"\"><h2 id=\"消费级显卡-参数对比\"><a href=\"#消费级显卡-参数对比\" class=\"headerlink\" title=\"消费级显卡 参数对比\"></a>消费级显卡 参数对比</h2><h4 id=\"高端显卡\"><a href=\"#高端显卡\" class=\"headerlink\" title=\"高端显卡\"></a>高端显卡</h4><p><strong>七彩虹（Colorful）九段iGame GeForce RTX 3090 Kudan 24G</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-922ec00a4bfaa040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>影驰（Galaxy）GeForce RTX 3080 Ti 星曜 OC N卡&#x2F;赛博朋克 电脑电竞游戏专业显卡参数</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6dc4dde7a4b7dbb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"中端显卡\"><a href=\"#中端显卡\" class=\"headerlink\" title=\"中端显卡\"></a>中端显卡</h4><p><strong>七彩虹（Colorful）RTX3060Ti系列RTX3060Ti电竞游戏电脑显卡</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-d51b2476d912f9ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>七彩虹 Colorful RTX 2060&#x2F;2060</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9fe7124eb4c59aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-826ac10704d1f1ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"低端显卡\"><a href=\"#低端显卡\" class=\"headerlink\" title=\"低端显卡\"></a>低端显卡</h4><p><strong>七彩虹（Colorful） GTX&#x2F;1650&#x2F;710&#x2F;1030&#x2F;1050ti 游戏办公独立显卡</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5ebc877070b044d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"入门级显卡\"><a href=\"#入门级显卡\" class=\"headerlink\" title=\"入门级显卡\"></a>入门级显卡</h4><p><strong>七彩虹（Colorful）GT1030黄金版2G&#x2F;710</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-0ae9e83e5fe6558c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>七彩虹（Colorful） GT710 黄金版</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b51c5c4f646d0390.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"NVIDIA-架构进化史\"><a href=\"#NVIDIA-架构进化史\" class=\"headerlink\" title=\"NVIDIA 架构进化史\"></a>NVIDIA 架构进化史</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-82483bfa1bedbe60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<blockquote>\n<p><a href=\"http://in.ali213.net/news/201603/988_2.html\">教你深入浅出做个硬件知识小达人</a><br><a href=\"https://zhuanlan.zhihu.com/p/69102013\">电脑基础知识—显卡</a><br><a href=\"https://www.expreview.com/68156.html\">从GTX到RTX，NVIDIA GPU架构的变迁史</a><br><a href=\"https://www.mydrivers.com/zhuanti/tianti/gpu/index.html\">桌面显卡天梯图</a><br><a href=\"https://new.qq.com/omn/20210929/20210929A08P5S00.html\">科普向——全面认识显卡构成和各类参数</a></p>\n</blockquote>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"显卡构成\"><a href=\"#显卡构成\" class=\"headerlink\" title=\"显卡构成\"></a>显卡构成</h2><h4 id=\"1-GPU-核心部件\"><a href=\"#1-GPU-核心部件\" class=\"headerlink\" title=\"1.GPU(核心部件)\"></a>1.GPU(核心部件)</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-780412aa98ae6182.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-27046c36fc0bb75f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-adee513a67f783f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><strong>CPU vs GPU</strong><br>gpu 线程多，计算能力强<br>cpu 线程少，但逻辑处理能力强</p>\n<p>一般说来，衡量GPU工作能力的参数有三项：流处理器数量和核心、显存工作频率。</p>\n<h5 id=\"核心频率\"><a href=\"#核心频率\" class=\"headerlink\" title=\"核心频率\"></a>核心频率</h5><p>显卡的核心频率是指显示核心的工作频率，其工作频率在一定程度上可以反映出显示核心的性能，但显卡的性能是由核心频率、流处理器单元、显存频率、显存位宽等等多方面的情况所决定的。</p>\n<h4 id=\"2-显存\"><a href=\"#2-显存\" class=\"headerlink\" title=\"2.显存\"></a>2.显存</h4><p>显存的参数有：显存类型，容量，位宽，频率。按常理说三者是越高越好。</p>\n<h5 id=\"显存与分辨率\"><a href=\"#显存与分辨率\" class=\"headerlink\" title=\"显存与分辨率\"></a>显存与分辨率</h5><p>1680 * 1050分辨率，1G显存<br>1440 * 900及其一下，512M就可以<br>1920 * 1080，至少1.5G显存。</p>\n<h5 id=\"显存类型\"><a href=\"#显存类型\" class=\"headerlink\" title=\"显存类型\"></a>显存类型</h5><p>由于现在显存都基于DDR系列内存改造，DDR因为能在时钟的上升沿和下降沿都能传送数据，所以比SDR同频效率高了一倍，因而就有了等效频率这一说法。GDDR3和DDR3都是等效两倍，而GDDR5是2倍于GDDR3的数据预取量和DQ并行总线，使得GDDR5显存的实际速度又快了一倍，等效4倍。</p>\n<p>显存容量（显存提供临时存储功能，大显存有用，但不是那么重要，架构不行显存再大也是耍流氓。比如显存是停车场，如果停车场马路不够宽（位宽bit），汽车速度不够快（显存频率MHz），那么这个停车场的吞吐量就很小，修个超大停车场纯属浪费资源。）</p>\n<h4 id=\"3-PCB板\"><a href=\"#3-PCB板\" class=\"headerlink\" title=\"3.PCB板\"></a>3.PCB板</h4><h4 id=\"4-风扇\"><a href=\"#4-风扇\" class=\"headerlink\" title=\"4.风扇\"></a>4.风扇</h4><h4 id=\"5-显示输出接口\"><a href=\"#5-显示输出接口\" class=\"headerlink\" title=\"5.显示输出接口\"></a>5.显示输出接口</h4><p>显卡作为显示信息处理部件，处理了图像信息要有输出的地方，不然处理完也然并卵。<br>目前显卡常见采用三种输出接口：VGA、HDMI(包含mini HDMI)、DVI、DP（包含miniDP）。<br>VGA就是显卡上输出模拟信号的接口，VGA接口，也称作D-Sub接口。<br>VGA接口是显卡上应用非常广泛的接口类型，常见于中低端显卡。<br>而高端和旗舰显卡都取消了这款接口，使用VGA接口的要使用转接头进行转换。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-92315ec93ff88f02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"显卡用途分类\"><a href=\"#显卡用途分类\" class=\"headerlink\" title=\"显卡用途分类\"></a>显卡用途分类</h2><h4 id=\"GeForce-显示器用的，比如电脑的显卡，消费级显卡，打游戏用的\"><a href=\"#GeForce-显示器用的，比如电脑的显卡，消费级显卡，打游戏用的\" class=\"headerlink\" title=\"GeForce:显示器用的，比如电脑的显卡，消费级显卡，打游戏用的\"></a>GeForce:显示器用的，比如电脑的显卡，消费级显卡，打游戏用的</h4><p>采用 NVIDIA Ampere架构</p>\n<h4 id=\"Quadro-图形卡，超贵的专业卡，专业驱动-大显存版GeForce\"><a href=\"#Quadro-图形卡，超贵的专业卡，专业驱动-大显存版GeForce\" class=\"headerlink\" title=\"Quadro: 图形卡，超贵的专业卡，专业驱动+大显存版GeForce\"></a>Quadro: 图形卡，超贵的专业卡，专业驱动+大显存版GeForce</h4><p>采用<code>Turing(图灵)架构</code>和RTX平台<br>是用来做一些C4D、3D MAX等专业领域的显卡</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9df908949c51f78a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"Titan-图形卡，消费级卡皇，GeForce和Quadro的合体\"><a href=\"#Titan-图形卡，消费级卡皇，GeForce和Quadro的合体\" class=\"headerlink\" title=\"Titan:  图形卡，消费级卡皇，GeForce和Quadro的合体\"></a>Titan:  图形卡，消费级卡皇，GeForce和Quadro的合体</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6303a5addf8cd1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>配置了特殊的图形处理集群</p>\n<h4 id=\"Tesla-计算卡，人工智能和深度学习用\"><a href=\"#Tesla-计算卡，人工智能和深度学习用\" class=\"headerlink\" title=\"Tesla:  计算卡，人工智能和深度学习用\"></a>Tesla:  计算卡，人工智能和深度学习用</h4><p>采用 NVIDIA Ampere架构</p>\n<p>这类的显卡不只是性能强劲，更可以通过接口连接，并联串联来达到增强性能，达到更高性能的计算目的，所以在这种场所中这种类型的显卡也被称为计算卡。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f4cf138d780b7edd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"消费级显卡-参数对比\"><a href=\"#消费级显卡-参数对比\" class=\"headerlink\" title=\"消费级显卡 参数对比\"></a>消费级显卡 参数对比</h2><h4 id=\"高端显卡\"><a href=\"#高端显卡\" class=\"headerlink\" title=\"高端显卡\"></a>高端显卡</h4><p><strong>七彩虹（Colorful）九段iGame GeForce RTX 3090 Kudan 24G</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-922ec00a4bfaa040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>影驰（Galaxy）GeForce RTX 3080 Ti 星曜 OC N卡&#x2F;赛博朋克 电脑电竞游戏专业显卡参数</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6dc4dde7a4b7dbb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"中端显卡\"><a href=\"#中端显卡\" class=\"headerlink\" title=\"中端显卡\"></a>中端显卡</h4><p><strong>七彩虹（Colorful）RTX3060Ti系列RTX3060Ti电竞游戏电脑显卡</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-d51b2476d912f9ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>七彩虹 Colorful RTX 2060&#x2F;2060</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9fe7124eb4c59aaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-826ac10704d1f1ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"低端显卡\"><a href=\"#低端显卡\" class=\"headerlink\" title=\"低端显卡\"></a>低端显卡</h4><p><strong>七彩虹（Colorful） GTX&#x2F;1650&#x2F;710&#x2F;1030&#x2F;1050ti 游戏办公独立显卡</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5ebc877070b044d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"入门级显卡\"><a href=\"#入门级显卡\" class=\"headerlink\" title=\"入门级显卡\"></a>入门级显卡</h4><p><strong>七彩虹（Colorful）GT1030黄金版2G&#x2F;710</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-0ae9e83e5fe6558c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>七彩虹（Colorful） GT710 黄金版</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b51c5c4f646d0390.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"NVIDIA-架构进化史\"><a href=\"#NVIDIA-架构进化史\" class=\"headerlink\" title=\"NVIDIA 架构进化史\"></a>NVIDIA 架构进化史</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-82483bfa1bedbe60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<blockquote>\n<p><a href=\"http://in.ali213.net/news/201603/988_2.html\">教你深入浅出做个硬件知识小达人</a><br><a href=\"https://zhuanlan.zhihu.com/p/69102013\">电脑基础知识—显卡</a><br><a href=\"https://www.expreview.com/68156.html\">从GTX到RTX，NVIDIA GPU架构的变迁史</a><br><a href=\"https://www.mydrivers.com/zhuanti/tianti/gpu/index.html\">桌面显卡天梯图</a><br><a href=\"https://new.qq.com/omn/20210929/20210929A08P5S00.html\">科普向——全面认识显卡构成和各类参数</a></p>\n</blockquote>\n"},{"title":"⛵︎数图番外篇-液晶显示器原理","date":"2021-11-17T16:00:00.000Z","_content":"![显示器基本构成](https://upload-images.jianshu.io/upload_images/15312191-0b2e1954e506137d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n## 显示器接口\n![](https://upload-images.jianshu.io/upload_images/15312191-abb49b2a33c73d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### VGA\nVGA接头：针数为15的视频接口，主要用于老式的电脑输出。VGA输出和传递的是模拟信号。大家都知道计算机显卡产生的是数字信号，显示器使用的也是数字信号。所以使用VGA的视频接口相当于是经历了一个数模转换和一次模数转换。信号损失，显示较为模糊。\n\n#### HDMI\nHDMI是一种高清视频接口，在目前主流笔记本、液晶电视、显卡、主板中都比较常见。HDMI是一种数字化视频/音频接口技术，是适合影像传输的专用型数字化接口，其可同时传送音频和影音信号，最高数据传输速度为5Gbps，可支持1080P，720P的全高清格式视频输出，是目前最为流行的高清接口，这是普通的VGA显示接口所无法比拟的，犹如宽带中电话线宽带与光纤一样，传输数据能力区别很大。\n\n#### DVI\nDVI接口：DVI接口有两个标准，25针和29针，如下图所示。直观来说，这两种接口没有区别。DVI接口传输的是数字信号，可以传输大分辨率的视频信号。DVI连接计算机显卡和显示器时不用发生转换，所以信号没有损失。\n\n准确说，DVI分为DVI-I和DVI-D 前者依然是模拟信号输出 后者则是完全的高清数字输出 使用DVI-I的显卡接口可以使用转接头转成VGA输出 后者则不能 DVI-I的实际画面输出和VGA没有本质的区别 DVI-D和HDMI才是真正的数字无损输出\n\n#### DP\nDP接口DP（Display Port）接口是HDMI接口的竞争对手。在一些显卡与显示器上，除了有HDMI接口，也带有DP接口。目前DP接口发展到1.4版本，能传输10bit的4K 120Hz视频，也可以支持8K 60Hz视频。DP1.4兼容USB Type-C接口，这就意味着，我们可以使用DP1.4协议，在USB 3.1传输数据的同时，同步传输高清视频。从趋势来看，这对于推动周边影音及影像设备的升级，是非常有好处的。而且，DP接口也可以单根线同步传输声音，达到使用显示器声音的使用方式。\n\n#### USB Type-C\nUSB Type-C接口USB接口早已被大家所熟知，以往USB接口被设计用来传输数据，所以它在移动硬盘等存储设备的使用上非常常见。现在USB 3.1 Gen2的速度已经达到10Gbps，设计标准也可以满足视频、数据兼顾传输，所以在一些显示器上，也能够发现USB 3.1接口。现在的USB3.1接口，已经能够满足4K 30P的分辨率显示，大致与HDMI1.4在同一水平。但它以后再进行升级，必将能成为最通用的显示传输方式。需要注意的是，USB 3.1 Gen1就是USB 3.0，而USB 3.1 Gen2才是真正的USB3.1。\n#### 雷电接口\n雷电接口雷电（thunderbolt）接口在苹果电脑上用的非常多，苹果的中文官网将其译为雷雳。它以速度快，传输稳定而著称。雷电接口的技术融合了PCI Express和DisplayPort（就是上面说的DP口）两种通信协议。其中PCI Express用于数据传输，可以非常方便地进行任何类型设备扩展；DisplayPort用于显示，能同步传输1080p乃至4K视频和最多八声道音频。并且两条通道在传输时都有自己单独的通道，不会产生任何干扰。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-471bdd4d10217d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 驱动版\n\n接受数字信号和模拟信号，经过解码器，解码加载到 scaler芯片中\n####（1）A／D转换电路\n\nA／D转换电路即模／数转换器，用以将VGA接口输出的模拟R、G、B信号转换为数字信号，然后送到Sealer电路进行处理。\n\n早期的液晶显示器，一般单独设立一块A／D转换芯片（如AD9883、AD9884等），现在生产的液晶显示器，大多已将A／D转换电路集成在Scaler芯片中。\n####（2） Sealer电路\nSealer电路的名称较多，如图像缩放电路、主控电路、图像控制器等。Sealer电路的核心是一块大规模集成电路，称为Sealer芯片，其作用是对A/D转换得到的数字信号或TMDS接收器输出的数据和时钟信号，进行缩放、画质增强等处理，再经输出接口电路送至液晶面板，最后，由液面板时控制1C（TCON）将信号传输至面板上的行列驱动IC. Sealer芯片的性能基本上决定了信号处理的极限能力。另外，在Sealer电路中，一般还集成有屏显电路（OSD电路）。\n\n\n\n\n液晶显示器为什么要对信号进行缩放处理呢？这是由于一个面板的画素位置与分辨率在制造完成后就已经固定，但是影音装置输出的分辨率却是多元的，当液晶面板必须接收不同分辨率的影音信号时，就要经过缩放处理才能适合一个屏幕的大小，所以信号需要经过Sealer芯片进行缩放处理。\n\n\n> [读懂电视进化史：CRT、背投、PDP、LCD、OLED](https://zhuanlan.zhihu.com/p/23941934)\n> [显示器基本构成](https://wenku.baidu.com/view/6aaa0fa9b0717fd5360cdc59.html)\n>[薄薄的液晶显示器是如何显示各种图案](https://new.qq.com/omn/20191015/20191015A0Q0VZ00.html)\n>[显示器接口类型](https://www.zhihu.com/question/19571221/answer/569037388)\n","source":"_posts/⛵︎数图番外篇-液晶显示器原理.md","raw":"---\ntitle: \"⛵︎数图番外篇-液晶显示器原理\"\ndate: 2021-11-18\ntags: \n- 开发日常\n---\n![显示器基本构成](https://upload-images.jianshu.io/upload_images/15312191-0b2e1954e506137d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n## 显示器接口\n![](https://upload-images.jianshu.io/upload_images/15312191-abb49b2a33c73d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### VGA\nVGA接头：针数为15的视频接口，主要用于老式的电脑输出。VGA输出和传递的是模拟信号。大家都知道计算机显卡产生的是数字信号，显示器使用的也是数字信号。所以使用VGA的视频接口相当于是经历了一个数模转换和一次模数转换。信号损失，显示较为模糊。\n\n#### HDMI\nHDMI是一种高清视频接口，在目前主流笔记本、液晶电视、显卡、主板中都比较常见。HDMI是一种数字化视频/音频接口技术，是适合影像传输的专用型数字化接口，其可同时传送音频和影音信号，最高数据传输速度为5Gbps，可支持1080P，720P的全高清格式视频输出，是目前最为流行的高清接口，这是普通的VGA显示接口所无法比拟的，犹如宽带中电话线宽带与光纤一样，传输数据能力区别很大。\n\n#### DVI\nDVI接口：DVI接口有两个标准，25针和29针，如下图所示。直观来说，这两种接口没有区别。DVI接口传输的是数字信号，可以传输大分辨率的视频信号。DVI连接计算机显卡和显示器时不用发生转换，所以信号没有损失。\n\n准确说，DVI分为DVI-I和DVI-D 前者依然是模拟信号输出 后者则是完全的高清数字输出 使用DVI-I的显卡接口可以使用转接头转成VGA输出 后者则不能 DVI-I的实际画面输出和VGA没有本质的区别 DVI-D和HDMI才是真正的数字无损输出\n\n#### DP\nDP接口DP（Display Port）接口是HDMI接口的竞争对手。在一些显卡与显示器上，除了有HDMI接口，也带有DP接口。目前DP接口发展到1.4版本，能传输10bit的4K 120Hz视频，也可以支持8K 60Hz视频。DP1.4兼容USB Type-C接口，这就意味着，我们可以使用DP1.4协议，在USB 3.1传输数据的同时，同步传输高清视频。从趋势来看，这对于推动周边影音及影像设备的升级，是非常有好处的。而且，DP接口也可以单根线同步传输声音，达到使用显示器声音的使用方式。\n\n#### USB Type-C\nUSB Type-C接口USB接口早已被大家所熟知，以往USB接口被设计用来传输数据，所以它在移动硬盘等存储设备的使用上非常常见。现在USB 3.1 Gen2的速度已经达到10Gbps，设计标准也可以满足视频、数据兼顾传输，所以在一些显示器上，也能够发现USB 3.1接口。现在的USB3.1接口，已经能够满足4K 30P的分辨率显示，大致与HDMI1.4在同一水平。但它以后再进行升级，必将能成为最通用的显示传输方式。需要注意的是，USB 3.1 Gen1就是USB 3.0，而USB 3.1 Gen2才是真正的USB3.1。\n#### 雷电接口\n雷电接口雷电（thunderbolt）接口在苹果电脑上用的非常多，苹果的中文官网将其译为雷雳。它以速度快，传输稳定而著称。雷电接口的技术融合了PCI Express和DisplayPort（就是上面说的DP口）两种通信协议。其中PCI Express用于数据传输，可以非常方便地进行任何类型设备扩展；DisplayPort用于显示，能同步传输1080p乃至4K视频和最多八声道音频。并且两条通道在传输时都有自己单独的通道，不会产生任何干扰。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-471bdd4d10217d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 驱动版\n\n接受数字信号和模拟信号，经过解码器，解码加载到 scaler芯片中\n####（1）A／D转换电路\n\nA／D转换电路即模／数转换器，用以将VGA接口输出的模拟R、G、B信号转换为数字信号，然后送到Sealer电路进行处理。\n\n早期的液晶显示器，一般单独设立一块A／D转换芯片（如AD9883、AD9884等），现在生产的液晶显示器，大多已将A／D转换电路集成在Scaler芯片中。\n####（2） Sealer电路\nSealer电路的名称较多，如图像缩放电路、主控电路、图像控制器等。Sealer电路的核心是一块大规模集成电路，称为Sealer芯片，其作用是对A/D转换得到的数字信号或TMDS接收器输出的数据和时钟信号，进行缩放、画质增强等处理，再经输出接口电路送至液晶面板，最后，由液面板时控制1C（TCON）将信号传输至面板上的行列驱动IC. Sealer芯片的性能基本上决定了信号处理的极限能力。另外，在Sealer电路中，一般还集成有屏显电路（OSD电路）。\n\n\n\n\n液晶显示器为什么要对信号进行缩放处理呢？这是由于一个面板的画素位置与分辨率在制造完成后就已经固定，但是影音装置输出的分辨率却是多元的，当液晶面板必须接收不同分辨率的影音信号时，就要经过缩放处理才能适合一个屏幕的大小，所以信号需要经过Sealer芯片进行缩放处理。\n\n\n> [读懂电视进化史：CRT、背投、PDP、LCD、OLED](https://zhuanlan.zhihu.com/p/23941934)\n> [显示器基本构成](https://wenku.baidu.com/view/6aaa0fa9b0717fd5360cdc59.html)\n>[薄薄的液晶显示器是如何显示各种图案](https://new.qq.com/omn/20191015/20191015A0Q0VZ00.html)\n>[显示器接口类型](https://www.zhihu.com/question/19571221/answer/569037388)\n","slug":"⛵︎数图番外篇-液晶显示器原理","published":1,"updated":"2024-05-16T07:39:11.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ma00192omv950yepzg","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-0b2e1954e506137d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"显示器基本构成\"></p>\n<div class=\"\"><h2 id=\"显示器接口\"><a href=\"#显示器接口\" class=\"headerlink\" title=\"显示器接口\"></a>显示器接口</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-abb49b2a33c73d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"VGA\"><a href=\"#VGA\" class=\"headerlink\" title=\"VGA\"></a>VGA</h4><p>VGA接头：针数为15的视频接口，主要用于老式的电脑输出。VGA输出和传递的是模拟信号。大家都知道计算机显卡产生的是数字信号，显示器使用的也是数字信号。所以使用VGA的视频接口相当于是经历了一个数模转换和一次模数转换。信号损失，显示较为模糊。</p>\n<h4 id=\"HDMI\"><a href=\"#HDMI\" class=\"headerlink\" title=\"HDMI\"></a>HDMI</h4><p>HDMI是一种高清视频接口，在目前主流笔记本、液晶电视、显卡、主板中都比较常见。HDMI是一种数字化视频&#x2F;音频接口技术，是适合影像传输的专用型数字化接口，其可同时传送音频和影音信号，最高数据传输速度为5Gbps，可支持1080P，720P的全高清格式视频输出，是目前最为流行的高清接口，这是普通的VGA显示接口所无法比拟的，犹如宽带中电话线宽带与光纤一样，传输数据能力区别很大。</p>\n<h4 id=\"DVI\"><a href=\"#DVI\" class=\"headerlink\" title=\"DVI\"></a>DVI</h4><p>DVI接口：DVI接口有两个标准，25针和29针，如下图所示。直观来说，这两种接口没有区别。DVI接口传输的是数字信号，可以传输大分辨率的视频信号。DVI连接计算机显卡和显示器时不用发生转换，所以信号没有损失。</p>\n<p>准确说，DVI分为DVI-I和DVI-D 前者依然是模拟信号输出 后者则是完全的高清数字输出 使用DVI-I的显卡接口可以使用转接头转成VGA输出 后者则不能 DVI-I的实际画面输出和VGA没有本质的区别 DVI-D和HDMI才是真正的数字无损输出</p>\n<h4 id=\"DP\"><a href=\"#DP\" class=\"headerlink\" title=\"DP\"></a>DP</h4><p>DP接口DP（Display Port）接口是HDMI接口的竞争对手。在一些显卡与显示器上，除了有HDMI接口，也带有DP接口。目前DP接口发展到1.4版本，能传输10bit的4K 120Hz视频，也可以支持8K 60Hz视频。DP1.4兼容USB Type-C接口，这就意味着，我们可以使用DP1.4协议，在USB 3.1传输数据的同时，同步传输高清视频。从趋势来看，这对于推动周边影音及影像设备的升级，是非常有好处的。而且，DP接口也可以单根线同步传输声音，达到使用显示器声音的使用方式。</p>\n<h4 id=\"USB-Type-C\"><a href=\"#USB-Type-C\" class=\"headerlink\" title=\"USB Type-C\"></a>USB Type-C</h4><p>USB Type-C接口USB接口早已被大家所熟知，以往USB接口被设计用来传输数据，所以它在移动硬盘等存储设备的使用上非常常见。现在USB 3.1 Gen2的速度已经达到10Gbps，设计标准也可以满足视频、数据兼顾传输，所以在一些显示器上，也能够发现USB 3.1接口。现在的USB3.1接口，已经能够满足4K 30P的分辨率显示，大致与HDMI1.4在同一水平。但它以后再进行升级，必将能成为最通用的显示传输方式。需要注意的是，USB 3.1 Gen1就是USB 3.0，而USB 3.1 Gen2才是真正的USB3.1。</p>\n<h4 id=\"雷电接口\"><a href=\"#雷电接口\" class=\"headerlink\" title=\"雷电接口\"></a>雷电接口</h4><p>雷电接口雷电（thunderbolt）接口在苹果电脑上用的非常多，苹果的中文官网将其译为雷雳。它以速度快，传输稳定而著称。雷电接口的技术融合了PCI Express和DisplayPort（就是上面说的DP口）两种通信协议。其中PCI Express用于数据传输，可以非常方便地进行任何类型设备扩展；DisplayPort用于显示，能同步传输1080p乃至4K视频和最多八声道音频。并且两条通道在传输时都有自己单独的通道，不会产生任何干扰。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-471bdd4d10217d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n</div><div class=\"\"><h2 id=\"驱动版\"><a href=\"#驱动版\" class=\"headerlink\" title=\"驱动版\"></a>驱动版</h2><p>接受数字信号和模拟信号，经过解码器，解码加载到 scaler芯片中<br>####（1）A／D转换电路</p>\n<p>A／D转换电路即模／数转换器，用以将VGA接口输出的模拟R、G、B信号转换为数字信号，然后送到Sealer电路进行处理。</p>\n<p>早期的液晶显示器，一般单独设立一块A／D转换芯片（如AD9883、AD9884等），现在生产的液晶显示器，大多已将A／D转换电路集成在Scaler芯片中。<br>####（2） Sealer电路<br>Sealer电路的名称较多，如图像缩放电路、主控电路、图像控制器等。Sealer电路的核心是一块大规模集成电路，称为Sealer芯片，其作用是对A&#x2F;D转换得到的数字信号或TMDS接收器输出的数据和时钟信号，进行缩放、画质增强等处理，再经输出接口电路送至液晶面板，最后，由液面板时控制1C（TCON）将信号传输至面板上的行列驱动IC. Sealer芯片的性能基本上决定了信号处理的极限能力。另外，在Sealer电路中，一般还集成有屏显电路（OSD电路）。</p>\n<p>液晶显示器为什么要对信号进行缩放处理呢？这是由于一个面板的画素位置与分辨率在制造完成后就已经固定，但是影音装置输出的分辨率却是多元的，当液晶面板必须接收不同分辨率的影音信号时，就要经过缩放处理才能适合一个屏幕的大小，所以信号需要经过Sealer芯片进行缩放处理。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/23941934\">读懂电视进化史：CRT、背投、PDP、LCD、OLED</a><br><a href=\"https://wenku.baidu.com/view/6aaa0fa9b0717fd5360cdc59.html\">显示器基本构成</a><br><a href=\"https://new.qq.com/omn/20191015/20191015A0Q0VZ00.html\">薄薄的液晶显示器是如何显示各种图案</a><br><a href=\"https://www.zhihu.com/question/19571221/answer/569037388\">显示器接口类型</a></p>\n</blockquote>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-0b2e1954e506137d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"显示器基本构成\"></p>\n<h2 id=\"显示器接口\"><a href=\"#显示器接口\" class=\"headerlink\" title=\"显示器接口\"></a>显示器接口</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-abb49b2a33c73d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"VGA\"><a href=\"#VGA\" class=\"headerlink\" title=\"VGA\"></a>VGA</h4><p>VGA接头：针数为15的视频接口，主要用于老式的电脑输出。VGA输出和传递的是模拟信号。大家都知道计算机显卡产生的是数字信号，显示器使用的也是数字信号。所以使用VGA的视频接口相当于是经历了一个数模转换和一次模数转换。信号损失，显示较为模糊。</p>\n<h4 id=\"HDMI\"><a href=\"#HDMI\" class=\"headerlink\" title=\"HDMI\"></a>HDMI</h4><p>HDMI是一种高清视频接口，在目前主流笔记本、液晶电视、显卡、主板中都比较常见。HDMI是一种数字化视频&#x2F;音频接口技术，是适合影像传输的专用型数字化接口，其可同时传送音频和影音信号，最高数据传输速度为5Gbps，可支持1080P，720P的全高清格式视频输出，是目前最为流行的高清接口，这是普通的VGA显示接口所无法比拟的，犹如宽带中电话线宽带与光纤一样，传输数据能力区别很大。</p>\n<h4 id=\"DVI\"><a href=\"#DVI\" class=\"headerlink\" title=\"DVI\"></a>DVI</h4><p>DVI接口：DVI接口有两个标准，25针和29针，如下图所示。直观来说，这两种接口没有区别。DVI接口传输的是数字信号，可以传输大分辨率的视频信号。DVI连接计算机显卡和显示器时不用发生转换，所以信号没有损失。</p>\n<p>准确说，DVI分为DVI-I和DVI-D 前者依然是模拟信号输出 后者则是完全的高清数字输出 使用DVI-I的显卡接口可以使用转接头转成VGA输出 后者则不能 DVI-I的实际画面输出和VGA没有本质的区别 DVI-D和HDMI才是真正的数字无损输出</p>\n<h4 id=\"DP\"><a href=\"#DP\" class=\"headerlink\" title=\"DP\"></a>DP</h4><p>DP接口DP（Display Port）接口是HDMI接口的竞争对手。在一些显卡与显示器上，除了有HDMI接口，也带有DP接口。目前DP接口发展到1.4版本，能传输10bit的4K 120Hz视频，也可以支持8K 60Hz视频。DP1.4兼容USB Type-C接口，这就意味着，我们可以使用DP1.4协议，在USB 3.1传输数据的同时，同步传输高清视频。从趋势来看，这对于推动周边影音及影像设备的升级，是非常有好处的。而且，DP接口也可以单根线同步传输声音，达到使用显示器声音的使用方式。</p>\n<h4 id=\"USB-Type-C\"><a href=\"#USB-Type-C\" class=\"headerlink\" title=\"USB Type-C\"></a>USB Type-C</h4><p>USB Type-C接口USB接口早已被大家所熟知，以往USB接口被设计用来传输数据，所以它在移动硬盘等存储设备的使用上非常常见。现在USB 3.1 Gen2的速度已经达到10Gbps，设计标准也可以满足视频、数据兼顾传输，所以在一些显示器上，也能够发现USB 3.1接口。现在的USB3.1接口，已经能够满足4K 30P的分辨率显示，大致与HDMI1.4在同一水平。但它以后再进行升级，必将能成为最通用的显示传输方式。需要注意的是，USB 3.1 Gen1就是USB 3.0，而USB 3.1 Gen2才是真正的USB3.1。</p>\n<h4 id=\"雷电接口\"><a href=\"#雷电接口\" class=\"headerlink\" title=\"雷电接口\"></a>雷电接口</h4><p>雷电接口雷电（thunderbolt）接口在苹果电脑上用的非常多，苹果的中文官网将其译为雷雳。它以速度快，传输稳定而著称。雷电接口的技术融合了PCI Express和DisplayPort（就是上面说的DP口）两种通信协议。其中PCI Express用于数据传输，可以非常方便地进行任何类型设备扩展；DisplayPort用于显示，能同步传输1080p乃至4K视频和最多八声道音频。并且两条通道在传输时都有自己单独的通道，不会产生任何干扰。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-471bdd4d10217d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"驱动版\"><a href=\"#驱动版\" class=\"headerlink\" title=\"驱动版\"></a>驱动版</h2><p>接受数字信号和模拟信号，经过解码器，解码加载到 scaler芯片中<br>####（1）A／D转换电路</p>\n<p>A／D转换电路即模／数转换器，用以将VGA接口输出的模拟R、G、B信号转换为数字信号，然后送到Sealer电路进行处理。</p>\n<p>早期的液晶显示器，一般单独设立一块A／D转换芯片（如AD9883、AD9884等），现在生产的液晶显示器，大多已将A／D转换电路集成在Scaler芯片中。<br>####（2） Sealer电路<br>Sealer电路的名称较多，如图像缩放电路、主控电路、图像控制器等。Sealer电路的核心是一块大规模集成电路，称为Sealer芯片，其作用是对A&#x2F;D转换得到的数字信号或TMDS接收器输出的数据和时钟信号，进行缩放、画质增强等处理，再经输出接口电路送至液晶面板，最后，由液面板时控制1C（TCON）将信号传输至面板上的行列驱动IC. Sealer芯片的性能基本上决定了信号处理的极限能力。另外，在Sealer电路中，一般还集成有屏显电路（OSD电路）。</p>\n<p>液晶显示器为什么要对信号进行缩放处理呢？这是由于一个面板的画素位置与分辨率在制造完成后就已经固定，但是影音装置输出的分辨率却是多元的，当液晶面板必须接收不同分辨率的影音信号时，就要经过缩放处理才能适合一个屏幕的大小，所以信号需要经过Sealer芯片进行缩放处理。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/23941934\">读懂电视进化史：CRT、背投、PDP、LCD、OLED</a><br><a href=\"https://wenku.baidu.com/view/6aaa0fa9b0717fd5360cdc59.html\">显示器基本构成</a><br><a href=\"https://new.qq.com/omn/20191015/20191015A0Q0VZ00.html\">薄薄的液晶显示器是如何显示各种图案</a><br><a href=\"https://www.zhihu.com/question/19571221/answer/569037388\">显示器接口类型</a></p>\n</blockquote>\n"},{"title":"⛵︎数字到图像（1）--不同数据类型协议转图片","date":"2021-11-05T16:00:00.000Z","_content":"前端根据后端数据生成可显示图像是一个比较常见的功能，比如验证码，动态海报。\n后端传数据到前端，前端解析成校可视化验数据。\n\n解析过程：**指定数据类型**  → **根据相关协议显示**。\n\n解析包括两个维度：\n\n1.类型\n解析后台数据，首先需要确定，返回数据类型，一般返回类型有 **blob**, **arraybuffer**。\n\n2.协议\n可视化展示需要指定协议，常用协议有 **blob:** ,**data**。\n\n### diff xhr.responseType + diff protocol\n\n#### 1.responseType: blob\n##### 1.1 URL.createObjectURL(blob);\n```js\nverificationCode().then(async blob => {\n this.url =  window.URL.createObjectURL(blob);\n}\n\n```\n  Object URL 是一种伪协议，也被称为 Blob URL。它允许 Blob 或 File 对象用作图像，下载二进制数据链接等的 URL 源。在浏览器中，我们使用 URL.createObjectURL 方法来创建 Blob URL，该方法接收一个 Blob 对象，并为其创建一个唯一的 URL，其形式为 blob:<origin>/<uuid>，对应的示例如下：\n\n```js\nblob:https://example.org/40a5fb5a-d56d-4a33-b4e2-0acf6a8e5f641\n```\n浏览器内部为每个通过 URL.createObjectURL 生成的 URL 存储了一个 URL → Blob 映射。因此，此类 URL 较短，但可以访问 Blob。生成的 URL 仅在当前文档打开的状态下才有效。但如果你访问的 Blob URL 不再存在，则会从浏览器中收到 404 错误。\n\n缺点：虽然存储了 URL → Blob 的映射，但 Blob 本身仍驻留在内存中，浏览器无法释放它。映射在文档卸载时自动清除，因此 Blob 对象随后被释放。但是，如果应用程序寿命很长，那不会很快发生。因此，如果我们创建一个 Blob URL，即使不再需要该 Blob，它也会存在内存中。\n\n针对这个问题，我们可以调用 URL.revokeObjectURL(url) 方法，从内部映射中删除引用，从而允许删除 Blob（如果没有其他引用），并释放内存。\n##### 1.2  blob协议转data协议\n ```js\n const blobToBase64 = (blob)  => {\n      return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n        fileReader.onload = e => {\n          resolve(e.target.result);\n        };\n        fileReader.readAsDataURL(blob);\n        fileReader.onerror = () => {\n          reject(new Error(\"文件流异常\"));\n        };\n      });\n }\nverificationCode().then(async blob => {\n  this.url = blobToBase64(blob)\n}\n\n```\nbase64是  Data URI协议的一种实现，在1998年被确定，具体[Data URI详细介绍](https://www.cnblogs.com/hustskyking/p/data-uri.html)。\n##### 1.3 blob 转 arraybuffer 转 data\n```js\nverificationCode().then(async blob => {\n  transformArrayBufferToBase64(response);\n}\n\nconst async transformArrayBufferToBase64 = (response) => {\n      response = await this.fileReadAsArrayBuffer(response);\n      this.url =\n        \"data:image/png;base64,\" +\n        btoa(\n          new Uint8Array(response).reduce(\n            (data, byte) => data + String.fromCharCode(byte),\n            \"\"\n          )\n        );\n }\n```\n####  2.responseType: arraybuffer\n##### 2.1 arraybuffer 转 base64\n```js\nverificationCode().then(blob => {\n    this.url = \"data:image/png;base64,\" +\n          btoa(\n            new Uint8Array(response).reduce(\n              (data, byte) => data + String.fromCharCode(byte),\n              \"\"\n            )\n          );\n}\n\n```\n\n#### 额外知识点\narraybuffer转Blob\n\n ```js\nvar buffer = new ArrayBuffer(16);\nvar blob = new Blob([buffer]);\n```\nblob转arraybuffer\n借助FileReader对象\n```js\nvar blob = new Blob([1,2,3,4,5]);\nvar reader = new FileReader();\n\nreader.onload = function() {\n    console.log(this.result);\n}\nreader.readAsArrayBuffer(blob);\n```\n>  File FileList FileReader关系：\nFileReader只能读取 File或者 blob对象，File对象是[FileList](https://developer.mozilla.org/zh-CN/docs/Web/API/FileList)的子集.\n\n### http 如何指定xhr.response的数据类型\n有些时候我们希望xhr.response返回的就是我们想要的数据类型。比如：响应返回的数据是纯JSON字符串，但我们期望最终通过xhr.response拿到的直接就是一个 js 对象，我们该怎么实现呢？\n有2种方法可以实现，一个是level 1就提供的overrideMimeType()方法，另一个是level 2才提供的xhr.responseType属性。\n##### xhr.overrideMimeType()\noverrideMimeType是xhr level 1就有的方法\n如果服务器没有指定一个`[Content-Type]` 头, [`XMLHttpRequest`](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest) 默认MIME类型为`\"text/xml\"`. 如果接受的数据不是有效的XML，将会出现格”格式不正确“的错误。你能够通过调用 `overrideMimeType()` 指定各种类型来避免这种情况。\n```js\n// Interpret the received data as plain text\n\nreq = new XMLHttpRequest();\nreq.overrideMimeType(\"text/plain\");\nreq.addEventListener(\"load\", callback, false);\nreq.open(\"get\", url);\nreq.send();\n\n```\n\n\n再举一个使用场景，我们都知道xhr level 1不支持直接传输blob二进制数据，那如果真要传输 blob 该怎么办呢？当时就是利用overrideMimeType方法来解决这个问题的。\n\n下面是一个获取图片文件的代码示例：\n\n ```js\nvar xhr = new XMLHttpRequest();\n//向 server 端获取一张图片\nxhr.open('GET', '/path/to/image.png', true);\n\n// 这行是关键！\n//将响应数据按照纯文本格式来解析，字符集替换为用户自己定义的字符集\nxhr.overrideMimeType('text/plain; charset=x-user-defined');\n\nxhr.onreadystatechange = function(e) {\n  if (this.readyState == 4 && this.status == 200) {\n    //通过 responseText 来获取图片文件对应的二进制字符串\n    var binStr = this.responseText;\n    //然后自己再想方法将逐个字节还原为二进制数据\n    for (var i = 0, len = binStr.length; i < len; ++i) {\n      var c = binStr.charCodeAt(i);\n      //String.fromCharCode(c & 0xff);\n      var byte = c & 0xff; \n    }\n  }\n};\n\nxhr.send();\n```\n\n代码示例中xhr请求的是一张图片，通过将 response 的 content-type 改为'text/plain; charset=x-user-defined'，使得 xhr 以纯文本格式来解析接收到的blob 数据，最终用户通过this.responseText拿到的就是图片文件对应的二进制字符串，最后再将其转换为 blob 数据。\n\n\n##### xhr.responseType\n下面是同样是获取一张图片的代码示例，相比xhr.overrideMimeType,用xhr.response来实现简单得多。\n\n```js\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', '/path/to/image.png', true);\n//可以将`xhr.responseType`设置为`\"blob\"`也可以设置为`\" arrayBuffer\"`\n//xhr.responseType = 'arrayBuffer';\nxhr.responseType = 'blob';\n\nxhr.onload = function(e) {\n  if (this.status == 200) {\n    var blob = this.response;\n    ...\n  }\n};\n\nxhr.send();\n```\n\n简单来说，responseType就是把文本转换成 二进制了，二进制和文本怎么转换呢,请看下文分解\n\n#### 参考资源\n\n>  [玩转前端二进制](https://segmentfault.com/a/1190000023101367)\n[前端二进制学习](https://www.zhuyuntao.cn/%E5%89%8D%E7%AB%AF%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89)\n[你真的会使用XMLHttpRequest吗](https://segmentfault.com/a/1190000004322487#articleHeader7)\n[JS字符串与二进制的相互转化实例代码详解](https://www.jb51.net/article/164158.htm)\n[玩转图片流](https://juejin.cn/post/6844903553140523021#heading-5)[Base64编码原理与应用](http://blog.xiayf.cn/2016/01/24/base64-encoding)\n[Data URI详细介绍](https://juejin.cn/post/6844903940690018312)\n[细说 Data URI](https://www.cnblogs.com/hustskyking/p/data-uri.html)\n>\n","source":"_posts/⛵︎数字到图像（1）--不同数据类型协议转图片.md","raw":"---\ntitle: \"⛵︎数字到图像（1）--不同数据类型协议转图片\"\ndate: 2021-11-06\ntags: \n- 开发日常\n---\n前端根据后端数据生成可显示图像是一个比较常见的功能，比如验证码，动态海报。\n后端传数据到前端，前端解析成校可视化验数据。\n\n解析过程：**指定数据类型**  → **根据相关协议显示**。\n\n解析包括两个维度：\n\n1.类型\n解析后台数据，首先需要确定，返回数据类型，一般返回类型有 **blob**, **arraybuffer**。\n\n2.协议\n可视化展示需要指定协议，常用协议有 **blob:** ,**data**。\n\n### diff xhr.responseType + diff protocol\n\n#### 1.responseType: blob\n##### 1.1 URL.createObjectURL(blob);\n```js\nverificationCode().then(async blob => {\n this.url =  window.URL.createObjectURL(blob);\n}\n\n```\n  Object URL 是一种伪协议，也被称为 Blob URL。它允许 Blob 或 File 对象用作图像，下载二进制数据链接等的 URL 源。在浏览器中，我们使用 URL.createObjectURL 方法来创建 Blob URL，该方法接收一个 Blob 对象，并为其创建一个唯一的 URL，其形式为 blob:<origin>/<uuid>，对应的示例如下：\n\n```js\nblob:https://example.org/40a5fb5a-d56d-4a33-b4e2-0acf6a8e5f641\n```\n浏览器内部为每个通过 URL.createObjectURL 生成的 URL 存储了一个 URL → Blob 映射。因此，此类 URL 较短，但可以访问 Blob。生成的 URL 仅在当前文档打开的状态下才有效。但如果你访问的 Blob URL 不再存在，则会从浏览器中收到 404 错误。\n\n缺点：虽然存储了 URL → Blob 的映射，但 Blob 本身仍驻留在内存中，浏览器无法释放它。映射在文档卸载时自动清除，因此 Blob 对象随后被释放。但是，如果应用程序寿命很长，那不会很快发生。因此，如果我们创建一个 Blob URL，即使不再需要该 Blob，它也会存在内存中。\n\n针对这个问题，我们可以调用 URL.revokeObjectURL(url) 方法，从内部映射中删除引用，从而允许删除 Blob（如果没有其他引用），并释放内存。\n##### 1.2  blob协议转data协议\n ```js\n const blobToBase64 = (blob)  => {\n      return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n        fileReader.onload = e => {\n          resolve(e.target.result);\n        };\n        fileReader.readAsDataURL(blob);\n        fileReader.onerror = () => {\n          reject(new Error(\"文件流异常\"));\n        };\n      });\n }\nverificationCode().then(async blob => {\n  this.url = blobToBase64(blob)\n}\n\n```\nbase64是  Data URI协议的一种实现，在1998年被确定，具体[Data URI详细介绍](https://www.cnblogs.com/hustskyking/p/data-uri.html)。\n##### 1.3 blob 转 arraybuffer 转 data\n```js\nverificationCode().then(async blob => {\n  transformArrayBufferToBase64(response);\n}\n\nconst async transformArrayBufferToBase64 = (response) => {\n      response = await this.fileReadAsArrayBuffer(response);\n      this.url =\n        \"data:image/png;base64,\" +\n        btoa(\n          new Uint8Array(response).reduce(\n            (data, byte) => data + String.fromCharCode(byte),\n            \"\"\n          )\n        );\n }\n```\n####  2.responseType: arraybuffer\n##### 2.1 arraybuffer 转 base64\n```js\nverificationCode().then(blob => {\n    this.url = \"data:image/png;base64,\" +\n          btoa(\n            new Uint8Array(response).reduce(\n              (data, byte) => data + String.fromCharCode(byte),\n              \"\"\n            )\n          );\n}\n\n```\n\n#### 额外知识点\narraybuffer转Blob\n\n ```js\nvar buffer = new ArrayBuffer(16);\nvar blob = new Blob([buffer]);\n```\nblob转arraybuffer\n借助FileReader对象\n```js\nvar blob = new Blob([1,2,3,4,5]);\nvar reader = new FileReader();\n\nreader.onload = function() {\n    console.log(this.result);\n}\nreader.readAsArrayBuffer(blob);\n```\n>  File FileList FileReader关系：\nFileReader只能读取 File或者 blob对象，File对象是[FileList](https://developer.mozilla.org/zh-CN/docs/Web/API/FileList)的子集.\n\n### http 如何指定xhr.response的数据类型\n有些时候我们希望xhr.response返回的就是我们想要的数据类型。比如：响应返回的数据是纯JSON字符串，但我们期望最终通过xhr.response拿到的直接就是一个 js 对象，我们该怎么实现呢？\n有2种方法可以实现，一个是level 1就提供的overrideMimeType()方法，另一个是level 2才提供的xhr.responseType属性。\n##### xhr.overrideMimeType()\noverrideMimeType是xhr level 1就有的方法\n如果服务器没有指定一个`[Content-Type]` 头, [`XMLHttpRequest`](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest) 默认MIME类型为`\"text/xml\"`. 如果接受的数据不是有效的XML，将会出现格”格式不正确“的错误。你能够通过调用 `overrideMimeType()` 指定各种类型来避免这种情况。\n```js\n// Interpret the received data as plain text\n\nreq = new XMLHttpRequest();\nreq.overrideMimeType(\"text/plain\");\nreq.addEventListener(\"load\", callback, false);\nreq.open(\"get\", url);\nreq.send();\n\n```\n\n\n再举一个使用场景，我们都知道xhr level 1不支持直接传输blob二进制数据，那如果真要传输 blob 该怎么办呢？当时就是利用overrideMimeType方法来解决这个问题的。\n\n下面是一个获取图片文件的代码示例：\n\n ```js\nvar xhr = new XMLHttpRequest();\n//向 server 端获取一张图片\nxhr.open('GET', '/path/to/image.png', true);\n\n// 这行是关键！\n//将响应数据按照纯文本格式来解析，字符集替换为用户自己定义的字符集\nxhr.overrideMimeType('text/plain; charset=x-user-defined');\n\nxhr.onreadystatechange = function(e) {\n  if (this.readyState == 4 && this.status == 200) {\n    //通过 responseText 来获取图片文件对应的二进制字符串\n    var binStr = this.responseText;\n    //然后自己再想方法将逐个字节还原为二进制数据\n    for (var i = 0, len = binStr.length; i < len; ++i) {\n      var c = binStr.charCodeAt(i);\n      //String.fromCharCode(c & 0xff);\n      var byte = c & 0xff; \n    }\n  }\n};\n\nxhr.send();\n```\n\n代码示例中xhr请求的是一张图片，通过将 response 的 content-type 改为'text/plain; charset=x-user-defined'，使得 xhr 以纯文本格式来解析接收到的blob 数据，最终用户通过this.responseText拿到的就是图片文件对应的二进制字符串，最后再将其转换为 blob 数据。\n\n\n##### xhr.responseType\n下面是同样是获取一张图片的代码示例，相比xhr.overrideMimeType,用xhr.response来实现简单得多。\n\n```js\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', '/path/to/image.png', true);\n//可以将`xhr.responseType`设置为`\"blob\"`也可以设置为`\" arrayBuffer\"`\n//xhr.responseType = 'arrayBuffer';\nxhr.responseType = 'blob';\n\nxhr.onload = function(e) {\n  if (this.status == 200) {\n    var blob = this.response;\n    ...\n  }\n};\n\nxhr.send();\n```\n\n简单来说，responseType就是把文本转换成 二进制了，二进制和文本怎么转换呢,请看下文分解\n\n#### 参考资源\n\n>  [玩转前端二进制](https://segmentfault.com/a/1190000023101367)\n[前端二进制学习](https://www.zhuyuntao.cn/%E5%89%8D%E7%AB%AF%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89)\n[你真的会使用XMLHttpRequest吗](https://segmentfault.com/a/1190000004322487#articleHeader7)\n[JS字符串与二进制的相互转化实例代码详解](https://www.jb51.net/article/164158.htm)\n[玩转图片流](https://juejin.cn/post/6844903553140523021#heading-5)[Base64编码原理与应用](http://blog.xiayf.cn/2016/01/24/base64-encoding)\n[Data URI详细介绍](https://juejin.cn/post/6844903940690018312)\n[细说 Data URI](https://www.cnblogs.com/hustskyking/p/data-uri.html)\n>\n","slug":"⛵︎数字到图像（1）--不同数据类型协议转图片","published":1,"updated":"2024-05-16T07:39:11.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mb001b2omv1zoz3w59","content":"<p>前端根据后端数据生成可显示图像是一个比较常见的功能，比如验证码，动态海报。<br>后端传数据到前端，前端解析成校可视化验数据。</p>\n<p>解析过程：<strong>指定数据类型</strong>  → <strong>根据相关协议显示</strong>。</p>\n<p>解析包括两个维度：</p>\n<p>1.类型<br>解析后台数据，首先需要确定，返回数据类型，一般返回类型有 <strong>blob</strong>, <strong>arraybuffer</strong>。</p>\n<p>2.协议<br>可视化展示需要指定协议，常用协议有 <strong>blob:</strong> ,<strong>data</strong>。</p>\n<h3 id=\"diff-xhr-responseType-diff-protocol\"><a href=\"#diff-xhr-responseType-diff-protocol\" class=\"headerlink\" title=\"diff xhr.responseType + diff protocol\"></a>diff xhr.responseType + diff protocol</h3><h4 id=\"1-responseType-blob\"><a href=\"#1-responseType-blob\" class=\"headerlink\" title=\"1.responseType: blob\"></a>1.responseType: blob</h4><h5 id=\"1-1-URL-createObjectURL-blob\"><a href=\"#1-1-URL-createObjectURL-blob\" class=\"headerlink\" title=\"1.1 URL.createObjectURL(blob);\"></a>1.1 URL.createObjectURL(blob);</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">verificationCode</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> blob =&gt; &#123;</span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> =  <span class=\"variable language_\">window</span>.<span class=\"property\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  Object URL 是一种伪协议，也被称为 Blob URL。它允许 Blob 或 File 对象用作图像，下载二进制数据链接等的 URL 源。在浏览器中，我们使用 URL.createObjectURL 方法来创建 Blob URL，该方法接收一个 Blob 对象，并为其创建一个唯一的 URL，其形式为 blob:<origin>&#x2F;<uuid>，对应的示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">blob</span>:<span class=\"attr\">https</span>:<span class=\"comment\">//example.org/40a5fb5a-d56d-4a33-b4e2-0acf6a8e5f641</span></span><br></pre></td></tr></table></figure>\n<p>浏览器内部为每个通过 URL.createObjectURL 生成的 URL 存储了一个 URL → Blob 映射。因此，此类 URL 较短，但可以访问 Blob。生成的 URL 仅在当前文档打开的状态下才有效。但如果你访问的 Blob URL 不再存在，则会从浏览器中收到 404 错误。</p>\n<p>缺点：虽然存储了 URL → Blob 的映射，但 Blob 本身仍驻留在内存中，浏览器无法释放它。映射在文档卸载时自动清除，因此 Blob 对象随后被释放。但是，如果应用程序寿命很长，那不会很快发生。因此，如果我们创建一个 Blob URL，即使不再需要该 Blob，它也会存在内存中。</p>\n<p>针对这个问题，我们可以调用 URL.revokeObjectURL(url) 方法，从内部映射中删除引用，从而允许删除 Blob（如果没有其他引用），并释放内存。</p>\n<h5 id=\"1-2-blob协议转data协议\"><a href=\"#1-2-blob协议转data协议\" class=\"headerlink\" title=\"1.2  blob协议转data协议\"></a>1.2  blob协议转data协议</h5> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"title function_\">blobToBase64</span> = (<span class=\"params\">blob</span>)  =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fileReader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">        fileReader.<span class=\"property\">onload</span> = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(e.<span class=\"property\">target</span>.<span class=\"property\">result</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        fileReader.<span class=\"title function_\">readAsDataURL</span>(blob);</span><br><span class=\"line\">        fileReader.<span class=\"property\">onerror</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;文件流异常&quot;</span>));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"title function_\">verificationCode</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> blob =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> = <span class=\"title function_\">blobToBase64</span>(blob)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>base64是  Data URI协议的一种实现，在1998年被确定，具体<a href=\"https://www.cnblogs.com/hustskyking/p/data-uri.html\">Data URI详细介绍</a>。</p>\n<h5 id=\"1-3-blob-转-arraybuffer-转-data\"><a href=\"#1-3-blob-转-arraybuffer-转-data\" class=\"headerlink\" title=\"1.3 blob 转 arraybuffer 转 data\"></a>1.3 blob 转 arraybuffer 转 data</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">verificationCode</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> blob =&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">transformArrayBufferToBase64</span>(response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">async</span> transformArrayBufferToBase64 = <span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      response = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">fileReadAsArrayBuffer</span>(response);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> =</span><br><span class=\"line\">        <span class=\"string\">&quot;data:image/png;base64,&quot;</span> +</span><br><span class=\"line\">        <span class=\"title function_\">btoa</span>(</span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(response).<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">data, byte</span>) =&gt;</span> data + <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(byte),</span><br><span class=\"line\">            <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">          )</span><br><span class=\"line\">        );</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-responseType-arraybuffer\"><a href=\"#2-responseType-arraybuffer\" class=\"headerlink\" title=\"2.responseType: arraybuffer\"></a>2.responseType: arraybuffer</h4><h5 id=\"2-1-arraybuffer-转-base64\"><a href=\"#2-1-arraybuffer-转-base64\" class=\"headerlink\" title=\"2.1 arraybuffer 转 base64\"></a>2.1 arraybuffer 转 base64</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">verificationCode</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">blob</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> = <span class=\"string\">&quot;data:image/png;base64,&quot;</span> +</span><br><span class=\"line\">          <span class=\"title function_\">btoa</span>(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(response).<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">              <span class=\"function\">(<span class=\"params\">data, byte</span>) =&gt;</span> data + <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(byte),</span><br><span class=\"line\">              <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">          );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"额外知识点\"><a href=\"#额外知识点\" class=\"headerlink\" title=\"额外知识点\"></a>额外知识点</h4><p>arraybuffer转Blob</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([buffer]);</span><br></pre></td></tr></table></figure>\n<p>blob转arraybuffer<br>借助FileReader对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">result</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reader.<span class=\"title function_\">readAsArrayBuffer</span>(blob);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> File FileList FileReader关系：<br>FileReader只能读取 File或者 blob对象，File对象是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileList\">FileList</a>的子集.</p>\n</blockquote>\n<h3 id=\"http-如何指定xhr-response的数据类型\"><a href=\"#http-如何指定xhr-response的数据类型\" class=\"headerlink\" title=\"http 如何指定xhr.response的数据类型\"></a>http 如何指定xhr.response的数据类型</h3><p>有些时候我们希望xhr.response返回的就是我们想要的数据类型。比如：响应返回的数据是纯JSON字符串，但我们期望最终通过xhr.response拿到的直接就是一个 js 对象，我们该怎么实现呢？<br>有2种方法可以实现，一个是level 1就提供的overrideMimeType()方法，另一个是level 2才提供的xhr.responseType属性。</p>\n<h5 id=\"xhr-overrideMimeType\"><a href=\"#xhr-overrideMimeType\" class=\"headerlink\" title=\"xhr.overrideMimeType()\"></a>xhr.overrideMimeType()</h5><p>overrideMimeType是xhr level 1就有的方法<br>如果服务器没有指定一个<code>[Content-Type]</code> 头, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 默认MIME类型为<code>&quot;text/xml&quot;</code>. 如果接受的数据不是有效的XML，将会出现格”格式不正确“的错误。你能够通过调用 <code>overrideMimeType()</code> 指定各种类型来避免这种情况。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Interpret the received data as plain text</span></span><br><span class=\"line\"></span><br><span class=\"line\">req = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">req.<span class=\"title function_\">overrideMimeType</span>(<span class=\"string\">&quot;text/plain&quot;</span>);</span><br><span class=\"line\">req.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;load&quot;</span>, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">req.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;get&quot;</span>, url);</span><br><span class=\"line\">req.<span class=\"title function_\">send</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>再举一个使用场景，我们都知道xhr level 1不支持直接传输blob二进制数据，那如果真要传输 blob 该怎么办呢？当时就是利用overrideMimeType方法来解决这个问题的。</p>\n<p>下面是一个获取图片文件的代码示例：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\"><span class=\"comment\">//向 server 端获取一张图片</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;/path/to/image.png&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这行是关键！</span></span><br><span class=\"line\"><span class=\"comment\">//将响应数据按照纯文本格式来解析，字符集替换为用户自己定义的字符集</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">overrideMimeType</span>(<span class=\"string\">&#x27;text/plain; charset=x-user-defined&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过 responseText 来获取图片文件对应的二进制字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> binStr = <span class=\"variable language_\">this</span>.<span class=\"property\">responseText</span>;</span><br><span class=\"line\">    <span class=\"comment\">//然后自己再想方法将逐个字节还原为二进制数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = binStr.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> c = binStr.<span class=\"title function_\">charCodeAt</span>(i);</span><br><span class=\"line\">      <span class=\"comment\">//String.fromCharCode(c &amp; 0xff);</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> byte = c &amp; <span class=\"number\">0xff</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>代码示例中xhr请求的是一张图片，通过将 response 的 content-type 改为’text&#x2F;plain; charset&#x3D;x-user-defined’，使得 xhr 以纯文本格式来解析接收到的blob 数据，最终用户通过this.responseText拿到的就是图片文件对应的二进制字符串，最后再将其转换为 blob 数据。</p>\n<h5 id=\"xhr-responseType\"><a href=\"#xhr-responseType\" class=\"headerlink\" title=\"xhr.responseType\"></a>xhr.responseType</h5><p>下面是同样是获取一张图片的代码示例，相比xhr.overrideMimeType,用xhr.response来实现简单得多。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;/path/to/image.png&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//可以将`xhr.responseType`设置为`&quot;blob&quot;`也可以设置为`&quot; arrayBuffer&quot;`</span></span><br><span class=\"line\"><span class=\"comment\">//xhr.responseType = &#x27;arrayBuffer&#x27;;</span></span><br><span class=\"line\">xhr.<span class=\"property\">responseType</span> = <span class=\"string\">&#x27;blob&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blob = <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>简单来说，responseType就是把文本转换成 二进制了，二进制和文本怎么转换呢,请看下文分解</p>\n<h4 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h4><blockquote>\n<p> <a href=\"https://segmentfault.com/a/1190000023101367\">玩转前端二进制</a><br><a href=\"https://www.zhuyuntao.cn/%E5%89%8D%E7%AB%AF%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89\">前端二进制学习</a><br><a href=\"https://segmentfault.com/a/1190000004322487#articleHeader7\">你真的会使用XMLHttpRequest吗</a><br><a href=\"https://www.jb51.net/article/164158.htm\">JS字符串与二进制的相互转化实例代码详解</a><br><a href=\"https://juejin.cn/post/6844903553140523021#heading-5\">玩转图片流</a><a href=\"http://blog.xiayf.cn/2016/01/24/base64-encoding\">Base64编码原理与应用</a><br><a href=\"https://juejin.cn/post/6844903940690018312\">Data URI详细介绍</a><br><a href=\"https://www.cnblogs.com/hustskyking/p/data-uri.html\">细说 Data URI</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p>前端根据后端数据生成可显示图像是一个比较常见的功能，比如验证码，动态海报。<br>后端传数据到前端，前端解析成校可视化验数据。</p>\n<p>解析过程：<strong>指定数据类型</strong>  → <strong>根据相关协议显示</strong>。</p>\n<p>解析包括两个维度：</p>\n<p>1.类型<br>解析后台数据，首先需要确定，返回数据类型，一般返回类型有 <strong>blob</strong>, <strong>arraybuffer</strong>。</p>\n<p>2.协议<br>可视化展示需要指定协议，常用协议有 <strong>blob:</strong> ,<strong>data</strong>。</p>\n<h3 id=\"diff-xhr-responseType-diff-protocol\"><a href=\"#diff-xhr-responseType-diff-protocol\" class=\"headerlink\" title=\"diff xhr.responseType + diff protocol\"></a>diff xhr.responseType + diff protocol</h3><h4 id=\"1-responseType-blob\"><a href=\"#1-responseType-blob\" class=\"headerlink\" title=\"1.responseType: blob\"></a>1.responseType: blob</h4><h5 id=\"1-1-URL-createObjectURL-blob\"><a href=\"#1-1-URL-createObjectURL-blob\" class=\"headerlink\" title=\"1.1 URL.createObjectURL(blob);\"></a>1.1 URL.createObjectURL(blob);</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">verificationCode</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> blob =&gt; &#123;</span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> =  <span class=\"variable language_\">window</span>.<span class=\"property\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  Object URL 是一种伪协议，也被称为 Blob URL。它允许 Blob 或 File 对象用作图像，下载二进制数据链接等的 URL 源。在浏览器中，我们使用 URL.createObjectURL 方法来创建 Blob URL，该方法接收一个 Blob 对象，并为其创建一个唯一的 URL，其形式为 blob:<origin>&#x2F;<uuid>，对应的示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">blob</span>:<span class=\"attr\">https</span>:<span class=\"comment\">//example.org/40a5fb5a-d56d-4a33-b4e2-0acf6a8e5f641</span></span><br></pre></td></tr></table></figure>\n<p>浏览器内部为每个通过 URL.createObjectURL 生成的 URL 存储了一个 URL → Blob 映射。因此，此类 URL 较短，但可以访问 Blob。生成的 URL 仅在当前文档打开的状态下才有效。但如果你访问的 Blob URL 不再存在，则会从浏览器中收到 404 错误。</p>\n<p>缺点：虽然存储了 URL → Blob 的映射，但 Blob 本身仍驻留在内存中，浏览器无法释放它。映射在文档卸载时自动清除，因此 Blob 对象随后被释放。但是，如果应用程序寿命很长，那不会很快发生。因此，如果我们创建一个 Blob URL，即使不再需要该 Blob，它也会存在内存中。</p>\n<p>针对这个问题，我们可以调用 URL.revokeObjectURL(url) 方法，从内部映射中删除引用，从而允许删除 Blob（如果没有其他引用），并释放内存。</p>\n<h5 id=\"1-2-blob协议转data协议\"><a href=\"#1-2-blob协议转data协议\" class=\"headerlink\" title=\"1.2  blob协议转data协议\"></a>1.2  blob协议转data协议</h5> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"title function_\">blobToBase64</span> = (<span class=\"params\">blob</span>)  =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fileReader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">        fileReader.<span class=\"property\">onload</span> = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(e.<span class=\"property\">target</span>.<span class=\"property\">result</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        fileReader.<span class=\"title function_\">readAsDataURL</span>(blob);</span><br><span class=\"line\">        fileReader.<span class=\"property\">onerror</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;文件流异常&quot;</span>));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"title function_\">verificationCode</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> blob =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> = <span class=\"title function_\">blobToBase64</span>(blob)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>base64是  Data URI协议的一种实现，在1998年被确定，具体<a href=\"https://www.cnblogs.com/hustskyking/p/data-uri.html\">Data URI详细介绍</a>。</p>\n<h5 id=\"1-3-blob-转-arraybuffer-转-data\"><a href=\"#1-3-blob-转-arraybuffer-转-data\" class=\"headerlink\" title=\"1.3 blob 转 arraybuffer 转 data\"></a>1.3 blob 转 arraybuffer 转 data</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">verificationCode</span>().<span class=\"title function_\">then</span>(<span class=\"keyword\">async</span> blob =&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">transformArrayBufferToBase64</span>(response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">async</span> transformArrayBufferToBase64 = <span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      response = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">fileReadAsArrayBuffer</span>(response);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> =</span><br><span class=\"line\">        <span class=\"string\">&quot;data:image/png;base64,&quot;</span> +</span><br><span class=\"line\">        <span class=\"title function_\">btoa</span>(</span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(response).<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">data, byte</span>) =&gt;</span> data + <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(byte),</span><br><span class=\"line\">            <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">          )</span><br><span class=\"line\">        );</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-responseType-arraybuffer\"><a href=\"#2-responseType-arraybuffer\" class=\"headerlink\" title=\"2.responseType: arraybuffer\"></a>2.responseType: arraybuffer</h4><h5 id=\"2-1-arraybuffer-转-base64\"><a href=\"#2-1-arraybuffer-转-base64\" class=\"headerlink\" title=\"2.1 arraybuffer 转 base64\"></a>2.1 arraybuffer 转 base64</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">verificationCode</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">blob</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">url</span> = <span class=\"string\">&quot;data:image/png;base64,&quot;</span> +</span><br><span class=\"line\">          <span class=\"title function_\">btoa</span>(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(response).<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">              <span class=\"function\">(<span class=\"params\">data, byte</span>) =&gt;</span> data + <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(byte),</span><br><span class=\"line\">              <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">          );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"额外知识点\"><a href=\"#额外知识点\" class=\"headerlink\" title=\"额外知识点\"></a>额外知识点</h4><p>arraybuffer转Blob</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([buffer]);</span><br></pre></td></tr></table></figure>\n<p>blob转arraybuffer<br>借助FileReader对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">result</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reader.<span class=\"title function_\">readAsArrayBuffer</span>(blob);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> File FileList FileReader关系：<br>FileReader只能读取 File或者 blob对象，File对象是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileList\">FileList</a>的子集.</p>\n</blockquote>\n<h3 id=\"http-如何指定xhr-response的数据类型\"><a href=\"#http-如何指定xhr-response的数据类型\" class=\"headerlink\" title=\"http 如何指定xhr.response的数据类型\"></a>http 如何指定xhr.response的数据类型</h3><p>有些时候我们希望xhr.response返回的就是我们想要的数据类型。比如：响应返回的数据是纯JSON字符串，但我们期望最终通过xhr.response拿到的直接就是一个 js 对象，我们该怎么实现呢？<br>有2种方法可以实现，一个是level 1就提供的overrideMimeType()方法，另一个是level 2才提供的xhr.responseType属性。</p>\n<h5 id=\"xhr-overrideMimeType\"><a href=\"#xhr-overrideMimeType\" class=\"headerlink\" title=\"xhr.overrideMimeType()\"></a>xhr.overrideMimeType()</h5><p>overrideMimeType是xhr level 1就有的方法<br>如果服务器没有指定一个<code>[Content-Type]</code> 头, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 默认MIME类型为<code>&quot;text/xml&quot;</code>. 如果接受的数据不是有效的XML，将会出现格”格式不正确“的错误。你能够通过调用 <code>overrideMimeType()</code> 指定各种类型来避免这种情况。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Interpret the received data as plain text</span></span><br><span class=\"line\"></span><br><span class=\"line\">req = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">req.<span class=\"title function_\">overrideMimeType</span>(<span class=\"string\">&quot;text/plain&quot;</span>);</span><br><span class=\"line\">req.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;load&quot;</span>, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">req.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;get&quot;</span>, url);</span><br><span class=\"line\">req.<span class=\"title function_\">send</span>();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>再举一个使用场景，我们都知道xhr level 1不支持直接传输blob二进制数据，那如果真要传输 blob 该怎么办呢？当时就是利用overrideMimeType方法来解决这个问题的。</p>\n<p>下面是一个获取图片文件的代码示例：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\"><span class=\"comment\">//向 server 端获取一张图片</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;/path/to/image.png&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这行是关键！</span></span><br><span class=\"line\"><span class=\"comment\">//将响应数据按照纯文本格式来解析，字符集替换为用户自己定义的字符集</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">overrideMimeType</span>(<span class=\"string\">&#x27;text/plain; charset=x-user-defined&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过 responseText 来获取图片文件对应的二进制字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> binStr = <span class=\"variable language_\">this</span>.<span class=\"property\">responseText</span>;</span><br><span class=\"line\">    <span class=\"comment\">//然后自己再想方法将逐个字节还原为二进制数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = binStr.<span class=\"property\">length</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> c = binStr.<span class=\"title function_\">charCodeAt</span>(i);</span><br><span class=\"line\">      <span class=\"comment\">//String.fromCharCode(c &amp; 0xff);</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> byte = c &amp; <span class=\"number\">0xff</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>代码示例中xhr请求的是一张图片，通过将 response 的 content-type 改为’text&#x2F;plain; charset&#x3D;x-user-defined’，使得 xhr 以纯文本格式来解析接收到的blob 数据，最终用户通过this.responseText拿到的就是图片文件对应的二进制字符串，最后再将其转换为 blob 数据。</p>\n<h5 id=\"xhr-responseType\"><a href=\"#xhr-responseType\" class=\"headerlink\" title=\"xhr.responseType\"></a>xhr.responseType</h5><p>下面是同样是获取一张图片的代码示例，相比xhr.overrideMimeType,用xhr.response来实现简单得多。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;/path/to/image.png&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//可以将`xhr.responseType`设置为`&quot;blob&quot;`也可以设置为`&quot; arrayBuffer&quot;`</span></span><br><span class=\"line\"><span class=\"comment\">//xhr.responseType = &#x27;arrayBuffer&#x27;;</span></span><br><span class=\"line\">xhr.<span class=\"property\">responseType</span> = <span class=\"string\">&#x27;blob&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blob = <span class=\"variable language_\">this</span>.<span class=\"property\">response</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>简单来说，responseType就是把文本转换成 二进制了，二进制和文本怎么转换呢,请看下文分解</p>\n<h4 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h4><blockquote>\n<p> <a href=\"https://segmentfault.com/a/1190000023101367\">玩转前端二进制</a><br><a href=\"https://www.zhuyuntao.cn/%E5%89%8D%E7%AB%AF%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89\">前端二进制学习</a><br><a href=\"https://segmentfault.com/a/1190000004322487#articleHeader7\">你真的会使用XMLHttpRequest吗</a><br><a href=\"https://www.jb51.net/article/164158.htm\">JS字符串与二进制的相互转化实例代码详解</a><br><a href=\"https://juejin.cn/post/6844903553140523021#heading-5\">玩转图片流</a><a href=\"http://blog.xiayf.cn/2016/01/24/base64-encoding\">Base64编码原理与应用</a><br><a href=\"https://juejin.cn/post/6844903940690018312\">Data URI详细介绍</a><br><a href=\"https://www.cnblogs.com/hustskyking/p/data-uri.html\">细说 Data URI</a></p>\n</blockquote>\n"},{"title":"⛵︎数据到图像-（2）浏览器渲染","date":"2021-11-08T16:00:00.000Z","_content":"\n\n### chrome渲染图像过程\n\n\n![](https://upload-images.jianshu.io/upload_images/15312191-7e4f1719e8dc88b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n过程：\n- **普通HTML**  ➡ **dom** ➡ **skia** \n-**webGl** ➡ **OpenGL**\n\n### 问题：chrome怎么跨平台\nchrome 在安卓，iOS，Mac,windows,linux都有安装包，chrome作为浏览器怎么做到兼容问题的呢。\n\n### 解决方案：skia \n\n **Skia Graphics Library**（SGL）是一个由C++编写的开放源代码图形库\nSkia主要的类别是SkCanvas，所有的绘图功能都是实现于此类别。以下是SGL简单的代码：\n\n```c\nSkCanvas* can = GraphicsJNI::getNativeCanvas(...);      \nSkPaint paint;    \npaint.setARGB(255, 0, 0, 255);\ncan->drawText(\"Hello, world\", 12, 10, 10, paint);\n```\n\n\n## 计算机如何处理浏览器数据\n![](https://upload-images.jianshu.io/upload_images/15312191-a5635d677ddbcf13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n从理论上，我可以用上图的这种键盘按照一定的编码敲出一长串0、1数字序列，再加一个jpg/png的后缀名保存。\n\n打开文件时，是将这些数据送入内存，图片查看程序控制CPU，根据后缀名对数据进行解码、解压后得到图像本身的数据——每个像素的RGB等。\n\n再历经前面所述的一大串过程，CPU的数据再经过显卡和显示器，最终我就能看到一张滑稽的照片\n![](https://upload-images.jianshu.io/upload_images/15312191-06f06c6fd953fd7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 计算机怎么绘制系统UI的\n\n##### windows图像绘制\n操作系统有一套 GUI API ,提供给开发者调用\n电脑不同应用，使用不同绘制模型，比如windows10 系统，同时运行 画布，有道云笔记，魔兽世界3D游戏\n![](https://upload-images.jianshu.io/upload_images/15312191-a9ba87d41f00f53a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n渲染过程：\napplication ➡ OpenGl(Direct) ➡ display driver ➡ screen\n##### 安卓系统图像绘制\n\n![](https://upload-images.jianshu.io/upload_images/15312191-4d83c4a6aa27e6e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n> [一步一步解码 PNG 图片](https://vivaxyblog.github.io/2019/12/07/decode-a-png-image-with-javascript-cn.html)\n《编码，隐藏在计算机软硬件背后的语言》\n[猴子也能看懂的渲染管线（Render Pipeline)](https://zhuanlan.zhihu.com/p/137780634)\n[GPU 观察](https://www.gpuinsight.com/)\n[一颗像素的诞生](https://mp.weixin.qq.com/s/QoFrdmxdRJG5ETQp5Ua3-A)\\\n[Life of a pixe](https://www.youtube.com/watch?v=m-J-tbAlFic)\n> [skia简介](https://www.daimajiaoliu.com/daima/47da647f6900408)\n> https://mp.processon.com/view/link/5ec33e0ff346fb690701ff6c\n[GPU渲染管线之旅](https://www.zhihu.com/column/c_1265245746099941376)\n","source":"_posts/⛵︎数据到图像-（2）浏览器渲染.md","raw":"---\ntitle: \"⛵︎数据到图像-（2）浏览器渲染\"\ndate: 2021-11-09\ntags: \n- 开发日常\n---\n\n\n### chrome渲染图像过程\n\n\n![](https://upload-images.jianshu.io/upload_images/15312191-7e4f1719e8dc88b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n过程：\n- **普通HTML**  ➡ **dom** ➡ **skia** \n-**webGl** ➡ **OpenGL**\n\n### 问题：chrome怎么跨平台\nchrome 在安卓，iOS，Mac,windows,linux都有安装包，chrome作为浏览器怎么做到兼容问题的呢。\n\n### 解决方案：skia \n\n **Skia Graphics Library**（SGL）是一个由C++编写的开放源代码图形库\nSkia主要的类别是SkCanvas，所有的绘图功能都是实现于此类别。以下是SGL简单的代码：\n\n```c\nSkCanvas* can = GraphicsJNI::getNativeCanvas(...);      \nSkPaint paint;    \npaint.setARGB(255, 0, 0, 255);\ncan->drawText(\"Hello, world\", 12, 10, 10, paint);\n```\n\n\n## 计算机如何处理浏览器数据\n![](https://upload-images.jianshu.io/upload_images/15312191-a5635d677ddbcf13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n从理论上，我可以用上图的这种键盘按照一定的编码敲出一长串0、1数字序列，再加一个jpg/png的后缀名保存。\n\n打开文件时，是将这些数据送入内存，图片查看程序控制CPU，根据后缀名对数据进行解码、解压后得到图像本身的数据——每个像素的RGB等。\n\n再历经前面所述的一大串过程，CPU的数据再经过显卡和显示器，最终我就能看到一张滑稽的照片\n![](https://upload-images.jianshu.io/upload_images/15312191-06f06c6fd953fd7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 计算机怎么绘制系统UI的\n\n##### windows图像绘制\n操作系统有一套 GUI API ,提供给开发者调用\n电脑不同应用，使用不同绘制模型，比如windows10 系统，同时运行 画布，有道云笔记，魔兽世界3D游戏\n![](https://upload-images.jianshu.io/upload_images/15312191-a9ba87d41f00f53a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n渲染过程：\napplication ➡ OpenGl(Direct) ➡ display driver ➡ screen\n##### 安卓系统图像绘制\n\n![](https://upload-images.jianshu.io/upload_images/15312191-4d83c4a6aa27e6e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n> [一步一步解码 PNG 图片](https://vivaxyblog.github.io/2019/12/07/decode-a-png-image-with-javascript-cn.html)\n《编码，隐藏在计算机软硬件背后的语言》\n[猴子也能看懂的渲染管线（Render Pipeline)](https://zhuanlan.zhihu.com/p/137780634)\n[GPU 观察](https://www.gpuinsight.com/)\n[一颗像素的诞生](https://mp.weixin.qq.com/s/QoFrdmxdRJG5ETQp5Ua3-A)\\\n[Life of a pixe](https://www.youtube.com/watch?v=m-J-tbAlFic)\n> [skia简介](https://www.daimajiaoliu.com/daima/47da647f6900408)\n> https://mp.processon.com/view/link/5ec33e0ff346fb690701ff6c\n[GPU渲染管线之旅](https://www.zhihu.com/column/c_1265245746099941376)\n","slug":"⛵︎数据到图像-（2）浏览器渲染","published":1,"updated":"2024-05-16T07:39:11.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mc001d2omvaek87c7q","content":"<h3 id=\"chrome渲染图像过程\"><a href=\"#chrome渲染图像过程\" class=\"headerlink\" title=\"chrome渲染图像过程\"></a>chrome渲染图像过程</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7e4f1719e8dc88b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>过程：</p>\n<ul>\n<li><strong>普通HTML</strong>  ➡ <strong>dom</strong> ➡ <strong>skia</strong><br>-<strong>webGl</strong> ➡ <strong>OpenGL</strong></li>\n</ul>\n<h3 id=\"问题：chrome怎么跨平台\"><a href=\"#问题：chrome怎么跨平台\" class=\"headerlink\" title=\"问题：chrome怎么跨平台\"></a>问题：chrome怎么跨平台</h3><p>chrome 在安卓，iOS，Mac,windows,linux都有安装包，chrome作为浏览器怎么做到兼容问题的呢。</p>\n<h3 id=\"解决方案：skia\"><a href=\"#解决方案：skia\" class=\"headerlink\" title=\"解决方案：skia\"></a>解决方案：skia</h3><p> <strong>Skia Graphics Library</strong>（SGL）是一个由C++编写的开放源代码图形库<br>Skia主要的类别是SkCanvas，所有的绘图功能都是实现于此类别。以下是SGL简单的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SkCanvas* can = GraphicsJNI::getNativeCanvas(...);      </span><br><span class=\"line\">SkPaint paint;    </span><br><span class=\"line\">paint.setARGB(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\">can-&gt;drawText(<span class=\"string\">&quot;Hello, world&quot;</span>, <span class=\"number\">12</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, paint);</span><br></pre></td></tr></table></figure>\n\n\n<div class=\"\"><h2 id=\"计算机如何处理浏览器数据\"><a href=\"#计算机如何处理浏览器数据\" class=\"headerlink\" title=\"计算机如何处理浏览器数据\"></a>计算机如何处理浏览器数据</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a5635d677ddbcf13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>从理论上，我可以用上图的这种键盘按照一定的编码敲出一长串0、1数字序列，再加一个jpg&#x2F;png的后缀名保存。</p>\n<p>打开文件时，是将这些数据送入内存，图片查看程序控制CPU，根据后缀名对数据进行解码、解压后得到图像本身的数据——每个像素的RGB等。</p>\n<p>再历经前面所述的一大串过程，CPU的数据再经过显卡和显示器，最终我就能看到一张滑稽的照片<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-06f06c6fd953fd7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"计算机怎么绘制系统UI的\"><a href=\"#计算机怎么绘制系统UI的\" class=\"headerlink\" title=\"计算机怎么绘制系统UI的\"></a>计算机怎么绘制系统UI的</h4><h5 id=\"windows图像绘制\"><a href=\"#windows图像绘制\" class=\"headerlink\" title=\"windows图像绘制\"></a>windows图像绘制</h5><p>操作系统有一套 GUI API ,提供给开发者调用<br>电脑不同应用，使用不同绘制模型，比如windows10 系统，同时运行 画布，有道云笔记，魔兽世界3D游戏<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a9ba87d41f00f53a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>渲染过程：<br>application ➡ OpenGl(Direct) ➡ display driver ➡ screen</p>\n<h5 id=\"安卓系统图像绘制\"><a href=\"#安卓系统图像绘制\" class=\"headerlink\" title=\"安卓系统图像绘制\"></a>安卓系统图像绘制</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4d83c4a6aa27e6e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<blockquote>\n<p><a href=\"https://vivaxyblog.github.io/2019/12/07/decode-a-png-image-with-javascript-cn.html\">一步一步解码 PNG 图片</a><br>《编码，隐藏在计算机软硬件背后的语言》<br><a href=\"https://zhuanlan.zhihu.com/p/137780634\">猴子也能看懂的渲染管线（Render Pipeline)</a><br><a href=\"https://www.gpuinsight.com/\">GPU 观察</a><br><a href=\"https://mp.weixin.qq.com/s/QoFrdmxdRJG5ETQp5Ua3-A\">一颗像素的诞生</a><br><a href=\"https://www.youtube.com/watch?v=m-J-tbAlFic\">Life of a pixe</a><br><a href=\"https://www.daimajiaoliu.com/daima/47da647f6900408\">skia简介</a><br><a href=\"https://mp.processon.com/view/link/5ec33e0ff346fb690701ff6c\">https://mp.processon.com/view/link/5ec33e0ff346fb690701ff6c</a><br><a href=\"https://www.zhihu.com/column/c_1265245746099941376\">GPU渲染管线之旅</a></p>\n</blockquote>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"chrome渲染图像过程\"><a href=\"#chrome渲染图像过程\" class=\"headerlink\" title=\"chrome渲染图像过程\"></a>chrome渲染图像过程</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7e4f1719e8dc88b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>过程：</p>\n<ul>\n<li><strong>普通HTML</strong>  ➡ <strong>dom</strong> ➡ <strong>skia</strong><br>-<strong>webGl</strong> ➡ <strong>OpenGL</strong></li>\n</ul>\n<h3 id=\"问题：chrome怎么跨平台\"><a href=\"#问题：chrome怎么跨平台\" class=\"headerlink\" title=\"问题：chrome怎么跨平台\"></a>问题：chrome怎么跨平台</h3><p>chrome 在安卓，iOS，Mac,windows,linux都有安装包，chrome作为浏览器怎么做到兼容问题的呢。</p>\n<h3 id=\"解决方案：skia\"><a href=\"#解决方案：skia\" class=\"headerlink\" title=\"解决方案：skia\"></a>解决方案：skia</h3><p> <strong>Skia Graphics Library</strong>（SGL）是一个由C++编写的开放源代码图形库<br>Skia主要的类别是SkCanvas，所有的绘图功能都是实现于此类别。以下是SGL简单的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SkCanvas* can = GraphicsJNI::getNativeCanvas(...);      </span><br><span class=\"line\">SkPaint paint;    </span><br><span class=\"line\">paint.setARGB(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\">can-&gt;drawText(<span class=\"string\">&quot;Hello, world&quot;</span>, <span class=\"number\">12</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, paint);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"计算机如何处理浏览器数据\"><a href=\"#计算机如何处理浏览器数据\" class=\"headerlink\" title=\"计算机如何处理浏览器数据\"></a>计算机如何处理浏览器数据</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a5635d677ddbcf13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>从理论上，我可以用上图的这种键盘按照一定的编码敲出一长串0、1数字序列，再加一个jpg&#x2F;png的后缀名保存。</p>\n<p>打开文件时，是将这些数据送入内存，图片查看程序控制CPU，根据后缀名对数据进行解码、解压后得到图像本身的数据——每个像素的RGB等。</p>\n<p>再历经前面所述的一大串过程，CPU的数据再经过显卡和显示器，最终我就能看到一张滑稽的照片<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-06f06c6fd953fd7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"计算机怎么绘制系统UI的\"><a href=\"#计算机怎么绘制系统UI的\" class=\"headerlink\" title=\"计算机怎么绘制系统UI的\"></a>计算机怎么绘制系统UI的</h4><h5 id=\"windows图像绘制\"><a href=\"#windows图像绘制\" class=\"headerlink\" title=\"windows图像绘制\"></a>windows图像绘制</h5><p>操作系统有一套 GUI API ,提供给开发者调用<br>电脑不同应用，使用不同绘制模型，比如windows10 系统，同时运行 画布，有道云笔记，魔兽世界3D游戏<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a9ba87d41f00f53a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>渲染过程：<br>application ➡ OpenGl(Direct) ➡ display driver ➡ screen</p>\n<h5 id=\"安卓系统图像绘制\"><a href=\"#安卓系统图像绘制\" class=\"headerlink\" title=\"安卓系统图像绘制\"></a>安卓系统图像绘制</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4d83c4a6aa27e6e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<blockquote>\n<p><a href=\"https://vivaxyblog.github.io/2019/12/07/decode-a-png-image-with-javascript-cn.html\">一步一步解码 PNG 图片</a><br>《编码，隐藏在计算机软硬件背后的语言》<br><a href=\"https://zhuanlan.zhihu.com/p/137780634\">猴子也能看懂的渲染管线（Render Pipeline)</a><br><a href=\"https://www.gpuinsight.com/\">GPU 观察</a><br><a href=\"https://mp.weixin.qq.com/s/QoFrdmxdRJG5ETQp5Ua3-A\">一颗像素的诞生</a><br><a href=\"https://www.youtube.com/watch?v=m-J-tbAlFic\">Life of a pixe</a><br><a href=\"https://www.daimajiaoliu.com/daima/47da647f6900408\">skia简介</a><br><a href=\"https://mp.processon.com/view/link/5ec33e0ff346fb690701ff6c\">https://mp.processon.com/view/link/5ec33e0ff346fb690701ff6c</a><br><a href=\"https://www.zhihu.com/column/c_1265245746099941376\">GPU渲染管线之旅</a></p>\n</blockquote>\n"},{"title":"⛵︎验证码-(11)-操作系统底层库和接口","date":"2021-12-02T16:00:00.000Z","_content":"最近在思考一个问题，电脑没有操作系统可以吗\n答案是可以。\n为什么要搞一个操作系统呢，\n答案之一，操作系统为计算机和开发者提供了各种库和接口。\n我们也可以自己写这些硬件接口驱动，底层库，抽象接口，这就是操作系统的雏形了。\n今天就探究一下linux的那些库(windows,mac没开源，也探究不了啊😳)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-04f6a1e2a625a59b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n### Linux核心库\nLinux内的各种层，还显示了在[用户空间](https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4 \"用户空间\")和[内核空间](https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4 \"内核空间\")之间的分离。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-b534920dc341391a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n###内核内API\n在不同子系统间使用了数个内核内部API。其中一些是跨越多个发行版保持稳定的，另一些则不然。对于内核内API不作担保。维护者和贡献者可以在任何时候增加或变更它们<sup>[[43]](https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8#cite_note-43)</sup>。\n\n内核内API的例子包括针对下列类别设备驱动程序的软件框架/API：\n\n*   [Video4Linux](https://zh.wikipedia.org/wiki/Video4Linux \"Video4Linux\") – 用于视频捕捉硬件。\n*   [高级Linux声音体系](https://zh.wikipedia.org/wiki/ALSA \"ALSA\")（ALSA） – 用于[声卡](https://zh.wikipedia.org/wiki/%E5%A3%B0%E5%8D%A1 \"声卡\")。\n*   [New API](https://zh.wikipedia.org/w/index.php?title=New_API&action=edit&redlink=1) – 用于[网络接口控制器](https://zh.wikipedia.org/wiki/%E7%BD%91%E5%8D%A1 \"网卡\")。\n*   [直接渲染管理器](https://zh.wikipedia.org/w/index.php?title=%E7%9B%B4%E6%8E%A5%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%90%86%E5%99%A8&action=edit&redlink=1) – 用于[图形加速器](https://zh.wikipedia.org/wiki/%E5%9C%96%E5%BD%A2%E8%99%95%E7%90%86%E5%99%A8 \"图形处理器\")。\n*   [KMS驱动器](https://zh.wikipedia.org/w/index.php?title=KMS%E9%A9%B1%E5%8A%A8%E5%99%A8&action=edit&redlink=1) – 用于[视频显示控制器](https://zh.wikipedia.org/w/index.php?title=%E8%A7%86%E9%A2%91%E6%98%BE%E7%A4%BA%E6%8E%A7%E5%88%B6%E5%99%A8&action=edit&redlink=1)。\n*   [mac80211](https://zh.wikipedia.org/w/index.php?title=Mac80211&action=edit&redlink=1 \"Mac80211（页面不存在）\") – 用于[无线网络接口控制器](https://zh.wikipedia.org/wiki/%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1 \"无线网卡\")<sup>[[44]](https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8#cite_note-44)</sup>。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-c1af4f1dfc40f609.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nThe **Linux API** is composed out of the System Call Interface of the Linux kernel, the [GNU C Library](https://en.wikipedia.org/wiki/GNU_C_Library \"GNU C Library\") (by [GNU](https://en.wikipedia.org/wiki/GNU \"GNU\")), [libcgroup](https://en.wikipedia.org/wiki/Cgroups \"Cgroups\"),<sup>[[1]](https://en.wikipedia.org/wiki/Linux_kernel_interfaces#cite_note-libcgroup-1)</sup> [libdrm](https://en.wikipedia.org/wiki/Direct_Rendering_Manager \"Direct Rendering Manager\"), [libalsa](https://en.wikipedia.org/wiki/Advanced_Linux_Sound_Architecture \"Advanced Linux Sound Architecture\") and [libevdev](https://en.wikipedia.org/wiki/Evdev \"Evdev\")<sup>[[2]](https://en.wikipedia.org/wiki/Linux_kernel_interfaces#cite_note-libevdev-2)</sup> (by [freedesktop.org](https://en.wikipedia.org/wiki/Freedesktop.org \"Freedesktop.org\")).\n### C标准库： GNU C\nGNU C库即glibc，是GNU项目对C标准库的实现。并不是所有的标准C函数都能在glibc中找到：大部分数学函数其实由libm实现，它是另外的一个库。\n\n目前glibc是Linux上使用最广泛的C库。\n\nglibc 的主体，分布 /lib 与 /usr/lib 中，包括 libc 标准 C 函式库、libm 数学函式库、libcrypt 加密与编码函式库、libdb 资料库函式库、libpthread 行程[多执行绪](https://baike.baidu.com/item/%E5%A4%9A%E6%89%A7%E8%A1%8C%E7%BB%AA)函式库、libnss 网路服务函式库 ....\n![](https://upload-images.jianshu.io/upload_images/15312191-4e6021d20f46e7d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nThe [GNU C Library](https://en.wikipedia.org/wiki/GNU_C_Library \"GNU C Library\") is a wrapper around the Linux kernel System Call Interface.\nGNU C 库是 Linux 内核系统调用接口的包装器\n\n### Abstraction APIs 抽象接口\n\n在某些情况下，内核过于底层，开发者需要更高一层的抽象。当然，这些仍然需要在底层 Linux API 之上工作。\n![](https://upload-images.jianshu.io/upload_images/15312191-c4fbb9465194b054.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nOpenGL is indeed an abstraction API to make use of diverse GPUs of multiple vendors without the need to program for each one specifically.\nOpenGL 确实是一种抽象 API，可以利用多个供应商的不同 GPU，而无需专门为每个 GPU 进行编程。\n\n> [1] https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8\n> [2] https://en.wikipedia.org/wiki/Linux_kernel_interfaces#Linux_API\n> [3] [Linux中形形色色的接口API和ABI](https://cloud.tencent.com/developer/article/1357674)\n> [4] [什么是 C/C++ 标准库](http://justme0.com/archive/c-cpp-standard-library.html)\n> [5] 《linux/unix 系统编程手册》chapter 3\n","source":"_posts/⛵︎验证码-(11)-操作系统底层库和接口.md","raw":"---\ntitle: \"⛵︎验证码-(11)-操作系统底层库和接口\"\ndate: 2021-12-03\ntags: \n- 开发日常\n---\n最近在思考一个问题，电脑没有操作系统可以吗\n答案是可以。\n为什么要搞一个操作系统呢，\n答案之一，操作系统为计算机和开发者提供了各种库和接口。\n我们也可以自己写这些硬件接口驱动，底层库，抽象接口，这就是操作系统的雏形了。\n今天就探究一下linux的那些库(windows,mac没开源，也探究不了啊😳)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-04f6a1e2a625a59b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n### Linux核心库\nLinux内的各种层，还显示了在[用户空间](https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4 \"用户空间\")和[内核空间](https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4 \"内核空间\")之间的分离。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-b534920dc341391a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n###内核内API\n在不同子系统间使用了数个内核内部API。其中一些是跨越多个发行版保持稳定的，另一些则不然。对于内核内API不作担保。维护者和贡献者可以在任何时候增加或变更它们<sup>[[43]](https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8#cite_note-43)</sup>。\n\n内核内API的例子包括针对下列类别设备驱动程序的软件框架/API：\n\n*   [Video4Linux](https://zh.wikipedia.org/wiki/Video4Linux \"Video4Linux\") – 用于视频捕捉硬件。\n*   [高级Linux声音体系](https://zh.wikipedia.org/wiki/ALSA \"ALSA\")（ALSA） – 用于[声卡](https://zh.wikipedia.org/wiki/%E5%A3%B0%E5%8D%A1 \"声卡\")。\n*   [New API](https://zh.wikipedia.org/w/index.php?title=New_API&action=edit&redlink=1) – 用于[网络接口控制器](https://zh.wikipedia.org/wiki/%E7%BD%91%E5%8D%A1 \"网卡\")。\n*   [直接渲染管理器](https://zh.wikipedia.org/w/index.php?title=%E7%9B%B4%E6%8E%A5%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%90%86%E5%99%A8&action=edit&redlink=1) – 用于[图形加速器](https://zh.wikipedia.org/wiki/%E5%9C%96%E5%BD%A2%E8%99%95%E7%90%86%E5%99%A8 \"图形处理器\")。\n*   [KMS驱动器](https://zh.wikipedia.org/w/index.php?title=KMS%E9%A9%B1%E5%8A%A8%E5%99%A8&action=edit&redlink=1) – 用于[视频显示控制器](https://zh.wikipedia.org/w/index.php?title=%E8%A7%86%E9%A2%91%E6%98%BE%E7%A4%BA%E6%8E%A7%E5%88%B6%E5%99%A8&action=edit&redlink=1)。\n*   [mac80211](https://zh.wikipedia.org/w/index.php?title=Mac80211&action=edit&redlink=1 \"Mac80211（页面不存在）\") – 用于[无线网络接口控制器](https://zh.wikipedia.org/wiki/%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1 \"无线网卡\")<sup>[[44]](https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8#cite_note-44)</sup>。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-c1af4f1dfc40f609.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nThe **Linux API** is composed out of the System Call Interface of the Linux kernel, the [GNU C Library](https://en.wikipedia.org/wiki/GNU_C_Library \"GNU C Library\") (by [GNU](https://en.wikipedia.org/wiki/GNU \"GNU\")), [libcgroup](https://en.wikipedia.org/wiki/Cgroups \"Cgroups\"),<sup>[[1]](https://en.wikipedia.org/wiki/Linux_kernel_interfaces#cite_note-libcgroup-1)</sup> [libdrm](https://en.wikipedia.org/wiki/Direct_Rendering_Manager \"Direct Rendering Manager\"), [libalsa](https://en.wikipedia.org/wiki/Advanced_Linux_Sound_Architecture \"Advanced Linux Sound Architecture\") and [libevdev](https://en.wikipedia.org/wiki/Evdev \"Evdev\")<sup>[[2]](https://en.wikipedia.org/wiki/Linux_kernel_interfaces#cite_note-libevdev-2)</sup> (by [freedesktop.org](https://en.wikipedia.org/wiki/Freedesktop.org \"Freedesktop.org\")).\n### C标准库： GNU C\nGNU C库即glibc，是GNU项目对C标准库的实现。并不是所有的标准C函数都能在glibc中找到：大部分数学函数其实由libm实现，它是另外的一个库。\n\n目前glibc是Linux上使用最广泛的C库。\n\nglibc 的主体，分布 /lib 与 /usr/lib 中，包括 libc 标准 C 函式库、libm 数学函式库、libcrypt 加密与编码函式库、libdb 资料库函式库、libpthread 行程[多执行绪](https://baike.baidu.com/item/%E5%A4%9A%E6%89%A7%E8%A1%8C%E7%BB%AA)函式库、libnss 网路服务函式库 ....\n![](https://upload-images.jianshu.io/upload_images/15312191-4e6021d20f46e7d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nThe [GNU C Library](https://en.wikipedia.org/wiki/GNU_C_Library \"GNU C Library\") is a wrapper around the Linux kernel System Call Interface.\nGNU C 库是 Linux 内核系统调用接口的包装器\n\n### Abstraction APIs 抽象接口\n\n在某些情况下，内核过于底层，开发者需要更高一层的抽象。当然，这些仍然需要在底层 Linux API 之上工作。\n![](https://upload-images.jianshu.io/upload_images/15312191-c4fbb9465194b054.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nOpenGL is indeed an abstraction API to make use of diverse GPUs of multiple vendors without the need to program for each one specifically.\nOpenGL 确实是一种抽象 API，可以利用多个供应商的不同 GPU，而无需专门为每个 GPU 进行编程。\n\n> [1] https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8\n> [2] https://en.wikipedia.org/wiki/Linux_kernel_interfaces#Linux_API\n> [3] [Linux中形形色色的接口API和ABI](https://cloud.tencent.com/developer/article/1357674)\n> [4] [什么是 C/C++ 标准库](http://justme0.com/archive/c-cpp-standard-library.html)\n> [5] 《linux/unix 系统编程手册》chapter 3\n","slug":"⛵︎验证码-(11)-操作系统底层库和接口","published":1,"updated":"2024-05-16T07:39:11.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094md001f2omvbu2850xv","content":"<p>最近在思考一个问题，电脑没有操作系统可以吗<br>答案是可以。<br>为什么要搞一个操作系统呢，<br>答案之一，操作系统为计算机和开发者提供了各种库和接口。<br>我们也可以自己写这些硬件接口驱动，底层库，抽象接口，这就是操作系统的雏形了。<br>今天就探究一下linux的那些库(windows,mac没开源，也探究不了啊😳)</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-04f6a1e2a625a59b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"Linux核心库\"><a href=\"#Linux核心库\" class=\"headerlink\" title=\"Linux核心库\"></a>Linux核心库</h3><p>Linux内的各种层，还显示了在<a href=\"https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4\" title=\"用户空间\">用户空间</a>和<a href=\"https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4\" title=\"内核空间\">内核空间</a>之间的分离。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b534920dc341391a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>###内核内API<br>在不同子系统间使用了数个内核内部API。其中一些是跨越多个发行版保持稳定的，另一些则不然。对于内核内API不作担保。维护者和贡献者可以在任何时候增加或变更它们<sup><a href=\"https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8#cite_note-43\">[43]</a></sup>。</p>\n<p>内核内API的例子包括针对下列类别设备驱动程序的软件框架&#x2F;API：</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/Video4Linux\" title=\"Video4Linux\">Video4Linux</a> – 用于视频捕捉硬件。</li>\n<li><a href=\"https://zh.wikipedia.org/wiki/ALSA\" title=\"ALSA\">高级Linux声音体系</a>（ALSA） – 用于<a href=\"https://zh.wikipedia.org/wiki/%E5%A3%B0%E5%8D%A1\" title=\"声卡\">声卡</a>。</li>\n<li><a href=\"https://zh.wikipedia.org/w/index.php?title=New_API&action=edit&redlink=1\">New API</a> – 用于<a href=\"https://zh.wikipedia.org/wiki/%E7%BD%91%E5%8D%A1\" title=\"网卡\">网络接口控制器</a>。</li>\n<li><a href=\"https://zh.wikipedia.org/w/index.php?title=%E7%9B%B4%E6%8E%A5%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%90%86%E5%99%A8&action=edit&redlink=1\">直接渲染管理器</a> – 用于<a href=\"https://zh.wikipedia.org/wiki/%E5%9C%96%E5%BD%A2%E8%99%95%E7%90%86%E5%99%A8\" title=\"图形处理器\">图形加速器</a>。</li>\n<li><a href=\"https://zh.wikipedia.org/w/index.php?title=KMS%E9%A9%B1%E5%8A%A8%E5%99%A8&action=edit&redlink=1\">KMS驱动器</a> – 用于<a href=\"https://zh.wikipedia.org/w/index.php?title=%E8%A7%86%E9%A2%91%E6%98%BE%E7%A4%BA%E6%8E%A7%E5%88%B6%E5%99%A8&action=edit&redlink=1\">视频显示控制器</a>。</li>\n<li><a href=\"https://zh.wikipedia.org/w/index.php?title=Mac80211&action=edit&redlink=1\" title=\"Mac80211（页面不存在）\">mac80211</a> – 用于<a href=\"https://zh.wikipedia.org/wiki/%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1\" title=\"无线网卡\">无线网络接口控制器</a><sup><a href=\"https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8#cite_note-44\">[44]</a></sup>。</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c1af4f1dfc40f609.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>The <strong>Linux API</strong> is composed out of the System Call Interface of the Linux kernel, the <a href=\"https://en.wikipedia.org/wiki/GNU_C_Library\" title=\"GNU C Library\">GNU C Library</a> (by <a href=\"https://en.wikipedia.org/wiki/GNU\" title=\"GNU\">GNU</a>), <a href=\"https://en.wikipedia.org/wiki/Cgroups\" title=\"Cgroups\">libcgroup</a>,<sup><a href=\"https://en.wikipedia.org/wiki/Linux_kernel_interfaces#cite_note-libcgroup-1\">[1]</a></sup> <a href=\"https://en.wikipedia.org/wiki/Direct_Rendering_Manager\" title=\"Direct Rendering Manager\">libdrm</a>, <a href=\"https://en.wikipedia.org/wiki/Advanced_Linux_Sound_Architecture\" title=\"Advanced Linux Sound Architecture\">libalsa</a> and <a href=\"https://en.wikipedia.org/wiki/Evdev\" title=\"Evdev\">libevdev</a><sup><a href=\"https://en.wikipedia.org/wiki/Linux_kernel_interfaces#cite_note-libevdev-2\">[2]</a></sup> (by <a href=\"https://en.wikipedia.org/wiki/Freedesktop.org\" title=\"Freedesktop.org\">freedesktop.org</a>).</p>\n<h3 id=\"C标准库：-GNU-C\"><a href=\"#C标准库：-GNU-C\" class=\"headerlink\" title=\"C标准库： GNU C\"></a>C标准库： GNU C</h3><p>GNU C库即glibc，是GNU项目对C标准库的实现。并不是所有的标准C函数都能在glibc中找到：大部分数学函数其实由libm实现，它是另外的一个库。</p>\n<p>目前glibc是Linux上使用最广泛的C库。</p>\n<p>glibc 的主体，分布 &#x2F;lib 与 &#x2F;usr&#x2F;lib 中，包括 libc 标准 C 函式库、libm 数学函式库、libcrypt 加密与编码函式库、libdb 资料库函式库、libpthread 行程<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E6%89%A7%E8%A1%8C%E7%BB%AA\">多执行绪</a>函式库、libnss 网路服务函式库 ….<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4e6021d20f46e7d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>The <a href=\"https://en.wikipedia.org/wiki/GNU_C_Library\" title=\"GNU C Library\">GNU C Library</a> is a wrapper around the Linux kernel System Call Interface.<br>GNU C 库是 Linux 内核系统调用接口的包装器</p>\n<h3 id=\"Abstraction-APIs-抽象接口\"><a href=\"#Abstraction-APIs-抽象接口\" class=\"headerlink\" title=\"Abstraction APIs 抽象接口\"></a>Abstraction APIs 抽象接口</h3><p>在某些情况下，内核过于底层，开发者需要更高一层的抽象。当然，这些仍然需要在底层 Linux API 之上工作。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c4fbb9465194b054.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>OpenGL is indeed an abstraction API to make use of diverse GPUs of multiple vendors without the need to program for each one specifically.<br>OpenGL 确实是一种抽象 API，可以利用多个供应商的不同 GPU，而无需专门为每个 GPU 进行编程。</p>\n<blockquote>\n<p>[1] <a href=\"https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8\">https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8</a><br>[2] <a href=\"https://en.wikipedia.org/wiki/Linux_kernel_interfaces#Linux_API\">https://en.wikipedia.org/wiki/Linux_kernel_interfaces#Linux_API</a><br>[3] <a href=\"https://cloud.tencent.com/developer/article/1357674\">Linux中形形色色的接口API和ABI</a><br>[4] <a href=\"http://justme0.com/archive/c-cpp-standard-library.html\">什么是 C&#x2F;C++ 标准库</a><br>[5] 《linux&#x2F;unix 系统编程手册》chapter 3</p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p>最近在思考一个问题，电脑没有操作系统可以吗<br>答案是可以。<br>为什么要搞一个操作系统呢，<br>答案之一，操作系统为计算机和开发者提供了各种库和接口。<br>我们也可以自己写这些硬件接口驱动，底层库，抽象接口，这就是操作系统的雏形了。<br>今天就探究一下linux的那些库(windows,mac没开源，也探究不了啊😳)</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-04f6a1e2a625a59b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"Linux核心库\"><a href=\"#Linux核心库\" class=\"headerlink\" title=\"Linux核心库\"></a>Linux核心库</h3><p>Linux内的各种层，还显示了在<a href=\"https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4\" title=\"用户空间\">用户空间</a>和<a href=\"https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4\" title=\"内核空间\">内核空间</a>之间的分离。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b534920dc341391a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>###内核内API<br>在不同子系统间使用了数个内核内部API。其中一些是跨越多个发行版保持稳定的，另一些则不然。对于内核内API不作担保。维护者和贡献者可以在任何时候增加或变更它们<sup><a href=\"https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8#cite_note-43\">[43]</a></sup>。</p>\n<p>内核内API的例子包括针对下列类别设备驱动程序的软件框架&#x2F;API：</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/Video4Linux\" title=\"Video4Linux\">Video4Linux</a> – 用于视频捕捉硬件。</li>\n<li><a href=\"https://zh.wikipedia.org/wiki/ALSA\" title=\"ALSA\">高级Linux声音体系</a>（ALSA） – 用于<a href=\"https://zh.wikipedia.org/wiki/%E5%A3%B0%E5%8D%A1\" title=\"声卡\">声卡</a>。</li>\n<li><a href=\"https://zh.wikipedia.org/w/index.php?title=New_API&action=edit&redlink=1\">New API</a> – 用于<a href=\"https://zh.wikipedia.org/wiki/%E7%BD%91%E5%8D%A1\" title=\"网卡\">网络接口控制器</a>。</li>\n<li><a href=\"https://zh.wikipedia.org/w/index.php?title=%E7%9B%B4%E6%8E%A5%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%90%86%E5%99%A8&action=edit&redlink=1\">直接渲染管理器</a> – 用于<a href=\"https://zh.wikipedia.org/wiki/%E5%9C%96%E5%BD%A2%E8%99%95%E7%90%86%E5%99%A8\" title=\"图形处理器\">图形加速器</a>。</li>\n<li><a href=\"https://zh.wikipedia.org/w/index.php?title=KMS%E9%A9%B1%E5%8A%A8%E5%99%A8&action=edit&redlink=1\">KMS驱动器</a> – 用于<a href=\"https://zh.wikipedia.org/w/index.php?title=%E8%A7%86%E9%A2%91%E6%98%BE%E7%A4%BA%E6%8E%A7%E5%88%B6%E5%99%A8&action=edit&redlink=1\">视频显示控制器</a>。</li>\n<li><a href=\"https://zh.wikipedia.org/w/index.php?title=Mac80211&action=edit&redlink=1\" title=\"Mac80211（页面不存在）\">mac80211</a> – 用于<a href=\"https://zh.wikipedia.org/wiki/%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1\" title=\"无线网卡\">无线网络接口控制器</a><sup><a href=\"https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8#cite_note-44\">[44]</a></sup>。</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c1af4f1dfc40f609.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>The <strong>Linux API</strong> is composed out of the System Call Interface of the Linux kernel, the <a href=\"https://en.wikipedia.org/wiki/GNU_C_Library\" title=\"GNU C Library\">GNU C Library</a> (by <a href=\"https://en.wikipedia.org/wiki/GNU\" title=\"GNU\">GNU</a>), <a href=\"https://en.wikipedia.org/wiki/Cgroups\" title=\"Cgroups\">libcgroup</a>,<sup><a href=\"https://en.wikipedia.org/wiki/Linux_kernel_interfaces#cite_note-libcgroup-1\">[1]</a></sup> <a href=\"https://en.wikipedia.org/wiki/Direct_Rendering_Manager\" title=\"Direct Rendering Manager\">libdrm</a>, <a href=\"https://en.wikipedia.org/wiki/Advanced_Linux_Sound_Architecture\" title=\"Advanced Linux Sound Architecture\">libalsa</a> and <a href=\"https://en.wikipedia.org/wiki/Evdev\" title=\"Evdev\">libevdev</a><sup><a href=\"https://en.wikipedia.org/wiki/Linux_kernel_interfaces#cite_note-libevdev-2\">[2]</a></sup> (by <a href=\"https://en.wikipedia.org/wiki/Freedesktop.org\" title=\"Freedesktop.org\">freedesktop.org</a>).</p>\n<h3 id=\"C标准库：-GNU-C\"><a href=\"#C标准库：-GNU-C\" class=\"headerlink\" title=\"C标准库： GNU C\"></a>C标准库： GNU C</h3><p>GNU C库即glibc，是GNU项目对C标准库的实现。并不是所有的标准C函数都能在glibc中找到：大部分数学函数其实由libm实现，它是另外的一个库。</p>\n<p>目前glibc是Linux上使用最广泛的C库。</p>\n<p>glibc 的主体，分布 &#x2F;lib 与 &#x2F;usr&#x2F;lib 中，包括 libc 标准 C 函式库、libm 数学函式库、libcrypt 加密与编码函式库、libdb 资料库函式库、libpthread 行程<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E6%89%A7%E8%A1%8C%E7%BB%AA\">多执行绪</a>函式库、libnss 网路服务函式库 ….<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4e6021d20f46e7d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>The <a href=\"https://en.wikipedia.org/wiki/GNU_C_Library\" title=\"GNU C Library\">GNU C Library</a> is a wrapper around the Linux kernel System Call Interface.<br>GNU C 库是 Linux 内核系统调用接口的包装器</p>\n<h3 id=\"Abstraction-APIs-抽象接口\"><a href=\"#Abstraction-APIs-抽象接口\" class=\"headerlink\" title=\"Abstraction APIs 抽象接口\"></a>Abstraction APIs 抽象接口</h3><p>在某些情况下，内核过于底层，开发者需要更高一层的抽象。当然，这些仍然需要在底层 Linux API 之上工作。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c4fbb9465194b054.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>OpenGL is indeed an abstraction API to make use of diverse GPUs of multiple vendors without the need to program for each one specifically.<br>OpenGL 确实是一种抽象 API，可以利用多个供应商的不同 GPU，而无需专门为每个 GPU 进行编程。</p>\n<blockquote>\n<p>[1] <a href=\"https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8\">https://zh.wikipedia.org/wiki/Linux%E5%86%85%E6%A0%B8</a><br>[2] <a href=\"https://en.wikipedia.org/wiki/Linux_kernel_interfaces#Linux_API\">https://en.wikipedia.org/wiki/Linux_kernel_interfaces#Linux_API</a><br>[3] <a href=\"https://cloud.tencent.com/developer/article/1357674\">Linux中形形色色的接口API和ABI</a><br>[4] <a href=\"http://justme0.com/archive/c-cpp-standard-library.html\">什么是 C&#x2F;C++ 标准库</a><br>[5] 《linux&#x2F;unix 系统编程手册》chapter 3</p>\n</blockquote>\n"},{"title":"⛵︎验证码-(12)-CPU都干了什么事","date":"2021-12-16T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-baf3683dfa4ac18b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 1.运算 \n数学运算指令，加减乘除\n#### 2.从内存读取数据\nLOAD指令\n#### 3.存贮数据到内存\nSTORE指令\n\n\ncpu指令能做的事并不多，主要是以上几项，这是一种抽象，电脑应用五花八门，但是cpu指令就像乐高一样，各种功能组合就会出现不同的应用体验。\n当前的计算机发展主要是计算速度，其组成原理仍然是各种逻辑门，而衡量运算速度的一个重要指标是晶体管数量。\n\n下图为1971年以来，晶体管数量增长趋势。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-1d18c1d27a2209f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n 举个例子：\n苹果，自2007年发布以来，屏幕越来越大，速度越来约快，内存和硬盘容量一直在增加。但是手机能做的事没有变，拍照，看视频，听声音，浏览网页，发展了它仍然只是一台微型电脑计算机。\n\n苹果系列处理器性能分析：\n![](https://upload-images.jianshu.io/upload_images/15312191-9907fb88a4895d1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-b8348448c3b02535.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>[汇编指令](https://www.mallocfree.com/basic/asm/asm-2-instruction.htm)\n> [苹果M1 Pro/Max处理器性能“震撼”的秘密是什么？](https://www.eet-china.com/mp/a84799.html)\n> [CPU指令、机器码、程序和汇编语言](https://www.cnblogs.com/yilang/p/10997380.html)\n\n","source":"_posts/⛵︎验证码-(12)-CPU都干了什么事.md","raw":"---\ntitle: \"⛵︎验证码-(12)-CPU都干了什么事\"\ndate: 2021-12-17\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-baf3683dfa4ac18b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 1.运算 \n数学运算指令，加减乘除\n#### 2.从内存读取数据\nLOAD指令\n#### 3.存贮数据到内存\nSTORE指令\n\n\ncpu指令能做的事并不多，主要是以上几项，这是一种抽象，电脑应用五花八门，但是cpu指令就像乐高一样，各种功能组合就会出现不同的应用体验。\n当前的计算机发展主要是计算速度，其组成原理仍然是各种逻辑门，而衡量运算速度的一个重要指标是晶体管数量。\n\n下图为1971年以来，晶体管数量增长趋势。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-1d18c1d27a2209f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n 举个例子：\n苹果，自2007年发布以来，屏幕越来越大，速度越来约快，内存和硬盘容量一直在增加。但是手机能做的事没有变，拍照，看视频，听声音，浏览网页，发展了它仍然只是一台微型电脑计算机。\n\n苹果系列处理器性能分析：\n![](https://upload-images.jianshu.io/upload_images/15312191-9907fb88a4895d1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-b8348448c3b02535.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>[汇编指令](https://www.mallocfree.com/basic/asm/asm-2-instruction.htm)\n> [苹果M1 Pro/Max处理器性能“震撼”的秘密是什么？](https://www.eet-china.com/mp/a84799.html)\n> [CPU指令、机器码、程序和汇编语言](https://www.cnblogs.com/yilang/p/10997380.html)\n\n","slug":"⛵︎验证码-(12)-CPU都干了什么事","published":1,"updated":"2024-05-16T07:39:11.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mf001h2omvhedrcvdi","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-baf3683dfa4ac18b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"1-运算\"><a href=\"#1-运算\" class=\"headerlink\" title=\"1.运算\"></a>1.运算</h4><p>数学运算指令，加减乘除</p>\n<h4 id=\"2-从内存读取数据\"><a href=\"#2-从内存读取数据\" class=\"headerlink\" title=\"2.从内存读取数据\"></a>2.从内存读取数据</h4><p>LOAD指令</p>\n<h4 id=\"3-存贮数据到内存\"><a href=\"#3-存贮数据到内存\" class=\"headerlink\" title=\"3.存贮数据到内存\"></a>3.存贮数据到内存</h4><p>STORE指令</p>\n<p>cpu指令能做的事并不多，主要是以上几项，这是一种抽象，电脑应用五花八门，但是cpu指令就像乐高一样，各种功能组合就会出现不同的应用体验。<br>当前的计算机发展主要是计算速度，其组成原理仍然是各种逻辑门，而衡量运算速度的一个重要指标是晶体管数量。</p>\n<p>下图为1971年以来，晶体管数量增长趋势。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1d18c1d27a2209f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p> 举个例子：<br>苹果，自2007年发布以来，屏幕越来越大，速度越来约快，内存和硬盘容量一直在增加。但是手机能做的事没有变，拍照，看视频，听声音，浏览网页，发展了它仍然只是一台微型电脑计算机。</p>\n<p>苹果系列处理器性能分析：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9907fb88a4895d1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b8348448c3b02535.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<blockquote>\n<p><a href=\"https://www.mallocfree.com/basic/asm/asm-2-instruction.htm\">汇编指令</a><br><a href=\"https://www.eet-china.com/mp/a84799.html\">苹果M1 Pro&#x2F;Max处理器性能“震撼”的秘密是什么？</a><br><a href=\"https://www.cnblogs.com/yilang/p/10997380.html\">CPU指令、机器码、程序和汇编语言</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-baf3683dfa4ac18b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"1-运算\"><a href=\"#1-运算\" class=\"headerlink\" title=\"1.运算\"></a>1.运算</h4><p>数学运算指令，加减乘除</p>\n<h4 id=\"2-从内存读取数据\"><a href=\"#2-从内存读取数据\" class=\"headerlink\" title=\"2.从内存读取数据\"></a>2.从内存读取数据</h4><p>LOAD指令</p>\n<h4 id=\"3-存贮数据到内存\"><a href=\"#3-存贮数据到内存\" class=\"headerlink\" title=\"3.存贮数据到内存\"></a>3.存贮数据到内存</h4><p>STORE指令</p>\n<p>cpu指令能做的事并不多，主要是以上几项，这是一种抽象，电脑应用五花八门，但是cpu指令就像乐高一样，各种功能组合就会出现不同的应用体验。<br>当前的计算机发展主要是计算速度，其组成原理仍然是各种逻辑门，而衡量运算速度的一个重要指标是晶体管数量。</p>\n<p>下图为1971年以来，晶体管数量增长趋势。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1d18c1d27a2209f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p> 举个例子：<br>苹果，自2007年发布以来，屏幕越来越大，速度越来约快，内存和硬盘容量一直在增加。但是手机能做的事没有变，拍照，看视频，听声音，浏览网页，发展了它仍然只是一台微型电脑计算机。</p>\n<p>苹果系列处理器性能分析：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9907fb88a4895d1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b8348448c3b02535.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<blockquote>\n<p><a href=\"https://www.mallocfree.com/basic/asm/asm-2-instruction.htm\">汇编指令</a><br><a href=\"https://www.eet-china.com/mp/a84799.html\">苹果M1 Pro&#x2F;Max处理器性能“震撼”的秘密是什么？</a><br><a href=\"https://www.cnblogs.com/yilang/p/10997380.html\">CPU指令、机器码、程序和汇编语言</a></p>\n</blockquote>\n"},{"title":"⛵︎验证码-(13)--CPU实现加法","date":"2021-12-21T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-51098f8212fdca9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nCPU加法是加法寄存器实现的，寄存器内部由二极管构成的各种门组成的。\n\n二进制的进位\n![](https://upload-images.jianshu.io/upload_images/15312191-c6d819db4ae95162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n或门的输出\n![](https://upload-images.jianshu.io/upload_images/15312191-f4c287a1dd09205d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-d72e2ca60e19a6a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n与非门的输出\n![](https://upload-images.jianshu.io/upload_images/15312191-92a0a1b54fde34d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-a498f55a2ee897e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一个或门和一个与非门，简单组合之后\n  ![](https://upload-images.jianshu.io/upload_images/15312191-f09da0226fe8c6e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下表总结了或门和与非门的输出，并将其与我们想要的结果进行了对比。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-b7237b9d5fc22a62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n注意，我们想要的是1，那么这种情况只有在或门和与非门的输出都为1时才会出现。这表明两个输出端可以通过一个与门连接到一起。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-fc5cadbf01eb6917.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n> 《编码：隐匿在计算机软硬件背后的语言 》十一、十二章\n","source":"_posts/⛵︎验证码-(13)--CPU实现加法.md","raw":"---\ntitle: \"⛵︎验证码-(13)--CPU实现加法\"\ndate: 2021-12-22\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-51098f8212fdca9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nCPU加法是加法寄存器实现的，寄存器内部由二极管构成的各种门组成的。\n\n二进制的进位\n![](https://upload-images.jianshu.io/upload_images/15312191-c6d819db4ae95162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n或门的输出\n![](https://upload-images.jianshu.io/upload_images/15312191-f4c287a1dd09205d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-d72e2ca60e19a6a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n与非门的输出\n![](https://upload-images.jianshu.io/upload_images/15312191-92a0a1b54fde34d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-a498f55a2ee897e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一个或门和一个与非门，简单组合之后\n  ![](https://upload-images.jianshu.io/upload_images/15312191-f09da0226fe8c6e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下表总结了或门和与非门的输出，并将其与我们想要的结果进行了对比。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-b7237b9d5fc22a62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n注意，我们想要的是1，那么这种情况只有在或门和与非门的输出都为1时才会出现。这表明两个输出端可以通过一个与门连接到一起。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-fc5cadbf01eb6917.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n> 《编码：隐匿在计算机软硬件背后的语言 》十一、十二章\n","slug":"⛵︎验证码-(13)--CPU实现加法","published":1,"updated":"2024-05-16T07:39:11.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mg001j2omvg8ma8t6j","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-51098f8212fdca9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>CPU加法是加法寄存器实现的，寄存器内部由二极管构成的各种门组成的。</p>\n<p>二进制的进位<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c6d819db4ae95162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>或门的输出<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f4c287a1dd09205d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-d72e2ca60e19a6a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>与非门的输出<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-92a0a1b54fde34d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a498f55a2ee897e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>一个或门和一个与非门，简单组合之后<br>  <img src=\"https://upload-images.jianshu.io/upload_images/15312191-f09da0226fe8c6e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>下表总结了或门和与非门的输出，并将其与我们想要的结果进行了对比。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b7237b9d5fc22a62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>注意，我们想要的是1，那么这种情况只有在或门和与非门的输出都为1时才会出现。这表明两个输出端可以通过一个与门连接到一起。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-fc5cadbf01eb6917.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<blockquote>\n<p>《编码：隐匿在计算机软硬件背后的语言 》十一、十二章</p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-51098f8212fdca9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>CPU加法是加法寄存器实现的，寄存器内部由二极管构成的各种门组成的。</p>\n<p>二进制的进位<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c6d819db4ae95162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>或门的输出<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f4c287a1dd09205d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-d72e2ca60e19a6a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>与非门的输出<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-92a0a1b54fde34d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a498f55a2ee897e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>一个或门和一个与非门，简单组合之后<br>  <img src=\"https://upload-images.jianshu.io/upload_images/15312191-f09da0226fe8c6e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>下表总结了或门和与非门的输出，并将其与我们想要的结果进行了对比。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b7237b9d5fc22a62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>注意，我们想要的是1，那么这种情况只有在或门和与非门的输出都为1时才会出现。这表明两个输出端可以通过一个与门连接到一起。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-fc5cadbf01eb6917.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<blockquote>\n<p>《编码：隐匿在计算机软硬件背后的语言 》十一、十二章</p>\n</blockquote>\n"},{"title":"⛵︎验证码---(10)--操作系统之进程通信","date":"2021-12-01T16:00:00.000Z","_content":"#### linux进程状态\n##### 简单版\n  运行状态（Running）\n  就绪状态（Ready）\n  等待状态，又称阻塞状态（Blocked）\n  创建状态（New）\n  结束状态（Exit)\n##### 详细版\n![](https://upload-images.jianshu.io/upload_images/15312191-2a155c4059b5e0ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 进程的创建\nLinux最早产生的进程是启动过程中创建的idle进程，pid号为0，该进程会创建一个内核线程，该线程进行一系列初始化动作后最终会执行/sbin/init文件，执行该文件的结果是运行模式从核心态切换到了用户态，该线程演变成了用户进程init，pid号为1。init进程是一个非常重要的进程，一切用户态进程都是它的后代进程。\n\n在UNIX中，操作系统初始化时所创建的1号进程是所有用户进程的祖先，1号进程为每个从终端登录入系统的用户创建一个终端进程，这些终端进程又会利用“进程创建”系统调用创建子进程，从而形成进程间的层次体系，称为进程树或进程族系。\n\nLinux系统执行新任务的典型方法是通过fork()/exec()函数。通常fork()创建一个新进程，然后新进程通过调用exec系列函数执行真正的任务\n#### 进程由以下4方面组成\n\n① 进程包括至少一个可执行程序，含有代码和初始数据，一般在进程创建时说明。注意，可执行程序可以被多个进程共享，换句话说，多个进程可能运行同一个可执行程序。\n② 进程包括一个独立的进程用户空间，在进程创建时由操作系统分配。\n③ 进程包括系统资源。这是指在进程创建及执行过程中，由操作系统分配给进程的系统资源，包括I/O设备、文件等。\n④ 进程包括一个执行栈区，包含运行现场信息，如子程序调用时所压栈帧，系统调用时所压的栈帧等，这是进程运行及进程调度进行处理机切换时所要涉及的数据结构。\n#### pid有什么用\n![](https://upload-images.jianshu.io/upload_images/15312191-10d6225c57395bd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在操作系统中，每个进程都有一个唯一的内部数字标识符，它可以是图3.2中进程控制块的地址值，或者是可以映射出进程控制块位置的某种索引值。标识符是非常有用的，操作系统控制的其他表格中可以用进程标识符来定位进程控制块。例如，文件访问的有关表格中可以存入进程标识符，说明该文件已被哪几个进程打开；当进程相互通信时，通过进程标识符说明要交换信息的对方进程；当进程创建子进程时，用进程标识符来指明父进程或子进程。这里的进程标识符是一个数字式的系统内码，通过它可以建立其他表格与进程控制块之间的联系。\n\n#### 操作系统进程通信实例\n\n##### 1.手机微信分享，比如网易云音乐分享到微信朋友圈\n![](https://upload-images.jianshu.io/upload_images/15312191-1cd58b5e0f54e973.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n网易云音乐 => 微信朋友圈\n\n##### 2.apple store 通过浏览器打开\n\n![](https://upload-images.jianshu.io/upload_images/15312191-203d82f85607ff1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n谷歌浏览器 => apple Store\n##### 3.uni-app 打开小程序\n\n![](https://upload-images.jianshu.io/upload_images/15312191-35ca6a0a14ab2156.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nHBuilderX => 微信开发者工具\n##### 4. selenium 调用Google浏览器\n使用selenium，driver做网页测试\n\n#### 5.AndPods调用蓝牙\n![](https://upload-images.jianshu.io/upload_images/15312191-2bee6d7ba9645430.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n#### 6.h5调用微信支付\n![](https://upload-images.jianshu.io/upload_images/15312191-ad121e6bae57f788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\njs => 微信app\n> [进程之间究竟有哪些通信方式](https://github.com/iamshuaidi/algo-basic/blob/master/%E5%AD%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%EF%BC%9A%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%EF%BC%9F%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%A1%EF%BC%9F.md)\n> [浏览器为什么能唤起App的页面](https://juejin.cn/post/7033751175551942692)\n>[微信网页开发 /JS-SDK说明文档](https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html)\n\n\n","source":"_posts/⛵︎验证码---(10)--操作系统之进程通信.md","raw":"---\ntitle: \"⛵︎验证码---(10)--操作系统之进程通信\"\ndate: 2021-12-02\ntags: \n- 开发日常\n---\n#### linux进程状态\n##### 简单版\n  运行状态（Running）\n  就绪状态（Ready）\n  等待状态，又称阻塞状态（Blocked）\n  创建状态（New）\n  结束状态（Exit)\n##### 详细版\n![](https://upload-images.jianshu.io/upload_images/15312191-2a155c4059b5e0ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 进程的创建\nLinux最早产生的进程是启动过程中创建的idle进程，pid号为0，该进程会创建一个内核线程，该线程进行一系列初始化动作后最终会执行/sbin/init文件，执行该文件的结果是运行模式从核心态切换到了用户态，该线程演变成了用户进程init，pid号为1。init进程是一个非常重要的进程，一切用户态进程都是它的后代进程。\n\n在UNIX中，操作系统初始化时所创建的1号进程是所有用户进程的祖先，1号进程为每个从终端登录入系统的用户创建一个终端进程，这些终端进程又会利用“进程创建”系统调用创建子进程，从而形成进程间的层次体系，称为进程树或进程族系。\n\nLinux系统执行新任务的典型方法是通过fork()/exec()函数。通常fork()创建一个新进程，然后新进程通过调用exec系列函数执行真正的任务\n#### 进程由以下4方面组成\n\n① 进程包括至少一个可执行程序，含有代码和初始数据，一般在进程创建时说明。注意，可执行程序可以被多个进程共享，换句话说，多个进程可能运行同一个可执行程序。\n② 进程包括一个独立的进程用户空间，在进程创建时由操作系统分配。\n③ 进程包括系统资源。这是指在进程创建及执行过程中，由操作系统分配给进程的系统资源，包括I/O设备、文件等。\n④ 进程包括一个执行栈区，包含运行现场信息，如子程序调用时所压栈帧，系统调用时所压的栈帧等，这是进程运行及进程调度进行处理机切换时所要涉及的数据结构。\n#### pid有什么用\n![](https://upload-images.jianshu.io/upload_images/15312191-10d6225c57395bd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在操作系统中，每个进程都有一个唯一的内部数字标识符，它可以是图3.2中进程控制块的地址值，或者是可以映射出进程控制块位置的某种索引值。标识符是非常有用的，操作系统控制的其他表格中可以用进程标识符来定位进程控制块。例如，文件访问的有关表格中可以存入进程标识符，说明该文件已被哪几个进程打开；当进程相互通信时，通过进程标识符说明要交换信息的对方进程；当进程创建子进程时，用进程标识符来指明父进程或子进程。这里的进程标识符是一个数字式的系统内码，通过它可以建立其他表格与进程控制块之间的联系。\n\n#### 操作系统进程通信实例\n\n##### 1.手机微信分享，比如网易云音乐分享到微信朋友圈\n![](https://upload-images.jianshu.io/upload_images/15312191-1cd58b5e0f54e973.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n网易云音乐 => 微信朋友圈\n\n##### 2.apple store 通过浏览器打开\n\n![](https://upload-images.jianshu.io/upload_images/15312191-203d82f85607ff1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n谷歌浏览器 => apple Store\n##### 3.uni-app 打开小程序\n\n![](https://upload-images.jianshu.io/upload_images/15312191-35ca6a0a14ab2156.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nHBuilderX => 微信开发者工具\n##### 4. selenium 调用Google浏览器\n使用selenium，driver做网页测试\n\n#### 5.AndPods调用蓝牙\n![](https://upload-images.jianshu.io/upload_images/15312191-2bee6d7ba9645430.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n#### 6.h5调用微信支付\n![](https://upload-images.jianshu.io/upload_images/15312191-ad121e6bae57f788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\njs => 微信app\n> [进程之间究竟有哪些通信方式](https://github.com/iamshuaidi/algo-basic/blob/master/%E5%AD%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%EF%BC%9A%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%EF%BC%9F%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%A1%EF%BC%9F.md)\n> [浏览器为什么能唤起App的页面](https://juejin.cn/post/7033751175551942692)\n>[微信网页开发 /JS-SDK说明文档](https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html)\n\n\n","slug":"⛵︎验证码---(10)--操作系统之进程通信","published":1,"updated":"2024-05-16T07:39:11.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mh001l2omvep009rgv","content":"<h4 id=\"linux进程状态\"><a href=\"#linux进程状态\" class=\"headerlink\" title=\"linux进程状态\"></a>linux进程状态</h4><h5 id=\"简单版\"><a href=\"#简单版\" class=\"headerlink\" title=\"简单版\"></a>简单版</h5><p>  运行状态（Running）<br>  就绪状态（Ready）<br>  等待状态，又称阻塞状态（Blocked）<br>  创建状态（New）<br>  结束状态（Exit)</p>\n<h5 id=\"详细版\"><a href=\"#详细版\" class=\"headerlink\" title=\"详细版\"></a>详细版</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-2a155c4059b5e0ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"进程的创建\"><a href=\"#进程的创建\" class=\"headerlink\" title=\"进程的创建\"></a>进程的创建</h4><p>Linux最早产生的进程是启动过程中创建的idle进程，pid号为0，该进程会创建一个内核线程，该线程进行一系列初始化动作后最终会执行&#x2F;sbin&#x2F;init文件，执行该文件的结果是运行模式从核心态切换到了用户态，该线程演变成了用户进程init，pid号为1。init进程是一个非常重要的进程，一切用户态进程都是它的后代进程。</p>\n<p>在UNIX中，操作系统初始化时所创建的1号进程是所有用户进程的祖先，1号进程为每个从终端登录入系统的用户创建一个终端进程，这些终端进程又会利用“进程创建”系统调用创建子进程，从而形成进程间的层次体系，称为进程树或进程族系。</p>\n<p>Linux系统执行新任务的典型方法是通过fork()&#x2F;exec()函数。通常fork()创建一个新进程，然后新进程通过调用exec系列函数执行真正的任务</p>\n<h4 id=\"进程由以下4方面组成\"><a href=\"#进程由以下4方面组成\" class=\"headerlink\" title=\"进程由以下4方面组成\"></a>进程由以下4方面组成</h4><p>① 进程包括至少一个可执行程序，含有代码和初始数据，一般在进程创建时说明。注意，可执行程序可以被多个进程共享，换句话说，多个进程可能运行同一个可执行程序。<br>② 进程包括一个独立的进程用户空间，在进程创建时由操作系统分配。<br>③ 进程包括系统资源。这是指在进程创建及执行过程中，由操作系统分配给进程的系统资源，包括I&#x2F;O设备、文件等。<br>④ 进程包括一个执行栈区，包含运行现场信息，如子程序调用时所压栈帧，系统调用时所压的栈帧等，这是进程运行及进程调度进行处理机切换时所要涉及的数据结构。</p>\n<h4 id=\"pid有什么用\"><a href=\"#pid有什么用\" class=\"headerlink\" title=\"pid有什么用\"></a>pid有什么用</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-10d6225c57395bd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>在操作系统中，每个进程都有一个唯一的内部数字标识符，它可以是图3.2中进程控制块的地址值，或者是可以映射出进程控制块位置的某种索引值。标识符是非常有用的，操作系统控制的其他表格中可以用进程标识符来定位进程控制块。例如，文件访问的有关表格中可以存入进程标识符，说明该文件已被哪几个进程打开；当进程相互通信时，通过进程标识符说明要交换信息的对方进程；当进程创建子进程时，用进程标识符来指明父进程或子进程。这里的进程标识符是一个数字式的系统内码，通过它可以建立其他表格与进程控制块之间的联系。</p>\n<h4 id=\"操作系统进程通信实例\"><a href=\"#操作系统进程通信实例\" class=\"headerlink\" title=\"操作系统进程通信实例\"></a>操作系统进程通信实例</h4><h5 id=\"1-手机微信分享，比如网易云音乐分享到微信朋友圈\"><a href=\"#1-手机微信分享，比如网易云音乐分享到微信朋友圈\" class=\"headerlink\" title=\"1.手机微信分享，比如网易云音乐分享到微信朋友圈\"></a>1.手机微信分享，比如网易云音乐分享到微信朋友圈</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1cd58b5e0f54e973.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>网易云音乐 &#x3D;&gt; 微信朋友圈</p>\n<h5 id=\"2-apple-store-通过浏览器打开\"><a href=\"#2-apple-store-通过浏览器打开\" class=\"headerlink\" title=\"2.apple store 通过浏览器打开\"></a>2.apple store 通过浏览器打开</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-203d82f85607ff1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>谷歌浏览器 &#x3D;&gt; apple Store</p>\n<h5 id=\"3-uni-app-打开小程序\"><a href=\"#3-uni-app-打开小程序\" class=\"headerlink\" title=\"3.uni-app 打开小程序\"></a>3.uni-app 打开小程序</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-35ca6a0a14ab2156.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>HBuilderX &#x3D;&gt; 微信开发者工具</p>\n<h5 id=\"4-selenium-调用Google浏览器\"><a href=\"#4-selenium-调用Google浏览器\" class=\"headerlink\" title=\"4. selenium 调用Google浏览器\"></a>4. selenium 调用Google浏览器</h5><p>使用selenium，driver做网页测试</p>\n<h4 id=\"5-AndPods调用蓝牙\"><a href=\"#5-AndPods调用蓝牙\" class=\"headerlink\" title=\"5.AndPods调用蓝牙\"></a>5.AndPods调用蓝牙</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-2bee6d7ba9645430.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"6-h5调用微信支付\"><a href=\"#6-h5调用微信支付\" class=\"headerlink\" title=\"6.h5调用微信支付\"></a>6.h5调用微信支付</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-ad121e6bae57f788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>js &#x3D;&gt; 微信app</p>\n<blockquote>\n<p><a href=\"https://github.com/iamshuaidi/algo-basic/blob/master/%E5%AD%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%EF%BC%9A%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%EF%BC%9F%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%A1%EF%BC%9F.md\">进程之间究竟有哪些通信方式</a><br><a href=\"https://juejin.cn/post/7033751175551942692\">浏览器为什么能唤起App的页面</a><br><a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html\">微信网页开发 &#x2F;JS-SDK说明文档</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"linux进程状态\"><a href=\"#linux进程状态\" class=\"headerlink\" title=\"linux进程状态\"></a>linux进程状态</h4><h5 id=\"简单版\"><a href=\"#简单版\" class=\"headerlink\" title=\"简单版\"></a>简单版</h5><p>  运行状态（Running）<br>  就绪状态（Ready）<br>  等待状态，又称阻塞状态（Blocked）<br>  创建状态（New）<br>  结束状态（Exit)</p>\n<h5 id=\"详细版\"><a href=\"#详细版\" class=\"headerlink\" title=\"详细版\"></a>详细版</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-2a155c4059b5e0ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"进程的创建\"><a href=\"#进程的创建\" class=\"headerlink\" title=\"进程的创建\"></a>进程的创建</h4><p>Linux最早产生的进程是启动过程中创建的idle进程，pid号为0，该进程会创建一个内核线程，该线程进行一系列初始化动作后最终会执行&#x2F;sbin&#x2F;init文件，执行该文件的结果是运行模式从核心态切换到了用户态，该线程演变成了用户进程init，pid号为1。init进程是一个非常重要的进程，一切用户态进程都是它的后代进程。</p>\n<p>在UNIX中，操作系统初始化时所创建的1号进程是所有用户进程的祖先，1号进程为每个从终端登录入系统的用户创建一个终端进程，这些终端进程又会利用“进程创建”系统调用创建子进程，从而形成进程间的层次体系，称为进程树或进程族系。</p>\n<p>Linux系统执行新任务的典型方法是通过fork()&#x2F;exec()函数。通常fork()创建一个新进程，然后新进程通过调用exec系列函数执行真正的任务</p>\n<h4 id=\"进程由以下4方面组成\"><a href=\"#进程由以下4方面组成\" class=\"headerlink\" title=\"进程由以下4方面组成\"></a>进程由以下4方面组成</h4><p>① 进程包括至少一个可执行程序，含有代码和初始数据，一般在进程创建时说明。注意，可执行程序可以被多个进程共享，换句话说，多个进程可能运行同一个可执行程序。<br>② 进程包括一个独立的进程用户空间，在进程创建时由操作系统分配。<br>③ 进程包括系统资源。这是指在进程创建及执行过程中，由操作系统分配给进程的系统资源，包括I&#x2F;O设备、文件等。<br>④ 进程包括一个执行栈区，包含运行现场信息，如子程序调用时所压栈帧，系统调用时所压的栈帧等，这是进程运行及进程调度进行处理机切换时所要涉及的数据结构。</p>\n<h4 id=\"pid有什么用\"><a href=\"#pid有什么用\" class=\"headerlink\" title=\"pid有什么用\"></a>pid有什么用</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-10d6225c57395bd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>在操作系统中，每个进程都有一个唯一的内部数字标识符，它可以是图3.2中进程控制块的地址值，或者是可以映射出进程控制块位置的某种索引值。标识符是非常有用的，操作系统控制的其他表格中可以用进程标识符来定位进程控制块。例如，文件访问的有关表格中可以存入进程标识符，说明该文件已被哪几个进程打开；当进程相互通信时，通过进程标识符说明要交换信息的对方进程；当进程创建子进程时，用进程标识符来指明父进程或子进程。这里的进程标识符是一个数字式的系统内码，通过它可以建立其他表格与进程控制块之间的联系。</p>\n<h4 id=\"操作系统进程通信实例\"><a href=\"#操作系统进程通信实例\" class=\"headerlink\" title=\"操作系统进程通信实例\"></a>操作系统进程通信实例</h4><h5 id=\"1-手机微信分享，比如网易云音乐分享到微信朋友圈\"><a href=\"#1-手机微信分享，比如网易云音乐分享到微信朋友圈\" class=\"headerlink\" title=\"1.手机微信分享，比如网易云音乐分享到微信朋友圈\"></a>1.手机微信分享，比如网易云音乐分享到微信朋友圈</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1cd58b5e0f54e973.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>网易云音乐 &#x3D;&gt; 微信朋友圈</p>\n<h5 id=\"2-apple-store-通过浏览器打开\"><a href=\"#2-apple-store-通过浏览器打开\" class=\"headerlink\" title=\"2.apple store 通过浏览器打开\"></a>2.apple store 通过浏览器打开</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-203d82f85607ff1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>谷歌浏览器 &#x3D;&gt; apple Store</p>\n<h5 id=\"3-uni-app-打开小程序\"><a href=\"#3-uni-app-打开小程序\" class=\"headerlink\" title=\"3.uni-app 打开小程序\"></a>3.uni-app 打开小程序</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-35ca6a0a14ab2156.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>HBuilderX &#x3D;&gt; 微信开发者工具</p>\n<h5 id=\"4-selenium-调用Google浏览器\"><a href=\"#4-selenium-调用Google浏览器\" class=\"headerlink\" title=\"4. selenium 调用Google浏览器\"></a>4. selenium 调用Google浏览器</h5><p>使用selenium，driver做网页测试</p>\n<h4 id=\"5-AndPods调用蓝牙\"><a href=\"#5-AndPods调用蓝牙\" class=\"headerlink\" title=\"5.AndPods调用蓝牙\"></a>5.AndPods调用蓝牙</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-2bee6d7ba9645430.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"6-h5调用微信支付\"><a href=\"#6-h5调用微信支付\" class=\"headerlink\" title=\"6.h5调用微信支付\"></a>6.h5调用微信支付</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-ad121e6bae57f788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>js &#x3D;&gt; 微信app</p>\n<blockquote>\n<p><a href=\"https://github.com/iamshuaidi/algo-basic/blob/master/%E5%AD%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%EF%BC%9A%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%EF%BC%9F%E5%A6%82%E4%BD%95%E9%80%9A%E4%BF%A1%EF%BC%9F.md\">进程之间究竟有哪些通信方式</a><br><a href=\"https://juejin.cn/post/7033751175551942692\">浏览器为什么能唤起App的页面</a><br><a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html\">微信网页开发 &#x2F;JS-SDK说明文档</a></p>\n</blockquote>\n"},{"title":"⛵︎验证码---(9)--CPU多任务原理","date":"2021-11-29T16:00:00.000Z","_content":"### CPU三项基本工作\n就是这样去执行读出数据、处理数据和往内存写数据\n\n\n### 并发和并行\n![](https://upload-images.jianshu.io/upload_images/15312191-836bbb0c9a25165c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-44810c215abacbeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-3c2965f978dce7a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 进程和线程\n进程\n\n进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，一个进程就是一个程序的运行实例。\n\n线程\n\n线程是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。\n\n联系\n线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。\n\n区别：理解它们的差别，从资源使用的角度出发。（所谓的资源就是计算机里的中央处理器，内存，文件，网络等等）\n\n根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位\n\n### 单核cpu实现多任务原理\n![](https://upload-images.jianshu.io/upload_images/15312191-86faa3679995eeee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n对于单cpu，多个进程在这个单cpu中是并发运行，根据时间片读取上下文+执行程序+保存上下文\n\n> [进程，线程与多核，多cpu之间的关系 ](https://www.cnblogs.com/valjeanshaw/p/11469514.html)\n[并发与并行的区别是什么](https://www.zhihu.com/question/33515481/answer/1559913485)\n[Chrome架构：仅仅打开了1个页面，为什么有4个进程？](https://time.geekbang.org/column/article/113513)\n[CPU工作原理揭秘](https://wenku.baidu.com/view/8ab7d51902768e9950e73821.html?re=view)\n\n> 备注：1毫秒(ms) = 1000(微秒)us\n","source":"_posts/⛵︎验证码---(9)--CPU多任务原理.md","raw":"---\ntitle: \"⛵︎验证码---(9)--CPU多任务原理\"\ndate: 2021-11-30\ntags: \n- 开发日常\n---\n### CPU三项基本工作\n就是这样去执行读出数据、处理数据和往内存写数据\n\n\n### 并发和并行\n![](https://upload-images.jianshu.io/upload_images/15312191-836bbb0c9a25165c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-44810c215abacbeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/15312191-3c2965f978dce7a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 进程和线程\n进程\n\n进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，一个进程就是一个程序的运行实例。\n\n线程\n\n线程是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。\n\n联系\n线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。\n\n区别：理解它们的差别，从资源使用的角度出发。（所谓的资源就是计算机里的中央处理器，内存，文件，网络等等）\n\n根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位\n\n### 单核cpu实现多任务原理\n![](https://upload-images.jianshu.io/upload_images/15312191-86faa3679995eeee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n对于单cpu，多个进程在这个单cpu中是并发运行，根据时间片读取上下文+执行程序+保存上下文\n\n> [进程，线程与多核，多cpu之间的关系 ](https://www.cnblogs.com/valjeanshaw/p/11469514.html)\n[并发与并行的区别是什么](https://www.zhihu.com/question/33515481/answer/1559913485)\n[Chrome架构：仅仅打开了1个页面，为什么有4个进程？](https://time.geekbang.org/column/article/113513)\n[CPU工作原理揭秘](https://wenku.baidu.com/view/8ab7d51902768e9950e73821.html?re=view)\n\n> 备注：1毫秒(ms) = 1000(微秒)us\n","slug":"⛵︎验证码---(9)--CPU多任务原理","published":1,"updated":"2024-05-16T07:39:11.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mj001n2omvcs37dhyt","content":"<h3 id=\"CPU三项基本工作\"><a href=\"#CPU三项基本工作\" class=\"headerlink\" title=\"CPU三项基本工作\"></a>CPU三项基本工作</h3><p>就是这样去执行读出数据、处理数据和往内存写数据</p>\n<h3 id=\"并发和并行\"><a href=\"#并发和并行\" class=\"headerlink\" title=\"并发和并行\"></a>并发和并行</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-836bbb0c9a25165c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-44810c215abacbeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3c2965f978dce7a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><p>进程</p>\n<p>进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，一个进程就是一个程序的运行实例。</p>\n<p>线程</p>\n<p>线程是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p>\n<p>联系<br>线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</p>\n<p>区别：理解它们的差别，从资源使用的角度出发。（所谓的资源就是计算机里的中央处理器，内存，文件，网络等等）</p>\n<p>根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位</p>\n<h3 id=\"单核cpu实现多任务原理\"><a href=\"#单核cpu实现多任务原理\" class=\"headerlink\" title=\"单核cpu实现多任务原理\"></a>单核cpu实现多任务原理</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-86faa3679995eeee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>对于单cpu，多个进程在这个单cpu中是并发运行，根据时间片读取上下文+执行程序+保存上下文</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/valjeanshaw/p/11469514.html\">进程，线程与多核，多cpu之间的关系 </a><br><a href=\"https://www.zhihu.com/question/33515481/answer/1559913485\">并发与并行的区别是什么</a><br><a href=\"https://time.geekbang.org/column/article/113513\">Chrome架构：仅仅打开了1个页面，为什么有4个进程？</a><br><a href=\"https://wenku.baidu.com/view/8ab7d51902768e9950e73821.html?re=view\">CPU工作原理揭秘</a></p>\n</blockquote>\n<blockquote>\n<p>备注：1毫秒(ms) &#x3D; 1000(微秒)us</p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CPU三项基本工作\"><a href=\"#CPU三项基本工作\" class=\"headerlink\" title=\"CPU三项基本工作\"></a>CPU三项基本工作</h3><p>就是这样去执行读出数据、处理数据和往内存写数据</p>\n<h3 id=\"并发和并行\"><a href=\"#并发和并行\" class=\"headerlink\" title=\"并发和并行\"></a>并发和并行</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-836bbb0c9a25165c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-44810c215abacbeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3c2965f978dce7a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><p>进程</p>\n<p>进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，一个进程就是一个程序的运行实例。</p>\n<p>线程</p>\n<p>线程是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p>\n<p>联系<br>线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</p>\n<p>区别：理解它们的差别，从资源使用的角度出发。（所谓的资源就是计算机里的中央处理器，内存，文件，网络等等）</p>\n<p>根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位</p>\n<h3 id=\"单核cpu实现多任务原理\"><a href=\"#单核cpu实现多任务原理\" class=\"headerlink\" title=\"单核cpu实现多任务原理\"></a>单核cpu实现多任务原理</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-86faa3679995eeee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>对于单cpu，多个进程在这个单cpu中是并发运行，根据时间片读取上下文+执行程序+保存上下文</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/valjeanshaw/p/11469514.html\">进程，线程与多核，多cpu之间的关系 </a><br><a href=\"https://www.zhihu.com/question/33515481/answer/1559913485\">并发与并行的区别是什么</a><br><a href=\"https://time.geekbang.org/column/article/113513\">Chrome架构：仅仅打开了1个页面，为什么有4个进程？</a><br><a href=\"https://wenku.baidu.com/view/8ab7d51902768e9950e73821.html?re=view\">CPU工作原理揭秘</a></p>\n</blockquote>\n<blockquote>\n<p>备注：1毫秒(ms) &#x3D; 1000(微秒)us</p>\n</blockquote>\n"},{"title":"⛵︎验证码（14）按下开机键后，电脑都干了些什么？","date":"2021-12-22T16:00:00.000Z","_content":"### 主流程\n#### 1.通电\n#### 2.北桥通电，南桥通电\n#### 3.BIOS 硬件自检\n#### 4.装载操作系统\n\n主要分三个硬件部分 \n#### 1.BIOS ROM\n#### 2. 内存 RAM\n#### 3.硬盘 引导程序 操作系统\n\n![](https://upload-images.jianshu.io/upload_images/15312191-595c00206dcd3664.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n① 开机访问0xFFFF0地址   \n② 跳转到BIOS ROM的初始化程序\n③ 把BIOS ROM中的初始化程序复制到内存中执行        \n④ 初始化程序 首先初始化硬件，然后在硬盘中找到 引导程序。        \n⑤ 将引导程序复制到 内存的 0x07c00，并执行        \n⑥ 引导程序 将硬盘的内容复制到内存中。        \n⑦ 跳到内存中操作系统的开始地址，开始执行操作系统。\n⑧ 执行操作系统程序。\n> [按下开机键后，电脑都干了些什么？](https://www.zhihu.com/question/22364502)\n","source":"_posts/⛵︎验证码（14）按下开机键后，电脑都干了些什么？.md","raw":"---\ntitle: \"⛵︎验证码（14）按下开机键后，电脑都干了些什么？\"\ndate: 2021-12-23\ntags: \n- 开发日常\n---\n### 主流程\n#### 1.通电\n#### 2.北桥通电，南桥通电\n#### 3.BIOS 硬件自检\n#### 4.装载操作系统\n\n主要分三个硬件部分 \n#### 1.BIOS ROM\n#### 2. 内存 RAM\n#### 3.硬盘 引导程序 操作系统\n\n![](https://upload-images.jianshu.io/upload_images/15312191-595c00206dcd3664.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n① 开机访问0xFFFF0地址   \n② 跳转到BIOS ROM的初始化程序\n③ 把BIOS ROM中的初始化程序复制到内存中执行        \n④ 初始化程序 首先初始化硬件，然后在硬盘中找到 引导程序。        \n⑤ 将引导程序复制到 内存的 0x07c00，并执行        \n⑥ 引导程序 将硬盘的内容复制到内存中。        \n⑦ 跳到内存中操作系统的开始地址，开始执行操作系统。\n⑧ 执行操作系统程序。\n> [按下开机键后，电脑都干了些什么？](https://www.zhihu.com/question/22364502)\n","slug":"⛵︎验证码（14）按下开机键后，电脑都干了些什么？","published":1,"updated":"2024-05-16T07:39:11.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mj001p2omvc94ehddq","content":"<h3 id=\"主流程\"><a href=\"#主流程\" class=\"headerlink\" title=\"主流程\"></a>主流程</h3><h4 id=\"1-通电\"><a href=\"#1-通电\" class=\"headerlink\" title=\"1.通电\"></a>1.通电</h4><h4 id=\"2-北桥通电，南桥通电\"><a href=\"#2-北桥通电，南桥通电\" class=\"headerlink\" title=\"2.北桥通电，南桥通电\"></a>2.北桥通电，南桥通电</h4><h4 id=\"3-BIOS-硬件自检\"><a href=\"#3-BIOS-硬件自检\" class=\"headerlink\" title=\"3.BIOS 硬件自检\"></a>3.BIOS 硬件自检</h4><h4 id=\"4-装载操作系统\"><a href=\"#4-装载操作系统\" class=\"headerlink\" title=\"4.装载操作系统\"></a>4.装载操作系统</h4><p>主要分三个硬件部分 </p>\n<h4 id=\"1-BIOS-ROM\"><a href=\"#1-BIOS-ROM\" class=\"headerlink\" title=\"1.BIOS ROM\"></a>1.BIOS ROM</h4><h4 id=\"2-内存-RAM\"><a href=\"#2-内存-RAM\" class=\"headerlink\" title=\"2. 内存 RAM\"></a>2. 内存 RAM</h4><h4 id=\"3-硬盘-引导程序-操作系统\"><a href=\"#3-硬盘-引导程序-操作系统\" class=\"headerlink\" title=\"3.硬盘 引导程序 操作系统\"></a>3.硬盘 引导程序 操作系统</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-595c00206dcd3664.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>① 开机访问0xFFFF0地址<br>② 跳转到BIOS ROM的初始化程序<br>③ 把BIOS ROM中的初始化程序复制到内存中执行<br>④ 初始化程序 首先初始化硬件，然后在硬盘中找到 引导程序。<br>⑤ 将引导程序复制到 内存的 0x07c00，并执行<br>⑥ 引导程序 将硬盘的内容复制到内存中。<br>⑦ 跳到内存中操作系统的开始地址，开始执行操作系统。<br>⑧ 执行操作系统程序。</p>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/22364502\">按下开机键后，电脑都干了些什么？</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"主流程\"><a href=\"#主流程\" class=\"headerlink\" title=\"主流程\"></a>主流程</h3><h4 id=\"1-通电\"><a href=\"#1-通电\" class=\"headerlink\" title=\"1.通电\"></a>1.通电</h4><h4 id=\"2-北桥通电，南桥通电\"><a href=\"#2-北桥通电，南桥通电\" class=\"headerlink\" title=\"2.北桥通电，南桥通电\"></a>2.北桥通电，南桥通电</h4><h4 id=\"3-BIOS-硬件自检\"><a href=\"#3-BIOS-硬件自检\" class=\"headerlink\" title=\"3.BIOS 硬件自检\"></a>3.BIOS 硬件自检</h4><h4 id=\"4-装载操作系统\"><a href=\"#4-装载操作系统\" class=\"headerlink\" title=\"4.装载操作系统\"></a>4.装载操作系统</h4><p>主要分三个硬件部分 </p>\n<h4 id=\"1-BIOS-ROM\"><a href=\"#1-BIOS-ROM\" class=\"headerlink\" title=\"1.BIOS ROM\"></a>1.BIOS ROM</h4><h4 id=\"2-内存-RAM\"><a href=\"#2-内存-RAM\" class=\"headerlink\" title=\"2. 内存 RAM\"></a>2. 内存 RAM</h4><h4 id=\"3-硬盘-引导程序-操作系统\"><a href=\"#3-硬盘-引导程序-操作系统\" class=\"headerlink\" title=\"3.硬盘 引导程序 操作系统\"></a>3.硬盘 引导程序 操作系统</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-595c00206dcd3664.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>① 开机访问0xFFFF0地址<br>② 跳转到BIOS ROM的初始化程序<br>③ 把BIOS ROM中的初始化程序复制到内存中执行<br>④ 初始化程序 首先初始化硬件，然后在硬盘中找到 引导程序。<br>⑤ 将引导程序复制到 内存的 0x07c00，并执行<br>⑥ 引导程序 将硬盘的内容复制到内存中。<br>⑦ 跳到内存中操作系统的开始地址，开始执行操作系统。<br>⑧ 执行操作系统程序。</p>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/22364502\">按下开机键后，电脑都干了些什么？</a></p>\n</blockquote>\n"},{"title":"两大浏览器高性能路线之争","date":"2022-09-13T16:00:00.000Z","_content":"2012年，Mozilla 的工程师[Alon Zakai](https://github.com/kripken)在研究 LLVM 编译器时突发奇想：许多 3D 游戏都是用 C / C++ 语言写的，如果能将 C / C++ 语言编译成 JavaScript 代码，它们不就能在浏览器里运行了吗？众所周知，JavaScript 的基本语法与 C 语言高度相似。\n于是，他开始研究怎么才能实现这个目标，为此专门做了一个编译器项目[Emscripten](https://github.com/kripken/emscripten)。这个编译器可以将 C / C++ 代码编译成 JS 代码，但不是普通的 JS，而是一种叫做[asm.js](http://asmjs.org/)的 JavaScript 变体。\n\n于是Mozilla开始支持 **asm.js**。\n\n于此同时的2013年，谷歌基于浏览器历史插件机制，推出沙盒机制的**Native Client**，以提高浏览器开发性能，这种高效稳定，无插件机制的构建方式被谷歌极力推崇。\n\n\n\n目的相同，但是技术路线不同，两股暗流总有相撞的那一天。\n\n随着时间的推移，**asm.js**这种开放、高效、简洁的开发方式被愈多的浏览器厂商和开发者认可、支持，跨浏览器支持的势头，潮流波涛汹涌。\n\n即使谷歌感觉**Native Client**非常优秀，但是太闭塞了，没有及时做技术推广，谷歌有野心，希望自己用这个技术把别的浏览器小弟甩在后面，但是在技术方案选择上，自己再强也不能和整个浏览器界抗衡啊，各玩各的，最终坑的还是自己，毕竟谷歌还是W3C一员呢，谷歌带着不甘心宣布2021年后不再支持**Native Client**(除了自家出品的)，转向支持**WebAssembly**。\n\n随着各个浏览器对asm.js的支持，2019 年 12 月 5 日，asm.js升级版，**WebAssembly**正式加入 HTML、CSS 和 JavaScript 的 Web 标准大家庭。WebAssembly1.0发布成为浏览器编译标准，高性能路线之争落下帷幕。\n","source":"_posts/两大浏览器高性能路线之争.md","raw":"---\ntitle: \"两大浏览器高性能路线之争\"\ndate: 2022-09-14\ntags: \n- 开发日常\n---\n2012年，Mozilla 的工程师[Alon Zakai](https://github.com/kripken)在研究 LLVM 编译器时突发奇想：许多 3D 游戏都是用 C / C++ 语言写的，如果能将 C / C++ 语言编译成 JavaScript 代码，它们不就能在浏览器里运行了吗？众所周知，JavaScript 的基本语法与 C 语言高度相似。\n于是，他开始研究怎么才能实现这个目标，为此专门做了一个编译器项目[Emscripten](https://github.com/kripken/emscripten)。这个编译器可以将 C / C++ 代码编译成 JS 代码，但不是普通的 JS，而是一种叫做[asm.js](http://asmjs.org/)的 JavaScript 变体。\n\n于是Mozilla开始支持 **asm.js**。\n\n于此同时的2013年，谷歌基于浏览器历史插件机制，推出沙盒机制的**Native Client**，以提高浏览器开发性能，这种高效稳定，无插件机制的构建方式被谷歌极力推崇。\n\n\n\n目的相同，但是技术路线不同，两股暗流总有相撞的那一天。\n\n随着时间的推移，**asm.js**这种开放、高效、简洁的开发方式被愈多的浏览器厂商和开发者认可、支持，跨浏览器支持的势头，潮流波涛汹涌。\n\n即使谷歌感觉**Native Client**非常优秀，但是太闭塞了，没有及时做技术推广，谷歌有野心，希望自己用这个技术把别的浏览器小弟甩在后面，但是在技术方案选择上，自己再强也不能和整个浏览器界抗衡啊，各玩各的，最终坑的还是自己，毕竟谷歌还是W3C一员呢，谷歌带着不甘心宣布2021年后不再支持**Native Client**(除了自家出品的)，转向支持**WebAssembly**。\n\n随着各个浏览器对asm.js的支持，2019 年 12 月 5 日，asm.js升级版，**WebAssembly**正式加入 HTML、CSS 和 JavaScript 的 Web 标准大家庭。WebAssembly1.0发布成为浏览器编译标准，高性能路线之争落下帷幕。\n","slug":"两大浏览器高性能路线之争","published":1,"updated":"2024-05-16T07:39:11.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ml001r2omvc85f43i9","content":"<p>2012年，Mozilla 的工程师<a href=\"https://github.com/kripken\">Alon Zakai</a>在研究 LLVM 编译器时突发奇想：许多 3D 游戏都是用 C &#x2F; C++ 语言写的，如果能将 C &#x2F; C++ 语言编译成 JavaScript 代码，它们不就能在浏览器里运行了吗？众所周知，JavaScript 的基本语法与 C 语言高度相似。<br>于是，他开始研究怎么才能实现这个目标，为此专门做了一个编译器项目<a href=\"https://github.com/kripken/emscripten\">Emscripten</a>。这个编译器可以将 C &#x2F; C++ 代码编译成 JS 代码，但不是普通的 JS，而是一种叫做<a href=\"http://asmjs.org/\">asm.js</a>的 JavaScript 变体。</p>\n<p>于是Mozilla开始支持 <strong>asm.js</strong>。</p>\n<p>于此同时的2013年，谷歌基于浏览器历史插件机制，推出沙盒机制的<strong>Native Client</strong>，以提高浏览器开发性能，这种高效稳定，无插件机制的构建方式被谷歌极力推崇。</p>\n<p>目的相同，但是技术路线不同，两股暗流总有相撞的那一天。</p>\n<p>随着时间的推移，<strong>asm.js</strong>这种开放、高效、简洁的开发方式被愈多的浏览器厂商和开发者认可、支持，跨浏览器支持的势头，潮流波涛汹涌。</p>\n<p>即使谷歌感觉<strong>Native Client</strong>非常优秀，但是太闭塞了，没有及时做技术推广，谷歌有野心，希望自己用这个技术把别的浏览器小弟甩在后面，但是在技术方案选择上，自己再强也不能和整个浏览器界抗衡啊，各玩各的，最终坑的还是自己，毕竟谷歌还是W3C一员呢，谷歌带着不甘心宣布2021年后不再支持<strong>Native Client</strong>(除了自家出品的)，转向支持<strong>WebAssembly</strong>。</p>\n<p>随着各个浏览器对asm.js的支持，2019 年 12 月 5 日，asm.js升级版，<strong>WebAssembly</strong>正式加入 HTML、CSS 和 JavaScript 的 Web 标准大家庭。WebAssembly1.0发布成为浏览器编译标准，高性能路线之争落下帷幕。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>2012年，Mozilla 的工程师<a href=\"https://github.com/kripken\">Alon Zakai</a>在研究 LLVM 编译器时突发奇想：许多 3D 游戏都是用 C &#x2F; C++ 语言写的，如果能将 C &#x2F; C++ 语言编译成 JavaScript 代码，它们不就能在浏览器里运行了吗？众所周知，JavaScript 的基本语法与 C 语言高度相似。<br>于是，他开始研究怎么才能实现这个目标，为此专门做了一个编译器项目<a href=\"https://github.com/kripken/emscripten\">Emscripten</a>。这个编译器可以将 C &#x2F; C++ 代码编译成 JS 代码，但不是普通的 JS，而是一种叫做<a href=\"http://asmjs.org/\">asm.js</a>的 JavaScript 变体。</p>\n<p>于是Mozilla开始支持 <strong>asm.js</strong>。</p>\n<p>于此同时的2013年，谷歌基于浏览器历史插件机制，推出沙盒机制的<strong>Native Client</strong>，以提高浏览器开发性能，这种高效稳定，无插件机制的构建方式被谷歌极力推崇。</p>\n<p>目的相同，但是技术路线不同，两股暗流总有相撞的那一天。</p>\n<p>随着时间的推移，<strong>asm.js</strong>这种开放、高效、简洁的开发方式被愈多的浏览器厂商和开发者认可、支持，跨浏览器支持的势头，潮流波涛汹涌。</p>\n<p>即使谷歌感觉<strong>Native Client</strong>非常优秀，但是太闭塞了，没有及时做技术推广，谷歌有野心，希望自己用这个技术把别的浏览器小弟甩在后面，但是在技术方案选择上，自己再强也不能和整个浏览器界抗衡啊，各玩各的，最终坑的还是自己，毕竟谷歌还是W3C一员呢，谷歌带着不甘心宣布2021年后不再支持<strong>Native Client</strong>(除了自家出品的)，转向支持<strong>WebAssembly</strong>。</p>\n<p>随着各个浏览器对asm.js的支持，2019 年 12 月 5 日，asm.js升级版，<strong>WebAssembly</strong>正式加入 HTML、CSS 和 JavaScript 的 Web 标准大家庭。WebAssembly1.0发布成为浏览器编译标准，高性能路线之争落下帷幕。</p>\n"},{"title":"使用-TS-适配-ES-Module-和-CommonJS-两种格式","date":"2023-07-19T16:00:00.000Z","_content":"\n","source":"_posts/使用-TS-适配-ES-Module-和-CommonJS-两种格式.md","raw":"---\ntitle: \"使用-TS-适配-ES-Module-和-CommonJS-两种格式\"\ndate: 2023-07-20\ntags: \n- 开发日常\n---\n\n","slug":"使用-TS-适配-ES-Module-和-CommonJS-两种格式","published":1,"updated":"2024-05-16T07:39:11.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mm001t2omv6msxb4k7","content":"\n","site":{"data":{}},"excerpt":"","more":""},{"title":"微信小程序-为什么地图本地体验可以用，线上环境不能用","date":"2020-12-23T16:00:00.000Z","_content":"需要加安全域名\n\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-846a995e89f0ff8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在你已经加的域名上增加\nhttps://apis.map.qq.com;\n","source":"_posts/微信小程序-为什么地图本地体验可以用，线上环境不能用.md","raw":"---\ntitle: \"微信小程序-为什么地图本地体验可以用，线上环境不能用\"\ndate: 2020-12-24\ntags: \n- 开发日常\n---\n需要加安全域名\n\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-846a995e89f0ff8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在你已经加的域名上增加\nhttps://apis.map.qq.com;\n","slug":"微信小程序-为什么地图本地体验可以用，线上环境不能用","published":1,"updated":"2024-05-16T07:39:11.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mn001v2omv55bl1k9b","content":"<p>需要加安全域名</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-846a995e89f0ff8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>在你已经加的域名上增加<br><a href=\"https://apis.map.qq.com/\">https://apis.map.qq.com</a>;</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>需要加安全域名</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-846a995e89f0ff8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>在你已经加的域名上增加<br><a href=\"https://apis.map.qq.com/\">https://apis.map.qq.com</a>;</p>\n"},{"title":"怎么避免ivew-form-prop,-乱七八糟的type校验","date":"2021-01-28T16:00:00.000Z","_content":"ivew 在参考(其实就是抄袭，api都一样)element的过程中，设置了一些独有的api\n比如，在form input校验中，设置了type,比如\n```\n <Form\n  :model=\"formValidate\" \n  :rules=\"ruleValidate\" >\n  <DatePicker type=\"date\" placeholder=\"Select date\" v-    \n   model=\"formValidate.date\">\n  </DatePicker>\n</Form>\n```\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-385922c598666c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一个很简单的日期填写校验，rules如下\n```\nruleValidate: {\n    date: [{ \n      required: true,\n      type: 'date', \n      message: 'Please select the date',\n      trigger: 'change' \n    }]  \n }\n```\ntype:'data'是什么意思，这个组件选择之后肯定是个data，这样的校验有什么意义呢。\n对于这种类型的校验，统一处理方法\npattern: /.+/ ,  代替 tpye:'data'\n```\n   date: [{ \n      required: true,\n      pattern: /.+/ ,\n      message: 'Please select the date',\n      trigger: 'change' \n    }]  \n```\n最后希望这个框架早点下架吧，这种反人性的UI框架对开发者来说就是灾难。\n有这功夫去做点有意义的事更划算。\n","source":"_posts/怎么避免ivew-form-prop,-乱七八糟的type校验.md","raw":"---\ntitle: \"怎么避免ivew-form-prop,-乱七八糟的type校验\"\ndate: 2021-01-29\ntags: \n- 开发日常\n---\nivew 在参考(其实就是抄袭，api都一样)element的过程中，设置了一些独有的api\n比如，在form input校验中，设置了type,比如\n```\n <Form\n  :model=\"formValidate\" \n  :rules=\"ruleValidate\" >\n  <DatePicker type=\"date\" placeholder=\"Select date\" v-    \n   model=\"formValidate.date\">\n  </DatePicker>\n</Form>\n```\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-385922c598666c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一个很简单的日期填写校验，rules如下\n```\nruleValidate: {\n    date: [{ \n      required: true,\n      type: 'date', \n      message: 'Please select the date',\n      trigger: 'change' \n    }]  \n }\n```\ntype:'data'是什么意思，这个组件选择之后肯定是个data，这样的校验有什么意义呢。\n对于这种类型的校验，统一处理方法\npattern: /.+/ ,  代替 tpye:'data'\n```\n   date: [{ \n      required: true,\n      pattern: /.+/ ,\n      message: 'Please select the date',\n      trigger: 'change' \n    }]  \n```\n最后希望这个框架早点下架吧，这种反人性的UI框架对开发者来说就是灾难。\n有这功夫去做点有意义的事更划算。\n","slug":"怎么避免ivew-form-prop,-乱七八糟的type校验","published":1,"updated":"2024-05-16T07:39:11.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mo001x2omvdvpk81y3","content":"<p>ivew 在参考(其实就是抄袭，api都一样)element的过程中，设置了一些独有的api<br>比如，在form input校验中，设置了type,比如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;Form</span><br><span class=\"line\">  :model=&quot;formValidate&quot; </span><br><span class=\"line\">  :rules=&quot;ruleValidate&quot; &gt;</span><br><span class=\"line\">  &lt;DatePicker type=&quot;date&quot; placeholder=&quot;Select date&quot; v-    </span><br><span class=\"line\">   model=&quot;formValidate.date&quot;&gt;</span><br><span class=\"line\">  &lt;/DatePicker&gt;</span><br><span class=\"line\">&lt;/Form&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-385922c598666c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>一个很简单的日期填写校验，rules如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruleValidate: &#123;</span><br><span class=\"line\">    date: [&#123; </span><br><span class=\"line\">      required: true,</span><br><span class=\"line\">      type: &#x27;date&#x27;, </span><br><span class=\"line\">      message: &#x27;Please select the date&#x27;,</span><br><span class=\"line\">      trigger: &#x27;change&#x27; </span><br><span class=\"line\">    &#125;]  </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>type:’data’是什么意思，这个组件选择之后肯定是个data，这样的校验有什么意义呢。<br>对于这种类型的校验，统一处理方法<br>pattern: &#x2F;.+&#x2F; ,  代替 tpye:’data’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date: [&#123; </span><br><span class=\"line\">   required: true,</span><br><span class=\"line\">   pattern: /.+/ ,</span><br><span class=\"line\">   message: &#x27;Please select the date&#x27;,</span><br><span class=\"line\">   trigger: &#x27;change&#x27; </span><br><span class=\"line\"> &#125;]  </span><br></pre></td></tr></table></figure>\n<p>最后希望这个框架早点下架吧，这种反人性的UI框架对开发者来说就是灾难。<br>有这功夫去做点有意义的事更划算。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>ivew 在参考(其实就是抄袭，api都一样)element的过程中，设置了一些独有的api<br>比如，在form input校验中，设置了type,比如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;Form</span><br><span class=\"line\">  :model=&quot;formValidate&quot; </span><br><span class=\"line\">  :rules=&quot;ruleValidate&quot; &gt;</span><br><span class=\"line\">  &lt;DatePicker type=&quot;date&quot; placeholder=&quot;Select date&quot; v-    </span><br><span class=\"line\">   model=&quot;formValidate.date&quot;&gt;</span><br><span class=\"line\">  &lt;/DatePicker&gt;</span><br><span class=\"line\">&lt;/Form&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-385922c598666c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>一个很简单的日期填写校验，rules如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruleValidate: &#123;</span><br><span class=\"line\">    date: [&#123; </span><br><span class=\"line\">      required: true,</span><br><span class=\"line\">      type: &#x27;date&#x27;, </span><br><span class=\"line\">      message: &#x27;Please select the date&#x27;,</span><br><span class=\"line\">      trigger: &#x27;change&#x27; </span><br><span class=\"line\">    &#125;]  </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>type:’data’是什么意思，这个组件选择之后肯定是个data，这样的校验有什么意义呢。<br>对于这种类型的校验，统一处理方法<br>pattern: &#x2F;.+&#x2F; ,  代替 tpye:’data’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date: [&#123; </span><br><span class=\"line\">   required: true,</span><br><span class=\"line\">   pattern: /.+/ ,</span><br><span class=\"line\">   message: &#x27;Please select the date&#x27;,</span><br><span class=\"line\">   trigger: &#x27;change&#x27; </span><br><span class=\"line\"> &#125;]  </span><br></pre></td></tr></table></figure>\n<p>最后希望这个框架早点下架吧，这种反人性的UI框架对开发者来说就是灾难。<br>有这功夫去做点有意义的事更划算。</p>\n"},{"title":"清明节,今天想跟自己谈谈.html","date":"2021-01-10T16:00:00.000Z","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>清明节,今天想跟自己谈谈</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">清明节,今天想跟自己谈谈</h1>\n        <div class=\"show-content\">\n          <p>    今天是2020年的清明节，今年发生了很多事，走了很多人，自己这两年也有很多变化，不论身体还是精神都是这样，过年的时候奶奶走了，心脏病很突然，大哥在微信的跟我说的时候内心还是不相信，奶奶八十多岁了，头上一根白头发都没有，真的很突然。毕业6年来，爷爷，姥姥，奶奶，没有了老一辈的人，突然感觉自己不再是个少年了。以前觉得人不会死，现在才发现，这是必经之路。</p><p>前几天听说司徒正美因为脊椎病突然去世了，应该叫猝死吧,顺手翻了翻这位大神的知乎，看他的回答这个人正在走在财务自由的路上，起码物质不缺乏，他只比我大两岁，也是没成家，一阵唏嘘，如果他有老婆，应该不会走的这么突然吧，起码身边有个人会照顾他，自己这两年颈椎也不太好，这应该是程序员的通病吧。昨天坐在电脑前，看了会东西，颈椎就会不舒服的很，但是没工作没法生存，可能人生是需要不断平衡吧，以后还是要多锻炼啊，司徒最可悲的应该是人走了，钱没花了。现在发现对技术的热情好像减退很多。</p><p>想想毕业这几年，14年去北京的时候还是个小屁孩，那时候主要注意力好像都放在了找女朋友上，现在想想真是傻啊，如果多放点精力在工作上，现在也不至于如此潦倒了。需要反思的东西太多太多，人还是需要脚踏实地一点，想想这些年爱过的人，恨过的人，放弃的人，离开的人。一切都是浮云吧，到头来能陪你走下去的还是喜欢你的人吧。已经年过30的人了，但是希望一切还不是太晚吧。</p><p>来青岛已经差不多一个月，现在每天都在回北京还是留在青岛两条路中犹豫，想想自己十几万的欠款，这个决定真的不好下，疫情这么严重，心里非常乱，希望赶紧结束吧。</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n","source":"_posts/清明节,今天想跟自己谈谈.html","raw":"---\ntitle: \"清明节,今天想跟自己谈谈.html\"\ndate: 2021-01-11\ntags: \n- 开发日常\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>清明节,今天想跟自己谈谈</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">清明节,今天想跟自己谈谈</h1>\n        <div class=\"show-content\">\n          <p>    今天是2020年的清明节，今年发生了很多事，走了很多人，自己这两年也有很多变化，不论身体还是精神都是这样，过年的时候奶奶走了，心脏病很突然，大哥在微信的跟我说的时候内心还是不相信，奶奶八十多岁了，头上一根白头发都没有，真的很突然。毕业6年来，爷爷，姥姥，奶奶，没有了老一辈的人，突然感觉自己不再是个少年了。以前觉得人不会死，现在才发现，这是必经之路。</p><p>前几天听说司徒正美因为脊椎病突然去世了，应该叫猝死吧,顺手翻了翻这位大神的知乎，看他的回答这个人正在走在财务自由的路上，起码物质不缺乏，他只比我大两岁，也是没成家，一阵唏嘘，如果他有老婆，应该不会走的这么突然吧，起码身边有个人会照顾他，自己这两年颈椎也不太好，这应该是程序员的通病吧。昨天坐在电脑前，看了会东西，颈椎就会不舒服的很，但是没工作没法生存，可能人生是需要不断平衡吧，以后还是要多锻炼啊，司徒最可悲的应该是人走了，钱没花了。现在发现对技术的热情好像减退很多。</p><p>想想毕业这几年，14年去北京的时候还是个小屁孩，那时候主要注意力好像都放在了找女朋友上，现在想想真是傻啊，如果多放点精力在工作上，现在也不至于如此潦倒了。需要反思的东西太多太多，人还是需要脚踏实地一点，想想这些年爱过的人，恨过的人，放弃的人，离开的人。一切都是浮云吧，到头来能陪你走下去的还是喜欢你的人吧。已经年过30的人了，但是希望一切还不是太晚吧。</p><p>来青岛已经差不多一个月，现在每天都在回北京还是留在青岛两条路中犹豫，想想自己十几万的欠款，这个决定真的不好下，疫情这么严重，心里非常乱，希望赶紧结束吧。</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n","slug":"清明节,今天想跟自己谈谈","published":1,"updated":"2024-05-16T07:39:11.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mp001z2omv5cuz188c","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>清明节,今天想跟自己谈谈</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">清明节,今天想跟自己谈谈</h1>\n        <div class=\"show-content\">\n          <p>    今天是2020年的清明节，今年发生了很多事，走了很多人，自己这两年也有很多变化，不论身体还是精神都是这样，过年的时候奶奶走了，心脏病很突然，大哥在微信的跟我说的时候内心还是不相信，奶奶八十多岁了，头上一根白头发都没有，真的很突然。毕业6年来，爷爷，姥姥，奶奶，没有了老一辈的人，突然感觉自己不再是个少年了。以前觉得人不会死，现在才发现，这是必经之路。</p><p>前几天听说司徒正美因为脊椎病突然去世了，应该叫猝死吧,顺手翻了翻这位大神的知乎，看他的回答这个人正在走在财务自由的路上，起码物质不缺乏，他只比我大两岁，也是没成家，一阵唏嘘，如果他有老婆，应该不会走的这么突然吧，起码身边有个人会照顾他，自己这两年颈椎也不太好，这应该是程序员的通病吧。昨天坐在电脑前，看了会东西，颈椎就会不舒服的很，但是没工作没法生存，可能人生是需要不断平衡吧，以后还是要多锻炼啊，司徒最可悲的应该是人走了，钱没花了。现在发现对技术的热情好像减退很多。</p><p>想想毕业这几年，14年去北京的时候还是个小屁孩，那时候主要注意力好像都放在了找女朋友上，现在想想真是傻啊，如果多放点精力在工作上，现在也不至于如此潦倒了。需要反思的东西太多太多，人还是需要脚踏实地一点，想想这些年爱过的人，恨过的人，放弃的人，离开的人。一切都是浮云吧，到头来能陪你走下去的还是喜欢你的人吧。已经年过30的人了，但是希望一切还不是太晚吧。</p><p>来青岛已经差不多一个月，现在每天都在回北京还是留在青岛两条路中犹豫，想想自己十几万的欠款，这个决定真的不好下，疫情这么严重，心里非常乱，希望赶紧结束吧。</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>清明节,今天想跟自己谈谈</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">清明节,今天想跟自己谈谈</h1>\n        <div class=\"show-content\">\n          <p>    今天是2020年的清明节，今年发生了很多事，走了很多人，自己这两年也有很多变化，不论身体还是精神都是这样，过年的时候奶奶走了，心脏病很突然，大哥在微信的跟我说的时候内心还是不相信，奶奶八十多岁了，头上一根白头发都没有，真的很突然。毕业6年来，爷爷，姥姥，奶奶，没有了老一辈的人，突然感觉自己不再是个少年了。以前觉得人不会死，现在才发现，这是必经之路。</p><p>前几天听说司徒正美因为脊椎病突然去世了，应该叫猝死吧,顺手翻了翻这位大神的知乎，看他的回答这个人正在走在财务自由的路上，起码物质不缺乏，他只比我大两岁，也是没成家，一阵唏嘘，如果他有老婆，应该不会走的这么突然吧，起码身边有个人会照顾他，自己这两年颈椎也不太好，这应该是程序员的通病吧。昨天坐在电脑前，看了会东西，颈椎就会不舒服的很，但是没工作没法生存，可能人生是需要不断平衡吧，以后还是要多锻炼啊，司徒最可悲的应该是人走了，钱没花了。现在发现对技术的热情好像减退很多。</p><p>想想毕业这几年，14年去北京的时候还是个小屁孩，那时候主要注意力好像都放在了找女朋友上，现在想想真是傻啊，如果多放点精力在工作上，现在也不至于如此潦倒了。需要反思的东西太多太多，人还是需要脚踏实地一点，想想这些年爱过的人，恨过的人，放弃的人，离开的人。一切都是浮云吧，到头来能陪你走下去的还是喜欢你的人吧。已经年过30的人了，但是希望一切还不是太晚吧。</p><p>来青岛已经差不多一个月，现在每天都在回北京还是留在青岛两条路中犹豫，想想自己十几万的欠款，这个决定真的不好下，疫情这么严重，心里非常乱，希望赶紧结束吧。</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n"},{"title":"知识肥胖症的危害","date":"2022-08-06T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-a7ea17d187cb1286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n前几天去体检，检测结果胆固醇有点过高，我想这个结果主要我平时的饮食和生活习惯造成的，喜欢吃油腻的东西，比如烧烤，火锅，晚上经常吃饭晚，运动很少，烟瘾大，经常喝啤酒。体检报告显示，脂肪肝，能量过剩，容易导致心血管疾病，建议少吃油腻的东西，加强锻炼促进**新陈代谢**。\n\n大夫让我迅速干预控制，这下老实了，最近下班也不敢坐着了，**戒烟戒酒**，回家随便吃点东西，就出去跑步，慢走。这几天瘦了大概五斤左右，整体感觉身体轻松了很多，脑子也没这么晕了，以前感觉脑袋有胀痛感，我感觉应该是血管被坏脂肪堵塞，流通压力大的原因，不得不说体检作用还是有效果的。\n\n感觉近几年非常容易感觉饿，而且特别不想动，随着年龄的增长新陈代谢速度也下降了，这就导致了**能量过剩**，脂肪堆积。\n\n这几天思考了一下，其实不止是身体上，能量消化不良，在工作学习中也有类似的问题。作为IT工作者，在这个知识大爆炸的年代，各种**公众号**，**知乎问答**，**技术社区**，**技术博客**，**短视频**，**社交平台**，还有**各色培训机构**等等都在向你输送知识讯息，只要你拿起**手机**，打开网络，就会被各种APP俘虏，这些东西就会直接怼到你脸上，钻进你的大脑。而且很多信息都以爽文的形式，利用你的知识焦虑感，吸引你的眼球，让你点进来，阅读，知识付费，让这些东西进入你的知识仓库，但还没来得及消化吸收，又有新的文章培训资料出来了，冲去你的知识仓库，一天天的挤压下去，像一座小山一样。比如有的人热衷于在网上买教程，买书，买完之后就放在柜子上，账户文件夹里，偶尔看一看，遇到不懂的部分也不去深入研究，浮光掠影一般，对看到的东西一知半解，囫囵吞枣，其结果就只能是消化不良。\n\n这个过程就好像吃东西一样，有的人不管自己的身体能不能消耗，器官能否承受，感觉这个东西好吃，就吃进去，就是我的了，现在网上的知识推送形式就好像大商场的餐厅一样，琳琅满目，变着花样让你消费，可以说在这一块你的自律性永远低于商家糖衣炮弹。这些吃的东西分解不掉，时间长了，就会形成坏脂肪，堆积在你的知识仓库，阻塞你前进的路，成为你深入学习的巨大负担。\n\n在这个时代，每天都会有新的东西出来，你可能仍然选择把它吃下去。这样会有一个恶果，不求甚解的你，面对海量的知识，无从下手，这样你对热情就会降低，开始对自己的学习能力产生怀疑，这就极大的违背你学习的初衷。我想《千与千寻》中的**无脸男**就是宫崎骏对这个时代一方面的映射，即人类自身接受速度远低于现代社会物质知识产生的速度，导致了身体和心理的畸形发育，不仅不能让自己变好，而且离自己的目标越来越远了。《笑傲江湖》中的**任我行**，一到关键时刻就使出吸星大法，吸入别人的内力，以为己用，但是这些内力是高手们经过多年积累出来的，不能相容，随着吸入的内力越来越多，任我行无力压制，最后这些内力开始反噬任的内心和身体，让他痛不欲生，力衰而亡。\n\n我国每年又300万人死于心脑血管疾病，700多万人因为心脑血管疾病瘫痪在床，生活无法自理，这个数字在不断增加，而且愈来愈有年轻化趋势。还有一个糖尿病，糖现在获取方式很简单，日常食物中蛋糕奶油，雪糕，奶茶，甜食等等，非常方便，但在远古时期人类获取糖的途径很少，也很困难，比如搞点蜂蜜，还要承担被蜜蜂报复的危险，成本比较高，摄入少，人类器官不需要对糖太高的消解能力。在工业革命后，糖类工业化生产效率大幅度提高，然而人类经过几百年进化，肝脏消化糖的能力并没有多少提升，这就导致了现在的问题，获取速度远大于人类器官接受速度。\n\n所以从另一个方面讲，物质丰富，知识丰富不一定是好事，如果我们不能正确的利用社会资源，正确评估身体的承受能力，不断挑战身体和精神的极限，下一个倒下的可能就是你。\n\n其实解决办法很简单，就和降低胆固醇一样的方法，少吃多动，给自己的身体和精神瘦身。这么多东西，不如少看一点，比如读书，与其多读烂读，不如精读少读，拒绝对外界的无序投喂，拒绝无限制输入，对学到的东西一定要理解消化，再继续往前走，按照自己的节奏来根据自己的接受能力去安排学习速度，就像能量一样等被身体消耗完了，再继续吃自己想吃的。\n\n","source":"_posts/知识肥胖症的危害.md","raw":"---\ntitle: \"知识肥胖症的危害\"\ndate: 2022-08-07\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-a7ea17d187cb1286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n前几天去体检，检测结果胆固醇有点过高，我想这个结果主要我平时的饮食和生活习惯造成的，喜欢吃油腻的东西，比如烧烤，火锅，晚上经常吃饭晚，运动很少，烟瘾大，经常喝啤酒。体检报告显示，脂肪肝，能量过剩，容易导致心血管疾病，建议少吃油腻的东西，加强锻炼促进**新陈代谢**。\n\n大夫让我迅速干预控制，这下老实了，最近下班也不敢坐着了，**戒烟戒酒**，回家随便吃点东西，就出去跑步，慢走。这几天瘦了大概五斤左右，整体感觉身体轻松了很多，脑子也没这么晕了，以前感觉脑袋有胀痛感，我感觉应该是血管被坏脂肪堵塞，流通压力大的原因，不得不说体检作用还是有效果的。\n\n感觉近几年非常容易感觉饿，而且特别不想动，随着年龄的增长新陈代谢速度也下降了，这就导致了**能量过剩**，脂肪堆积。\n\n这几天思考了一下，其实不止是身体上，能量消化不良，在工作学习中也有类似的问题。作为IT工作者，在这个知识大爆炸的年代，各种**公众号**，**知乎问答**，**技术社区**，**技术博客**，**短视频**，**社交平台**，还有**各色培训机构**等等都在向你输送知识讯息，只要你拿起**手机**，打开网络，就会被各种APP俘虏，这些东西就会直接怼到你脸上，钻进你的大脑。而且很多信息都以爽文的形式，利用你的知识焦虑感，吸引你的眼球，让你点进来，阅读，知识付费，让这些东西进入你的知识仓库，但还没来得及消化吸收，又有新的文章培训资料出来了，冲去你的知识仓库，一天天的挤压下去，像一座小山一样。比如有的人热衷于在网上买教程，买书，买完之后就放在柜子上，账户文件夹里，偶尔看一看，遇到不懂的部分也不去深入研究，浮光掠影一般，对看到的东西一知半解，囫囵吞枣，其结果就只能是消化不良。\n\n这个过程就好像吃东西一样，有的人不管自己的身体能不能消耗，器官能否承受，感觉这个东西好吃，就吃进去，就是我的了，现在网上的知识推送形式就好像大商场的餐厅一样，琳琅满目，变着花样让你消费，可以说在这一块你的自律性永远低于商家糖衣炮弹。这些吃的东西分解不掉，时间长了，就会形成坏脂肪，堆积在你的知识仓库，阻塞你前进的路，成为你深入学习的巨大负担。\n\n在这个时代，每天都会有新的东西出来，你可能仍然选择把它吃下去。这样会有一个恶果，不求甚解的你，面对海量的知识，无从下手，这样你对热情就会降低，开始对自己的学习能力产生怀疑，这就极大的违背你学习的初衷。我想《千与千寻》中的**无脸男**就是宫崎骏对这个时代一方面的映射，即人类自身接受速度远低于现代社会物质知识产生的速度，导致了身体和心理的畸形发育，不仅不能让自己变好，而且离自己的目标越来越远了。《笑傲江湖》中的**任我行**，一到关键时刻就使出吸星大法，吸入别人的内力，以为己用，但是这些内力是高手们经过多年积累出来的，不能相容，随着吸入的内力越来越多，任我行无力压制，最后这些内力开始反噬任的内心和身体，让他痛不欲生，力衰而亡。\n\n我国每年又300万人死于心脑血管疾病，700多万人因为心脑血管疾病瘫痪在床，生活无法自理，这个数字在不断增加，而且愈来愈有年轻化趋势。还有一个糖尿病，糖现在获取方式很简单，日常食物中蛋糕奶油，雪糕，奶茶，甜食等等，非常方便，但在远古时期人类获取糖的途径很少，也很困难，比如搞点蜂蜜，还要承担被蜜蜂报复的危险，成本比较高，摄入少，人类器官不需要对糖太高的消解能力。在工业革命后，糖类工业化生产效率大幅度提高，然而人类经过几百年进化，肝脏消化糖的能力并没有多少提升，这就导致了现在的问题，获取速度远大于人类器官接受速度。\n\n所以从另一个方面讲，物质丰富，知识丰富不一定是好事，如果我们不能正确的利用社会资源，正确评估身体的承受能力，不断挑战身体和精神的极限，下一个倒下的可能就是你。\n\n其实解决办法很简单，就和降低胆固醇一样的方法，少吃多动，给自己的身体和精神瘦身。这么多东西，不如少看一点，比如读书，与其多读烂读，不如精读少读，拒绝对外界的无序投喂，拒绝无限制输入，对学到的东西一定要理解消化，再继续往前走，按照自己的节奏来根据自己的接受能力去安排学习速度，就像能量一样等被身体消耗完了，再继续吃自己想吃的。\n\n","slug":"知识肥胖症的危害","published":1,"updated":"2024-05-16T07:39:11.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mq00212omvegs839s1","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a7ea17d187cb1286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>前几天去体检，检测结果胆固醇有点过高，我想这个结果主要我平时的饮食和生活习惯造成的，喜欢吃油腻的东西，比如烧烤，火锅，晚上经常吃饭晚，运动很少，烟瘾大，经常喝啤酒。体检报告显示，脂肪肝，能量过剩，容易导致心血管疾病，建议少吃油腻的东西，加强锻炼促进<strong>新陈代谢</strong>。</p>\n<p>大夫让我迅速干预控制，这下老实了，最近下班也不敢坐着了，<strong>戒烟戒酒</strong>，回家随便吃点东西，就出去跑步，慢走。这几天瘦了大概五斤左右，整体感觉身体轻松了很多，脑子也没这么晕了，以前感觉脑袋有胀痛感，我感觉应该是血管被坏脂肪堵塞，流通压力大的原因，不得不说体检作用还是有效果的。</p>\n<p>感觉近几年非常容易感觉饿，而且特别不想动，随着年龄的增长新陈代谢速度也下降了，这就导致了<strong>能量过剩</strong>，脂肪堆积。</p>\n<p>这几天思考了一下，其实不止是身体上，能量消化不良，在工作学习中也有类似的问题。作为IT工作者，在这个知识大爆炸的年代，各种<strong>公众号</strong>，<strong>知乎问答</strong>，<strong>技术社区</strong>，<strong>技术博客</strong>，<strong>短视频</strong>，<strong>社交平台</strong>，还有<strong>各色培训机构</strong>等等都在向你输送知识讯息，只要你拿起<strong>手机</strong>，打开网络，就会被各种APP俘虏，这些东西就会直接怼到你脸上，钻进你的大脑。而且很多信息都以爽文的形式，利用你的知识焦虑感，吸引你的眼球，让你点进来，阅读，知识付费，让这些东西进入你的知识仓库，但还没来得及消化吸收，又有新的文章培训资料出来了，冲去你的知识仓库，一天天的挤压下去，像一座小山一样。比如有的人热衷于在网上买教程，买书，买完之后就放在柜子上，账户文件夹里，偶尔看一看，遇到不懂的部分也不去深入研究，浮光掠影一般，对看到的东西一知半解，囫囵吞枣，其结果就只能是消化不良。</p>\n<p>这个过程就好像吃东西一样，有的人不管自己的身体能不能消耗，器官能否承受，感觉这个东西好吃，就吃进去，就是我的了，现在网上的知识推送形式就好像大商场的餐厅一样，琳琅满目，变着花样让你消费，可以说在这一块你的自律性永远低于商家糖衣炮弹。这些吃的东西分解不掉，时间长了，就会形成坏脂肪，堆积在你的知识仓库，阻塞你前进的路，成为你深入学习的巨大负担。</p>\n<p>在这个时代，每天都会有新的东西出来，你可能仍然选择把它吃下去。这样会有一个恶果，不求甚解的你，面对海量的知识，无从下手，这样你对热情就会降低，开始对自己的学习能力产生怀疑，这就极大的违背你学习的初衷。我想《千与千寻》中的<strong>无脸男</strong>就是宫崎骏对这个时代一方面的映射，即人类自身接受速度远低于现代社会物质知识产生的速度，导致了身体和心理的畸形发育，不仅不能让自己变好，而且离自己的目标越来越远了。《笑傲江湖》中的<strong>任我行</strong>，一到关键时刻就使出吸星大法，吸入别人的内力，以为己用，但是这些内力是高手们经过多年积累出来的，不能相容，随着吸入的内力越来越多，任我行无力压制，最后这些内力开始反噬任的内心和身体，让他痛不欲生，力衰而亡。</p>\n<p>我国每年又300万人死于心脑血管疾病，700多万人因为心脑血管疾病瘫痪在床，生活无法自理，这个数字在不断增加，而且愈来愈有年轻化趋势。还有一个糖尿病，糖现在获取方式很简单，日常食物中蛋糕奶油，雪糕，奶茶，甜食等等，非常方便，但在远古时期人类获取糖的途径很少，也很困难，比如搞点蜂蜜，还要承担被蜜蜂报复的危险，成本比较高，摄入少，人类器官不需要对糖太高的消解能力。在工业革命后，糖类工业化生产效率大幅度提高，然而人类经过几百年进化，肝脏消化糖的能力并没有多少提升，这就导致了现在的问题，获取速度远大于人类器官接受速度。</p>\n<p>所以从另一个方面讲，物质丰富，知识丰富不一定是好事，如果我们不能正确的利用社会资源，正确评估身体的承受能力，不断挑战身体和精神的极限，下一个倒下的可能就是你。</p>\n<p>其实解决办法很简单，就和降低胆固醇一样的方法，少吃多动，给自己的身体和精神瘦身。这么多东西，不如少看一点，比如读书，与其多读烂读，不如精读少读，拒绝对外界的无序投喂，拒绝无限制输入，对学到的东西一定要理解消化，再继续往前走，按照自己的节奏来根据自己的接受能力去安排学习速度，就像能量一样等被身体消耗完了，再继续吃自己想吃的。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a7ea17d187cb1286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>前几天去体检，检测结果胆固醇有点过高，我想这个结果主要我平时的饮食和生活习惯造成的，喜欢吃油腻的东西，比如烧烤，火锅，晚上经常吃饭晚，运动很少，烟瘾大，经常喝啤酒。体检报告显示，脂肪肝，能量过剩，容易导致心血管疾病，建议少吃油腻的东西，加强锻炼促进<strong>新陈代谢</strong>。</p>\n<p>大夫让我迅速干预控制，这下老实了，最近下班也不敢坐着了，<strong>戒烟戒酒</strong>，回家随便吃点东西，就出去跑步，慢走。这几天瘦了大概五斤左右，整体感觉身体轻松了很多，脑子也没这么晕了，以前感觉脑袋有胀痛感，我感觉应该是血管被坏脂肪堵塞，流通压力大的原因，不得不说体检作用还是有效果的。</p>\n<p>感觉近几年非常容易感觉饿，而且特别不想动，随着年龄的增长新陈代谢速度也下降了，这就导致了<strong>能量过剩</strong>，脂肪堆积。</p>\n<p>这几天思考了一下，其实不止是身体上，能量消化不良，在工作学习中也有类似的问题。作为IT工作者，在这个知识大爆炸的年代，各种<strong>公众号</strong>，<strong>知乎问答</strong>，<strong>技术社区</strong>，<strong>技术博客</strong>，<strong>短视频</strong>，<strong>社交平台</strong>，还有<strong>各色培训机构</strong>等等都在向你输送知识讯息，只要你拿起<strong>手机</strong>，打开网络，就会被各种APP俘虏，这些东西就会直接怼到你脸上，钻进你的大脑。而且很多信息都以爽文的形式，利用你的知识焦虑感，吸引你的眼球，让你点进来，阅读，知识付费，让这些东西进入你的知识仓库，但还没来得及消化吸收，又有新的文章培训资料出来了，冲去你的知识仓库，一天天的挤压下去，像一座小山一样。比如有的人热衷于在网上买教程，买书，买完之后就放在柜子上，账户文件夹里，偶尔看一看，遇到不懂的部分也不去深入研究，浮光掠影一般，对看到的东西一知半解，囫囵吞枣，其结果就只能是消化不良。</p>\n<p>这个过程就好像吃东西一样，有的人不管自己的身体能不能消耗，器官能否承受，感觉这个东西好吃，就吃进去，就是我的了，现在网上的知识推送形式就好像大商场的餐厅一样，琳琅满目，变着花样让你消费，可以说在这一块你的自律性永远低于商家糖衣炮弹。这些吃的东西分解不掉，时间长了，就会形成坏脂肪，堆积在你的知识仓库，阻塞你前进的路，成为你深入学习的巨大负担。</p>\n<p>在这个时代，每天都会有新的东西出来，你可能仍然选择把它吃下去。这样会有一个恶果，不求甚解的你，面对海量的知识，无从下手，这样你对热情就会降低，开始对自己的学习能力产生怀疑，这就极大的违背你学习的初衷。我想《千与千寻》中的<strong>无脸男</strong>就是宫崎骏对这个时代一方面的映射，即人类自身接受速度远低于现代社会物质知识产生的速度，导致了身体和心理的畸形发育，不仅不能让自己变好，而且离自己的目标越来越远了。《笑傲江湖》中的<strong>任我行</strong>，一到关键时刻就使出吸星大法，吸入别人的内力，以为己用，但是这些内力是高手们经过多年积累出来的，不能相容，随着吸入的内力越来越多，任我行无力压制，最后这些内力开始反噬任的内心和身体，让他痛不欲生，力衰而亡。</p>\n<p>我国每年又300万人死于心脑血管疾病，700多万人因为心脑血管疾病瘫痪在床，生活无法自理，这个数字在不断增加，而且愈来愈有年轻化趋势。还有一个糖尿病，糖现在获取方式很简单，日常食物中蛋糕奶油，雪糕，奶茶，甜食等等，非常方便，但在远古时期人类获取糖的途径很少，也很困难，比如搞点蜂蜜，还要承担被蜜蜂报复的危险，成本比较高，摄入少，人类器官不需要对糖太高的消解能力。在工业革命后，糖类工业化生产效率大幅度提高，然而人类经过几百年进化，肝脏消化糖的能力并没有多少提升，这就导致了现在的问题，获取速度远大于人类器官接受速度。</p>\n<p>所以从另一个方面讲，物质丰富，知识丰富不一定是好事，如果我们不能正确的利用社会资源，正确评估身体的承受能力，不断挑战身体和精神的极限，下一个倒下的可能就是你。</p>\n<p>其实解决办法很简单，就和降低胆固醇一样的方法，少吃多动，给自己的身体和精神瘦身。这么多东西，不如少看一点，比如读书，与其多读烂读，不如精读少读，拒绝对外界的无序投喂，拒绝无限制输入，对学到的东西一定要理解消化，再继续往前走，按照自己的节奏来根据自己的接受能力去安排学习速度，就像能量一样等被身体消耗完了，再继续吃自己想吃的。</p>\n"},{"title":"编译器.html","date":"2021-01-10T16:00:00.000Z","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>编译器</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">编译器</h1>\n        <div class=\"show-content\">\n          <p>前端</p><p>1.词法分析 </p><p>2.语法分析</p><p>生成编译器语言或者中间码</p><p>后端 </p><p>编译器语言或者中间码</p><p>不同平台生成不同</p><p>汇编语言</p><p>通过**汇编器**生成机器语言，</p><p>根据不同平台可执行文件格式进行修改</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n","source":"_posts/编译器.html","raw":"---\ntitle: \"编译器.html\"\ndate: 2021-01-11\ntags: \n- 开发日常\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>编译器</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">编译器</h1>\n        <div class=\"show-content\">\n          <p>前端</p><p>1.词法分析 </p><p>2.语法分析</p><p>生成编译器语言或者中间码</p><p>后端 </p><p>编译器语言或者中间码</p><p>不同平台生成不同</p><p>汇编语言</p><p>通过**汇编器**生成机器语言，</p><p>根据不同平台可执行文件格式进行修改</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n","slug":"编译器","published":1,"updated":"2024-05-16T07:39:11.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mr00232omvc1x87eso","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>编译器</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">编译器</h1>\n        <div class=\"show-content\">\n          <p>前端</p><p>1.词法分析 </p><p>2.语法分析</p><p>生成编译器语言或者中间码</p><p>后端 </p><p>编译器语言或者中间码</p><p>不同平台生成不同</p><p>汇编语言</p><p>通过**汇编器**生成机器语言，</p><p>根据不同平台可执行文件格式进行修改</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>编译器</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">编译器</h1>\n        <div class=\"show-content\">\n          <p>前端</p><p>1.词法分析 </p><p>2.语法分析</p><p>生成编译器语言或者中间码</p><p>后端 </p><p>编译器语言或者中间码</p><p>不同平台生成不同</p><p>汇编语言</p><p>通过**汇编器**生成机器语言，</p><p>根据不同平台可执行文件格式进行修改</p>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n"},{"title":"🌈--css-flex-多列等高","date":"2021-08-31T16:00:00.000Z","_content":"1.父元素设置display:flex\n2.子元素设置 flex:1\n\n```\n#container{\n\twidth:400px;\n\tmargin:0 auto;\n\tbackground-color: #ddd;\n\tdisplay:flex;\n}\n// 不要设置 align-items 属性\n.left,\n.right{\n\tdisplay:1;\n\twidth:200px;\n\tfont-size: 16px;\n\tline-height:24px;\n\tcolor:#333;\n}\n\n.left{\n\tbackground-color: deeppink;\n}\n.right{\n\tbackground-color:yellowgreen;\n}\n```\nhttps://codepen.io/qiudaoermu/pen/rNzPMPz\n","source":"_posts/🌈--css-flex-多列等高.md","raw":"---\ntitle: \"🌈--css-flex-多列等高\"\ndate: 2021-09-01\ntags: \n- css\n---\n1.父元素设置display:flex\n2.子元素设置 flex:1\n\n```\n#container{\n\twidth:400px;\n\tmargin:0 auto;\n\tbackground-color: #ddd;\n\tdisplay:flex;\n}\n// 不要设置 align-items 属性\n.left,\n.right{\n\tdisplay:1;\n\twidth:200px;\n\tfont-size: 16px;\n\tline-height:24px;\n\tcolor:#333;\n}\n\n.left{\n\tbackground-color: deeppink;\n}\n.right{\n\tbackground-color:yellowgreen;\n}\n```\nhttps://codepen.io/qiudaoermu/pen/rNzPMPz\n","slug":"🌈--css-flex-多列等高","published":1,"updated":"2024-05-16T07:39:11.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mt00252omv66cv7jza","content":"<p>1.父元素设置display:flex<br>2.子元素设置 flex:1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#container&#123;</span><br><span class=\"line\">\twidth:400px;</span><br><span class=\"line\">\tmargin:0 auto;</span><br><span class=\"line\">\tbackground-color: #ddd;</span><br><span class=\"line\">\tdisplay:flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 不要设置 align-items 属性</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right&#123;</span><br><span class=\"line\">\tdisplay:1;</span><br><span class=\"line\">\twidth:200px;</span><br><span class=\"line\">\tfont-size: 16px;</span><br><span class=\"line\">\tline-height:24px;</span><br><span class=\"line\">\tcolor:#333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.left&#123;</span><br><span class=\"line\">\tbackground-color: deeppink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right&#123;</span><br><span class=\"line\">\tbackground-color:yellowgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/qiudaoermu/pen/rNzPMPz\">https://codepen.io/qiudaoermu/pen/rNzPMPz</a></p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>1.父元素设置display:flex<br>2.子元素设置 flex:1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#container&#123;</span><br><span class=\"line\">\twidth:400px;</span><br><span class=\"line\">\tmargin:0 auto;</span><br><span class=\"line\">\tbackground-color: #ddd;</span><br><span class=\"line\">\tdisplay:flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 不要设置 align-items 属性</span><br><span class=\"line\">.left,</span><br><span class=\"line\">.right&#123;</span><br><span class=\"line\">\tdisplay:1;</span><br><span class=\"line\">\twidth:200px;</span><br><span class=\"line\">\tfont-size: 16px;</span><br><span class=\"line\">\tline-height:24px;</span><br><span class=\"line\">\tcolor:#333;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.left&#123;</span><br><span class=\"line\">\tbackground-color: deeppink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right&#123;</span><br><span class=\"line\">\tbackground-color:yellowgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepen.io/qiudaoermu/pen/rNzPMPz\">https://codepen.io/qiudaoermu/pen/rNzPMPz</a></p>\n"},{"title":"🌈-CSS--nth-child-and--nth-of-type的区别","date":"2022-06-16T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-278db726a1c680d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### nth-child and :nth-of-type 区别\n在写网页的时候，有时候需要对子元素区分，比如只修改第N个元素。\n![](https://upload-images.jianshu.io/upload_images/15312191-506c6075bd730280.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n比如上面的四个li,不同的li设置不同的颜色，这就需要用到CSS伪类选择器**:nth-of-type**。\n```\n li {\n    &:nth-of-type(1) {\n                h4 {\n                  color: red;\n                }\n    }\n    &:nth-of-type(2) {\n                h4 {\n                  color: #14dd9f;\n                }\n      }\n     &:nth-of-type(3) {\n                h4 {\n                  color: #fc8b7f;\n                }\n      }\n     &:nth-of-type(4) {\n                h4 {\n                  color: #2bb9ff;\n                }\n              }\n     }\n```\n\n子选择器还有 :nth-child，两者区别如下demo：\n\n```\n<style>\np:nth-child(2){\n  color:green;\n}\np:nth-of-type(2) {\n  color:red;\n}\n</style>\n<section>\n    <div>我是一个普通的div标签</div>\n    <span>我是一个普通的span标签</span>\n    <p>我是第1个p标签</p>\n    <p>我是第2个p标签</p>  <!-- 希望改变这个颜色 -->\n</section>\n\n```\np:nth-child(2)将不会选择任何元素。\n\n而p:nth-of-type(2)表示父标签下的第二个p元素，显然，无论在div标签后面再插入个span标签，还是h1标签，都是第二个p标签中的文字变红。\n\n这两者的差异用一个跟切合实际的情况比喻就是计划生育查人口：前者是如果是第二胎，且是女孩，罚款！后者是管他第几胎，第二个出身的女孩，罚款！\n\nnth-of-type要比nth-child强大，常用，谁会遇到使用第二个，又是p元素的情况。\n\n\n\n#### 选择父元素下的第N个元素\n```\n<!DOCTYPE html>\n<html>\n<head>\n<style>\nul > :nth-of-type(2){\n  background:yellow;\n}\n</style>\n</head>\n<body>\n\n<ul>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Coca Cola</li>\n</ul>\n\n<ul>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Coca Cola</li>\n</ul>\n\n</body>\n</html>\n\n\n```\n\n![](https://upload-images.jianshu.io/upload_images/15312191-4b728113a92327dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nhttps://www.w3schools.com/cssref/tryit.asp?filename=trycss_sel_firstchild_more4\n","source":"_posts/🌈-CSS--nth-child-and--nth-of-type的区别.md","raw":"---\ntitle: \"🌈-CSS--nth-child-and--nth-of-type的区别\"\ndate: 2022-06-17\ntags: \n- css\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-278db726a1c680d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### nth-child and :nth-of-type 区别\n在写网页的时候，有时候需要对子元素区分，比如只修改第N个元素。\n![](https://upload-images.jianshu.io/upload_images/15312191-506c6075bd730280.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n比如上面的四个li,不同的li设置不同的颜色，这就需要用到CSS伪类选择器**:nth-of-type**。\n```\n li {\n    &:nth-of-type(1) {\n                h4 {\n                  color: red;\n                }\n    }\n    &:nth-of-type(2) {\n                h4 {\n                  color: #14dd9f;\n                }\n      }\n     &:nth-of-type(3) {\n                h4 {\n                  color: #fc8b7f;\n                }\n      }\n     &:nth-of-type(4) {\n                h4 {\n                  color: #2bb9ff;\n                }\n              }\n     }\n```\n\n子选择器还有 :nth-child，两者区别如下demo：\n\n```\n<style>\np:nth-child(2){\n  color:green;\n}\np:nth-of-type(2) {\n  color:red;\n}\n</style>\n<section>\n    <div>我是一个普通的div标签</div>\n    <span>我是一个普通的span标签</span>\n    <p>我是第1个p标签</p>\n    <p>我是第2个p标签</p>  <!-- 希望改变这个颜色 -->\n</section>\n\n```\np:nth-child(2)将不会选择任何元素。\n\n而p:nth-of-type(2)表示父标签下的第二个p元素，显然，无论在div标签后面再插入个span标签，还是h1标签，都是第二个p标签中的文字变红。\n\n这两者的差异用一个跟切合实际的情况比喻就是计划生育查人口：前者是如果是第二胎，且是女孩，罚款！后者是管他第几胎，第二个出身的女孩，罚款！\n\nnth-of-type要比nth-child强大，常用，谁会遇到使用第二个，又是p元素的情况。\n\n\n\n#### 选择父元素下的第N个元素\n```\n<!DOCTYPE html>\n<html>\n<head>\n<style>\nul > :nth-of-type(2){\n  background:yellow;\n}\n</style>\n</head>\n<body>\n\n<ul>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Coca Cola</li>\n</ul>\n\n<ul>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Coca Cola</li>\n</ul>\n\n</body>\n</html>\n\n\n```\n\n![](https://upload-images.jianshu.io/upload_images/15312191-4b728113a92327dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nhttps://www.w3schools.com/cssref/tryit.asp?filename=trycss_sel_firstchild_more4\n","slug":"🌈-CSS--nth-child-and--nth-of-type的区别","published":1,"updated":"2024-05-16T07:39:11.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mx00272omv9ja4f5sf","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-278db726a1c680d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"nth-child-and-nth-of-type-区别\"><a href=\"#nth-child-and-nth-of-type-区别\" class=\"headerlink\" title=\"nth-child and :nth-of-type 区别\"></a>nth-child and :nth-of-type 区别</h4><p>在写网页的时候，有时候需要对子元素区分，比如只修改第N个元素。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-506c6075bd730280.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>比如上面的四个li,不同的li设置不同的颜色，这就需要用到CSS伪类选择器**:nth-of-type**。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li &#123;</span><br><span class=\"line\">   &amp;:nth-of-type(1) &#123;</span><br><span class=\"line\">               h4 &#123;</span><br><span class=\"line\">                 color: red;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   &amp;:nth-of-type(2) &#123;</span><br><span class=\"line\">               h4 &#123;</span><br><span class=\"line\">                 color: #14dd9f;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &amp;:nth-of-type(3) &#123;</span><br><span class=\"line\">               h4 &#123;</span><br><span class=\"line\">                 color: #fc8b7f;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &amp;:nth-of-type(4) &#123;</span><br><span class=\"line\">               h4 &#123;</span><br><span class=\"line\">                 color: #2bb9ff;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>子选择器还有 :nth-child，两者区别如下demo：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">p:nth-child(2)&#123;</span><br><span class=\"line\">  color:green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p:nth-of-type(2) &#123;</span><br><span class=\"line\">  color:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">    &lt;div&gt;我是一个普通的div标签&lt;/div&gt;</span><br><span class=\"line\">    &lt;span&gt;我是一个普通的span标签&lt;/span&gt;</span><br><span class=\"line\">    &lt;p&gt;我是第1个p标签&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;我是第2个p标签&lt;/p&gt;  &lt;!-- 希望改变这个颜色 --&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>p:nth-child(2)将不会选择任何元素。</p>\n<p>而p:nth-of-type(2)表示父标签下的第二个p元素，显然，无论在div标签后面再插入个span标签，还是h1标签，都是第二个p标签中的文字变红。</p>\n<p>这两者的差异用一个跟切合实际的情况比喻就是计划生育查人口：前者是如果是第二胎，且是女孩，罚款！后者是管他第几胎，第二个出身的女孩，罚款！</p>\n<p>nth-of-type要比nth-child强大，常用，谁会遇到使用第二个，又是p元素的情况。</p>\n<h4 id=\"选择父元素下的第N个元素\"><a href=\"#选择父元素下的第N个元素\" class=\"headerlink\" title=\"选择父元素下的第N个元素\"></a>选择父元素下的第N个元素</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">ul &gt; :nth-of-type(2)&#123;</span><br><span class=\"line\">  background:yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;Coffee&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;Tea&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;Coca Cola&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;Coffee&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;Tea&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;Coca Cola&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4b728113a92327dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><a href=\"https://www.w3schools.com/cssref/tryit.asp?filename=trycss_sel_firstchild_more4\">https://www.w3schools.com/cssref/tryit.asp?filename=trycss_sel_firstchild_more4</a></p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-278db726a1c680d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"nth-child-and-nth-of-type-区别\"><a href=\"#nth-child-and-nth-of-type-区别\" class=\"headerlink\" title=\"nth-child and :nth-of-type 区别\"></a>nth-child and :nth-of-type 区别</h4><p>在写网页的时候，有时候需要对子元素区分，比如只修改第N个元素。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-506c6075bd730280.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>比如上面的四个li,不同的li设置不同的颜色，这就需要用到CSS伪类选择器**:nth-of-type**。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li &#123;</span><br><span class=\"line\">   &amp;:nth-of-type(1) &#123;</span><br><span class=\"line\">               h4 &#123;</span><br><span class=\"line\">                 color: red;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   &amp;:nth-of-type(2) &#123;</span><br><span class=\"line\">               h4 &#123;</span><br><span class=\"line\">                 color: #14dd9f;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &amp;:nth-of-type(3) &#123;</span><br><span class=\"line\">               h4 &#123;</span><br><span class=\"line\">                 color: #fc8b7f;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &amp;:nth-of-type(4) &#123;</span><br><span class=\"line\">               h4 &#123;</span><br><span class=\"line\">                 color: #2bb9ff;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>子选择器还有 :nth-child，两者区别如下demo：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">p:nth-child(2)&#123;</span><br><span class=\"line\">  color:green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p:nth-of-type(2) &#123;</span><br><span class=\"line\">  color:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;section&gt;</span><br><span class=\"line\">    &lt;div&gt;我是一个普通的div标签&lt;/div&gt;</span><br><span class=\"line\">    &lt;span&gt;我是一个普通的span标签&lt;/span&gt;</span><br><span class=\"line\">    &lt;p&gt;我是第1个p标签&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;我是第2个p标签&lt;/p&gt;  &lt;!-- 希望改变这个颜色 --&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>p:nth-child(2)将不会选择任何元素。</p>\n<p>而p:nth-of-type(2)表示父标签下的第二个p元素，显然，无论在div标签后面再插入个span标签，还是h1标签，都是第二个p标签中的文字变红。</p>\n<p>这两者的差异用一个跟切合实际的情况比喻就是计划生育查人口：前者是如果是第二胎，且是女孩，罚款！后者是管他第几胎，第二个出身的女孩，罚款！</p>\n<p>nth-of-type要比nth-child强大，常用，谁会遇到使用第二个，又是p元素的情况。</p>\n<h4 id=\"选择父元素下的第N个元素\"><a href=\"#选择父元素下的第N个元素\" class=\"headerlink\" title=\"选择父元素下的第N个元素\"></a>选择父元素下的第N个元素</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">ul &gt; :nth-of-type(2)&#123;</span><br><span class=\"line\">  background:yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;Coffee&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;Tea&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;Coca Cola&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;Coffee&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;Tea&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;Coca Cola&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4b728113a92327dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><a href=\"https://www.w3schools.com/cssref/tryit.asp?filename=trycss_sel_firstchild_more4\">https://www.w3schools.com/cssref/tryit.asp?filename=trycss_sel_firstchild_more4</a></p>\n"},{"title":"🌈-flex布局--一行显示固定个数,强制换行且均匀分布","date":"2021-03-04T16:00:00.000Z","_content":"\n![](https://upload-images.jianshu.io/upload_images/15312191-1024c1d63996d670.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n/* flex-direction 决定主轴的方向 row(默认)|row-reverse|column|column-reverse*/\n/* flex-direction: row; */\n\n/* flex-wrap决定当排列不下时是否换行以及换行的方式,nowrap(默认)|wrap|wrap-reverse */\n/* flex-wrap:wrap; */\n```\n```\n--html\n  <ul class='upload-item'>\n          <Form ref=\"formInline\" :model=\"formInline\"   :label-width='152'>\n            <li v-for='(v, i) in formInline.testLists'>\n              <FormItem  \n                :label='v.name'  \n                style='display:flex;'\n              >\n                <Upload\n                  ref=\"uploadFoods\"\n                  :accept='accept'\n                  :default-file-list=\"v.list\"\n                  :on-success=\"foodLicenceHandleSuccess.bind(null, {'index':i,'data':v})\"\n                  :on-error=\"handleError\"\n                  :max-size=\"2048 * 4\"\n                  :headers=\"fileHeader\"\n                  :before-upload=\"handleBeforeUpload\"\n                  action=\"/adminapi/file/upload\"\n                  >\n                  <div style=\"display: flex; align-items:center;cursor: pointer;\">\n                    <img\n                      class=\"upload-icon\"\n                      src=\"@/assets/images/register/add.png\"\n                      width=\"20\" />\n                    <p class=\"upload-box-action\">上传文件</p>\n                  </div>\n                </Upload>\n              </FormItem>\n            </li>\n          </Form>  \n        </ul>\n```\n```\n---css\n.mycards{ // 大盒子\n  width: 98%;\n  display: flex;\n  flex-wrap: wrap; // 换行\n  justify-content: space-between;\n}\n.card_item{ // 每个item\n    flex: 1;\n    width: 33.3%;\n    min-width: 33.3%; // 加入这两个后每个item的宽度就生效了\n    max-width: 33.3%; // 加入这两个后每个item的宽度就生效了\n    height: 350px;\n  }\n\n```\n","source":"_posts/🌈-flex布局--一行显示固定个数,强制换行且均匀分布.md","raw":"---\ntitle: \"🌈-flex布局--一行显示固定个数,强制换行且均匀分布\"\ndate: 2021-03-05\ntags: \n- css\n---\n\n![](https://upload-images.jianshu.io/upload_images/15312191-1024c1d63996d670.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n/* flex-direction 决定主轴的方向 row(默认)|row-reverse|column|column-reverse*/\n/* flex-direction: row; */\n\n/* flex-wrap决定当排列不下时是否换行以及换行的方式,nowrap(默认)|wrap|wrap-reverse */\n/* flex-wrap:wrap; */\n```\n```\n--html\n  <ul class='upload-item'>\n          <Form ref=\"formInline\" :model=\"formInline\"   :label-width='152'>\n            <li v-for='(v, i) in formInline.testLists'>\n              <FormItem  \n                :label='v.name'  \n                style='display:flex;'\n              >\n                <Upload\n                  ref=\"uploadFoods\"\n                  :accept='accept'\n                  :default-file-list=\"v.list\"\n                  :on-success=\"foodLicenceHandleSuccess.bind(null, {'index':i,'data':v})\"\n                  :on-error=\"handleError\"\n                  :max-size=\"2048 * 4\"\n                  :headers=\"fileHeader\"\n                  :before-upload=\"handleBeforeUpload\"\n                  action=\"/adminapi/file/upload\"\n                  >\n                  <div style=\"display: flex; align-items:center;cursor: pointer;\">\n                    <img\n                      class=\"upload-icon\"\n                      src=\"@/assets/images/register/add.png\"\n                      width=\"20\" />\n                    <p class=\"upload-box-action\">上传文件</p>\n                  </div>\n                </Upload>\n              </FormItem>\n            </li>\n          </Form>  \n        </ul>\n```\n```\n---css\n.mycards{ // 大盒子\n  width: 98%;\n  display: flex;\n  flex-wrap: wrap; // 换行\n  justify-content: space-between;\n}\n.card_item{ // 每个item\n    flex: 1;\n    width: 33.3%;\n    min-width: 33.3%; // 加入这两个后每个item的宽度就生效了\n    max-width: 33.3%; // 加入这两个后每个item的宽度就生效了\n    height: 350px;\n  }\n\n```\n","slug":"🌈-flex布局--一行显示固定个数,强制换行且均匀分布","published":1,"updated":"2024-05-16T07:39:11.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094mz002a2omvaagadoqm","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1024c1d63996d670.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* flex-direction 决定主轴的方向 row(默认)|row-reverse|column|column-reverse*/</span><br><span class=\"line\">/* flex-direction: row; */</span><br><span class=\"line\"></span><br><span class=\"line\">/* flex-wrap决定当排列不下时是否换行以及换行的方式,nowrap(默认)|wrap|wrap-reverse */</span><br><span class=\"line\">/* flex-wrap:wrap; */</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--html</span><br><span class=\"line\">  &lt;ul class=&#x27;upload-item&#x27;&gt;</span><br><span class=\"line\">          &lt;Form ref=&quot;formInline&quot; :model=&quot;formInline&quot;   :label-width=&#x27;152&#x27;&gt;</span><br><span class=\"line\">            &lt;li v-for=&#x27;(v, i) in formInline.testLists&#x27;&gt;</span><br><span class=\"line\">              &lt;FormItem  </span><br><span class=\"line\">                :label=&#x27;v.name&#x27;  </span><br><span class=\"line\">                style=&#x27;display:flex;&#x27;</span><br><span class=\"line\">              &gt;</span><br><span class=\"line\">                &lt;Upload</span><br><span class=\"line\">                  ref=&quot;uploadFoods&quot;</span><br><span class=\"line\">                  :accept=&#x27;accept&#x27;</span><br><span class=\"line\">                  :default-file-list=&quot;v.list&quot;</span><br><span class=\"line\">                  :on-success=&quot;foodLicenceHandleSuccess.bind(null, &#123;&#x27;index&#x27;:i,&#x27;data&#x27;:v&#125;)&quot;</span><br><span class=\"line\">                  :on-error=&quot;handleError&quot;</span><br><span class=\"line\">                  :max-size=&quot;2048 * 4&quot;</span><br><span class=\"line\">                  :headers=&quot;fileHeader&quot;</span><br><span class=\"line\">                  :before-upload=&quot;handleBeforeUpload&quot;</span><br><span class=\"line\">                  action=&quot;/adminapi/file/upload&quot;</span><br><span class=\"line\">                  &gt;</span><br><span class=\"line\">                  &lt;div style=&quot;display: flex; align-items:center;cursor: pointer;&quot;&gt;</span><br><span class=\"line\">                    &lt;img</span><br><span class=\"line\">                      class=&quot;upload-icon&quot;</span><br><span class=\"line\">                      src=&quot;@/assets/images/register/add.png&quot;</span><br><span class=\"line\">                      width=&quot;20&quot; /&gt;</span><br><span class=\"line\">                    &lt;p class=&quot;upload-box-action&quot;&gt;上传文件&lt;/p&gt;</span><br><span class=\"line\">                  &lt;/div&gt;</span><br><span class=\"line\">                &lt;/Upload&gt;</span><br><span class=\"line\">              &lt;/FormItem&gt;</span><br><span class=\"line\">            &lt;/li&gt;</span><br><span class=\"line\">          &lt;/Form&gt;  </span><br><span class=\"line\">        &lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---css</span><br><span class=\"line\">.mycards&#123; // 大盒子</span><br><span class=\"line\">  width: 98%;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-wrap: wrap; // 换行</span><br><span class=\"line\">  justify-content: space-between;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.card_item&#123; // 每个item</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    width: 33.3%;</span><br><span class=\"line\">    min-width: 33.3%; // 加入这两个后每个item的宽度就生效了</span><br><span class=\"line\">    max-width: 33.3%; // 加入这两个后每个item的宽度就生效了</span><br><span class=\"line\">    height: 350px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1024c1d63996d670.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* flex-direction 决定主轴的方向 row(默认)|row-reverse|column|column-reverse*/</span><br><span class=\"line\">/* flex-direction: row; */</span><br><span class=\"line\"></span><br><span class=\"line\">/* flex-wrap决定当排列不下时是否换行以及换行的方式,nowrap(默认)|wrap|wrap-reverse */</span><br><span class=\"line\">/* flex-wrap:wrap; */</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--html</span><br><span class=\"line\">  &lt;ul class=&#x27;upload-item&#x27;&gt;</span><br><span class=\"line\">          &lt;Form ref=&quot;formInline&quot; :model=&quot;formInline&quot;   :label-width=&#x27;152&#x27;&gt;</span><br><span class=\"line\">            &lt;li v-for=&#x27;(v, i) in formInline.testLists&#x27;&gt;</span><br><span class=\"line\">              &lt;FormItem  </span><br><span class=\"line\">                :label=&#x27;v.name&#x27;  </span><br><span class=\"line\">                style=&#x27;display:flex;&#x27;</span><br><span class=\"line\">              &gt;</span><br><span class=\"line\">                &lt;Upload</span><br><span class=\"line\">                  ref=&quot;uploadFoods&quot;</span><br><span class=\"line\">                  :accept=&#x27;accept&#x27;</span><br><span class=\"line\">                  :default-file-list=&quot;v.list&quot;</span><br><span class=\"line\">                  :on-success=&quot;foodLicenceHandleSuccess.bind(null, &#123;&#x27;index&#x27;:i,&#x27;data&#x27;:v&#125;)&quot;</span><br><span class=\"line\">                  :on-error=&quot;handleError&quot;</span><br><span class=\"line\">                  :max-size=&quot;2048 * 4&quot;</span><br><span class=\"line\">                  :headers=&quot;fileHeader&quot;</span><br><span class=\"line\">                  :before-upload=&quot;handleBeforeUpload&quot;</span><br><span class=\"line\">                  action=&quot;/adminapi/file/upload&quot;</span><br><span class=\"line\">                  &gt;</span><br><span class=\"line\">                  &lt;div style=&quot;display: flex; align-items:center;cursor: pointer;&quot;&gt;</span><br><span class=\"line\">                    &lt;img</span><br><span class=\"line\">                      class=&quot;upload-icon&quot;</span><br><span class=\"line\">                      src=&quot;@/assets/images/register/add.png&quot;</span><br><span class=\"line\">                      width=&quot;20&quot; /&gt;</span><br><span class=\"line\">                    &lt;p class=&quot;upload-box-action&quot;&gt;上传文件&lt;/p&gt;</span><br><span class=\"line\">                  &lt;/div&gt;</span><br><span class=\"line\">                &lt;/Upload&gt;</span><br><span class=\"line\">              &lt;/FormItem&gt;</span><br><span class=\"line\">            &lt;/li&gt;</span><br><span class=\"line\">          &lt;/Form&gt;  </span><br><span class=\"line\">        &lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---css</span><br><span class=\"line\">.mycards&#123; // 大盒子</span><br><span class=\"line\">  width: 98%;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-wrap: wrap; // 换行</span><br><span class=\"line\">  justify-content: space-between;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.card_item&#123; // 每个item</span><br><span class=\"line\">    flex: 1;</span><br><span class=\"line\">    width: 33.3%;</span><br><span class=\"line\">    min-width: 33.3%; // 加入这两个后每个item的宽度就生效了</span><br><span class=\"line\">    max-width: 33.3%; // 加入这两个后每个item的宽度就生效了</span><br><span class=\"line\">    height: 350px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"🌈-space-between和space-around的区别？","date":"2021-06-17T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-5bec8d6dbbba5744.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-5fc3f26913c82050.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/🌈-space-between和space-around的区别？.md","raw":"---\ntitle: \"🌈-space-between和space-around的区别？\"\ndate: 2021-06-18\ntags: \n- css\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-5bec8d6dbbba5744.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-5fc3f26913c82050.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"🌈-space-between和space-around的区别？","published":1,"updated":"2024-05-16T07:39:11.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094n0002c2omvb4mudalq","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5bec8d6dbbba5744.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5fc3f26913c82050.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5bec8d6dbbba5744.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5fc3f26913c82050.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"🌈-让div填充剩余的屏幕空间的高度","date":"2021-11-17T16:00:00.000Z","_content":"## flex \n父元素设置 flex-flow: column; 垂直排列\n再使用 flex 自适应布局\n## calc\n height: calc(100% - 50px);\n剩余高度 = 父元素高度 - 已有高度\n\n## demo\n>https://codepen.io/qiudaoermu/pen/mdwPWVx\n","source":"_posts/🌈-让div填充剩余的屏幕空间的高度.md","raw":"---\ntitle: \"🌈-让div填充剩余的屏幕空间的高度\"\ndate: 2021-11-18\ntags: \n- css\n---\n## flex \n父元素设置 flex-flow: column; 垂直排列\n再使用 flex 自适应布局\n## calc\n height: calc(100% - 50px);\n剩余高度 = 父元素高度 - 已有高度\n\n## demo\n>https://codepen.io/qiudaoermu/pen/mdwPWVx\n","slug":"🌈-让div填充剩余的屏幕空间的高度","published":1,"updated":"2024-05-16T07:39:11.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094n1002e2omvg9o75g5l","content":"<div class=\"\"><h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>父元素设置 flex-flow: column; 垂直排列<br>再使用 flex 自适应布局</p>\n</div><div class=\"\"><h2 id=\"calc\"><a href=\"#calc\" class=\"headerlink\" title=\"calc\"></a>calc</h2><p> height: calc(100% - 50px);<br>剩余高度 &#x3D; 父元素高度 - 已有高度</p>\n</div><div class=\"\"><h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><blockquote>\n<p><a href=\"https://codepen.io/qiudaoermu/pen/mdwPWVx\">https://codepen.io/qiudaoermu/pen/mdwPWVx</a></p>\n</blockquote>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>父元素设置 flex-flow: column; 垂直排列<br>再使用 flex 自适应布局</p>\n<h2 id=\"calc\"><a href=\"#calc\" class=\"headerlink\" title=\"calc\"></a>calc</h2><p> height: calc(100% - 50px);<br>剩余高度 &#x3D; 父元素高度 - 已有高度</p>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><blockquote>\n<p><a href=\"https://codepen.io/qiudaoermu/pen/mdwPWVx\">https://codepen.io/qiudaoermu/pen/mdwPWVx</a></p>\n</blockquote>\n"},{"title":"🌈最近做项目碰到的几个css小问题总结","date":"2020-11-23T16:00:00.000Z","_content":"#1.display img变形\n\n![image](https://upload-images.jianshu.io/upload_images/15312191-1fb2f5fe150894fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n<div>\n    <img class='icon'/>\n    <p>发票</p>\n</div>\n<style>\ndiv {\n  display:flex;\n}\n</style>\n```\n######原因：父元素，没设置 item-align 默认 sketch，导致图片被拉伸\n\n在w3c上找到了解释：\n\nIf the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched. Its used value is the length necessary to make the cross size of the item’s margin box as close to the same size as the line as possible, while still respecting the constraints imposed by min-height/min-width/max-height/max-width.\n\n如果一个元素没设置 item-align属性，或者margin不为 auto,图片高度会覆盖交叉轴高度，同时仍然遵守最小高度/最小宽度/最大高度/最大宽度所施加的约束\n######解决办法:\n父元素设置 item-align: center\n#2.子元素margin-top 父元素为什么掉下来\n```\n<style>\n.bar {\n    height: 5rem;\n    background: #2b3cbf;\n    position: relative\n}\n.bar img {\n    width: 60%;\n    margin-top: 1rem;\n    height: 100%;\n    margin-left: auto;\n}\n</style>\n<div class=\"bar\">\n  <img src=\"/img/bar.6aa5b7d1.svg\"/>\n</div>\n```\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-8e3f040a0117d6b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n######原因：\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-9ab4408b018de2ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n相邻元素之间没有border,margin,padding,并且在一个bfc里就会产生边距合并\n######解决办法：\n如上所说，给bar元素加上 border margin padding,或者让bar元素产生一个新的bfc，都可以解决问题\n```\n.bar{\n    height: 5rem;\n    background: #2b3cbf;\n    position: relative;\n    border-top: 1px solid #ddd; 设置一个上边距\n}\n```\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-6cd8a1273428c70e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/🌈最近做项目碰到的几个css小问题总结.md","raw":"---\ntitle: \"🌈最近做项目碰到的几个css小问题总结\"\ndate: 2020-11-24\ntags: \n- 开发日常\n---\n#1.display img变形\n\n![image](https://upload-images.jianshu.io/upload_images/15312191-1fb2f5fe150894fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n<div>\n    <img class='icon'/>\n    <p>发票</p>\n</div>\n<style>\ndiv {\n  display:flex;\n}\n</style>\n```\n######原因：父元素，没设置 item-align 默认 sketch，导致图片被拉伸\n\n在w3c上找到了解释：\n\nIf the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched. Its used value is the length necessary to make the cross size of the item’s margin box as close to the same size as the line as possible, while still respecting the constraints imposed by min-height/min-width/max-height/max-width.\n\n如果一个元素没设置 item-align属性，或者margin不为 auto,图片高度会覆盖交叉轴高度，同时仍然遵守最小高度/最小宽度/最大高度/最大宽度所施加的约束\n######解决办法:\n父元素设置 item-align: center\n#2.子元素margin-top 父元素为什么掉下来\n```\n<style>\n.bar {\n    height: 5rem;\n    background: #2b3cbf;\n    position: relative\n}\n.bar img {\n    width: 60%;\n    margin-top: 1rem;\n    height: 100%;\n    margin-left: auto;\n}\n</style>\n<div class=\"bar\">\n  <img src=\"/img/bar.6aa5b7d1.svg\"/>\n</div>\n```\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-8e3f040a0117d6b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n######原因：\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-9ab4408b018de2ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n相邻元素之间没有border,margin,padding,并且在一个bfc里就会产生边距合并\n######解决办法：\n如上所说，给bar元素加上 border margin padding,或者让bar元素产生一个新的bfc，都可以解决问题\n```\n.bar{\n    height: 5rem;\n    background: #2b3cbf;\n    position: relative;\n    border-top: 1px solid #ddd; 设置一个上边距\n}\n```\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-6cd8a1273428c70e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"🌈最近做项目碰到的几个css小问题总结","published":1,"updated":"2024-05-16T07:39:11.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094n2002h2omv89h5f44i","content":"<p>#1.display img变形</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1fb2f5fe150894fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;img class=&#x27;icon&#x27;/&gt;</span><br><span class=\"line\">    &lt;p&gt;发票&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\">  display:flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>######原因：父元素，没设置 item-align 默认 sketch，导致图片被拉伸</p>\n<p>在w3c上找到了解释：</p>\n<p>If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched. Its used value is the length necessary to make the cross size of the item’s margin box as close to the same size as the line as possible, while still respecting the constraints imposed by min-height&#x2F;min-width&#x2F;max-height&#x2F;max-width.</p>\n<p>如果一个元素没设置 item-align属性，或者margin不为 auto,图片高度会覆盖交叉轴高度，同时仍然遵守最小高度&#x2F;最小宽度&#x2F;最大高度&#x2F;最大宽度所施加的约束<br>######解决办法:<br>父元素设置 item-align: center<br>#2.子元素margin-top 父元素为什么掉下来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.bar &#123;</span><br><span class=\"line\">    height: 5rem;</span><br><span class=\"line\">    background: #2b3cbf;</span><br><span class=\"line\">    position: relative</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.bar img &#123;</span><br><span class=\"line\">    width: 60%;</span><br><span class=\"line\">    margin-top: 1rem;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    margin-left: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div class=&quot;bar&quot;&gt;</span><br><span class=\"line\">  &lt;img src=&quot;/img/bar.6aa5b7d1.svg&quot;/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8e3f040a0117d6b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>######原因：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9ab4408b018de2ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>相邻元素之间没有border,margin,padding,并且在一个bfc里就会产生边距合并<br>######解决办法：<br>如上所说，给bar元素加上 border margin padding,或者让bar元素产生一个新的bfc，都可以解决问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.bar&#123;</span><br><span class=\"line\">    height: 5rem;</span><br><span class=\"line\">    background: #2b3cbf;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    border-top: 1px solid #ddd; 设置一个上边距</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6cd8a1273428c70e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>#1.display img变形</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1fb2f5fe150894fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;img class=&#x27;icon&#x27;/&gt;</span><br><span class=\"line\">    &lt;p&gt;发票&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\">  display:flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>######原因：父元素，没设置 item-align 默认 sketch，导致图片被拉伸</p>\n<p>在w3c上找到了解释：</p>\n<p>If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched. Its used value is the length necessary to make the cross size of the item’s margin box as close to the same size as the line as possible, while still respecting the constraints imposed by min-height&#x2F;min-width&#x2F;max-height&#x2F;max-width.</p>\n<p>如果一个元素没设置 item-align属性，或者margin不为 auto,图片高度会覆盖交叉轴高度，同时仍然遵守最小高度&#x2F;最小宽度&#x2F;最大高度&#x2F;最大宽度所施加的约束<br>######解决办法:<br>父元素设置 item-align: center<br>#2.子元素margin-top 父元素为什么掉下来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.bar &#123;</span><br><span class=\"line\">    height: 5rem;</span><br><span class=\"line\">    background: #2b3cbf;</span><br><span class=\"line\">    position: relative</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.bar img &#123;</span><br><span class=\"line\">    width: 60%;</span><br><span class=\"line\">    margin-top: 1rem;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    margin-left: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div class=&quot;bar&quot;&gt;</span><br><span class=\"line\">  &lt;img src=&quot;/img/bar.6aa5b7d1.svg&quot;/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8e3f040a0117d6b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>######原因：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9ab4408b018de2ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>相邻元素之间没有border,margin,padding,并且在一个bfc里就会产生边距合并<br>######解决办法：<br>如上所说，给bar元素加上 border margin padding,或者让bar元素产生一个新的bfc，都可以解决问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.bar&#123;</span><br><span class=\"line\">    height: 5rem;</span><br><span class=\"line\">    background: #2b3cbf;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    border-top: 1px solid #ddd; 设置一个上边距</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6cd8a1273428c70e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n"},{"title":"🌈解决flex布局warp自动换行下最后一行居中问题","date":"2022-01-09T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-60837754b15b426c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 现象：\n这是一段很简单的flex弹性布局代码：\n```\nHTML:\n <div>\n    <div class=\"flex-test\">\n      <div class=\"box-test\">1</div>\n      <div class=\"box-test\">2</div>\n      <div class=\"box-test\">3</div>\n      <div class=\"box-test\">4</div>\n      <div class=\"box-test\">5</div>\n      <div class=\"box-test\">6</div>\n      <div class=\"box-test\">7</div>\n      <div class=\"box-test\">8</div>\n    </div>\n  </div>\n\nCSS这边是这样：\n<style>\n.flex-test {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: start;\n  background: blue;\n}\n\n.box-test {\n  height: 100px;\n  width: 100px;\n  background: red;\n  margin: 10px;\n}\n</style>\n\n```\njustify-content: start 的时候，结果是这样的：\n![](https://upload-images.jianshu.io/upload_images/15312191-6958017de3d562a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n现在，我们需要将所有红色格子整体居中，很简单：\n将 justify-content: start 改成：justify-content: center 就行了，结果如下：\n![](https://upload-images.jianshu.io/upload_images/15312191-a618c42e4c444355.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n嗯，OK ! 是我们想要的效果！\n接下来，将可视宽度收窄（比如在手机上显示），变成了这样：\n![](https://upload-images.jianshu.io/upload_images/15312191-ffae5ded5fa01849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n纳尼？怎么变成这个鬼样子了？flex 布局下，warp之后自动换行，换行后的内容又被居中了。这不太符合一般的排版规则，看起来怪怪的不是吗？\n## 解决\n搜了很多资料，发现这个问题还不怎么好解决，算是 flex 弹性布局的一个缺陷吧，如果要最后一行与第一行对齐，我们只能将 justify-content 设为 start, 但这样一来就失去了居中的效果。屏幕右边会空出一截来。但是，为了居中，我们将 justify-content 设为 center后，最后一行又非常别扭地立在屏幕正中，也很突兀。\n\n解决方案是换用grid布局：\n```\nHTML:\n    <div class=\"grid-test\">\n      <div class=\"box-test\">1</div>\n      <div class=\"box-test\">2</div>\n      <div class=\"box-test\">3</div>\n      <div class=\"box-test\">4</div>\n      <div class=\"box-test\">5</div>\n      <div class=\"box-test\">6</div>\n      <div class=\"box-test\">7</div>\n      <div class=\"box-test\">8</div>\n    </div>\n  </div>\n\nCSS:\n.grid-test {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 100px);\n  grid-gap: 10px;\n  justify-content: center;\n  background: blue;\n}\n\n.box-test {\n  height: 100px;\n  width: 100px;\n  background: red;\n  margin: 10px;\n}\n```\n换用以上代码后，显示如下：\n![](https://upload-images.jianshu.io/upload_images/15312191-5ba8363f0d435946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n[预览地址](https://jsrun.net/G9sKp/edit)\n","source":"_posts/🌈解决flex布局warp自动换行下最后一行居中问题.md","raw":"---\ntitle: \"🌈解决flex布局warp自动换行下最后一行居中问题\"\ndate: 2022-01-10\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-60837754b15b426c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 现象：\n这是一段很简单的flex弹性布局代码：\n```\nHTML:\n <div>\n    <div class=\"flex-test\">\n      <div class=\"box-test\">1</div>\n      <div class=\"box-test\">2</div>\n      <div class=\"box-test\">3</div>\n      <div class=\"box-test\">4</div>\n      <div class=\"box-test\">5</div>\n      <div class=\"box-test\">6</div>\n      <div class=\"box-test\">7</div>\n      <div class=\"box-test\">8</div>\n    </div>\n  </div>\n\nCSS这边是这样：\n<style>\n.flex-test {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: start;\n  background: blue;\n}\n\n.box-test {\n  height: 100px;\n  width: 100px;\n  background: red;\n  margin: 10px;\n}\n</style>\n\n```\njustify-content: start 的时候，结果是这样的：\n![](https://upload-images.jianshu.io/upload_images/15312191-6958017de3d562a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n现在，我们需要将所有红色格子整体居中，很简单：\n将 justify-content: start 改成：justify-content: center 就行了，结果如下：\n![](https://upload-images.jianshu.io/upload_images/15312191-a618c42e4c444355.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n嗯，OK ! 是我们想要的效果！\n接下来，将可视宽度收窄（比如在手机上显示），变成了这样：\n![](https://upload-images.jianshu.io/upload_images/15312191-ffae5ded5fa01849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n纳尼？怎么变成这个鬼样子了？flex 布局下，warp之后自动换行，换行后的内容又被居中了。这不太符合一般的排版规则，看起来怪怪的不是吗？\n## 解决\n搜了很多资料，发现这个问题还不怎么好解决，算是 flex 弹性布局的一个缺陷吧，如果要最后一行与第一行对齐，我们只能将 justify-content 设为 start, 但这样一来就失去了居中的效果。屏幕右边会空出一截来。但是，为了居中，我们将 justify-content 设为 center后，最后一行又非常别扭地立在屏幕正中，也很突兀。\n\n解决方案是换用grid布局：\n```\nHTML:\n    <div class=\"grid-test\">\n      <div class=\"box-test\">1</div>\n      <div class=\"box-test\">2</div>\n      <div class=\"box-test\">3</div>\n      <div class=\"box-test\">4</div>\n      <div class=\"box-test\">5</div>\n      <div class=\"box-test\">6</div>\n      <div class=\"box-test\">7</div>\n      <div class=\"box-test\">8</div>\n    </div>\n  </div>\n\nCSS:\n.grid-test {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 100px);\n  grid-gap: 10px;\n  justify-content: center;\n  background: blue;\n}\n\n.box-test {\n  height: 100px;\n  width: 100px;\n  background: red;\n  margin: 10px;\n}\n```\n换用以上代码后，显示如下：\n![](https://upload-images.jianshu.io/upload_images/15312191-5ba8363f0d435946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n[预览地址](https://jsrun.net/G9sKp/edit)\n","slug":"🌈解决flex布局warp自动换行下最后一行居中问题","published":1,"updated":"2024-05-16T07:39:11.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094n3002j2omvc2lxc4hn","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-60837754b15b426c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<div class=\"\"><h2 id=\"现象：\"><a href=\"#现象：\" class=\"headerlink\" title=\"现象：\"></a>现象：</h2><p>这是一段很简单的flex弹性布局代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTML:</span><br><span class=\"line\"> &lt;div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;flex-test&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;1&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;2&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;3&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;4&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;5&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;6&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;7&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;8&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">CSS这边是这样：</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.flex-test &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-direction: row;</span><br><span class=\"line\">  flex-wrap: wrap;</span><br><span class=\"line\">  justify-content: start;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.box-test &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>justify-content: start 的时候，结果是这样的：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6958017de3d562a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>现在，我们需要将所有红色格子整体居中，很简单：<br>将 justify-content: start 改成：justify-content: center 就行了，结果如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a618c42e4c444355.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>嗯，OK ! 是我们想要的效果！<br>接下来，将可视宽度收窄（比如在手机上显示），变成了这样：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-ffae5ded5fa01849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>纳尼？怎么变成这个鬼样子了？flex 布局下，warp之后自动换行，换行后的内容又被居中了。这不太符合一般的排版规则，看起来怪怪的不是吗？</p>\n</div><div class=\"\"><h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>搜了很多资料，发现这个问题还不怎么好解决，算是 flex 弹性布局的一个缺陷吧，如果要最后一行与第一行对齐，我们只能将 justify-content 设为 start, 但这样一来就失去了居中的效果。屏幕右边会空出一截来。但是，为了居中，我们将 justify-content 设为 center后，最后一行又非常别扭地立在屏幕正中，也很突兀。</p>\n<p>解决方案是换用grid布局：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTML:</span><br><span class=\"line\">    &lt;div class=&quot;grid-test&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;1&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;2&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;3&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;4&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;5&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;6&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;7&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;8&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">CSS:</span><br><span class=\"line\">.grid-test &#123;</span><br><span class=\"line\">  display: grid;</span><br><span class=\"line\">  grid-template-columns: repeat(auto-fill, 100px);</span><br><span class=\"line\">  grid-gap: 10px;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.box-test &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>换用以上代码后，显示如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5ba8363f0d435946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><a href=\"https://jsrun.net/G9sKp/edit\">预览地址</a></p>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-60837754b15b426c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"现象：\"><a href=\"#现象：\" class=\"headerlink\" title=\"现象：\"></a>现象：</h2><p>这是一段很简单的flex弹性布局代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTML:</span><br><span class=\"line\"> &lt;div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;flex-test&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;1&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;2&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;3&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;4&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;5&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;6&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;7&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;8&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">CSS这边是这样：</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.flex-test &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-direction: row;</span><br><span class=\"line\">  flex-wrap: wrap;</span><br><span class=\"line\">  justify-content: start;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.box-test &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>justify-content: start 的时候，结果是这样的：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6958017de3d562a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>现在，我们需要将所有红色格子整体居中，很简单：<br>将 justify-content: start 改成：justify-content: center 就行了，结果如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a618c42e4c444355.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>嗯，OK ! 是我们想要的效果！<br>接下来，将可视宽度收窄（比如在手机上显示），变成了这样：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-ffae5ded5fa01849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>纳尼？怎么变成这个鬼样子了？flex 布局下，warp之后自动换行，换行后的内容又被居中了。这不太符合一般的排版规则，看起来怪怪的不是吗？</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>搜了很多资料，发现这个问题还不怎么好解决，算是 flex 弹性布局的一个缺陷吧，如果要最后一行与第一行对齐，我们只能将 justify-content 设为 start, 但这样一来就失去了居中的效果。屏幕右边会空出一截来。但是，为了居中，我们将 justify-content 设为 center后，最后一行又非常别扭地立在屏幕正中，也很突兀。</p>\n<p>解决方案是换用grid布局：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTML:</span><br><span class=\"line\">    &lt;div class=&quot;grid-test&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;1&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;2&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;3&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;4&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;5&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;6&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;7&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;box-test&quot;&gt;8&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">CSS:</span><br><span class=\"line\">.grid-test &#123;</span><br><span class=\"line\">  display: grid;</span><br><span class=\"line\">  grid-template-columns: repeat(auto-fill, 100px);</span><br><span class=\"line\">  grid-gap: 10px;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.box-test &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>换用以上代码后，显示如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5ba8363f0d435946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><a href=\"https://jsrun.net/G9sKp/edit\">预览地址</a></p>\n"},{"title":"🌦🌦-++A-,-A++-区别","date":"2021-07-24T16:00:00.000Z","_content":"#### 相同点\n\na++ 和 ++a的都是给a+1\n\n#### 不同点\n\na++是先参加程序的运行再+1，\n而++a则是先+1再参加程序的运行。\n\n以上纯属废话\n\n经过和C语汇编分析，在没有中间变量参与的情况下，汇编代码一摸一样\n\n如果有中间变量，比如 b = a++，编译器会先保存一个值，再++\n\n++i\n```\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.build_version macos, 10, 15\tsdk_version 10, 15\n\t.globl\t_main                   ## -- Begin function main\n\t.p2align\t4, 0x90\n_main:                                  ## @main\n\t.cfi_startproc\n## %bb.0:\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\txorl\t%eax, %eax // 多这一行😁😁😁😁😁😁\n\tmovl\t$0, -4(%rbp)\n\tmovl\t$0, -8(%rbp)\n\tmovl\t-8(%rbp), %ecx\n\taddl\t$1, %ecx\n\tmovl\t%ecx, -8(%rbp)\n\tmovl\t%ecx, -4(%rbp)\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n                                        ## -- End function\n\n.subsections_via_symbols\n\n```\ni++\n```\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.build_version macos, 10, 15\tsdk_version 10, 15\n\t.globl\t_main                   ## -- Begin function main\n\t.p2align\t4, 0x90\n_main:                                  ## @main\n\t.cfi_startproc\n## %bb.0:\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\txorl\t%eax, %eax\n\tmovl\t$0, -4(%rbp)\n\tmovl\t$0, -8(%rbp)\n\tmovl\t-8(%rbp), %ecx\n\tmovl\t%ecx, %edx\n\taddl\t$1, %edx\n\tmovl\t%edx, -8(%rbp)\n\tmovl\t%ecx, -4(%rbp)\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n                                        ## -- End function\n\n.subsections_via_symbols\n\n```\n\n#### Example：\n```js\n\nvar a = 2；  \nvar b = a++；    \n运行后： b = 2，a =3 ；      \n\n```\n```js\n\nvar a = 2；  \nvar b = ++a；    \n运行后： b = 3，a =3；\n\n```\n```js\n\nvar a = 3;\nvar goos = function(){\n  return a++;\n} \nconsole.log(goos()); // 3\n\n```\n```js\n\nvar a = 3;\nvar goos = function(){\n  return ++a;\n} \nconsole.log(goos()); // 4\n\n```\n\n\n#### for 循环是怎么执行的\n\n\n```\nfor( var i = 0; i < 10; i++) {\n  // do something\n  console.log(i)\n  // 所有东西执行完了再+1\n  // 如果希望从0 开始，i= \n}\nconsole.log(i) // 10\n```\n等同于\n\n```\nlet i = 0;\nwhile(i < 10) {\n // do something\n  console.log(i)\n  i++\n}\nconsole.log(i) // 10\n```\n\n>[C语言灵魂拷问：++i为何比i++执行效率高！有何区别？](https://mp.weixin.qq.com/s/9UQ2xQ3tj7akN2Kwv7rLYg)\n","source":"_posts/🌦🌦-++A-,-A++-区别.md","raw":"---\ntitle: \"🌦🌦-++A-,-A++-区别\"\ndate: 2021-07-25\ntags: \n- 开发日常\n---\n#### 相同点\n\na++ 和 ++a的都是给a+1\n\n#### 不同点\n\na++是先参加程序的运行再+1，\n而++a则是先+1再参加程序的运行。\n\n以上纯属废话\n\n经过和C语汇编分析，在没有中间变量参与的情况下，汇编代码一摸一样\n\n如果有中间变量，比如 b = a++，编译器会先保存一个值，再++\n\n++i\n```\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.build_version macos, 10, 15\tsdk_version 10, 15\n\t.globl\t_main                   ## -- Begin function main\n\t.p2align\t4, 0x90\n_main:                                  ## @main\n\t.cfi_startproc\n## %bb.0:\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\txorl\t%eax, %eax // 多这一行😁😁😁😁😁😁\n\tmovl\t$0, -4(%rbp)\n\tmovl\t$0, -8(%rbp)\n\tmovl\t-8(%rbp), %ecx\n\taddl\t$1, %ecx\n\tmovl\t%ecx, -8(%rbp)\n\tmovl\t%ecx, -4(%rbp)\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n                                        ## -- End function\n\n.subsections_via_symbols\n\n```\ni++\n```\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.build_version macos, 10, 15\tsdk_version 10, 15\n\t.globl\t_main                   ## -- Begin function main\n\t.p2align\t4, 0x90\n_main:                                  ## @main\n\t.cfi_startproc\n## %bb.0:\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\txorl\t%eax, %eax\n\tmovl\t$0, -4(%rbp)\n\tmovl\t$0, -8(%rbp)\n\tmovl\t-8(%rbp), %ecx\n\tmovl\t%ecx, %edx\n\taddl\t$1, %edx\n\tmovl\t%edx, -8(%rbp)\n\tmovl\t%ecx, -4(%rbp)\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n                                        ## -- End function\n\n.subsections_via_symbols\n\n```\n\n#### Example：\n```js\n\nvar a = 2；  \nvar b = a++；    \n运行后： b = 2，a =3 ；      \n\n```\n```js\n\nvar a = 2；  \nvar b = ++a；    \n运行后： b = 3，a =3；\n\n```\n```js\n\nvar a = 3;\nvar goos = function(){\n  return a++;\n} \nconsole.log(goos()); // 3\n\n```\n```js\n\nvar a = 3;\nvar goos = function(){\n  return ++a;\n} \nconsole.log(goos()); // 4\n\n```\n\n\n#### for 循环是怎么执行的\n\n\n```\nfor( var i = 0; i < 10; i++) {\n  // do something\n  console.log(i)\n  // 所有东西执行完了再+1\n  // 如果希望从0 开始，i= \n}\nconsole.log(i) // 10\n```\n等同于\n\n```\nlet i = 0;\nwhile(i < 10) {\n // do something\n  console.log(i)\n  i++\n}\nconsole.log(i) // 10\n```\n\n>[C语言灵魂拷问：++i为何比i++执行效率高！有何区别？](https://mp.weixin.qq.com/s/9UQ2xQ3tj7akN2Kwv7rLYg)\n","slug":"🌦🌦-++A-,-A++-区别","published":1,"updated":"2024-05-16T07:39:11.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094n5002m2omv9c6h7uf4","content":"<h4 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h4><p>a++ 和 ++a的都是给a+1</p>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h4><p>a++是先参加程序的运行再+1，<br>而++a则是先+1再参加程序的运行。</p>\n<p>以上纯属废话</p>\n<p>经过和C语汇编分析，在没有中间变量参与的情况下，汇编代码一摸一样</p>\n<p>如果有中间变量，比如 b &#x3D; a++，编译器会先保存一个值，再++</p>\n<p>++i</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t.section\t__TEXT,__text,regular,pure_instructions</span><br><span class=\"line\">\t.build_version macos, 10, 15\tsdk_version 10, 15</span><br><span class=\"line\">\t.globl\t_main                   ## -- Begin function main</span><br><span class=\"line\">\t.p2align\t4, 0x90</span><br><span class=\"line\">_main:                                  ## @main</span><br><span class=\"line\">\t.cfi_startproc</span><br><span class=\"line\">## %bb.0:</span><br><span class=\"line\">\tpushq\t%rbp</span><br><span class=\"line\">\t.cfi_def_cfa_offset 16</span><br><span class=\"line\">\t.cfi_offset %rbp, -16</span><br><span class=\"line\">\tmovq\t%rsp, %rbp</span><br><span class=\"line\">\t.cfi_def_cfa_register %rbp</span><br><span class=\"line\">\txorl\t%eax, %eax // 多这一行😁😁😁😁😁😁</span><br><span class=\"line\">\tmovl\t$0, -4(%rbp)</span><br><span class=\"line\">\tmovl\t$0, -8(%rbp)</span><br><span class=\"line\">\tmovl\t-8(%rbp), %ecx</span><br><span class=\"line\">\taddl\t$1, %ecx</span><br><span class=\"line\">\tmovl\t%ecx, -8(%rbp)</span><br><span class=\"line\">\tmovl\t%ecx, -4(%rbp)</span><br><span class=\"line\">\tpopq\t%rbp</span><br><span class=\"line\">\tretq</span><br><span class=\"line\">\t.cfi_endproc</span><br><span class=\"line\">                                        ## -- End function</span><br><span class=\"line\"></span><br><span class=\"line\">.subsections_via_symbols</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>i++</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t.section\t__TEXT,__text,regular,pure_instructions</span><br><span class=\"line\">\t.build_version macos, 10, 15\tsdk_version 10, 15</span><br><span class=\"line\">\t.globl\t_main                   ## -- Begin function main</span><br><span class=\"line\">\t.p2align\t4, 0x90</span><br><span class=\"line\">_main:                                  ## @main</span><br><span class=\"line\">\t.cfi_startproc</span><br><span class=\"line\">## %bb.0:</span><br><span class=\"line\">\tpushq\t%rbp</span><br><span class=\"line\">\t.cfi_def_cfa_offset 16</span><br><span class=\"line\">\t.cfi_offset %rbp, -16</span><br><span class=\"line\">\tmovq\t%rsp, %rbp</span><br><span class=\"line\">\t.cfi_def_cfa_register %rbp</span><br><span class=\"line\">\txorl\t%eax, %eax</span><br><span class=\"line\">\tmovl\t$0, -4(%rbp)</span><br><span class=\"line\">\tmovl\t$0, -8(%rbp)</span><br><span class=\"line\">\tmovl\t-8(%rbp), %ecx</span><br><span class=\"line\">\tmovl\t%ecx, %edx</span><br><span class=\"line\">\taddl\t$1, %edx</span><br><span class=\"line\">\tmovl\t%edx, -8(%rbp)</span><br><span class=\"line\">\tmovl\t%ecx, -4(%rbp)</span><br><span class=\"line\">\tpopq\t%rbp</span><br><span class=\"line\">\tretq</span><br><span class=\"line\">\t.cfi_endproc</span><br><span class=\"line\">                                        ## -- End function</span><br><span class=\"line\"></span><br><span class=\"line\">.subsections_via_symbols</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Example：\"><a href=\"#Example：\" class=\"headerlink\" title=\"Example：\"></a>Example：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>；  </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a++；    </span><br><span class=\"line\">运行后： b = <span class=\"number\">2</span>，a =<span class=\"number\">3</span> ；      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>；  </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = ++a；    </span><br><span class=\"line\">运行后： b = <span class=\"number\">3</span>，a =<span class=\"number\">3</span>；</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> goos = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a++;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">goos</span>()); <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> goos = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ++a;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">goos</span>()); <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"for-循环是怎么执行的\"><a href=\"#for-循环是怎么执行的\" class=\"headerlink\" title=\"for 循环是怎么执行的\"></a>for 循环是怎么执行的</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for( var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">  console.log(i)</span><br><span class=\"line\">  // 所有东西执行完了再+1</span><br><span class=\"line\">  // 如果希望从0 开始，i= </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i) // 10</span><br></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let i = 0;</span><br><span class=\"line\">while(i &lt; 10) &#123;</span><br><span class=\"line\"> // do something</span><br><span class=\"line\">  console.log(i)</span><br><span class=\"line\">  i++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i) // 10</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s/9UQ2xQ3tj7akN2Kwv7rLYg\">C语言灵魂拷问：++i为何比i++执行效率高！有何区别？</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h4><p>a++ 和 ++a的都是给a+1</p>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h4><p>a++是先参加程序的运行再+1，<br>而++a则是先+1再参加程序的运行。</p>\n<p>以上纯属废话</p>\n<p>经过和C语汇编分析，在没有中间变量参与的情况下，汇编代码一摸一样</p>\n<p>如果有中间变量，比如 b &#x3D; a++，编译器会先保存一个值，再++</p>\n<p>++i</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t.section\t__TEXT,__text,regular,pure_instructions</span><br><span class=\"line\">\t.build_version macos, 10, 15\tsdk_version 10, 15</span><br><span class=\"line\">\t.globl\t_main                   ## -- Begin function main</span><br><span class=\"line\">\t.p2align\t4, 0x90</span><br><span class=\"line\">_main:                                  ## @main</span><br><span class=\"line\">\t.cfi_startproc</span><br><span class=\"line\">## %bb.0:</span><br><span class=\"line\">\tpushq\t%rbp</span><br><span class=\"line\">\t.cfi_def_cfa_offset 16</span><br><span class=\"line\">\t.cfi_offset %rbp, -16</span><br><span class=\"line\">\tmovq\t%rsp, %rbp</span><br><span class=\"line\">\t.cfi_def_cfa_register %rbp</span><br><span class=\"line\">\txorl\t%eax, %eax // 多这一行😁😁😁😁😁😁</span><br><span class=\"line\">\tmovl\t$0, -4(%rbp)</span><br><span class=\"line\">\tmovl\t$0, -8(%rbp)</span><br><span class=\"line\">\tmovl\t-8(%rbp), %ecx</span><br><span class=\"line\">\taddl\t$1, %ecx</span><br><span class=\"line\">\tmovl\t%ecx, -8(%rbp)</span><br><span class=\"line\">\tmovl\t%ecx, -4(%rbp)</span><br><span class=\"line\">\tpopq\t%rbp</span><br><span class=\"line\">\tretq</span><br><span class=\"line\">\t.cfi_endproc</span><br><span class=\"line\">                                        ## -- End function</span><br><span class=\"line\"></span><br><span class=\"line\">.subsections_via_symbols</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>i++</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t.section\t__TEXT,__text,regular,pure_instructions</span><br><span class=\"line\">\t.build_version macos, 10, 15\tsdk_version 10, 15</span><br><span class=\"line\">\t.globl\t_main                   ## -- Begin function main</span><br><span class=\"line\">\t.p2align\t4, 0x90</span><br><span class=\"line\">_main:                                  ## @main</span><br><span class=\"line\">\t.cfi_startproc</span><br><span class=\"line\">## %bb.0:</span><br><span class=\"line\">\tpushq\t%rbp</span><br><span class=\"line\">\t.cfi_def_cfa_offset 16</span><br><span class=\"line\">\t.cfi_offset %rbp, -16</span><br><span class=\"line\">\tmovq\t%rsp, %rbp</span><br><span class=\"line\">\t.cfi_def_cfa_register %rbp</span><br><span class=\"line\">\txorl\t%eax, %eax</span><br><span class=\"line\">\tmovl\t$0, -4(%rbp)</span><br><span class=\"line\">\tmovl\t$0, -8(%rbp)</span><br><span class=\"line\">\tmovl\t-8(%rbp), %ecx</span><br><span class=\"line\">\tmovl\t%ecx, %edx</span><br><span class=\"line\">\taddl\t$1, %edx</span><br><span class=\"line\">\tmovl\t%edx, -8(%rbp)</span><br><span class=\"line\">\tmovl\t%ecx, -4(%rbp)</span><br><span class=\"line\">\tpopq\t%rbp</span><br><span class=\"line\">\tretq</span><br><span class=\"line\">\t.cfi_endproc</span><br><span class=\"line\">                                        ## -- End function</span><br><span class=\"line\"></span><br><span class=\"line\">.subsections_via_symbols</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Example：\"><a href=\"#Example：\" class=\"headerlink\" title=\"Example：\"></a>Example：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>；  </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a++；    </span><br><span class=\"line\">运行后： b = <span class=\"number\">2</span>，a =<span class=\"number\">3</span> ；      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>；  </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = ++a；    </span><br><span class=\"line\">运行后： b = <span class=\"number\">3</span>，a =<span class=\"number\">3</span>；</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> goos = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a++;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">goos</span>()); <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> goos = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ++a;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">goos</span>()); <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"for-循环是怎么执行的\"><a href=\"#for-循环是怎么执行的\" class=\"headerlink\" title=\"for 循环是怎么执行的\"></a>for 循环是怎么执行的</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for( var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">  console.log(i)</span><br><span class=\"line\">  // 所有东西执行完了再+1</span><br><span class=\"line\">  // 如果希望从0 开始，i= </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i) // 10</span><br></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let i = 0;</span><br><span class=\"line\">while(i &lt; 10) &#123;</span><br><span class=\"line\"> // do something</span><br><span class=\"line\">  console.log(i)</span><br><span class=\"line\">  i++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i) // 10</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s/9UQ2xQ3tj7akN2Kwv7rLYg\">C语言灵魂拷问：++i为何比i++执行效率高！有何区别？</a></p>\n</blockquote>\n"},{"title":"🌦🌦--encodeURI与encodeURIComponent区别","date":"2021-07-29T16:00:00.000Z","_content":"##### 语法\n\n> encodeURI(URI)\n>\n>decodeURI(URI)\n\nex:\n\n```js\nencodeURI(\"陈振飞\")  //'%E9%99%88%E6%8C%AF%E9%A3%9E'\ndecodeURI('%E9%99%88%E6%8C%AF%E9%A3%9E') // 陈振飞\n```\n\n\n##### 编码原因:\n\n因为当字符串数据以url的形式传递给web服务器时,字符串中是不允许出现空格和特殊字符的\n\n\n\n1.因为当字符串数据以url的形式传递给web服务器时,字符串中是不允许出现空格和特殊字符的\n比如说 传递邮箱这个字符串的时候 hehe@163.com url中是不允许出现@字符的，转义之后会变成 hehe%40163.com\n\n2.在标准的url规范中**[中文]()**和很多的字符是不允许出现在url中的\n\n##### encodeURI与encodeURIComponent区别\n\nencodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；\n而encodeURIComponent则会对它发现的任何非标准字符进行编码。\n\nex:\n```\nvar uri=\"http://www.jxbh.cn/illegal value.htm#start\";\n//”http://www.jxbh.cn/illegal%20value.htm#start”\nalert(encodeURI (uri)):\n//”http%3A%2F%2Fwww.jxbh.cn%2Fillegal%20value.htm%23start”\nalert( encodaURIComponent (uri));\n```\n使用encodeURI()编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了%20。\n而encodeURIComponent()方法则会使用对应的编码替换所有非字母数字字符。\n","source":"_posts/🌦🌦--encodeURI与encodeURIComponent区别.md","raw":"---\ntitle: \"🌦🌦--encodeURI与encodeURIComponent区别\"\ndate: 2021-07-30\ntags: \n- 开发日常\n---\n##### 语法\n\n> encodeURI(URI)\n>\n>decodeURI(URI)\n\nex:\n\n```js\nencodeURI(\"陈振飞\")  //'%E9%99%88%E6%8C%AF%E9%A3%9E'\ndecodeURI('%E9%99%88%E6%8C%AF%E9%A3%9E') // 陈振飞\n```\n\n\n##### 编码原因:\n\n因为当字符串数据以url的形式传递给web服务器时,字符串中是不允许出现空格和特殊字符的\n\n\n\n1.因为当字符串数据以url的形式传递给web服务器时,字符串中是不允许出现空格和特殊字符的\n比如说 传递邮箱这个字符串的时候 hehe@163.com url中是不允许出现@字符的，转义之后会变成 hehe%40163.com\n\n2.在标准的url规范中**[中文]()**和很多的字符是不允许出现在url中的\n\n##### encodeURI与encodeURIComponent区别\n\nencodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；\n而encodeURIComponent则会对它发现的任何非标准字符进行编码。\n\nex:\n```\nvar uri=\"http://www.jxbh.cn/illegal value.htm#start\";\n//”http://www.jxbh.cn/illegal%20value.htm#start”\nalert(encodeURI (uri)):\n//”http%3A%2F%2Fwww.jxbh.cn%2Fillegal%20value.htm%23start”\nalert( encodaURIComponent (uri));\n```\n使用encodeURI()编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了%20。\n而encodeURIComponent()方法则会使用对应的编码替换所有非字母数字字符。\n","slug":"🌦🌦--encodeURI与encodeURIComponent区别","published":1,"updated":"2024-05-16T07:39:11.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094n5002o2omv5pufgozc","content":"<h5 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h5><blockquote>\n<p>encodeURI(URI)</p>\n<p>decodeURI(URI)</p>\n</blockquote>\n<p>ex:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">encodeURI</span>(<span class=\"string\">&quot;陈振飞&quot;</span>)  <span class=\"comment\">//&#x27;%E9%99%88%E6%8C%AF%E9%A3%9E&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">decodeURI</span>(<span class=\"string\">&#x27;%E9%99%88%E6%8C%AF%E9%A3%9E&#x27;</span>) <span class=\"comment\">// 陈振飞</span></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"编码原因\"><a href=\"#编码原因\" class=\"headerlink\" title=\"编码原因:\"></a>编码原因:</h5><p>因为当字符串数据以url的形式传递给web服务器时,字符串中是不允许出现空格和特殊字符的</p>\n<p>1.因为当字符串数据以url的形式传递给web服务器时,字符串中是不允许出现空格和特殊字符的<br>比如说 传递邮箱这个字符串的时候 <a href=\"mailto:&#x68;&#x65;&#x68;&#101;&#64;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;\">&#x68;&#x65;&#x68;&#101;&#64;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;</a> url中是不允许出现@字符的，转义之后会变成 hehe%40163.com</p>\n<p>2.在标准的url规范中**<a href=\"\">中文</a>**和很多的字符是不允许出现在url中的</p>\n<h5 id=\"encodeURI与encodeURIComponent区别\"><a href=\"#encodeURI与encodeURIComponent区别\" class=\"headerlink\" title=\"encodeURI与encodeURIComponent区别\"></a>encodeURI与encodeURIComponent区别</h5><p>encodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；<br>而encodeURIComponent则会对它发现的任何非标准字符进行编码。</p>\n<p>ex:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uri=&quot;http://www.jxbh.cn/illegal value.htm#start&quot;;</span><br><span class=\"line\">//”http://www.jxbh.cn/illegal%20value.htm#start”</span><br><span class=\"line\">alert(encodeURI (uri)):</span><br><span class=\"line\">//”http%3A%2F%2Fwww.jxbh.cn%2Fillegal%20value.htm%23start”</span><br><span class=\"line\">alert( encodaURIComponent (uri));</span><br></pre></td></tr></table></figure>\n<p>使用encodeURI()编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了%20。<br>而encodeURIComponent()方法则会使用对应的编码替换所有非字母数字字符。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h5><blockquote>\n<p>encodeURI(URI)</p>\n<p>decodeURI(URI)</p>\n</blockquote>\n<p>ex:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">encodeURI</span>(<span class=\"string\">&quot;陈振飞&quot;</span>)  <span class=\"comment\">//&#x27;%E9%99%88%E6%8C%AF%E9%A3%9E&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">decodeURI</span>(<span class=\"string\">&#x27;%E9%99%88%E6%8C%AF%E9%A3%9E&#x27;</span>) <span class=\"comment\">// 陈振飞</span></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"编码原因\"><a href=\"#编码原因\" class=\"headerlink\" title=\"编码原因:\"></a>编码原因:</h5><p>因为当字符串数据以url的形式传递给web服务器时,字符串中是不允许出现空格和特殊字符的</p>\n<p>1.因为当字符串数据以url的形式传递给web服务器时,字符串中是不允许出现空格和特殊字符的<br>比如说 传递邮箱这个字符串的时候 <a href=\"mailto:&#x68;&#x65;&#x68;&#101;&#64;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;\">&#x68;&#x65;&#x68;&#101;&#64;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;</a> url中是不允许出现@字符的，转义之后会变成 hehe%40163.com</p>\n<p>2.在标准的url规范中**<a href=\"\">中文</a>**和很多的字符是不允许出现在url中的</p>\n<h5 id=\"encodeURI与encodeURIComponent区别\"><a href=\"#encodeURI与encodeURIComponent区别\" class=\"headerlink\" title=\"encodeURI与encodeURIComponent区别\"></a>encodeURI与encodeURIComponent区别</h5><p>encodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；<br>而encodeURIComponent则会对它发现的任何非标准字符进行编码。</p>\n<p>ex:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uri=&quot;http://www.jxbh.cn/illegal value.htm#start&quot;;</span><br><span class=\"line\">//”http://www.jxbh.cn/illegal%20value.htm#start”</span><br><span class=\"line\">alert(encodeURI (uri)):</span><br><span class=\"line\">//”http%3A%2F%2Fwww.jxbh.cn%2Fillegal%20value.htm%23start”</span><br><span class=\"line\">alert( encodaURIComponent (uri));</span><br></pre></td></tr></table></figure>\n<p>使用encodeURI()编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了%20。<br>而encodeURIComponent()方法则会使用对应的编码替换所有非字母数字字符。</p>\n"},{"title":"🌦🌦-ajax-post-四种提交方式","date":"2021-10-22T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-bce9ecec2e1a8078.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### post提交数据的四种编码方式\n\n#### 1.application/x-www-form-urlencoded\n这应该是最常见的post编码方式，一般的表单提交默认以此方式提交。大部分服务器语言对这种方式都有很好的支持。在PHP中，可以用$_POST[“key”]的方式获取到key的值，在node中我们可以使用querystring中间件对参数进行分离。\n\n请求类似于下面这样:\n```js\nvar data = {'title':'test', 'sub' : [1,2,3]};\n\n// 下面使用 axios 自带转换方法，transformRequest，文末有第二种方法\nthis.$axios({\n    method:\"post\",\n    url:\"/server\",\n    headers:{\n        'Content-type': 'application/x-www-form-urlencoded'\n    },\n    data: data,\n    transformRequest: [function (data) {\n        let ret = ''\n        for (let it in data) {\n          ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'\n        }\n        return ret\n      }],\n}).then((res)=>{\n    console.log(res.data);\n})\n\n```\n最终发送的请求是：\n```\nPOST http://www.example.com HTTP/1.1\nContent-Type: application/x-www-form-urlencoded;charset=utf-8\n\ntitle=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3\n```\n\n首先，Content-Type 被指定为 application/x-www-form-urlencoded；其次，提交的数据按照 key1=val1&key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。\n\n```js\napp.post(\"/server\",function(req,res){\n    req.on(\"data\",function(data){\n        let key=querystring.parse(decodeURIComponent(data)).key;\n        console.log(\"querystring:\"+key)\n    });\n});\n```\n\n\n\n#### 2.multipart/form-data\n这也是一种比较常见的post数据格式，我们用表单上传文件时，必须使form表单的enctype属性或者ajax的contentType参数等于multipart/form-data。\n\n##### 2.1 表单上传\n```\n<form method=\"post\"action=\"http://uploadUrl\" enctype=\"multipart/form-data\">\n\n   <input name=\"file\"type=\"file\"accept=\"image/gif,image.jpg\"/>\n\n   <input name=\"token\"type=\"hidden\"/>\n\n   <inpu ttype=\"submit\"value=\"提交\"/>\n\n</form>\n\n```\n##### 2.2 Ajax无刷新上传\n```\n<html>\n  <div>\n    <input id=\"file\" type=\"file\" />\n    <input type=\"button\" value=\"文件上传\" onclick=\"uploadFile()\" />\n  </div>\n</html>\n<script>\n  function uploadFile() {\n    const file = document.getElementById('file').files[0];\n    console.log(file,'********************************');\n    const xhr = new XMLHttpRequest();\n    const fd = new FormData();\n    fd.append('file', file);\n    xhr.open('POST', 'http://127.0.0.1:8000/upload', true);\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState == 4 && xhr.status == 200) {\n        alert(xhr.responseText);\n      }\n    };\n    xhr.send(fd);\n  }\n</script>\n```\n\n使用这种编码格式时发送到后台的数据长得像这样子\n\n```\nPOST http://www.example.com HTTP/1.1\nContent-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA\n\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA\nContent-Disposition: form-data; name=\"text\"\n\ntitle\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA\nContent-Disposition: form-data; name=\"file\"; filename=\"chrome.png\"\nContent-Type: image/png\n\nPNG ... content of chrome.png ...\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA--\n```\n\n#### 3.application/json\naxios默认提交就是使用这种格式。如果使用这种编码方式，那么传递到后台的将是序列化后的json字符串。\n\n例如下面这段代码：\n```js\nvar data = {'title':'test', 'sub' : [1,2,3]};\nthis.$axios({\n    method:\"post\",\n    url:\"/server\",\n    data: data\n}).then((res)=>{\n    console.log(res.data);\n})\n```\n最终发送的请求是：\n```\nPOST http://www.example.com HTTP/1.1 \nContent-Type: application/json;charset=utf-8\n\n{\"title\":\"test\",\"sub\":[1,2,3]}\n```\n#### 4.text/xml\n它是一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范。典型的 XML-RPC 请求是这样的：\n\n```\nPOST http://www.example.com HTTP/1.1 \nContent-Type: text/xml\n\n<?xml version=\"1.0\"?>\n<methodCall>\n    <methodName>examples.getStateName</methodName>\n    <params>\n        <param>\n            <value><i4>41</i4></value>\n        </param>\n    </params>\n</methodCall>\n```\nXML-RPC 协议简单、功能够用，各种语言的实现都有。它的使用也很广泛，如 WordPress 的 [XML-RPC Api](http://codex.wordpress.org/XML-RPC_WordPress_API)，搜索引擎的 [ping 服务](http://help.baidu.com/question?prod_en=master&class=476&id=1000423)等等。JavaScript 中，也有[现成的库](http://plugins.jquery.com/xmlrpc/)支持以这种方式进行数据交互，能很好的支持已有的 XML-RPC 服务。不过，我个人觉得 XML 结构还是过于臃肿，一般场景用 JSON 会更灵活方便。\n\n\n#### qs使用\n---\n  ` A querystring parsing and stringifying library with some added security.`\n\n##### 1.qs.parse()将URL解析成对象的形式\n```js\n\nconst Qs = require('qs');\nlet url = 'method=query_sql_dataset_data&projectId=85&appToken=7d22e38e-5717-11e7-907b-a6006ad3dba0';\nQs.parse(url);\nconsole.log(Qs.parse(url));\n/*\n{\n  method: \"query_sql_dataset_data\",\n  projectId: 85,\n  appToken: \"7d22e38e-5717-11e7-907b-a6006ad3dba0\n}\n*/\n```\n##### 2. qs.stringify()将对象 序列化成URL的形式，以&进行拼接\n\n```js\n\nconst Qs = require('qs');\nlet obj= {\n     method: \"query_sql_dataset_data\",\n     projectId: \"85\",\n     appToken: \"7d22e38e-5717-11e7-907b-a6006ad3dba0\",\n     datasetId: \" 12564701\"\n   };\nQs.stringify(obj);\nconsole.log(Qs.stringify(obj)); \n/*\n method=query_sql_dataset_data&projectId=85&appToken=7d22e38e-5717-11e7-907b-a6006ad3dba0&datasetId=%2012564701\n*/\n```\n\n\n##### post请求处理\n\n当post 请求报文格式为\napplication/x-www-form-urlencoded\n\n>POST http://www.example.com HTTP/1.1\nContent-Type: application/x-www-form-urlencoded;charset=utf-8\n>title=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3\n\n需要对参数进行转化，固定格式 `key=value&key1=value1`\n\n在axios中应用,对参数进行处理\n\n```js\n\nvar data = {'title':'test', 'sub' : [1,2,3]};\nthis.$axios.post({\n  url:\"/admin/login\",\n  params: qs.stringfy(data)\n}).then(res => console.log(res))\n\n// title=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3\n\n```\n\n>[都 2019 年了，还问 GET 和 POST 的区别](https://blog.fundebug.com/2019/02/22/compare-http-method-get-and-post/)\n [Vue.js使用axios发送数组](https://www.jianshu.com/p/62546d82f380)\n[四种常见的 POST 提交数据方式](https://imququ.com/post/four-ways-to-post-data-in-http.html)\n> [Vue 之 qs.parse()、qs.stringify()使用方法](https://blog.csdn.net/qq_43290288/article/details/106683304)\n> [axios用post提交的数据格式](https://blog.csdn.net/wopelo/article/details/78783442)\n","source":"_posts/🌦🌦-ajax-post-四种提交方式.md","raw":"---\ntitle: \"🌦🌦-ajax-post-四种提交方式\"\ndate: 2021-10-23\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-bce9ecec2e1a8078.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### post提交数据的四种编码方式\n\n#### 1.application/x-www-form-urlencoded\n这应该是最常见的post编码方式，一般的表单提交默认以此方式提交。大部分服务器语言对这种方式都有很好的支持。在PHP中，可以用$_POST[“key”]的方式获取到key的值，在node中我们可以使用querystring中间件对参数进行分离。\n\n请求类似于下面这样:\n```js\nvar data = {'title':'test', 'sub' : [1,2,3]};\n\n// 下面使用 axios 自带转换方法，transformRequest，文末有第二种方法\nthis.$axios({\n    method:\"post\",\n    url:\"/server\",\n    headers:{\n        'Content-type': 'application/x-www-form-urlencoded'\n    },\n    data: data,\n    transformRequest: [function (data) {\n        let ret = ''\n        for (let it in data) {\n          ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'\n        }\n        return ret\n      }],\n}).then((res)=>{\n    console.log(res.data);\n})\n\n```\n最终发送的请求是：\n```\nPOST http://www.example.com HTTP/1.1\nContent-Type: application/x-www-form-urlencoded;charset=utf-8\n\ntitle=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3\n```\n\n首先，Content-Type 被指定为 application/x-www-form-urlencoded；其次，提交的数据按照 key1=val1&key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。\n\n```js\napp.post(\"/server\",function(req,res){\n    req.on(\"data\",function(data){\n        let key=querystring.parse(decodeURIComponent(data)).key;\n        console.log(\"querystring:\"+key)\n    });\n});\n```\n\n\n\n#### 2.multipart/form-data\n这也是一种比较常见的post数据格式，我们用表单上传文件时，必须使form表单的enctype属性或者ajax的contentType参数等于multipart/form-data。\n\n##### 2.1 表单上传\n```\n<form method=\"post\"action=\"http://uploadUrl\" enctype=\"multipart/form-data\">\n\n   <input name=\"file\"type=\"file\"accept=\"image/gif,image.jpg\"/>\n\n   <input name=\"token\"type=\"hidden\"/>\n\n   <inpu ttype=\"submit\"value=\"提交\"/>\n\n</form>\n\n```\n##### 2.2 Ajax无刷新上传\n```\n<html>\n  <div>\n    <input id=\"file\" type=\"file\" />\n    <input type=\"button\" value=\"文件上传\" onclick=\"uploadFile()\" />\n  </div>\n</html>\n<script>\n  function uploadFile() {\n    const file = document.getElementById('file').files[0];\n    console.log(file,'********************************');\n    const xhr = new XMLHttpRequest();\n    const fd = new FormData();\n    fd.append('file', file);\n    xhr.open('POST', 'http://127.0.0.1:8000/upload', true);\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState == 4 && xhr.status == 200) {\n        alert(xhr.responseText);\n      }\n    };\n    xhr.send(fd);\n  }\n</script>\n```\n\n使用这种编码格式时发送到后台的数据长得像这样子\n\n```\nPOST http://www.example.com HTTP/1.1\nContent-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA\n\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA\nContent-Disposition: form-data; name=\"text\"\n\ntitle\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA\nContent-Disposition: form-data; name=\"file\"; filename=\"chrome.png\"\nContent-Type: image/png\n\nPNG ... content of chrome.png ...\n------WebKitFormBoundaryrGKCBY7qhFd3TrwA--\n```\n\n#### 3.application/json\naxios默认提交就是使用这种格式。如果使用这种编码方式，那么传递到后台的将是序列化后的json字符串。\n\n例如下面这段代码：\n```js\nvar data = {'title':'test', 'sub' : [1,2,3]};\nthis.$axios({\n    method:\"post\",\n    url:\"/server\",\n    data: data\n}).then((res)=>{\n    console.log(res.data);\n})\n```\n最终发送的请求是：\n```\nPOST http://www.example.com HTTP/1.1 \nContent-Type: application/json;charset=utf-8\n\n{\"title\":\"test\",\"sub\":[1,2,3]}\n```\n#### 4.text/xml\n它是一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范。典型的 XML-RPC 请求是这样的：\n\n```\nPOST http://www.example.com HTTP/1.1 \nContent-Type: text/xml\n\n<?xml version=\"1.0\"?>\n<methodCall>\n    <methodName>examples.getStateName</methodName>\n    <params>\n        <param>\n            <value><i4>41</i4></value>\n        </param>\n    </params>\n</methodCall>\n```\nXML-RPC 协议简单、功能够用，各种语言的实现都有。它的使用也很广泛，如 WordPress 的 [XML-RPC Api](http://codex.wordpress.org/XML-RPC_WordPress_API)，搜索引擎的 [ping 服务](http://help.baidu.com/question?prod_en=master&class=476&id=1000423)等等。JavaScript 中，也有[现成的库](http://plugins.jquery.com/xmlrpc/)支持以这种方式进行数据交互，能很好的支持已有的 XML-RPC 服务。不过，我个人觉得 XML 结构还是过于臃肿，一般场景用 JSON 会更灵活方便。\n\n\n#### qs使用\n---\n  ` A querystring parsing and stringifying library with some added security.`\n\n##### 1.qs.parse()将URL解析成对象的形式\n```js\n\nconst Qs = require('qs');\nlet url = 'method=query_sql_dataset_data&projectId=85&appToken=7d22e38e-5717-11e7-907b-a6006ad3dba0';\nQs.parse(url);\nconsole.log(Qs.parse(url));\n/*\n{\n  method: \"query_sql_dataset_data\",\n  projectId: 85,\n  appToken: \"7d22e38e-5717-11e7-907b-a6006ad3dba0\n}\n*/\n```\n##### 2. qs.stringify()将对象 序列化成URL的形式，以&进行拼接\n\n```js\n\nconst Qs = require('qs');\nlet obj= {\n     method: \"query_sql_dataset_data\",\n     projectId: \"85\",\n     appToken: \"7d22e38e-5717-11e7-907b-a6006ad3dba0\",\n     datasetId: \" 12564701\"\n   };\nQs.stringify(obj);\nconsole.log(Qs.stringify(obj)); \n/*\n method=query_sql_dataset_data&projectId=85&appToken=7d22e38e-5717-11e7-907b-a6006ad3dba0&datasetId=%2012564701\n*/\n```\n\n\n##### post请求处理\n\n当post 请求报文格式为\napplication/x-www-form-urlencoded\n\n>POST http://www.example.com HTTP/1.1\nContent-Type: application/x-www-form-urlencoded;charset=utf-8\n>title=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3\n\n需要对参数进行转化，固定格式 `key=value&key1=value1`\n\n在axios中应用,对参数进行处理\n\n```js\n\nvar data = {'title':'test', 'sub' : [1,2,3]};\nthis.$axios.post({\n  url:\"/admin/login\",\n  params: qs.stringfy(data)\n}).then(res => console.log(res))\n\n// title=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3\n\n```\n\n>[都 2019 年了，还问 GET 和 POST 的区别](https://blog.fundebug.com/2019/02/22/compare-http-method-get-and-post/)\n [Vue.js使用axios发送数组](https://www.jianshu.com/p/62546d82f380)\n[四种常见的 POST 提交数据方式](https://imququ.com/post/four-ways-to-post-data-in-http.html)\n> [Vue 之 qs.parse()、qs.stringify()使用方法](https://blog.csdn.net/qq_43290288/article/details/106683304)\n> [axios用post提交的数据格式](https://blog.csdn.net/wopelo/article/details/78783442)\n","slug":"🌦🌦-ajax-post-四种提交方式","published":1,"updated":"2024-05-16T07:39:11.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094n6002q2omv76dh0cwt","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-bce9ecec2e1a8078.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"post提交数据的四种编码方式\"><a href=\"#post提交数据的四种编码方式\" class=\"headerlink\" title=\"post提交数据的四种编码方式\"></a>post提交数据的四种编码方式</h3><h4 id=\"1-application-x2F-x-www-form-urlencoded\"><a href=\"#1-application-x2F-x-www-form-urlencoded\" class=\"headerlink\" title=\"1.application&#x2F;x-www-form-urlencoded\"></a>1.application&#x2F;x-www-form-urlencoded</h4><p>这应该是最常见的post编码方式，一般的表单提交默认以此方式提交。大部分服务器语言对这种方式都有很好的支持。在PHP中，可以用$_POST[“key”]的方式获取到key的值，在node中我们可以使用querystring中间件对参数进行分离。</p>\n<p>请求类似于下面这样:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"string\">&#x27;title&#x27;</span>:<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;sub&#x27;</span> : [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面使用 axios 自带转换方法，transformRequest，文末有第二种方法</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.$axios(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;/server&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Content-type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: data,</span><br><span class=\"line\">    <span class=\"attr\">transformRequest</span>: [<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> ret = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> it <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">          ret += <span class=\"built_in\">encodeURIComponent</span>(it) + <span class=\"string\">&#x27;=&#x27;</span> + <span class=\"built_in\">encodeURIComponent</span>(data[it]) + <span class=\"string\">&#x27;&amp;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">      &#125;],</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最终发送的请求是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded;charset=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span><br></pre></td></tr></table></figure>\n\n<p>首先，Content-Type 被指定为 application&#x2F;x-www-form-urlencoded；其次，提交的数据按照 key1&#x3D;val1&amp;key2&#x3D;val2 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/server&quot;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)&#123;</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key=querystring.<span class=\"title function_\">parse</span>(<span class=\"built_in\">decodeURIComponent</span>(data)).<span class=\"property\">key</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;querystring:&quot;</span>+key)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-multipart-x2F-form-data\"><a href=\"#2-multipart-x2F-form-data\" class=\"headerlink\" title=\"2.multipart&#x2F;form-data\"></a>2.multipart&#x2F;form-data</h4><p>这也是一种比较常见的post数据格式，我们用表单上传文件时，必须使form表单的enctype属性或者ajax的contentType参数等于multipart&#x2F;form-data。</p>\n<h5 id=\"2-1-表单上传\"><a href=\"#2-1-表单上传\" class=\"headerlink\" title=\"2.1 表单上传\"></a>2.1 表单上传</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form method=&quot;post&quot;action=&quot;http://uploadUrl&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;input name=&quot;file&quot;type=&quot;file&quot;accept=&quot;image/gif,image.jpg&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;input name=&quot;token&quot;type=&quot;hidden&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;inpu ttype=&quot;submit&quot;value=&quot;提交&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-2-Ajax无刷新上传\"><a href=\"#2-2-Ajax无刷新上传\" class=\"headerlink\" title=\"2.2 Ajax无刷新上传\"></a>2.2 Ajax无刷新上传</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input id=&quot;file&quot; type=&quot;file&quot; /&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;文件上传&quot; onclick=&quot;uploadFile()&quot; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  function uploadFile() &#123;</span><br><span class=\"line\">    const file = document.getElementById(&#x27;file&#x27;).files[0];</span><br><span class=\"line\">    console.log(file,&#x27;********************************&#x27;);</span><br><span class=\"line\">    const xhr = new XMLHttpRequest();</span><br><span class=\"line\">    const fd = new FormData();</span><br><span class=\"line\">    fd.append(&#x27;file&#x27;, file);</span><br><span class=\"line\">    xhr.open(&#x27;POST&#x27;, &#x27;http://127.0.0.1:8000/upload&#x27;, true);</span><br><span class=\"line\">    xhr.onreadystatechange = function() &#123;</span><br><span class=\"line\">      if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send(fd);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用这种编码格式时发送到后台的数据长得像这样子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1</span><br><span class=\"line\">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\"></span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">title</span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class=\"line\">Content-Type: image/png</span><br><span class=\"line\"></span><br><span class=\"line\">PNG ... content of chrome.png ...</span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-application-x2F-json\"><a href=\"#3-application-x2F-json\" class=\"headerlink\" title=\"3.application&#x2F;json\"></a>3.application&#x2F;json</h4><p>axios默认提交就是使用这种格式。如果使用这种编码方式，那么传递到后台的将是序列化后的json字符串。</p>\n<p>例如下面这段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"string\">&#x27;title&#x27;</span>:<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;sub&#x27;</span> : [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.$axios(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;/server&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: data</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>最终发送的请求是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1 </span><br><span class=\"line\">Content-Type: application/json;charset=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-text-x2F-xml\"><a href=\"#4-text-x2F-xml\" class=\"headerlink\" title=\"4.text&#x2F;xml\"></a>4.text&#x2F;xml</h4><p>它是一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范。典型的 XML-RPC 请求是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1 </span><br><span class=\"line\">Content-Type: text/xml</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;methodCall&gt;</span><br><span class=\"line\">    &lt;methodName&gt;examples.getStateName&lt;/methodName&gt;</span><br><span class=\"line\">    &lt;params&gt;</span><br><span class=\"line\">        &lt;param&gt;</span><br><span class=\"line\">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</span><br><span class=\"line\">        &lt;/param&gt;</span><br><span class=\"line\">    &lt;/params&gt;</span><br><span class=\"line\">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>\n<p>XML-RPC 协议简单、功能够用，各种语言的实现都有。它的使用也很广泛，如 WordPress 的 <a href=\"http://codex.wordpress.org/XML-RPC_WordPress_API\">XML-RPC Api</a>，搜索引擎的 <a href=\"http://help.baidu.com/question?prod_en=master&class=476&id=1000423\">ping 服务</a>等等。JavaScript 中，也有<a href=\"http://plugins.jquery.com/xmlrpc/\">现成的库</a>支持以这种方式进行数据交互，能很好的支持已有的 XML-RPC 服务。不过，我个人觉得 XML 结构还是过于臃肿，一般场景用 JSON 会更灵活方便。</p>\n<h4 id=\"qs使用\"><a href=\"#qs使用\" class=\"headerlink\" title=\"qs使用\"></a>qs使用</h4><hr>\n<p>  <code> A querystring parsing and stringifying library with some added security.</code></p>\n<h5 id=\"1-qs-parse-将URL解析成对象的形式\"><a href=\"#1-qs-parse-将URL解析成对象的形式\" class=\"headerlink\" title=\"1.qs.parse()将URL解析成对象的形式\"></a>1.qs.parse()将URL解析成对象的形式</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Qs</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;qs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;method=query_sql_dataset_data&amp;projectId=85&amp;appToken=7d22e38e-5717-11e7-907b-a6006ad3dba0&#x27;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(url);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(url));</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  method: &quot;query_sql_dataset_data&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">  projectId: 85,</span></span><br><span class=\"line\"><span class=\"comment\">  appToken: &quot;7d22e38e-5717-11e7-907b-a6006ad3dba0</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-qs-stringify-将对象-序列化成URL的形式，以-amp-进行拼接\"><a href=\"#2-qs-stringify-将对象-序列化成URL的形式，以-amp-进行拼接\" class=\"headerlink\" title=\"2. qs.stringify()将对象 序列化成URL的形式，以&amp;进行拼接\"></a>2. qs.stringify()将对象 序列化成URL的形式，以&amp;进行拼接</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Qs</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;qs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj= &#123;</span><br><span class=\"line\">     <span class=\"attr\">method</span>: <span class=\"string\">&quot;query_sql_dataset_data&quot;</span>,</span><br><span class=\"line\">     <span class=\"attr\">projectId</span>: <span class=\"string\">&quot;85&quot;</span>,</span><br><span class=\"line\">     <span class=\"attr\">appToken</span>: <span class=\"string\">&quot;7d22e38e-5717-11e7-907b-a6006ad3dba0&quot;</span>,</span><br><span class=\"line\">     <span class=\"attr\">datasetId</span>: <span class=\"string\">&quot; 12564701&quot;</span></span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">stringify</span>(obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Qs</span>.<span class=\"title function_\">stringify</span>(obj)); </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> method=query_sql_dataset_data&amp;projectId=85&amp;appToken=7d22e38e-5717-11e7-907b-a6006ad3dba0&amp;datasetId=%2012564701</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"post请求处理\"><a href=\"#post请求处理\" class=\"headerlink\" title=\"post请求处理\"></a>post请求处理</h5><p>当post 请求报文格式为<br>application&#x2F;x-www-form-urlencoded</p>\n<blockquote>\n<p>POST <a href=\"http://www.example.com/\">http://www.example.com</a> HTTP&#x2F;1.1<br>Content-Type: application&#x2F;x-www-form-urlencoded;charset&#x3D;utf-8<br>title&#x3D;test&amp;sub%5B%5D&#x3D;1&amp;sub%5B%5D&#x3D;2&amp;sub%5B%5D&#x3D;3</p>\n</blockquote>\n<p>需要对参数进行转化，固定格式 <code>key=value&amp;key1=value1</code></p>\n<p>在axios中应用,对参数进行处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"string\">&#x27;title&#x27;</span>:<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;sub&#x27;</span> : [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$axios</span>.<span class=\"title function_\">post</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>:<span class=\"string\">&quot;/admin/login&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">params</span>: qs.<span class=\"title function_\">stringfy</span>(data)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://blog.fundebug.com/2019/02/22/compare-http-method-get-and-post/\">都 2019 年了，还问 GET 和 POST 的区别</a><br> <a href=\"https://www.jianshu.com/p/62546d82f380\">Vue.js使用axios发送数组</a><br><a href=\"https://imququ.com/post/four-ways-to-post-data-in-http.html\">四种常见的 POST 提交数据方式</a><br><a href=\"https://blog.csdn.net/qq_43290288/article/details/106683304\">Vue 之 qs.parse()、qs.stringify()使用方法</a><br><a href=\"https://blog.csdn.net/wopelo/article/details/78783442\">axios用post提交的数据格式</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-bce9ecec2e1a8078.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"post提交数据的四种编码方式\"><a href=\"#post提交数据的四种编码方式\" class=\"headerlink\" title=\"post提交数据的四种编码方式\"></a>post提交数据的四种编码方式</h3><h4 id=\"1-application-x2F-x-www-form-urlencoded\"><a href=\"#1-application-x2F-x-www-form-urlencoded\" class=\"headerlink\" title=\"1.application&#x2F;x-www-form-urlencoded\"></a>1.application&#x2F;x-www-form-urlencoded</h4><p>这应该是最常见的post编码方式，一般的表单提交默认以此方式提交。大部分服务器语言对这种方式都有很好的支持。在PHP中，可以用$_POST[“key”]的方式获取到key的值，在node中我们可以使用querystring中间件对参数进行分离。</p>\n<p>请求类似于下面这样:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"string\">&#x27;title&#x27;</span>:<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;sub&#x27;</span> : [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面使用 axios 自带转换方法，transformRequest，文末有第二种方法</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.$axios(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;/server&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Content-type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: data,</span><br><span class=\"line\">    <span class=\"attr\">transformRequest</span>: [<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> ret = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> it <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">          ret += <span class=\"built_in\">encodeURIComponent</span>(it) + <span class=\"string\">&#x27;=&#x27;</span> + <span class=\"built_in\">encodeURIComponent</span>(data[it]) + <span class=\"string\">&#x27;&amp;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">      &#125;],</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最终发送的请求是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded;charset=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span><br></pre></td></tr></table></figure>\n\n<p>首先，Content-Type 被指定为 application&#x2F;x-www-form-urlencoded；其次，提交的数据按照 key1&#x3D;val1&amp;key2&#x3D;val2 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/server&quot;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)&#123;</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key=querystring.<span class=\"title function_\">parse</span>(<span class=\"built_in\">decodeURIComponent</span>(data)).<span class=\"property\">key</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;querystring:&quot;</span>+key)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-multipart-x2F-form-data\"><a href=\"#2-multipart-x2F-form-data\" class=\"headerlink\" title=\"2.multipart&#x2F;form-data\"></a>2.multipart&#x2F;form-data</h4><p>这也是一种比较常见的post数据格式，我们用表单上传文件时，必须使form表单的enctype属性或者ajax的contentType参数等于multipart&#x2F;form-data。</p>\n<h5 id=\"2-1-表单上传\"><a href=\"#2-1-表单上传\" class=\"headerlink\" title=\"2.1 表单上传\"></a>2.1 表单上传</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form method=&quot;post&quot;action=&quot;http://uploadUrl&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;input name=&quot;file&quot;type=&quot;file&quot;accept=&quot;image/gif,image.jpg&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;input name=&quot;token&quot;type=&quot;hidden&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;inpu ttype=&quot;submit&quot;value=&quot;提交&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-2-Ajax无刷新上传\"><a href=\"#2-2-Ajax无刷新上传\" class=\"headerlink\" title=\"2.2 Ajax无刷新上传\"></a>2.2 Ajax无刷新上传</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input id=&quot;file&quot; type=&quot;file&quot; /&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;文件上传&quot; onclick=&quot;uploadFile()&quot; /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  function uploadFile() &#123;</span><br><span class=\"line\">    const file = document.getElementById(&#x27;file&#x27;).files[0];</span><br><span class=\"line\">    console.log(file,&#x27;********************************&#x27;);</span><br><span class=\"line\">    const xhr = new XMLHttpRequest();</span><br><span class=\"line\">    const fd = new FormData();</span><br><span class=\"line\">    fd.append(&#x27;file&#x27;, file);</span><br><span class=\"line\">    xhr.open(&#x27;POST&#x27;, &#x27;http://127.0.0.1:8000/upload&#x27;, true);</span><br><span class=\"line\">    xhr.onreadystatechange = function() &#123;</span><br><span class=\"line\">      if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send(fd);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用这种编码格式时发送到后台的数据长得像这样子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1</span><br><span class=\"line\">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\"></span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">title</span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class=\"line\">Content-Type: image/png</span><br><span class=\"line\"></span><br><span class=\"line\">PNG ... content of chrome.png ...</span><br><span class=\"line\">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-application-x2F-json\"><a href=\"#3-application-x2F-json\" class=\"headerlink\" title=\"3.application&#x2F;json\"></a>3.application&#x2F;json</h4><p>axios默认提交就是使用这种格式。如果使用这种编码方式，那么传递到后台的将是序列化后的json字符串。</p>\n<p>例如下面这段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"string\">&#x27;title&#x27;</span>:<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;sub&#x27;</span> : [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.$axios(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;/server&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: data</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>最终发送的请求是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1 </span><br><span class=\"line\">Content-Type: application/json;charset=utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-text-x2F-xml\"><a href=\"#4-text-x2F-xml\" class=\"headerlink\" title=\"4.text&#x2F;xml\"></a>4.text&#x2F;xml</h4><p>它是一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范。典型的 XML-RPC 请求是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST http://www.example.com HTTP/1.1 </span><br><span class=\"line\">Content-Type: text/xml</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;methodCall&gt;</span><br><span class=\"line\">    &lt;methodName&gt;examples.getStateName&lt;/methodName&gt;</span><br><span class=\"line\">    &lt;params&gt;</span><br><span class=\"line\">        &lt;param&gt;</span><br><span class=\"line\">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</span><br><span class=\"line\">        &lt;/param&gt;</span><br><span class=\"line\">    &lt;/params&gt;</span><br><span class=\"line\">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>\n<p>XML-RPC 协议简单、功能够用，各种语言的实现都有。它的使用也很广泛，如 WordPress 的 <a href=\"http://codex.wordpress.org/XML-RPC_WordPress_API\">XML-RPC Api</a>，搜索引擎的 <a href=\"http://help.baidu.com/question?prod_en=master&class=476&id=1000423\">ping 服务</a>等等。JavaScript 中，也有<a href=\"http://plugins.jquery.com/xmlrpc/\">现成的库</a>支持以这种方式进行数据交互，能很好的支持已有的 XML-RPC 服务。不过，我个人觉得 XML 结构还是过于臃肿，一般场景用 JSON 会更灵活方便。</p>\n<h4 id=\"qs使用\"><a href=\"#qs使用\" class=\"headerlink\" title=\"qs使用\"></a>qs使用</h4><hr>\n<p>  <code> A querystring parsing and stringifying library with some added security.</code></p>\n<h5 id=\"1-qs-parse-将URL解析成对象的形式\"><a href=\"#1-qs-parse-将URL解析成对象的形式\" class=\"headerlink\" title=\"1.qs.parse()将URL解析成对象的形式\"></a>1.qs.parse()将URL解析成对象的形式</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Qs</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;qs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;method=query_sql_dataset_data&amp;projectId=85&amp;appToken=7d22e38e-5717-11e7-907b-a6006ad3dba0&#x27;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(url);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(url));</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  method: &quot;query_sql_dataset_data&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">  projectId: 85,</span></span><br><span class=\"line\"><span class=\"comment\">  appToken: &quot;7d22e38e-5717-11e7-907b-a6006ad3dba0</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-qs-stringify-将对象-序列化成URL的形式，以-amp-进行拼接\"><a href=\"#2-qs-stringify-将对象-序列化成URL的形式，以-amp-进行拼接\" class=\"headerlink\" title=\"2. qs.stringify()将对象 序列化成URL的形式，以&amp;进行拼接\"></a>2. qs.stringify()将对象 序列化成URL的形式，以&amp;进行拼接</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Qs</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;qs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj= &#123;</span><br><span class=\"line\">     <span class=\"attr\">method</span>: <span class=\"string\">&quot;query_sql_dataset_data&quot;</span>,</span><br><span class=\"line\">     <span class=\"attr\">projectId</span>: <span class=\"string\">&quot;85&quot;</span>,</span><br><span class=\"line\">     <span class=\"attr\">appToken</span>: <span class=\"string\">&quot;7d22e38e-5717-11e7-907b-a6006ad3dba0&quot;</span>,</span><br><span class=\"line\">     <span class=\"attr\">datasetId</span>: <span class=\"string\">&quot; 12564701&quot;</span></span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">stringify</span>(obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Qs</span>.<span class=\"title function_\">stringify</span>(obj)); </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> method=query_sql_dataset_data&amp;projectId=85&amp;appToken=7d22e38e-5717-11e7-907b-a6006ad3dba0&amp;datasetId=%2012564701</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"post请求处理\"><a href=\"#post请求处理\" class=\"headerlink\" title=\"post请求处理\"></a>post请求处理</h5><p>当post 请求报文格式为<br>application&#x2F;x-www-form-urlencoded</p>\n<blockquote>\n<p>POST <a href=\"http://www.example.com/\">http://www.example.com</a> HTTP&#x2F;1.1<br>Content-Type: application&#x2F;x-www-form-urlencoded;charset&#x3D;utf-8<br>title&#x3D;test&amp;sub%5B%5D&#x3D;1&amp;sub%5B%5D&#x3D;2&amp;sub%5B%5D&#x3D;3</p>\n</blockquote>\n<p>需要对参数进行转化，固定格式 <code>key=value&amp;key1=value1</code></p>\n<p>在axios中应用,对参数进行处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"string\">&#x27;title&#x27;</span>:<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"string\">&#x27;sub&#x27;</span> : [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$axios</span>.<span class=\"title function_\">post</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>:<span class=\"string\">&quot;/admin/login&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">params</span>: qs.<span class=\"title function_\">stringfy</span>(data)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://blog.fundebug.com/2019/02/22/compare-http-method-get-and-post/\">都 2019 年了，还问 GET 和 POST 的区别</a><br> <a href=\"https://www.jianshu.com/p/62546d82f380\">Vue.js使用axios发送数组</a><br><a href=\"https://imququ.com/post/four-ways-to-post-data-in-http.html\">四种常见的 POST 提交数据方式</a><br><a href=\"https://blog.csdn.net/qq_43290288/article/details/106683304\">Vue 之 qs.parse()、qs.stringify()使用方法</a><br><a href=\"https://blog.csdn.net/wopelo/article/details/78783442\">axios用post提交的数据格式</a></p>\n</blockquote>\n"},{"title":"🌦🌦-charCodeAt-,-fromCharCode-用法","date":"2021-07-23T16:00:00.000Z","_content":"charCodeAt 获取 ascII编码\n```\nlet  d = \"a\"\nconsole.log(d.charCodeAt()) // 97\n```\n\n```\nlet num = String.fromCharCode(97)\nconsole.log(num) // a\n```\n","source":"_posts/🌦🌦-charCodeAt-,-fromCharCode-用法.md","raw":"---\ntitle: \"🌦🌦-charCodeAt-,-fromCharCode-用法\"\ndate: 2021-07-24\ntags: \n- 开发日常\n---\ncharCodeAt 获取 ascII编码\n```\nlet  d = \"a\"\nconsole.log(d.charCodeAt()) // 97\n```\n\n```\nlet num = String.fromCharCode(97)\nconsole.log(num) // a\n```\n","slug":"🌦🌦-charCodeAt-,-fromCharCode-用法","published":1,"updated":"2024-05-16T07:39:11.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094n7002s2omv3d61bj4d","content":"<p>charCodeAt 获取 ascII编码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  d = &quot;a&quot;</span><br><span class=\"line\">console.log(d.charCodeAt()) // 97</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let num = String.fromCharCode(97)</span><br><span class=\"line\">console.log(num) // a</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>charCodeAt 获取 ascII编码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  d = &quot;a&quot;</span><br><span class=\"line\">console.log(d.charCodeAt()) // 97</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let num = String.fromCharCode(97)</span><br><span class=\"line\">console.log(num) // a</span><br></pre></td></tr></table></figure>\n"},{"title":"🌦🌦-cookie-为什么作为token-放在header里","date":"2021-09-21T16:00:00.000Z","_content":"### 现象：\n后端配置了cores跨域，前端直接请求，没有通过代理，这样如果设置cookie，只能设置到， localhost里，request header 无法带过去\n\n手动设置header Access-Token \n```\nheader: {\n  Access-Token: Cookies.get(\"Access-Token\")\n}\n```\n![](https://upload-images.jianshu.io/upload_images/15312191-16f1b76d63a8bef9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n通过代理，携带在在request header中的cookie,cookie自动带入，无须设置\n![](https://upload-images.jianshu.io/upload_images/15312191-2ed53c85c6d48246.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 原因：\n\n1.cores技术成熟，后端配置方便\n\n2.前端开发涉及的范围越来越广，小程序、hybrid、electron这些都不是纯粹的web 开发，后端既要处理原生的http请求又要处理web的http请求原生不是browser这意味着原生请求没有cookie，那么如果web和原生共用同一个api，这就意味着后端需要两套解析token的机制，何不直接就全放在header里面用同一套逻辑处理呢。\n\n3.主要还是cookie会被浏览器自动带上, 劫持了才容易攻击.\n\n","source":"_posts/🌦🌦-cookie-为什么作为token-放在header里.md","raw":"---\ntitle: \"🌦🌦-cookie-为什么作为token-放在header里\"\ndate: 2021-09-22\ntags: \n- 开发日常\n---\n### 现象：\n后端配置了cores跨域，前端直接请求，没有通过代理，这样如果设置cookie，只能设置到， localhost里，request header 无法带过去\n\n手动设置header Access-Token \n```\nheader: {\n  Access-Token: Cookies.get(\"Access-Token\")\n}\n```\n![](https://upload-images.jianshu.io/upload_images/15312191-16f1b76d63a8bef9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n通过代理，携带在在request header中的cookie,cookie自动带入，无须设置\n![](https://upload-images.jianshu.io/upload_images/15312191-2ed53c85c6d48246.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 原因：\n\n1.cores技术成熟，后端配置方便\n\n2.前端开发涉及的范围越来越广，小程序、hybrid、electron这些都不是纯粹的web 开发，后端既要处理原生的http请求又要处理web的http请求原生不是browser这意味着原生请求没有cookie，那么如果web和原生共用同一个api，这就意味着后端需要两套解析token的机制，何不直接就全放在header里面用同一套逻辑处理呢。\n\n3.主要还是cookie会被浏览器自动带上, 劫持了才容易攻击.\n\n","slug":"🌦🌦-cookie-为什么作为token-放在header里","published":1,"updated":"2024-05-16T07:39:11.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094na002u2omv2vhtfzb1","content":"<h3 id=\"现象：\"><a href=\"#现象：\" class=\"headerlink\" title=\"现象：\"></a>现象：</h3><p>后端配置了cores跨域，前端直接请求，没有通过代理，这样如果设置cookie，只能设置到， localhost里，request header 无法带过去</p>\n<p>手动设置header Access-Token </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header: &#123;</span><br><span class=\"line\">  Access-Token: Cookies.get(&quot;Access-Token&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-16f1b76d63a8bef9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>通过代理，携带在在request header中的cookie,cookie自动带入，无须设置<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-2ed53c85c6d48246.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h3><p>1.cores技术成熟，后端配置方便</p>\n<p>2.前端开发涉及的范围越来越广，小程序、hybrid、electron这些都不是纯粹的web 开发，后端既要处理原生的http请求又要处理web的http请求原生不是browser这意味着原生请求没有cookie，那么如果web和原生共用同一个api，这就意味着后端需要两套解析token的机制，何不直接就全放在header里面用同一套逻辑处理呢。</p>\n<p>3.主要还是cookie会被浏览器自动带上, 劫持了才容易攻击.</p>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"现象：\"><a href=\"#现象：\" class=\"headerlink\" title=\"现象：\"></a>现象：</h3><p>后端配置了cores跨域，前端直接请求，没有通过代理，这样如果设置cookie，只能设置到， localhost里，request header 无法带过去</p>\n<p>手动设置header Access-Token </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header: &#123;</span><br><span class=\"line\">  Access-Token: Cookies.get(&quot;Access-Token&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-16f1b76d63a8bef9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>通过代理，携带在在request header中的cookie,cookie自动带入，无须设置<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-2ed53c85c6d48246.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h3><p>1.cores技术成熟，后端配置方便</p>\n<p>2.前端开发涉及的范围越来越广，小程序、hybrid、electron这些都不是纯粹的web 开发，后端既要处理原生的http请求又要处理web的http请求原生不是browser这意味着原生请求没有cookie，那么如果web和原生共用同一个api，这就意味着后端需要两套解析token的机制，何不直接就全放在header里面用同一套逻辑处理呢。</p>\n<p>3.主要还是cookie会被浏览器自动带上, 劫持了才容易攻击.</p>\n"},{"title":"🌦🌦-import---as-怎么用","date":"2021-10-21T16:00:00.000Z","_content":"`lib.js`\n```js\nexport var config = _config;\nexport var db = _db;\nexport var storage = _storage;\n\n```\n`main.js`\n在 main.js中使用 lib.js\n```\nimport {storage,db,config} from \"./lib\"\n```\n\n也可以写成\n\n```\nimport * as lib from \"./lib\"\nlib.db()\n```\n","source":"_posts/🌦🌦-import---as-怎么用.md","raw":"---\ntitle: \"🌦🌦-import---as-怎么用\"\ndate: 2021-10-22\ntags: \n- 开发日常\n---\n`lib.js`\n```js\nexport var config = _config;\nexport var db = _db;\nexport var storage = _storage;\n\n```\n`main.js`\n在 main.js中使用 lib.js\n```\nimport {storage,db,config} from \"./lib\"\n```\n\n也可以写成\n\n```\nimport * as lib from \"./lib\"\nlib.db()\n```\n","slug":"🌦🌦-import---as-怎么用","published":1,"updated":"2024-05-16T07:39:11.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nb002w2omv2iqzhsl6","content":"<p><code>lib.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> config = _config;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> db = _db;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> storage = _storage;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>main.js</code><br>在 main.js中使用 lib.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;storage,db,config&#125; from &quot;./lib&quot;</span><br></pre></td></tr></table></figure>\n\n<p>也可以写成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as lib from &quot;./lib&quot;</span><br><span class=\"line\">lib.db()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><code>lib.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> config = _config;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> db = _db;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> storage = _storage;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>main.js</code><br>在 main.js中使用 lib.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;storage,db,config&#125; from &quot;./lib&quot;</span><br></pre></td></tr></table></figure>\n\n<p>也可以写成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as lib from &quot;./lib&quot;</span><br><span class=\"line\">lib.db()</span><br></pre></td></tr></table></figure>\n"},{"title":"🌦🌦-indexOf，includes，空字符串，返回的什么","date":"2021-10-09T16:00:00.000Z","_content":"最近刷letcode碰到的小问题\n\n## indexOf\n\n```js\nlet str = \"string\"\nstr.indexOf(\"\") // 0\n```\nmdn解释\nThe index of the first occurrence of `searchValue`, or **`-1`** if not found.\n\nAn empty string `searchValue` produces strange results. With no `fromIndex` value, or any `fromIndex` value lower than the string's `length`, the returned value is the same as the `fromIndex` value:\n\n```\n'hello world'.indexOf('') // returns 0\n'hello world'.indexOf('', 0) // returns 0\n'hello world'.indexOf('', 3) // returns 3\n'hello world'.indexOf('', 8) // returns 8\n```\n\n如果是空的，返回传入的序列，再往下需要查看js编译器源码了\n\n## includes\n传入空字符串，返回true\n\n```js\nlet str = \"string\"\nstr.includes(\"\") // true\n```\nincludes，polyfill，目测includes也是通过indexOf实现的\n\n```js\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n     'use strict';\n     if (search instanceof RegExp) {\n      throw TypeError('first argument must not be a RegExp');\n    }\n    if (start === undefined) { start = 0; }\n    return this.indexOf(search, start) !== -1;\n  };\n}\n```\n","source":"_posts/🌦🌦-indexOf，includes，空字符串，返回的什么.md","raw":"---\ntitle: \"🌦🌦-indexOf，includes，空字符串，返回的什么\"\ndate: 2021-10-10\ntags: \n- 开发日常\n---\n最近刷letcode碰到的小问题\n\n## indexOf\n\n```js\nlet str = \"string\"\nstr.indexOf(\"\") // 0\n```\nmdn解释\nThe index of the first occurrence of `searchValue`, or **`-1`** if not found.\n\nAn empty string `searchValue` produces strange results. With no `fromIndex` value, or any `fromIndex` value lower than the string's `length`, the returned value is the same as the `fromIndex` value:\n\n```\n'hello world'.indexOf('') // returns 0\n'hello world'.indexOf('', 0) // returns 0\n'hello world'.indexOf('', 3) // returns 3\n'hello world'.indexOf('', 8) // returns 8\n```\n\n如果是空的，返回传入的序列，再往下需要查看js编译器源码了\n\n## includes\n传入空字符串，返回true\n\n```js\nlet str = \"string\"\nstr.includes(\"\") // true\n```\nincludes，polyfill，目测includes也是通过indexOf实现的\n\n```js\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n     'use strict';\n     if (search instanceof RegExp) {\n      throw TypeError('first argument must not be a RegExp');\n    }\n    if (start === undefined) { start = 0; }\n    return this.indexOf(search, start) !== -1;\n  };\n}\n```\n","slug":"🌦🌦-indexOf，includes，空字符串，返回的什么","published":1,"updated":"2024-05-16T07:39:11.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nc002y2omv36u7dve4","content":"<p>最近刷letcode碰到的小问题</p>\n<div class=\"\"><h2 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<p>mdn解释<br>The index of the first occurrence of <code>searchValue</code>, or <strong><code>-1</code></strong> if not found.</p>\n<p>An empty string <code>searchValue</code> produces strange results. With no <code>fromIndex</code> value, or any <code>fromIndex</code> value lower than the string’s <code>length</code>, the returned value is the same as the <code>fromIndex</code> value:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;) // returns 0</span><br><span class=\"line\">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 0) // returns 0</span><br><span class=\"line\">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 3) // returns 3</span><br><span class=\"line\">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 8) // returns 8</span><br></pre></td></tr></table></figure>\n\n<p>如果是空的，返回传入的序列，再往下需要查看js编译器源码了</p>\n</div><div class=\"\"><h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h2><p>传入空字符串，返回true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">str.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>includes，polyfill，目测includes也是通过indexOf实现的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title class_\">String</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">includes</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">String</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">includes</span> = <span class=\"keyword\">function</span>(<span class=\"params\">search, start</span>) &#123;</span><br><span class=\"line\">     <span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (search <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;first argument must not be a RegExp&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start === <span class=\"literal\">undefined</span>) &#123; start = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">indexOf</span>(search, start) !== -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<p>最近刷letcode碰到的小问题</p>\n<h2 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<p>mdn解释<br>The index of the first occurrence of <code>searchValue</code>, or <strong><code>-1</code></strong> if not found.</p>\n<p>An empty string <code>searchValue</code> produces strange results. With no <code>fromIndex</code> value, or any <code>fromIndex</code> value lower than the string’s <code>length</code>, the returned value is the same as the <code>fromIndex</code> value:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;) // returns 0</span><br><span class=\"line\">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 0) // returns 0</span><br><span class=\"line\">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 3) // returns 3</span><br><span class=\"line\">&#x27;hello world&#x27;.indexOf(&#x27;&#x27;, 8) // returns 8</span><br></pre></td></tr></table></figure>\n\n<p>如果是空的，返回传入的序列，再往下需要查看js编译器源码了</p>\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h2><p>传入空字符串，返回true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">str.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>includes，polyfill，目测includes也是通过indexOf实现的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title class_\">String</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">includes</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">String</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">includes</span> = <span class=\"keyword\">function</span>(<span class=\"params\">search, start</span>) &#123;</span><br><span class=\"line\">     <span class=\"string\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (search <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;first argument must not be a RegExp&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start === <span class=\"literal\">undefined</span>) &#123; start = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">indexOf</span>(search, start) !== -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"🌦🌦-ivew-动态新增-input-prop校验","date":"2021-01-02T16:00:00.000Z","_content":"有这样的需求如下图：\n1.下拉选择select 选择，\n2.新增一组 input提交选项\n\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-adb95ea2dca9fa6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n新增input代码如下(只罗列了前两项)：\n```\n <!-- 新增园区 -->\n<div v-for=\"(item, index) in formData.areaList\" v-if='formData.areaList.length >=1'>\n          <div class=\"form-line\">\n            <FormItem label=\"联系人\" :prop=\"'areaList.' + index + '.contactor'\" :rules='rules.contactor'>\n              <Input v-model=\"item.contactor\" placeholder=\"请输入联系人\" clearable :style=\"{width: '100%'}\">\n              </Input>\n            </FormItem>\n            <FormItem label=\"联系电话\" :prop=\"'areaList.' + index + '.contactTel'\" :rules='rules.contactTel'>\n              <Input v-model=\"item.contactTel\" placeholder=\"请输入联系电话\" clearable :style=\"{width: '100%'}\">\n              </Input>\n            </FormItem>\n          </div>\n</div>\n```\nprop这样写\n```\n :prop = areaList.' + index + '.contactor\n```\n#####总结 ： 便利对象 + . + index + . + key\n####需要注意的点\n######1. prop现在是变量 前面加：\n######2.便利的数组对象(areaList), 要在需要最后提交的formData里\n######3.单独在新增的FormItem 加rules,比如 :rules='rules.contactor'\n```\n rules: {\n        contactor: [{\n          required: true,\n          message: '请输入联系人',\n          trigger: 'blur'\n        }],\n        contactTel: [{\n          required: true,\n          message: '请输入联系电话',\n          trigger: 'blur'\n        },\n```\n######4.新增的数组里需要加入 对应的key\n  如下:\n```\n   let o = {\n        contactTel: '',\n        contactor: ''\n      }\n      this.formData.areaList.push(o)\n```\n\n","source":"_posts/🌦🌦-ivew-动态新增-input-prop校验.md","raw":"---\ntitle: \"🌦🌦-ivew-动态新增-input-prop校验\"\ndate: 2021-01-03\ntags: \n- 开发日常\n---\n有这样的需求如下图：\n1.下拉选择select 选择，\n2.新增一组 input提交选项\n\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-adb95ea2dca9fa6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n新增input代码如下(只罗列了前两项)：\n```\n <!-- 新增园区 -->\n<div v-for=\"(item, index) in formData.areaList\" v-if='formData.areaList.length >=1'>\n          <div class=\"form-line\">\n            <FormItem label=\"联系人\" :prop=\"'areaList.' + index + '.contactor'\" :rules='rules.contactor'>\n              <Input v-model=\"item.contactor\" placeholder=\"请输入联系人\" clearable :style=\"{width: '100%'}\">\n              </Input>\n            </FormItem>\n            <FormItem label=\"联系电话\" :prop=\"'areaList.' + index + '.contactTel'\" :rules='rules.contactTel'>\n              <Input v-model=\"item.contactTel\" placeholder=\"请输入联系电话\" clearable :style=\"{width: '100%'}\">\n              </Input>\n            </FormItem>\n          </div>\n</div>\n```\nprop这样写\n```\n :prop = areaList.' + index + '.contactor\n```\n#####总结 ： 便利对象 + . + index + . + key\n####需要注意的点\n######1. prop现在是变量 前面加：\n######2.便利的数组对象(areaList), 要在需要最后提交的formData里\n######3.单独在新增的FormItem 加rules,比如 :rules='rules.contactor'\n```\n rules: {\n        contactor: [{\n          required: true,\n          message: '请输入联系人',\n          trigger: 'blur'\n        }],\n        contactTel: [{\n          required: true,\n          message: '请输入联系电话',\n          trigger: 'blur'\n        },\n```\n######4.新增的数组里需要加入 对应的key\n  如下:\n```\n   let o = {\n        contactTel: '',\n        contactor: ''\n      }\n      this.formData.areaList.push(o)\n```\n\n","slug":"🌦🌦-ivew-动态新增-input-prop校验","published":1,"updated":"2024-05-16T07:39:11.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nd00302omv4hf8fx0p","content":"<p>有这样的需求如下图：<br>1.下拉选择select 选择，<br>2.新增一组 input提交选项</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-adb95ea2dca9fa6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>新增input代码如下(只罗列了前两项)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!-- 新增园区 --&gt;</span><br><span class=\"line\">&lt;div v-for=&quot;(item, index) in formData.areaList&quot; v-if=&#x27;formData.areaList.length &gt;=1&#x27;&gt;</span><br><span class=\"line\">          &lt;div class=&quot;form-line&quot;&gt;</span><br><span class=\"line\">            &lt;FormItem label=&quot;联系人&quot; :prop=&quot;&#x27;areaList.&#x27; + index + &#x27;.contactor&#x27;&quot; :rules=&#x27;rules.contactor&#x27;&gt;</span><br><span class=\"line\">              &lt;Input v-model=&quot;item.contactor&quot; placeholder=&quot;请输入联系人&quot; clearable :style=&quot;&#123;width: &#x27;100%&#x27;&#125;&quot;&gt;</span><br><span class=\"line\">              &lt;/Input&gt;</span><br><span class=\"line\">            &lt;/FormItem&gt;</span><br><span class=\"line\">            &lt;FormItem label=&quot;联系电话&quot; :prop=&quot;&#x27;areaList.&#x27; + index + &#x27;.contactTel&#x27;&quot; :rules=&#x27;rules.contactTel&#x27;&gt;</span><br><span class=\"line\">              &lt;Input v-model=&quot;item.contactTel&quot; placeholder=&quot;请输入联系电话&quot; clearable :style=&quot;&#123;width: &#x27;100%&#x27;&#125;&quot;&gt;</span><br><span class=\"line\">              &lt;/Input&gt;</span><br><span class=\"line\">            &lt;/FormItem&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>prop这样写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:prop = areaList.&#x27; + index + &#x27;.contactor</span><br></pre></td></tr></table></figure>\n<p>#####总结 ： 便利对象 + . + index + . + key<br>####需要注意的点<br>######1. prop现在是变量 前面加：<br>######2.便利的数组对象(areaList), 要在需要最后提交的formData里<br>######3.单独在新增的FormItem 加rules,比如 :rules&#x3D;’rules.contactor’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: &#123;</span><br><span class=\"line\">       contactor: [&#123;</span><br><span class=\"line\">         required: true,</span><br><span class=\"line\">         message: &#x27;请输入联系人&#x27;,</span><br><span class=\"line\">         trigger: &#x27;blur&#x27;</span><br><span class=\"line\">       &#125;],</span><br><span class=\"line\">       contactTel: [&#123;</span><br><span class=\"line\">         required: true,</span><br><span class=\"line\">         message: &#x27;请输入联系电话&#x27;,</span><br><span class=\"line\">         trigger: &#x27;blur&#x27;</span><br><span class=\"line\">       &#125;,</span><br></pre></td></tr></table></figure>\n<p>######4.新增的数组里需要加入 对应的key<br>  如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let o = &#123;</span><br><span class=\"line\">     contactTel: &#x27;&#x27;,</span><br><span class=\"line\">     contactor: &#x27;&#x27;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   this.formData.areaList.push(o)</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>有这样的需求如下图：<br>1.下拉选择select 选择，<br>2.新增一组 input提交选项</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-adb95ea2dca9fa6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>新增input代码如下(只罗列了前两项)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!-- 新增园区 --&gt;</span><br><span class=\"line\">&lt;div v-for=&quot;(item, index) in formData.areaList&quot; v-if=&#x27;formData.areaList.length &gt;=1&#x27;&gt;</span><br><span class=\"line\">          &lt;div class=&quot;form-line&quot;&gt;</span><br><span class=\"line\">            &lt;FormItem label=&quot;联系人&quot; :prop=&quot;&#x27;areaList.&#x27; + index + &#x27;.contactor&#x27;&quot; :rules=&#x27;rules.contactor&#x27;&gt;</span><br><span class=\"line\">              &lt;Input v-model=&quot;item.contactor&quot; placeholder=&quot;请输入联系人&quot; clearable :style=&quot;&#123;width: &#x27;100%&#x27;&#125;&quot;&gt;</span><br><span class=\"line\">              &lt;/Input&gt;</span><br><span class=\"line\">            &lt;/FormItem&gt;</span><br><span class=\"line\">            &lt;FormItem label=&quot;联系电话&quot; :prop=&quot;&#x27;areaList.&#x27; + index + &#x27;.contactTel&#x27;&quot; :rules=&#x27;rules.contactTel&#x27;&gt;</span><br><span class=\"line\">              &lt;Input v-model=&quot;item.contactTel&quot; placeholder=&quot;请输入联系电话&quot; clearable :style=&quot;&#123;width: &#x27;100%&#x27;&#125;&quot;&gt;</span><br><span class=\"line\">              &lt;/Input&gt;</span><br><span class=\"line\">            &lt;/FormItem&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>prop这样写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:prop = areaList.&#x27; + index + &#x27;.contactor</span><br></pre></td></tr></table></figure>\n<p>#####总结 ： 便利对象 + . + index + . + key<br>####需要注意的点<br>######1. prop现在是变量 前面加：<br>######2.便利的数组对象(areaList), 要在需要最后提交的formData里<br>######3.单独在新增的FormItem 加rules,比如 :rules&#x3D;’rules.contactor’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: &#123;</span><br><span class=\"line\">       contactor: [&#123;</span><br><span class=\"line\">         required: true,</span><br><span class=\"line\">         message: &#x27;请输入联系人&#x27;,</span><br><span class=\"line\">         trigger: &#x27;blur&#x27;</span><br><span class=\"line\">       &#125;],</span><br><span class=\"line\">       contactTel: [&#123;</span><br><span class=\"line\">         required: true,</span><br><span class=\"line\">         message: &#x27;请输入联系电话&#x27;,</span><br><span class=\"line\">         trigger: &#x27;blur&#x27;</span><br><span class=\"line\">       &#125;,</span><br></pre></td></tr></table></figure>\n<p>######4.新增的数组里需要加入 对应的key<br>  如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let o = &#123;</span><br><span class=\"line\">     contactTel: &#x27;&#x27;,</span><br><span class=\"line\">     contactor: &#x27;&#x27;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   this.formData.areaList.push(o)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"🌦🌦-js-二进制转字符串","date":"2021-04-27T16:00:00.000Z","_content":"##### 十进制转二进制\n```js\nlet num = 5;\nnum = num.toString(2) // \"101\"\n```\n\n#### 二进制转十进制\n> parseInt(string, radix) \nradix：该值介于 2 ~ 36 之间。如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN\n\n```js\nlet num = \"101\"\nnum = parseInt(num, 2); // 5\n```\n","source":"_posts/🌦🌦-js-二进制转字符串.md","raw":"---\ntitle: \"🌦🌦-js-二进制转字符串\"\ndate: 2021-04-28\ntags: \n- 开发日常\n---\n##### 十进制转二进制\n```js\nlet num = 5;\nnum = num.toString(2) // \"101\"\n```\n\n#### 二进制转十进制\n> parseInt(string, radix) \nradix：该值介于 2 ~ 36 之间。如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN\n\n```js\nlet num = \"101\"\nnum = parseInt(num, 2); // 5\n```\n","slug":"🌦🌦-js-二进制转字符串","published":1,"updated":"2024-05-16T07:39:11.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nf00322omv1dabb23f","content":"<h5 id=\"十进制转二进制\"><a href=\"#十进制转二进制\" class=\"headerlink\" title=\"十进制转二进制\"></a>十进制转二进制</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">5</span>;</span><br><span class=\"line\">num = num.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>) <span class=\"comment\">// &quot;101&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二进制转十进制\"><a href=\"#二进制转十进制\" class=\"headerlink\" title=\"二进制转十进制\"></a>二进制转十进制</h4><blockquote>\n<p>parseInt(string, radix)<br>radix：该值介于 2 ~ 36 之间。如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"string\">&quot;101&quot;</span></span><br><span class=\"line\">num = <span class=\"built_in\">parseInt</span>(num, <span class=\"number\">2</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"十进制转二进制\"><a href=\"#十进制转二进制\" class=\"headerlink\" title=\"十进制转二进制\"></a>十进制转二进制</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">5</span>;</span><br><span class=\"line\">num = num.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>) <span class=\"comment\">// &quot;101&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二进制转十进制\"><a href=\"#二进制转十进制\" class=\"headerlink\" title=\"二进制转十进制\"></a>二进制转十进制</h4><blockquote>\n<p>parseInt(string, radix)<br>radix：该值介于 2 ~ 36 之间。如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"string\">&quot;101&quot;</span></span><br><span class=\"line\">num = <span class=\"built_in\">parseInt</span>(num, <span class=\"number\">2</span>); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n"},{"title":"🌦🌦-js-修改对象key","date":"2021-09-29T16:00:00.000Z","_content":"**原始数据:**\n```js\n\nlet Obj={\n  parentid:\"43323wsd2e2d2e33r3redad\",\n  head_img:\"i am a url\",\n}\n\n```\n**想要的数据：**\n```js\n\nlet newObj={\n  ParentID:\"43323wsd2e2d2e33r3redad\",\n  avator:\"i am a url\",\n}\n\n```\n\n\n##### 第一种，正则替换，缺点，如果value等于key,会有问题\n```js\n\n/**\n* @param {Object}  { parentid:\"43323wsd2e2d2e33r3redad\"}\n* @param {Object}  { parentid: \"ParentID\"}\n* @return {Object}  { ParentID:\"43323wsd2e2d2e33r3redad\"}\n*/\nconst  renameKeys = (target, keys) => {\n  const key = Object.keys(keys).reduce((pre, cur) => pre + \"|\" + cur)\n  const reg = new RegExp(`${key}`, \"ig\")\n  return JSON.parse(JSON.stringify(target).replace(reg, matched => keys[matched]))\n}\n\n```\n##### 第二种，reduce产生新的对象，缺点，使用更大内存\n```js\n\nconst renameKeys = (obj,keysMap) =>\n  Object.keys(obj).reduce(\n    (acc, key) => ({\n      ...acc,\n      ...{ [keysMap[key] || key]: obj[key] }\n    }),\n    {}\n  );\nconst obj =  { parentid:\"43323wsd2e2d2e33r3redad\"};\nrenameKeys(obj, { parentid: \"ParentID\"})  // { ParentID:\"43323wsd2e2d2e33r3redad\"}\n\n```\n","source":"_posts/🌦🌦-js-修改对象key.md","raw":"---\ntitle: \"🌦🌦-js-修改对象key\"\ndate: 2021-09-30\ntags: \n- 开发日常\n---\n**原始数据:**\n```js\n\nlet Obj={\n  parentid:\"43323wsd2e2d2e33r3redad\",\n  head_img:\"i am a url\",\n}\n\n```\n**想要的数据：**\n```js\n\nlet newObj={\n  ParentID:\"43323wsd2e2d2e33r3redad\",\n  avator:\"i am a url\",\n}\n\n```\n\n\n##### 第一种，正则替换，缺点，如果value等于key,会有问题\n```js\n\n/**\n* @param {Object}  { parentid:\"43323wsd2e2d2e33r3redad\"}\n* @param {Object}  { parentid: \"ParentID\"}\n* @return {Object}  { ParentID:\"43323wsd2e2d2e33r3redad\"}\n*/\nconst  renameKeys = (target, keys) => {\n  const key = Object.keys(keys).reduce((pre, cur) => pre + \"|\" + cur)\n  const reg = new RegExp(`${key}`, \"ig\")\n  return JSON.parse(JSON.stringify(target).replace(reg, matched => keys[matched]))\n}\n\n```\n##### 第二种，reduce产生新的对象，缺点，使用更大内存\n```js\n\nconst renameKeys = (obj,keysMap) =>\n  Object.keys(obj).reduce(\n    (acc, key) => ({\n      ...acc,\n      ...{ [keysMap[key] || key]: obj[key] }\n    }),\n    {}\n  );\nconst obj =  { parentid:\"43323wsd2e2d2e33r3redad\"};\nrenameKeys(obj, { parentid: \"ParentID\"})  // { ParentID:\"43323wsd2e2d2e33r3redad\"}\n\n```\n","slug":"🌦🌦-js-修改对象key","published":1,"updated":"2024-05-16T07:39:11.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ng00342omvb8wbhden","content":"<p><strong>原始数据:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Obj</span>=&#123;</span><br><span class=\"line\">  <span class=\"attr\">parentid</span>:<span class=\"string\">&quot;43323wsd2e2d2e33r3redad&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">head_img</span>:<span class=\"string\">&quot;i am a url&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>想要的数据：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj=&#123;</span><br><span class=\"line\">  <span class=\"title class_\">ParentID</span>:<span class=\"string\">&quot;43323wsd2e2d2e33r3redad&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">avator</span>:<span class=\"string\">&quot;i am a url&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"第一种，正则替换，缺点，如果value等于key-会有问题\"><a href=\"#第一种，正则替换，缺点，如果value等于key-会有问题\" class=\"headerlink\" title=\"第一种，正则替换，缺点，如果value等于key,会有问题\"></a>第一种，正则替换，缺点，如果value等于key,会有问题</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125;  &#123;<span class=\"type\"> parentid:&quot;43323wsd2e2d2e33r3redad&quot;</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125;  &#123;<span class=\"type\"> parentid: &quot;ParentID&quot;</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Object</span>&#125;  &#123;<span class=\"type\"> ParentID:&quot;43323wsd2e2d2e33r3redad&quot;</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  <span class=\"title function_\">renameKeys</span> = (<span class=\"params\">target, keys</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> key = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(keys).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> pre + <span class=\"string\">&quot;|&quot;</span> + cur)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>`</span>, <span class=\"string\">&quot;ig&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(target).<span class=\"title function_\">replace</span>(reg, <span class=\"function\"><span class=\"params\">matched</span> =&gt;</span> keys[matched]))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"第二种，reduce产生新的对象，缺点，使用更大内存\"><a href=\"#第二种，reduce产生新的对象，缺点，使用更大内存\" class=\"headerlink\" title=\"第二种，reduce产生新的对象，缺点，使用更大内存\"></a>第二种，reduce产生新的对象，缺点，使用更大内存</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">renameKeys</span> = (<span class=\"params\">obj,keysMap</span>) =&gt;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj).<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">acc, key</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">      ...acc,</span><br><span class=\"line\">      ...&#123; [keysMap[key] || key]: obj[key] &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    &#123;&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj =  &#123; <span class=\"attr\">parentid</span>:<span class=\"string\">&quot;43323wsd2e2d2e33r3redad&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"title function_\">renameKeys</span>(obj, &#123; <span class=\"attr\">parentid</span>: <span class=\"string\">&quot;ParentID&quot;</span>&#125;)  <span class=\"comment\">// &#123; ParentID:&quot;43323wsd2e2d2e33r3redad&quot;&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>原始数据:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Obj</span>=&#123;</span><br><span class=\"line\">  <span class=\"attr\">parentid</span>:<span class=\"string\">&quot;43323wsd2e2d2e33r3redad&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">head_img</span>:<span class=\"string\">&quot;i am a url&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>想要的数据：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj=&#123;</span><br><span class=\"line\">  <span class=\"title class_\">ParentID</span>:<span class=\"string\">&quot;43323wsd2e2d2e33r3redad&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">avator</span>:<span class=\"string\">&quot;i am a url&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"第一种，正则替换，缺点，如果value等于key-会有问题\"><a href=\"#第一种，正则替换，缺点，如果value等于key-会有问题\" class=\"headerlink\" title=\"第一种，正则替换，缺点，如果value等于key,会有问题\"></a>第一种，正则替换，缺点，如果value等于key,会有问题</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125;  &#123;<span class=\"type\"> parentid:&quot;43323wsd2e2d2e33r3redad&quot;</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125;  &#123;<span class=\"type\"> parentid: &quot;ParentID&quot;</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Object</span>&#125;  &#123;<span class=\"type\"> ParentID:&quot;43323wsd2e2d2e33r3redad&quot;</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  <span class=\"title function_\">renameKeys</span> = (<span class=\"params\">target, keys</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> key = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(keys).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> pre + <span class=\"string\">&quot;|&quot;</span> + cur)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>`</span>, <span class=\"string\">&quot;ig&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(target).<span class=\"title function_\">replace</span>(reg, <span class=\"function\"><span class=\"params\">matched</span> =&gt;</span> keys[matched]))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"第二种，reduce产生新的对象，缺点，使用更大内存\"><a href=\"#第二种，reduce产生新的对象，缺点，使用更大内存\" class=\"headerlink\" title=\"第二种，reduce产生新的对象，缺点，使用更大内存\"></a>第二种，reduce产生新的对象，缺点，使用更大内存</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">renameKeys</span> = (<span class=\"params\">obj,keysMap</span>) =&gt;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj).<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">acc, key</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">      ...acc,</span><br><span class=\"line\">      ...&#123; [keysMap[key] || key]: obj[key] &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    &#123;&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj =  &#123; <span class=\"attr\">parentid</span>:<span class=\"string\">&quot;43323wsd2e2d2e33r3redad&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"title function_\">renameKeys</span>(obj, &#123; <span class=\"attr\">parentid</span>: <span class=\"string\">&quot;ParentID&quot;</span>&#125;)  <span class=\"comment\">// &#123; ParentID:&quot;43323wsd2e2d2e33r3redad&quot;&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"🌦🌦-js小技巧","date":"2021-08-11T16:00:00.000Z","_content":"### 1.Array().fill 产生 n个数的数组\n> Array(length).fill(element) \n\n### 参数\nlength 填充长度\nelement   用来填充数组元素的值。\n ```js\n\n let codes = Array(26).fill(0).map((t,i) => i)\nconsole.log(codes) // [0,1,2,3,4,5,6......25]\n\n```\n\n### 2.reduce 求和\n`\nlet arr = [1, 2, 3]\n`\n`\nlet sum = arr.reduce((pre, cur) => pre + cur)  // 6\n`\n>PS 注意 空数组, 如果空元素 reduce 会报错\n\n### 3.向数组指定位置插入元素\n#### splice() 方法\n> splice(startIndex,deleteNum,item)\nstartIndex: 插入位置\ndeleteNum: 删除数量\nitem:  插入元素\n\nsplice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。\n\n##### 方法实例:\n\n```js\n// 在数组指定位置插入\n\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(2, 0, \"Lemon\", \"Kiwi\");\n\n//输出结果\n//Banana, Orange, Lemon, Kiwi, Apple, Mango\n//在 2 的位置删除0个，新增 \"Lemon\", \"Kiwi\"\n\n```\n\n### 4. 删除最后一个字符串的方法\n\n`stringObject.substr(start, length)`\n\n>用于返回一个从指定位置开始的指定长度的子字符串。\nstart（必需）：所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。\nlength（可选）：在返回的子字符串中应包括的字符个数。\n\n```\n字符串\nlet basic = \"abc,def,ghi,\"; \nconst newBasic = basic.substr(0, basic.length - 1);  // abc,def,ghi\nconsole.log(basic) //  \"abc,def,ghi,\"; \n```\n字符串方法 **slice()、substring()、substr()**\n\n都不能改变原来的元素\n\n### 5. ES6删除和过滤对象中部分属性\n原始数据\n```js\n\nlet student={\n    age: 20,\n    name: 'maomao',\n    sex: \"男\"\n}\n\n```\n排除\"age\"属性\n```js\n\nlet { age, ...params } = student\nconsole.log(params)  // {name: \"maomao\"，sex: \"男\"}\n\n```\n","source":"_posts/🌦🌦-js小技巧.md","raw":"---\ntitle: \"🌦🌦-js小技巧\"\ndate: 2021-08-12\ntags: \n- 开发日常\n---\n### 1.Array().fill 产生 n个数的数组\n> Array(length).fill(element) \n\n### 参数\nlength 填充长度\nelement   用来填充数组元素的值。\n ```js\n\n let codes = Array(26).fill(0).map((t,i) => i)\nconsole.log(codes) // [0,1,2,3,4,5,6......25]\n\n```\n\n### 2.reduce 求和\n`\nlet arr = [1, 2, 3]\n`\n`\nlet sum = arr.reduce((pre, cur) => pre + cur)  // 6\n`\n>PS 注意 空数组, 如果空元素 reduce 会报错\n\n### 3.向数组指定位置插入元素\n#### splice() 方法\n> splice(startIndex,deleteNum,item)\nstartIndex: 插入位置\ndeleteNum: 删除数量\nitem:  插入元素\n\nsplice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。\n\n##### 方法实例:\n\n```js\n// 在数组指定位置插入\n\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(2, 0, \"Lemon\", \"Kiwi\");\n\n//输出结果\n//Banana, Orange, Lemon, Kiwi, Apple, Mango\n//在 2 的位置删除0个，新增 \"Lemon\", \"Kiwi\"\n\n```\n\n### 4. 删除最后一个字符串的方法\n\n`stringObject.substr(start, length)`\n\n>用于返回一个从指定位置开始的指定长度的子字符串。\nstart（必需）：所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。\nlength（可选）：在返回的子字符串中应包括的字符个数。\n\n```\n字符串\nlet basic = \"abc,def,ghi,\"; \nconst newBasic = basic.substr(0, basic.length - 1);  // abc,def,ghi\nconsole.log(basic) //  \"abc,def,ghi,\"; \n```\n字符串方法 **slice()、substring()、substr()**\n\n都不能改变原来的元素\n\n### 5. ES6删除和过滤对象中部分属性\n原始数据\n```js\n\nlet student={\n    age: 20,\n    name: 'maomao',\n    sex: \"男\"\n}\n\n```\n排除\"age\"属性\n```js\n\nlet { age, ...params } = student\nconsole.log(params)  // {name: \"maomao\"，sex: \"男\"}\n\n```\n","slug":"🌦🌦-js小技巧","published":1,"updated":"2024-05-16T07:39:11.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ni00362omvd4tk15l7","content":"<h3 id=\"1-Array-fill-产生-n个数的数组\"><a href=\"#1-Array-fill-产生-n个数的数组\" class=\"headerlink\" title=\"1.Array().fill 产生 n个数的数组\"></a>1.Array().fill 产生 n个数的数组</h3><blockquote>\n<p>Array(length).fill(element) </p>\n</blockquote>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>length 填充长度<br>element   用来填充数组元素的值。<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">let</span> codes = <span class=\"title class_\">Array</span>(<span class=\"number\">26</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">t,i</span>) =&gt;</span> i)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(codes) <span class=\"comment\">// [0,1,2,3,4,5,6......25]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-reduce-求和\"><a href=\"#2-reduce-求和\" class=\"headerlink\" title=\"2.reduce 求和\"></a>2.reduce 求和</h3><p><code>let arr = [1, 2, 3]</code><br><code>let sum = arr.reduce((pre, cur) =&gt; pre + cur)  // 6</code></p>\n<blockquote>\n<p>PS 注意 空数组, 如果空元素 reduce 会报错</p>\n</blockquote>\n<h3 id=\"3-向数组指定位置插入元素\"><a href=\"#3-向数组指定位置插入元素\" class=\"headerlink\" title=\"3.向数组指定位置插入元素\"></a>3.向数组指定位置插入元素</h3><h4 id=\"splice-方法\"><a href=\"#splice-方法\" class=\"headerlink\" title=\"splice() 方法\"></a>splice() 方法</h4><blockquote>\n<p>splice(startIndex,deleteNum,item)<br>startIndex: 插入位置<br>deleteNum: 删除数量<br>item:  插入元素</p>\n</blockquote>\n<p>splice() 方法向&#x2F;从数组中添加&#x2F;删除项目，然后返回被删除的项目。</p>\n<h5 id=\"方法实例\"><a href=\"#方法实例\" class=\"headerlink\" title=\"方法实例:\"></a>方法实例:</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在数组指定位置插入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fruits = [<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>, <span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Mango&quot;</span>];</span><br><span class=\"line\">fruits.<span class=\"title function_\">splice</span>(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;Lemon&quot;</span>, <span class=\"string\">&quot;Kiwi&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\"><span class=\"comment\">//Banana, Orange, Lemon, Kiwi, Apple, Mango</span></span><br><span class=\"line\"><span class=\"comment\">//在 2 的位置删除0个，新增 &quot;Lemon&quot;, &quot;Kiwi&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-删除最后一个字符串的方法\"><a href=\"#4-删除最后一个字符串的方法\" class=\"headerlink\" title=\"4. 删除最后一个字符串的方法\"></a>4. 删除最后一个字符串的方法</h3><p><code>stringObject.substr(start, length)</code></p>\n<blockquote>\n<p>用于返回一个从指定位置开始的指定长度的子字符串。<br>start（必需）：所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。<br>length（可选）：在返回的子字符串中应包括的字符个数。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串</span><br><span class=\"line\">let basic = &quot;abc,def,ghi,&quot;; </span><br><span class=\"line\">const newBasic = basic.substr(0, basic.length - 1);  // abc,def,ghi</span><br><span class=\"line\">console.log(basic) //  &quot;abc,def,ghi,&quot;; </span><br></pre></td></tr></table></figure>\n<p>字符串方法 <strong>slice()、substring()、substr()</strong></p>\n<p>都不能改变原来的元素</p>\n<h3 id=\"5-ES6删除和过滤对象中部分属性\"><a href=\"#5-ES6删除和过滤对象中部分属性\" class=\"headerlink\" title=\"5. ES6删除和过滤对象中部分属性\"></a>5. ES6删除和过滤对象中部分属性</h3><p>原始数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> student=&#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;maomao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>排除”age”属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; age, ...params &#125; = student</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(params)  <span class=\"comment\">// &#123;name: &quot;maomao&quot;，sex: &quot;男&quot;&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-Array-fill-产生-n个数的数组\"><a href=\"#1-Array-fill-产生-n个数的数组\" class=\"headerlink\" title=\"1.Array().fill 产生 n个数的数组\"></a>1.Array().fill 产生 n个数的数组</h3><blockquote>\n<p>Array(length).fill(element) </p>\n</blockquote>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>length 填充长度<br>element   用来填充数组元素的值。<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">let</span> codes = <span class=\"title class_\">Array</span>(<span class=\"number\">26</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">t,i</span>) =&gt;</span> i)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(codes) <span class=\"comment\">// [0,1,2,3,4,5,6......25]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-reduce-求和\"><a href=\"#2-reduce-求和\" class=\"headerlink\" title=\"2.reduce 求和\"></a>2.reduce 求和</h3><p><code>let arr = [1, 2, 3]</code><br><code>let sum = arr.reduce((pre, cur) =&gt; pre + cur)  // 6</code></p>\n<blockquote>\n<p>PS 注意 空数组, 如果空元素 reduce 会报错</p>\n</blockquote>\n<h3 id=\"3-向数组指定位置插入元素\"><a href=\"#3-向数组指定位置插入元素\" class=\"headerlink\" title=\"3.向数组指定位置插入元素\"></a>3.向数组指定位置插入元素</h3><h4 id=\"splice-方法\"><a href=\"#splice-方法\" class=\"headerlink\" title=\"splice() 方法\"></a>splice() 方法</h4><blockquote>\n<p>splice(startIndex,deleteNum,item)<br>startIndex: 插入位置<br>deleteNum: 删除数量<br>item:  插入元素</p>\n</blockquote>\n<p>splice() 方法向&#x2F;从数组中添加&#x2F;删除项目，然后返回被删除的项目。</p>\n<h5 id=\"方法实例\"><a href=\"#方法实例\" class=\"headerlink\" title=\"方法实例:\"></a>方法实例:</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在数组指定位置插入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fruits = [<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>, <span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Mango&quot;</span>];</span><br><span class=\"line\">fruits.<span class=\"title function_\">splice</span>(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;Lemon&quot;</span>, <span class=\"string\">&quot;Kiwi&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出结果</span></span><br><span class=\"line\"><span class=\"comment\">//Banana, Orange, Lemon, Kiwi, Apple, Mango</span></span><br><span class=\"line\"><span class=\"comment\">//在 2 的位置删除0个，新增 &quot;Lemon&quot;, &quot;Kiwi&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-删除最后一个字符串的方法\"><a href=\"#4-删除最后一个字符串的方法\" class=\"headerlink\" title=\"4. 删除最后一个字符串的方法\"></a>4. 删除最后一个字符串的方法</h3><p><code>stringObject.substr(start, length)</code></p>\n<blockquote>\n<p>用于返回一个从指定位置开始的指定长度的子字符串。<br>start（必需）：所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。<br>length（可选）：在返回的子字符串中应包括的字符个数。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串</span><br><span class=\"line\">let basic = &quot;abc,def,ghi,&quot;; </span><br><span class=\"line\">const newBasic = basic.substr(0, basic.length - 1);  // abc,def,ghi</span><br><span class=\"line\">console.log(basic) //  &quot;abc,def,ghi,&quot;; </span><br></pre></td></tr></table></figure>\n<p>字符串方法 <strong>slice()、substring()、substr()</strong></p>\n<p>都不能改变原来的元素</p>\n<h3 id=\"5-ES6删除和过滤对象中部分属性\"><a href=\"#5-ES6删除和过滤对象中部分属性\" class=\"headerlink\" title=\"5. ES6删除和过滤对象中部分属性\"></a>5. ES6删除和过滤对象中部分属性</h3><p>原始数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> student=&#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;maomao&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>排除”age”属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; age, ...params &#125; = student</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(params)  <span class=\"comment\">// &#123;name: &quot;maomao&quot;，sex: &quot;男&quot;&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"🌦🌦-requestAnimationFrame-定时器","date":"2018-12-05T16:00:00.000Z","_content":"发现网上讲的太啰嗦\n```js\n\nvar a = 0;\nfunction step(){\n    a++;\n    console.log(a)\n    var g =  requestAnimationFrame(step)\n    if(a>=100){\n        cancelAnimationFrame(g)\n    }\n}\nstep()\n\n```\n注意 \n\n cancelAnimationFrame(g)一定要放在后面\n","source":"_posts/🌦🌦-requestAnimationFrame-定时器.md","raw":"---\ntitle: \"🌦🌦-requestAnimationFrame-定时器\"\ndate: 2018-12-06\ntags: \n- 开发日常\n---\n发现网上讲的太啰嗦\n```js\n\nvar a = 0;\nfunction step(){\n    a++;\n    console.log(a)\n    var g =  requestAnimationFrame(step)\n    if(a>=100){\n        cancelAnimationFrame(g)\n    }\n}\nstep()\n\n```\n注意 \n\n cancelAnimationFrame(g)一定要放在后面\n","slug":"🌦🌦-requestAnimationFrame-定时器","published":1,"updated":"2024-05-16T07:39:11.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nj00382omvayjv5u1e","content":"<p>发现网上讲的太啰嗦</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> g =  <span class=\"title function_\">requestAnimationFrame</span>(step)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&gt;=<span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">cancelAnimationFrame</span>(g)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">step</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意 </p>\n<p> cancelAnimationFrame(g)一定要放在后面</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>发现网上讲的太啰嗦</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> g =  <span class=\"title function_\">requestAnimationFrame</span>(step)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a&gt;=<span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">cancelAnimationFrame</span>(g)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">step</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意 </p>\n<p> cancelAnimationFrame(g)一定要放在后面</p>\n"},{"title":"🌦🌦-vite+vue3使用tailwindcss","date":"2023-11-28T16:00:00.000Z","_content":"由于最新官网的方案没效果。\n\n### 1.安装tailwindcss\n\n```\nnpm install -D tailwindcss@latest postcss@latest autoprefixer@latest\n```\n### 2.创建tailwindcss的配置文件\n\n```\nnpx tailwindcss init\n```\n这将会在您的项目根目录创建一个最小化的 tailwind.config.js 文件：\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [],\n  theme: {\n    extend: {}\n  },\n  plugins: []\n}\n\n```\n### 3.在入口中引入tailwind\n```\n// main.ts\nimport \"tailwindcss/tailwind.css\"\n```\n\n### 4.配置tailwind.config.js文件\n\n```\ncontent: ['./index.html', './src/**/*.{vue,js,ts,jsx,tsx}']\n```\n\n在 tailwind.config.js 文件中，配置 content 选项指定所有的 pages 和 components ，使得 Tailwind 可以在生产构建中，对未使用的样式进行tree-shaking。\n\n### 5.配置vite.config选项\n```\n    css: {\n      postcss: {\n        plugins: [require(\"tailwindcss\"), require(\"autoprefixer\")]\n      }\n    }\n```\n\n使用postcss的tailwindcss和autoprefixer插件对，css进行处理\n","source":"_posts/🌦🌦-vite+vue3使用tailwindcss.md","raw":"---\ntitle: \"🌦🌦-vite+vue3使用tailwindcss\"\ndate: 2023-11-29\ntags: \n- 开发日常\n---\n由于最新官网的方案没效果。\n\n### 1.安装tailwindcss\n\n```\nnpm install -D tailwindcss@latest postcss@latest autoprefixer@latest\n```\n### 2.创建tailwindcss的配置文件\n\n```\nnpx tailwindcss init\n```\n这将会在您的项目根目录创建一个最小化的 tailwind.config.js 文件：\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [],\n  theme: {\n    extend: {}\n  },\n  plugins: []\n}\n\n```\n### 3.在入口中引入tailwind\n```\n// main.ts\nimport \"tailwindcss/tailwind.css\"\n```\n\n### 4.配置tailwind.config.js文件\n\n```\ncontent: ['./index.html', './src/**/*.{vue,js,ts,jsx,tsx}']\n```\n\n在 tailwind.config.js 文件中，配置 content 选项指定所有的 pages 和 components ，使得 Tailwind 可以在生产构建中，对未使用的样式进行tree-shaking。\n\n### 5.配置vite.config选项\n```\n    css: {\n      postcss: {\n        plugins: [require(\"tailwindcss\"), require(\"autoprefixer\")]\n      }\n    }\n```\n\n使用postcss的tailwindcss和autoprefixer插件对，css进行处理\n","slug":"🌦🌦-vite+vue3使用tailwindcss","published":1,"updated":"2024-05-16T07:39:11.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nk003a2omv2a8a5cgd","content":"<p>由于最新官网的方案没效果。</p>\n<h3 id=\"1-安装tailwindcss\"><a href=\"#1-安装tailwindcss\" class=\"headerlink\" title=\"1.安装tailwindcss\"></a>1.安装tailwindcss</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D tailwindcss@latest postcss@latest autoprefixer@latest</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-创建tailwindcss的配置文件\"><a href=\"#2-创建tailwindcss的配置文件\" class=\"headerlink\" title=\"2.创建tailwindcss的配置文件\"></a>2.创建tailwindcss的配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx tailwindcss init</span><br></pre></td></tr></table></figure>\n<p>这将会在您的项目根目录创建一个最小化的 tailwind.config.js 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** @type &#123;import(&#x27;tailwindcss&#x27;).Config&#125; */</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  content: [],</span><br><span class=\"line\">  theme: &#123;</span><br><span class=\"line\">    extend: &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-在入口中引入tailwind\"><a href=\"#3-在入口中引入tailwind\" class=\"headerlink\" title=\"3.在入口中引入tailwind\"></a>3.在入口中引入tailwind</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.ts</span><br><span class=\"line\">import &quot;tailwindcss/tailwind.css&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-配置tailwind-config-js文件\"><a href=\"#4-配置tailwind-config-js文件\" class=\"headerlink\" title=\"4.配置tailwind.config.js文件\"></a>4.配置tailwind.config.js文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content: [&#x27;./index.html&#x27;, &#x27;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>在 tailwind.config.js 文件中，配置 content 选项指定所有的 pages 和 components ，使得 Tailwind 可以在生产构建中，对未使用的样式进行tree-shaking。</p>\n<h3 id=\"5-配置vite-config选项\"><a href=\"#5-配置vite-config选项\" class=\"headerlink\" title=\"5.配置vite.config选项\"></a>5.配置vite.config选项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css: &#123;</span><br><span class=\"line\">  postcss: &#123;</span><br><span class=\"line\">    plugins: [require(&quot;tailwindcss&quot;), require(&quot;autoprefixer&quot;)]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用postcss的tailwindcss和autoprefixer插件对，css进行处理</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>由于最新官网的方案没效果。</p>\n<h3 id=\"1-安装tailwindcss\"><a href=\"#1-安装tailwindcss\" class=\"headerlink\" title=\"1.安装tailwindcss\"></a>1.安装tailwindcss</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D tailwindcss@latest postcss@latest autoprefixer@latest</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-创建tailwindcss的配置文件\"><a href=\"#2-创建tailwindcss的配置文件\" class=\"headerlink\" title=\"2.创建tailwindcss的配置文件\"></a>2.创建tailwindcss的配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx tailwindcss init</span><br></pre></td></tr></table></figure>\n<p>这将会在您的项目根目录创建一个最小化的 tailwind.config.js 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** @type &#123;import(&#x27;tailwindcss&#x27;).Config&#125; */</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  content: [],</span><br><span class=\"line\">  theme: &#123;</span><br><span class=\"line\">    extend: &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-在入口中引入tailwind\"><a href=\"#3-在入口中引入tailwind\" class=\"headerlink\" title=\"3.在入口中引入tailwind\"></a>3.在入口中引入tailwind</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.ts</span><br><span class=\"line\">import &quot;tailwindcss/tailwind.css&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-配置tailwind-config-js文件\"><a href=\"#4-配置tailwind-config-js文件\" class=\"headerlink\" title=\"4.配置tailwind.config.js文件\"></a>4.配置tailwind.config.js文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content: [&#x27;./index.html&#x27;, &#x27;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>在 tailwind.config.js 文件中，配置 content 选项指定所有的 pages 和 components ，使得 Tailwind 可以在生产构建中，对未使用的样式进行tree-shaking。</p>\n<h3 id=\"5-配置vite-config选项\"><a href=\"#5-配置vite-config选项\" class=\"headerlink\" title=\"5.配置vite.config选项\"></a>5.配置vite.config选项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css: &#123;</span><br><span class=\"line\">  postcss: &#123;</span><br><span class=\"line\">    plugins: [require(&quot;tailwindcss&quot;), require(&quot;autoprefixer&quot;)]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用postcss的tailwindcss和autoprefixer插件对，css进行处理</p>\n"},{"title":"🌦🌦-下载文件两种方式总结","date":"2021-12-24T16:00:00.000Z","_content":"####  1.后台服务器有静态资源且是固定的文件名（GET方式下载文件）\n\n场景：已经生成的静态文件\n##### 第一种使用js\n```js\nwindow.location.href=\"http://www.域名/template.xlsx(文件名)\"\n```\n##### 第二种 href\n```js\n<a href=\"http://www.域名/template.xlsx(文件名)\"></a>\n```\n`ps`: 有跨域问题\n#### 2.后台返回文件流\n场景：动态数据生成\n#####  第一种 Data 协议\n```js\naxios.post(请求路径URL, {参数Params}, {\n            responseType: 'blob'\n          }).then(function(res){\n            var blob = res.data;\n           // FileReader主要用于将文件内容读入内存\n            var reader = new FileReader();\n            reader.readAsDataURL(blob);\n            // onload当读取操作成功完成时调用\n            reader.onload = function(e) {\n              var a = document.createElement('a');\n              // 获取文件名fileName\n              var fileName = res.headers[\"content-disposition\"].split(\"=\");\n              fileName = fileName[fileName.length - 1];\n              fileName = fileName.replace(/\"/g, \"\");\n              a.download = fileName;\n              a.href = e.target.result;\n              document.body.appendChild(a);\n              a.click();\n              document.body.removeChild(a);\n            }\n          });\n```\n##### 第二种使用 blob + window.URL.createObjectURL\n动态数据下载，原理都是创建 blob协议的链接\n```js\n//  `responseType` 表示服务器响应的数据类型，\n//  可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'，\n//  不是header内的属性\n\naxios.post(请求路径URL, {参数Params}, {\n            responseType: 'blob'\n          }).then(function(response){\n            const name = \"XXX.xls\"\n             const url = window.URL.createObjectURL(new Blob([response]));\n             const link = document.createElement(\"a\");\n             link.href = url;\n             link.download = name\n             document.body.appendChild(link);\n             link.click();\n             document.body.removeChild(link);\n          });\n```\n\n##### 第三种 href + data协议\n适用于json，document 纯文档下载\n```\nfunction download(filename, text) {\n  console.log(filename, text);\n  var element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\ndownload('download.json', '{a: 1}')\n```\n","source":"_posts/🌦🌦-下载文件两种方式总结.md","raw":"---\ntitle: \"🌦🌦-下载文件两种方式总结\"\ndate: 2021-12-25\ntags: \n- 开发日常\n---\n####  1.后台服务器有静态资源且是固定的文件名（GET方式下载文件）\n\n场景：已经生成的静态文件\n##### 第一种使用js\n```js\nwindow.location.href=\"http://www.域名/template.xlsx(文件名)\"\n```\n##### 第二种 href\n```js\n<a href=\"http://www.域名/template.xlsx(文件名)\"></a>\n```\n`ps`: 有跨域问题\n#### 2.后台返回文件流\n场景：动态数据生成\n#####  第一种 Data 协议\n```js\naxios.post(请求路径URL, {参数Params}, {\n            responseType: 'blob'\n          }).then(function(res){\n            var blob = res.data;\n           // FileReader主要用于将文件内容读入内存\n            var reader = new FileReader();\n            reader.readAsDataURL(blob);\n            // onload当读取操作成功完成时调用\n            reader.onload = function(e) {\n              var a = document.createElement('a');\n              // 获取文件名fileName\n              var fileName = res.headers[\"content-disposition\"].split(\"=\");\n              fileName = fileName[fileName.length - 1];\n              fileName = fileName.replace(/\"/g, \"\");\n              a.download = fileName;\n              a.href = e.target.result;\n              document.body.appendChild(a);\n              a.click();\n              document.body.removeChild(a);\n            }\n          });\n```\n##### 第二种使用 blob + window.URL.createObjectURL\n动态数据下载，原理都是创建 blob协议的链接\n```js\n//  `responseType` 表示服务器响应的数据类型，\n//  可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'，\n//  不是header内的属性\n\naxios.post(请求路径URL, {参数Params}, {\n            responseType: 'blob'\n          }).then(function(response){\n            const name = \"XXX.xls\"\n             const url = window.URL.createObjectURL(new Blob([response]));\n             const link = document.createElement(\"a\");\n             link.href = url;\n             link.download = name\n             document.body.appendChild(link);\n             link.click();\n             document.body.removeChild(link);\n          });\n```\n\n##### 第三种 href + data协议\n适用于json，document 纯文档下载\n```\nfunction download(filename, text) {\n  console.log(filename, text);\n  var element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\ndownload('download.json', '{a: 1}')\n```\n","slug":"🌦🌦-下载文件两种方式总结","published":1,"updated":"2024-05-16T07:39:11.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nm003c2omvamo23cln","content":"<h4 id=\"1-后台服务器有静态资源且是固定的文件名（GET方式下载文件）\"><a href=\"#1-后台服务器有静态资源且是固定的文件名（GET方式下载文件）\" class=\"headerlink\" title=\"1.后台服务器有静态资源且是固定的文件名（GET方式下载文件）\"></a>1.后台服务器有静态资源且是固定的文件名（GET方式下载文件）</h4><p>场景：已经生成的静态文件</p>\n<h5 id=\"第一种使用js\"><a href=\"#第一种使用js\" class=\"headerlink\" title=\"第一种使用js\"></a>第一种使用js</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>=<span class=\"string\">&quot;http://www.域名/template.xlsx(文件名)&quot;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"第二种-href\"><a href=\"#第二种-href\" class=\"headerlink\" title=\"第二种 href\"></a>第二种 href</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">&quot;http://www.域名/template.xlsx(文件名)&quot;</span>&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p><code>ps</code>: 有跨域问题</p>\n<h4 id=\"2-后台返回文件流\"><a href=\"#2-后台返回文件流\" class=\"headerlink\" title=\"2.后台返回文件流\"></a>2.后台返回文件流</h4><p>场景：动态数据生成</p>\n<h5 id=\"第一种-Data-协议\"><a href=\"#第一种-Data-协议\" class=\"headerlink\" title=\"第一种 Data 协议\"></a>第一种 Data 协议</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">post</span>(请求路径<span class=\"variable constant_\">URL</span>, &#123;参数<span class=\"title class_\">Params</span>&#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;blob&#x27;</span></span><br><span class=\"line\">          &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> blob = res.<span class=\"property\">data</span>;</span><br><span class=\"line\">           <span class=\"comment\">// FileReader主要用于将文件内容读入内存</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">            reader.<span class=\"title function_\">readAsDataURL</span>(blob);</span><br><span class=\"line\">            <span class=\"comment\">// onload当读取操作成功完成时调用</span></span><br><span class=\"line\">            reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">var</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">              <span class=\"comment\">// 获取文件名fileName</span></span><br><span class=\"line\">              <span class=\"keyword\">var</span> fileName = res.<span class=\"property\">headers</span>[<span class=\"string\">&quot;content-disposition&quot;</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&quot;=&quot;</span>);</span><br><span class=\"line\">              fileName = fileName[fileName.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">              fileName = fileName.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&quot;/g</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">              a.<span class=\"property\">download</span> = fileName;</span><br><span class=\"line\">              a.<span class=\"property\">href</span> = e.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">              <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(a);</span><br><span class=\"line\">              a.<span class=\"title function_\">click</span>();</span><br><span class=\"line\">              <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(a);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"第二种使用-blob-window-URL-createObjectURL\"><a href=\"#第二种使用-blob-window-URL-createObjectURL\" class=\"headerlink\" title=\"第二种使用 blob + window.URL.createObjectURL\"></a>第二种使用 blob + window.URL.createObjectURL</h5><p>动态数据下载，原理都是创建 blob协议的链接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  `responseType` 表示服务器响应的数据类型，</span></span><br><span class=\"line\"><span class=\"comment\">//  可以是 &#x27;arraybuffer&#x27;, &#x27;blob&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;，</span></span><br><span class=\"line\"><span class=\"comment\">//  不是header内的属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">axios.<span class=\"title function_\">post</span>(请求路径<span class=\"variable constant_\">URL</span>, &#123;参数<span class=\"title class_\">Params</span>&#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;blob&#x27;</span></span><br><span class=\"line\">          &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">response</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> name = <span class=\"string\">&quot;XXX.xls&quot;</span></span><br><span class=\"line\">             <span class=\"keyword\">const</span> url = <span class=\"variable language_\">window</span>.<span class=\"property\">URL</span>.<span class=\"title function_\">createObjectURL</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([response]));</span><br><span class=\"line\">             <span class=\"keyword\">const</span> link = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">             link.<span class=\"property\">href</span> = url;</span><br><span class=\"line\">             link.<span class=\"property\">download</span> = name</span><br><span class=\"line\">             <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(link);</span><br><span class=\"line\">             link.<span class=\"title function_\">click</span>();</span><br><span class=\"line\">             <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(link);</span><br><span class=\"line\">          &#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"第三种-href-data协议\"><a href=\"#第三种-href-data协议\" class=\"headerlink\" title=\"第三种 href + data协议\"></a>第三种 href + data协议</h5><p>适用于json，document 纯文档下载</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function download(filename, text) &#123;</span><br><span class=\"line\">  console.log(filename, text);</span><br><span class=\"line\">  var element = document.createElement(&quot;a&quot;);</span><br><span class=\"line\">  element.setAttribute(</span><br><span class=\"line\">    &quot;href&quot;,</span><br><span class=\"line\">    &quot;data:text/plain;charset=utf-8,&quot; + encodeURIComponent(text)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  element.setAttribute(&quot;download&quot;, filename);</span><br><span class=\"line\"></span><br><span class=\"line\">  element.style.display = &quot;none&quot;;</span><br><span class=\"line\">  document.body.appendChild(element);</span><br><span class=\"line\"></span><br><span class=\"line\">  element.click();</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.removeChild(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">download(&#x27;download.json&#x27;, &#x27;&#123;a: 1&#125;&#x27;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-后台服务器有静态资源且是固定的文件名（GET方式下载文件）\"><a href=\"#1-后台服务器有静态资源且是固定的文件名（GET方式下载文件）\" class=\"headerlink\" title=\"1.后台服务器有静态资源且是固定的文件名（GET方式下载文件）\"></a>1.后台服务器有静态资源且是固定的文件名（GET方式下载文件）</h4><p>场景：已经生成的静态文件</p>\n<h5 id=\"第一种使用js\"><a href=\"#第一种使用js\" class=\"headerlink\" title=\"第一种使用js\"></a>第一种使用js</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>=<span class=\"string\">&quot;http://www.域名/template.xlsx(文件名)&quot;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"第二种-href\"><a href=\"#第二种-href\" class=\"headerlink\" title=\"第二种 href\"></a>第二种 href</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">&quot;http://www.域名/template.xlsx(文件名)&quot;</span>&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p><code>ps</code>: 有跨域问题</p>\n<h4 id=\"2-后台返回文件流\"><a href=\"#2-后台返回文件流\" class=\"headerlink\" title=\"2.后台返回文件流\"></a>2.后台返回文件流</h4><p>场景：动态数据生成</p>\n<h5 id=\"第一种-Data-协议\"><a href=\"#第一种-Data-协议\" class=\"headerlink\" title=\"第一种 Data 协议\"></a>第一种 Data 协议</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">post</span>(请求路径<span class=\"variable constant_\">URL</span>, &#123;参数<span class=\"title class_\">Params</span>&#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;blob&#x27;</span></span><br><span class=\"line\">          &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> blob = res.<span class=\"property\">data</span>;</span><br><span class=\"line\">           <span class=\"comment\">// FileReader主要用于将文件内容读入内存</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">            reader.<span class=\"title function_\">readAsDataURL</span>(blob);</span><br><span class=\"line\">            <span class=\"comment\">// onload当读取操作成功完成时调用</span></span><br><span class=\"line\">            reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">var</span> a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">              <span class=\"comment\">// 获取文件名fileName</span></span><br><span class=\"line\">              <span class=\"keyword\">var</span> fileName = res.<span class=\"property\">headers</span>[<span class=\"string\">&quot;content-disposition&quot;</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&quot;=&quot;</span>);</span><br><span class=\"line\">              fileName = fileName[fileName.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">              fileName = fileName.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&quot;/g</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">              a.<span class=\"property\">download</span> = fileName;</span><br><span class=\"line\">              a.<span class=\"property\">href</span> = e.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">              <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(a);</span><br><span class=\"line\">              a.<span class=\"title function_\">click</span>();</span><br><span class=\"line\">              <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(a);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"第二种使用-blob-window-URL-createObjectURL\"><a href=\"#第二种使用-blob-window-URL-createObjectURL\" class=\"headerlink\" title=\"第二种使用 blob + window.URL.createObjectURL\"></a>第二种使用 blob + window.URL.createObjectURL</h5><p>动态数据下载，原理都是创建 blob协议的链接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  `responseType` 表示服务器响应的数据类型，</span></span><br><span class=\"line\"><span class=\"comment\">//  可以是 &#x27;arraybuffer&#x27;, &#x27;blob&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;，</span></span><br><span class=\"line\"><span class=\"comment\">//  不是header内的属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">axios.<span class=\"title function_\">post</span>(请求路径<span class=\"variable constant_\">URL</span>, &#123;参数<span class=\"title class_\">Params</span>&#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;blob&#x27;</span></span><br><span class=\"line\">          &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">response</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> name = <span class=\"string\">&quot;XXX.xls&quot;</span></span><br><span class=\"line\">             <span class=\"keyword\">const</span> url = <span class=\"variable language_\">window</span>.<span class=\"property\">URL</span>.<span class=\"title function_\">createObjectURL</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([response]));</span><br><span class=\"line\">             <span class=\"keyword\">const</span> link = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">             link.<span class=\"property\">href</span> = url;</span><br><span class=\"line\">             link.<span class=\"property\">download</span> = name</span><br><span class=\"line\">             <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(link);</span><br><span class=\"line\">             link.<span class=\"title function_\">click</span>();</span><br><span class=\"line\">             <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(link);</span><br><span class=\"line\">          &#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"第三种-href-data协议\"><a href=\"#第三种-href-data协议\" class=\"headerlink\" title=\"第三种 href + data协议\"></a>第三种 href + data协议</h5><p>适用于json，document 纯文档下载</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function download(filename, text) &#123;</span><br><span class=\"line\">  console.log(filename, text);</span><br><span class=\"line\">  var element = document.createElement(&quot;a&quot;);</span><br><span class=\"line\">  element.setAttribute(</span><br><span class=\"line\">    &quot;href&quot;,</span><br><span class=\"line\">    &quot;data:text/plain;charset=utf-8,&quot; + encodeURIComponent(text)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  element.setAttribute(&quot;download&quot;, filename);</span><br><span class=\"line\"></span><br><span class=\"line\">  element.style.display = &quot;none&quot;;</span><br><span class=\"line\">  document.body.appendChild(element);</span><br><span class=\"line\"></span><br><span class=\"line\">  element.click();</span><br><span class=\"line\"></span><br><span class=\"line\">  document.body.removeChild(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">download(&#x27;download.json&#x27;, &#x27;&#123;a: 1&#125;&#x27;)</span><br></pre></td></tr></table></figure>\n"},{"title":"🌦🌦-为什么-export-default-var-a-=-1-在ES6中不被允许-","date":"2021-10-18T16:00:00.000Z","_content":"babel输入以下代码，异常显示\n\n![](https://upload-images.jianshu.io/upload_images/15312191-eacf86a1250bac4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nOnly expressions, functions or classes are allowed as the `default` export.\n**export default 只能导处函数 表达式 和 class**\n\n `\nexport default function() {}\n`\n`\nexport defaut {}\n`\n`\nlet foo = () => {};\nexport default foo\n`\n\n为什么不能这样导出呢，\n避免出现下面的情况,多个参数导致的混乱\n`export default var a, b, c;  // Non-sensical`\n","source":"_posts/🌦🌦-为什么-export-default-var-a-=-1-在ES6中不被允许-.md","raw":"---\ntitle: \"🌦🌦-为什么-export-default-var-a-=-1-在ES6中不被允许-\"\ndate: 2021-10-19\ntags: \n- 开发日常\n---\nbabel输入以下代码，异常显示\n\n![](https://upload-images.jianshu.io/upload_images/15312191-eacf86a1250bac4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nOnly expressions, functions or classes are allowed as the `default` export.\n**export default 只能导处函数 表达式 和 class**\n\n `\nexport default function() {}\n`\n`\nexport defaut {}\n`\n`\nlet foo = () => {};\nexport default foo\n`\n\n为什么不能这样导出呢，\n避免出现下面的情况,多个参数导致的混乱\n`export default var a, b, c;  // Non-sensical`\n","slug":"🌦🌦-为什么-export-default-var-a-=-1-在ES6中不被允许-","published":1,"updated":"2024-05-16T07:39:11.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nn003e2omv70ilhfdx","content":"<p>babel输入以下代码，异常显示</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-eacf86a1250bac4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>Only expressions, functions or classes are allowed as the <code>default</code> export.<br><strong>export default 只能导处函数 表达式 和 class</strong></p>\n<p> <code>export default function() &#123;&#125;</code><br><code>export defaut &#123;&#125;</code><br><code>let foo = () =&gt; &#123;&#125;; export default foo</code></p>\n<p>为什么不能这样导出呢，<br>避免出现下面的情况,多个参数导致的混乱<br><code>export default var a, b, c;  // Non-sensical</code></p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>babel输入以下代码，异常显示</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-eacf86a1250bac4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>Only expressions, functions or classes are allowed as the <code>default</code> export.<br><strong>export default 只能导处函数 表达式 和 class</strong></p>\n<p> <code>export default function() &#123;&#125;</code><br><code>export defaut &#123;&#125;</code><br><code>let foo = () =&gt; &#123;&#125;; export default foo</code></p>\n<p>为什么不能这样导出呢，<br>避免出现下面的情况,多个参数导致的混乱<br><code>export default var a, b, c;  // Non-sensical</code></p>\n"},{"title":"🌦🌦-优雅的获取-数组第一个元素","date":"2021-07-11T16:00:00.000Z","_content":"项目开发中经常会用到这样的操作\n\n```js\n // 获取数组的第一个元素\n  const list = ['Luke', 'Eva', 'Phil','Tela'];  \n  let data = list[0]\n  let target = list[1]\n\n```\n缺点：在代码中出现数字，感觉这样写不够美观\n\n##### 一. shift()\n\n```js\n  const list = ['Luke', 'Eva', 'Phil','Tela'];  \n  let data = list.shift() // ”Luke“\n  let target = list.shift() // ”Eva“\n\n```\n优点：代码相对美观\n缺点： 会修改原数组\n##### 二. 使用 es6解构\n```js\n  const list = ['Luke', 'Eva', 'Phil','Tela'];  \n  const [first, second, third] = list;\n  console.log(first, second); // 'Luke' 'Eva'  \n  console.log(third)  // \"Phil\" \"Tela\"\n\n```\n到如今，已经知道了如何从数组中提取单个元素，那么对于想要取数组中的后面连续部分的元素怎么办呢？看下面的解构代码。\n\n\n```js\n const list = ['Luke', 'Eva', 'Phil','Tela'];  \n var [first, ...rest] = list;  \n console.log(rest); // ['Eva','Phil']  \n\n```\n\n#####  三. Symbol.iterator\n```\nconst list = ['Luke', 'Eva', 'Phil','Tela'];  \nconst iteratore = list[Symbol.iterator]()\nconsole.log(iteratore.next().value) // 'Luke'\n```\n","source":"_posts/🌦🌦-优雅的获取-数组第一个元素.md","raw":"---\ntitle: \"🌦🌦-优雅的获取-数组第一个元素\"\ndate: 2021-07-12\ntags: \n- 开发日常\n---\n项目开发中经常会用到这样的操作\n\n```js\n // 获取数组的第一个元素\n  const list = ['Luke', 'Eva', 'Phil','Tela'];  \n  let data = list[0]\n  let target = list[1]\n\n```\n缺点：在代码中出现数字，感觉这样写不够美观\n\n##### 一. shift()\n\n```js\n  const list = ['Luke', 'Eva', 'Phil','Tela'];  \n  let data = list.shift() // ”Luke“\n  let target = list.shift() // ”Eva“\n\n```\n优点：代码相对美观\n缺点： 会修改原数组\n##### 二. 使用 es6解构\n```js\n  const list = ['Luke', 'Eva', 'Phil','Tela'];  \n  const [first, second, third] = list;\n  console.log(first, second); // 'Luke' 'Eva'  \n  console.log(third)  // \"Phil\" \"Tela\"\n\n```\n到如今，已经知道了如何从数组中提取单个元素，那么对于想要取数组中的后面连续部分的元素怎么办呢？看下面的解构代码。\n\n\n```js\n const list = ['Luke', 'Eva', 'Phil','Tela'];  \n var [first, ...rest] = list;  \n console.log(rest); // ['Eva','Phil']  \n\n```\n\n#####  三. Symbol.iterator\n```\nconst list = ['Luke', 'Eva', 'Phil','Tela'];  \nconst iteratore = list[Symbol.iterator]()\nconsole.log(iteratore.next().value) // 'Luke'\n```\n","slug":"🌦🌦-优雅的获取-数组第一个元素","published":1,"updated":"2024-05-16T07:39:11.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094np003g2omvcg9sdfhb","content":"<p>项目开发中经常会用到这样的操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取数组的第一个元素</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> list = [<span class=\"string\">&#x27;Luke&#x27;</span>, <span class=\"string\">&#x27;Eva&#x27;</span>, <span class=\"string\">&#x27;Phil&#x27;</span>,<span class=\"string\">&#x27;Tela&#x27;</span>];  </span><br><span class=\"line\"> <span class=\"keyword\">let</span> data = list[<span class=\"number\">0</span>]</span><br><span class=\"line\"> <span class=\"keyword\">let</span> target = list[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>缺点：在代码中出现数字，感觉这样写不够美观</p>\n<h5 id=\"一-shift\"><a href=\"#一-shift\" class=\"headerlink\" title=\"一. shift()\"></a>一. shift()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [<span class=\"string\">&#x27;Luke&#x27;</span>, <span class=\"string\">&#x27;Eva&#x27;</span>, <span class=\"string\">&#x27;Phil&#x27;</span>,<span class=\"string\">&#x27;Tela&#x27;</span>];  </span><br><span class=\"line\"><span class=\"keyword\">let</span> data = list.<span class=\"title function_\">shift</span>() <span class=\"comment\">// ”Luke“</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> target = list.<span class=\"title function_\">shift</span>() <span class=\"comment\">// ”Eva“</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>优点：代码相对美观<br>缺点： 会修改原数组</p>\n<h5 id=\"二-使用-es6解构\"><a href=\"#二-使用-es6解构\" class=\"headerlink\" title=\"二. 使用 es6解构\"></a>二. 使用 es6解构</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [<span class=\"string\">&#x27;Luke&#x27;</span>, <span class=\"string\">&#x27;Eva&#x27;</span>, <span class=\"string\">&#x27;Phil&#x27;</span>,<span class=\"string\">&#x27;Tela&#x27;</span>];  </span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second, third] = list;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first, second); <span class=\"comment\">// &#x27;Luke&#x27; &#x27;Eva&#x27;  </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(third)  <span class=\"comment\">// &quot;Phil&quot; &quot;Tela&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>到如今，已经知道了如何从数组中提取单个元素，那么对于想要取数组中的后面连续部分的元素怎么办呢？看下面的解构代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [<span class=\"string\">&#x27;Luke&#x27;</span>, <span class=\"string\">&#x27;Eva&#x27;</span>, <span class=\"string\">&#x27;Phil&#x27;</span>,<span class=\"string\">&#x27;Tela&#x27;</span>];  </span><br><span class=\"line\"><span class=\"keyword\">var</span> [first, ...rest] = list;  </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rest); <span class=\"comment\">// [&#x27;Eva&#x27;,&#x27;Phil&#x27;]  </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"三-Symbol-iterator\"><a href=\"#三-Symbol-iterator\" class=\"headerlink\" title=\"三. Symbol.iterator\"></a>三. Symbol.iterator</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const list = [&#x27;Luke&#x27;, &#x27;Eva&#x27;, &#x27;Phil&#x27;,&#x27;Tela&#x27;];  </span><br><span class=\"line\">const iteratore = list[Symbol.iterator]()</span><br><span class=\"line\">console.log(iteratore.next().value) // &#x27;Luke&#x27;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>项目开发中经常会用到这样的操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取数组的第一个元素</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> list = [<span class=\"string\">&#x27;Luke&#x27;</span>, <span class=\"string\">&#x27;Eva&#x27;</span>, <span class=\"string\">&#x27;Phil&#x27;</span>,<span class=\"string\">&#x27;Tela&#x27;</span>];  </span><br><span class=\"line\"> <span class=\"keyword\">let</span> data = list[<span class=\"number\">0</span>]</span><br><span class=\"line\"> <span class=\"keyword\">let</span> target = list[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>缺点：在代码中出现数字，感觉这样写不够美观</p>\n<h5 id=\"一-shift\"><a href=\"#一-shift\" class=\"headerlink\" title=\"一. shift()\"></a>一. shift()</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [<span class=\"string\">&#x27;Luke&#x27;</span>, <span class=\"string\">&#x27;Eva&#x27;</span>, <span class=\"string\">&#x27;Phil&#x27;</span>,<span class=\"string\">&#x27;Tela&#x27;</span>];  </span><br><span class=\"line\"><span class=\"keyword\">let</span> data = list.<span class=\"title function_\">shift</span>() <span class=\"comment\">// ”Luke“</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> target = list.<span class=\"title function_\">shift</span>() <span class=\"comment\">// ”Eva“</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>优点：代码相对美观<br>缺点： 会修改原数组</p>\n<h5 id=\"二-使用-es6解构\"><a href=\"#二-使用-es6解构\" class=\"headerlink\" title=\"二. 使用 es6解构\"></a>二. 使用 es6解构</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [<span class=\"string\">&#x27;Luke&#x27;</span>, <span class=\"string\">&#x27;Eva&#x27;</span>, <span class=\"string\">&#x27;Phil&#x27;</span>,<span class=\"string\">&#x27;Tela&#x27;</span>];  </span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second, third] = list;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first, second); <span class=\"comment\">// &#x27;Luke&#x27; &#x27;Eva&#x27;  </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(third)  <span class=\"comment\">// &quot;Phil&quot; &quot;Tela&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>到如今，已经知道了如何从数组中提取单个元素，那么对于想要取数组中的后面连续部分的元素怎么办呢？看下面的解构代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [<span class=\"string\">&#x27;Luke&#x27;</span>, <span class=\"string\">&#x27;Eva&#x27;</span>, <span class=\"string\">&#x27;Phil&#x27;</span>,<span class=\"string\">&#x27;Tela&#x27;</span>];  </span><br><span class=\"line\"><span class=\"keyword\">var</span> [first, ...rest] = list;  </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rest); <span class=\"comment\">// [&#x27;Eva&#x27;,&#x27;Phil&#x27;]  </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"三-Symbol-iterator\"><a href=\"#三-Symbol-iterator\" class=\"headerlink\" title=\"三. Symbol.iterator\"></a>三. Symbol.iterator</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const list = [&#x27;Luke&#x27;, &#x27;Eva&#x27;, &#x27;Phil&#x27;,&#x27;Tela&#x27;];  </span><br><span class=\"line\">const iteratore = list[Symbol.iterator]()</span><br><span class=\"line\">console.log(iteratore.next().value) // &#x27;Luke&#x27;</span><br></pre></td></tr></table></figure>\n"},{"title":"🌦🌦for-异步执行方案","date":"2022-03-10T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-a67f2b1a469d40b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### for + 异步请求同步执行问题\n有个需求是循环请求一个接口获得数据，\n问题是循环请求了但是接口是异步的，按顺序传过去的返回来的并`不一定`按顺序返回来。\n##### 解法一——async await\n```js\nmounted() {\n    this.queryNewFund();\n  },\n  methods: {\n    async queryNewFund() {\n      let that = this;\n      let codeList = [\"1\", \"2\", \"3\"];\n      for (let i = 0; i < codeList.length; i++) {\n        let obj = await that.getData(codeList[i]);\n        console.log(obj);\n      }\n    },\n    getData(id) {\n      return new Promise(resolve => {\n        axios.get(id).then(result => {\n          resolve(result);\n        });\n      });\n    }\n  },\n```\n##### 解法二——Promise.all\n利用Promise.all 顺序返回的特性\n```js\nmounted() {\n    this.queryNewFund();\n  },\n  methods: {\n    async queryNewFund() {\n      let that = this;\n      let codeList = [\"1\", \"2\", \"3\"];\n      for (let i = 0; i < codeList.length; i++) {\n        this.asyncLists.push(this.getData(codeList[i]))\n      }\n      Promise.all(this.asyncLists).then((res) => {\n        // 四个result 结果 顺序返回\n      })\n    },\n    getData(id) {\n      return new Promise(resolve => {\n        axios.get(id).then(result => {\n          resolve(result);\n        });\n      });\n    }\n  },\n```\n##### 解法三 ——递归\n```js\n mounted() {\n    this.queryNewFund();\n  },\n  methods: {\n    queryNewFund() {\n      let that = this;\n      let codeList = [\"1\", \"2\", \"3\"];\n      this.getData(codeList, 0);\n    },\n    getData(codeList,index) {\n      if (i === codeList.length) {\n        return;\n      }\n      axios.get(codeList[index]).then(result => {\n          resolve(result);\n          this.getData(codeList,index + 1);\n      });\n    }\n  }\n```\n\n#### 间隔打印问题\n要实现的功能：在for循环中写一个计时器，先隔2000毫秒打印1，再隔2000毫秒打印2….依次每间隔2000毫秒打印出0到9.\n\n##### 基本思路\n要实现分别输出数组中的所有值，通过简单的for循环就能实现。要实现间隔一段时间输出，则使用setTimeout函数。\n先写一个基本循环\n```js\nfunction test(){\n\tfor (var i = 0; i < 10; i++) {\n\t\tconsole.log(i);//分别输出i的值\t\t\n\t}\t\n};\ntest();\n```\n可以在控制台看到紧跟着分别输出了小于10的i的值。\n- 加上setTimeout\n```diff js\nfunction test(){\n\tfor (var i = 0; i < 10; i++) {\n+\t  setTimeout(function(){\n\t\tconsole.log(i);//分别输出i的值\n+\t  },2000)\t\t\t\n\t}\t\n};\ntest();\n```\n加上setTimeout函数后，因为js执行机制和作用域问题，控制台的内容却都变成了10。\n\n\n##### \n\n##### 解决方案一 ——闭包\n终于来到了本文中最重要的一部分。什么是闭包？！\n\n闭包是指有权访问另一个函数作用域中的变量的函数。或者说，将函数作为参数或者返回值。创建闭包的常见方式，就是在一个函数内部创建另一个函数。以下面的代码为例。\n\n```diff js\nfunction test(){\n    for (var i = 0; i < 10; i++) {\n+    \t(function(j){//闭包\n    \t\tsetTimeout(function(){\n-               console.log(i);//分别输出i的值\n+    \t\t\tconsole.log(j);//分别输出i的值\n    \t\t},4000)\t\t\n+   \t})(i);//闭包\n    };\t\n};\ntest();\n```\n##### 解决方案二——let\n 如下面的代码所示，使用let替换var，也能输出0-9的值。这是因为，当for循环中的i是通过var定义的变量时，作用域是一整个封闭函数，是全局作用域；当i是通过let定义的变量时，作用域在代码块中，叫做块级作用域，在for循环这个子块中。\n```\nfunction test(){\n\tfor (let i = 0; i < 10; i++) {\n\t\tsetTimeout(function(){\n\t\t\tconsole.log(i);//分别输出i的值\n\t\t},2000)\t\t\n\t};\n};\ntest();\n```\n\n##### 最终方案：\n- 闭包版本\n ```\nfunction test(){\n\tfor (var i = 0; i < 10; i++) {\n\t\t(function(j){//闭包\n\t\t\tsetTimeout(function(){\n\t\t\t\tconsole.log(j);//分别输出i的值\n\t\t\t},2000*j)\t\t\n\t\t})(i);//闭包\n\t};\n};\ntest();\n```\n\n- let 版本\n ```\nfunction test(){\n\tfor (let i = 0; i < 10; i++) {\n\t\tsetTimeout(function(){\n\t\t\tconsole.log(i);//分别输出i的值\n\t\t}, 2000 * i)\t\t\n\t};\n};\ntest();\n```\n- Promise版本\n```\nconst Print = (i) => {\n  return new Promise(resolve => {\n      setTimeout(function(){\n          resolve(i)\n          console.log(i)\n\t  }, 2000 )\t\n  })\n}\n\nasync function test (){\n\tfor (var i = 0; i < 10; i++) {\n        await Print(i)\t\n\t};\n};\ntest();\n```\n\n> [用setTimeout实现for循环中的计时器](https://miss-me.github.io/2018/09/01/%E7%94%A8setTimeout%E5%AE%9E%E7%8E%B0for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E8%AE%A1%E6%97%B6%E5%99%A8/)\n","source":"_posts/🌦🌦for-异步执行方案.md","raw":"---\ntitle: \"🌦🌦for-异步执行方案\"\ndate: 2022-03-11\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-a67f2b1a469d40b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### for + 异步请求同步执行问题\n有个需求是循环请求一个接口获得数据，\n问题是循环请求了但是接口是异步的，按顺序传过去的返回来的并`不一定`按顺序返回来。\n##### 解法一——async await\n```js\nmounted() {\n    this.queryNewFund();\n  },\n  methods: {\n    async queryNewFund() {\n      let that = this;\n      let codeList = [\"1\", \"2\", \"3\"];\n      for (let i = 0; i < codeList.length; i++) {\n        let obj = await that.getData(codeList[i]);\n        console.log(obj);\n      }\n    },\n    getData(id) {\n      return new Promise(resolve => {\n        axios.get(id).then(result => {\n          resolve(result);\n        });\n      });\n    }\n  },\n```\n##### 解法二——Promise.all\n利用Promise.all 顺序返回的特性\n```js\nmounted() {\n    this.queryNewFund();\n  },\n  methods: {\n    async queryNewFund() {\n      let that = this;\n      let codeList = [\"1\", \"2\", \"3\"];\n      for (let i = 0; i < codeList.length; i++) {\n        this.asyncLists.push(this.getData(codeList[i]))\n      }\n      Promise.all(this.asyncLists).then((res) => {\n        // 四个result 结果 顺序返回\n      })\n    },\n    getData(id) {\n      return new Promise(resolve => {\n        axios.get(id).then(result => {\n          resolve(result);\n        });\n      });\n    }\n  },\n```\n##### 解法三 ——递归\n```js\n mounted() {\n    this.queryNewFund();\n  },\n  methods: {\n    queryNewFund() {\n      let that = this;\n      let codeList = [\"1\", \"2\", \"3\"];\n      this.getData(codeList, 0);\n    },\n    getData(codeList,index) {\n      if (i === codeList.length) {\n        return;\n      }\n      axios.get(codeList[index]).then(result => {\n          resolve(result);\n          this.getData(codeList,index + 1);\n      });\n    }\n  }\n```\n\n#### 间隔打印问题\n要实现的功能：在for循环中写一个计时器，先隔2000毫秒打印1，再隔2000毫秒打印2….依次每间隔2000毫秒打印出0到9.\n\n##### 基本思路\n要实现分别输出数组中的所有值，通过简单的for循环就能实现。要实现间隔一段时间输出，则使用setTimeout函数。\n先写一个基本循环\n```js\nfunction test(){\n\tfor (var i = 0; i < 10; i++) {\n\t\tconsole.log(i);//分别输出i的值\t\t\n\t}\t\n};\ntest();\n```\n可以在控制台看到紧跟着分别输出了小于10的i的值。\n- 加上setTimeout\n```diff js\nfunction test(){\n\tfor (var i = 0; i < 10; i++) {\n+\t  setTimeout(function(){\n\t\tconsole.log(i);//分别输出i的值\n+\t  },2000)\t\t\t\n\t}\t\n};\ntest();\n```\n加上setTimeout函数后，因为js执行机制和作用域问题，控制台的内容却都变成了10。\n\n\n##### \n\n##### 解决方案一 ——闭包\n终于来到了本文中最重要的一部分。什么是闭包？！\n\n闭包是指有权访问另一个函数作用域中的变量的函数。或者说，将函数作为参数或者返回值。创建闭包的常见方式，就是在一个函数内部创建另一个函数。以下面的代码为例。\n\n```diff js\nfunction test(){\n    for (var i = 0; i < 10; i++) {\n+    \t(function(j){//闭包\n    \t\tsetTimeout(function(){\n-               console.log(i);//分别输出i的值\n+    \t\t\tconsole.log(j);//分别输出i的值\n    \t\t},4000)\t\t\n+   \t})(i);//闭包\n    };\t\n};\ntest();\n```\n##### 解决方案二——let\n 如下面的代码所示，使用let替换var，也能输出0-9的值。这是因为，当for循环中的i是通过var定义的变量时，作用域是一整个封闭函数，是全局作用域；当i是通过let定义的变量时，作用域在代码块中，叫做块级作用域，在for循环这个子块中。\n```\nfunction test(){\n\tfor (let i = 0; i < 10; i++) {\n\t\tsetTimeout(function(){\n\t\t\tconsole.log(i);//分别输出i的值\n\t\t},2000)\t\t\n\t};\n};\ntest();\n```\n\n##### 最终方案：\n- 闭包版本\n ```\nfunction test(){\n\tfor (var i = 0; i < 10; i++) {\n\t\t(function(j){//闭包\n\t\t\tsetTimeout(function(){\n\t\t\t\tconsole.log(j);//分别输出i的值\n\t\t\t},2000*j)\t\t\n\t\t})(i);//闭包\n\t};\n};\ntest();\n```\n\n- let 版本\n ```\nfunction test(){\n\tfor (let i = 0; i < 10; i++) {\n\t\tsetTimeout(function(){\n\t\t\tconsole.log(i);//分别输出i的值\n\t\t}, 2000 * i)\t\t\n\t};\n};\ntest();\n```\n- Promise版本\n```\nconst Print = (i) => {\n  return new Promise(resolve => {\n      setTimeout(function(){\n          resolve(i)\n          console.log(i)\n\t  }, 2000 )\t\n  })\n}\n\nasync function test (){\n\tfor (var i = 0; i < 10; i++) {\n        await Print(i)\t\n\t};\n};\ntest();\n```\n\n> [用setTimeout实现for循环中的计时器](https://miss-me.github.io/2018/09/01/%E7%94%A8setTimeout%E5%AE%9E%E7%8E%B0for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E8%AE%A1%E6%97%B6%E5%99%A8/)\n","slug":"🌦🌦for-异步执行方案","published":1,"updated":"2024-05-16T07:39:11.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nr003i2omv7qm65lca","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a67f2b1a469d40b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"for-异步请求同步执行问题\"><a href=\"#for-异步请求同步执行问题\" class=\"headerlink\" title=\"for + 异步请求同步执行问题\"></a>for + 异步请求同步执行问题</h4><p>有个需求是循环请求一个接口获得数据，<br>问题是循环请求了但是接口是异步的，按顺序传过去的返回来的并<code>不一定</code>按顺序返回来。</p>\n<h5 id=\"解法一——async-await\"><a href=\"#解法一——async-await\" class=\"headerlink\" title=\"解法一——async await\"></a>解法一——async await</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">queryNewFund</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">queryNewFund</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> codeList = [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; codeList.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> obj = <span class=\"keyword\">await</span> that.<span class=\"title function_\">getData</span>(codeList[i]);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">getData</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        axios.<span class=\"title function_\">get</span>(id).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h5 id=\"解法二——Promise-all\"><a href=\"#解法二——Promise-all\" class=\"headerlink\" title=\"解法二——Promise.all\"></a>解法二——Promise.all</h5><p>利用Promise.all 顺序返回的特性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">queryNewFund</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">queryNewFund</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> codeList = [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; codeList.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">asyncLists</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">getData</span>(codeList[i]))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">asyncLists</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 四个result 结果 顺序返回</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">getData</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        axios.<span class=\"title function_\">get</span>(id).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h5 id=\"解法三-——递归\"><a href=\"#解法三-——递归\" class=\"headerlink\" title=\"解法三 ——递归\"></a>解法三 ——递归</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"title function_\">queryNewFund</span>();</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">   <span class=\"title function_\">queryNewFund</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> codeList = [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>];</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">getData</span>(codeList, <span class=\"number\">0</span>);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"title function_\">getData</span>(<span class=\"params\">codeList,index</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (i === codeList.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     axios.<span class=\"title function_\">get</span>(codeList[index]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">         <span class=\"variable language_\">this</span>.<span class=\"title function_\">getData</span>(codeList,index + <span class=\"number\">1</span>);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"间隔打印问题\"><a href=\"#间隔打印问题\" class=\"headerlink\" title=\"间隔打印问题\"></a>间隔打印问题</h4><p>要实现的功能：在for循环中写一个计时器，先隔2000毫秒打印1，再隔2000毫秒打印2….依次每间隔2000毫秒打印出0到9.</p>\n<h5 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h5><p>要实现分别输出数组中的所有值，通过简单的for循环就能实现。要实现间隔一段时间输出，则使用setTimeout函数。<br>先写一个基本循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);<span class=\"comment\">//分别输出i的值\t\t</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br></pre></td></tr></table></figure>\n<p>可以在控制台看到紧跟着分别输出了小于10的i的值。</p>\n<ul>\n<li>加上setTimeout<figure class=\"highlight diff\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">\tfor (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\"><span class=\"addition\">+\t  setTimeout(function()&#123;</span></span><br><span class=\"line\">\t\tconsole.log(i);//分别输出i的值</span><br><span class=\"line\"><span class=\"addition\">+\t  &#125;,2000)\t\t\t</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n加上setTimeout函数后，因为js执行机制和作用域问题，控制台的内容却都变成了10。</li>\n</ul>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h5 id=\"解决方案一-——闭包\"><a href=\"#解决方案一-——闭包\" class=\"headerlink\" title=\"解决方案一 ——闭包\"></a>解决方案一 ——闭包</h5><p>终于来到了本文中最重要的一部分。什么是闭包？！</p>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数。或者说，将函数作为参数或者返回值。创建闭包的常见方式，就是在一个函数内部创建另一个函数。以下面的代码为例。</p>\n<figure class=\"highlight diff\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\"><span class=\"addition\">+    \t(function(j)&#123;//闭包</span></span><br><span class=\"line\">    \t\tsetTimeout(function()&#123;</span><br><span class=\"line\"><span class=\"deletion\">-               console.log(i);//分别输出i的值</span></span><br><span class=\"line\"><span class=\"addition\">+    \t\t\tconsole.log(j);//分别输出i的值</span></span><br><span class=\"line\">    \t\t&#125;,4000)\t\t</span><br><span class=\"line\"><span class=\"addition\">+   \t&#125;)(i);//闭包</span></span><br><span class=\"line\">    &#125;;\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<h5 id=\"解决方案二——let\"><a href=\"#解决方案二——let\" class=\"headerlink\" title=\"解决方案二——let\"></a>解决方案二——let</h5><p> 如下面的代码所示，使用let替换var，也能输出0-9的值。这是因为，当for循环中的i是通过var定义的变量时，作用域是一整个封闭函数，是全局作用域；当i是通过let定义的变量时，作用域在代码块中，叫做块级作用域，在for循环这个子块中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">\tfor (let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\tsetTimeout(function()&#123;</span><br><span class=\"line\">\t\t\tconsole.log(i);//分别输出i的值</span><br><span class=\"line\">\t\t&#125;,2000)\t\t</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"最终方案：\"><a href=\"#最终方案：\" class=\"headerlink\" title=\"最终方案：\"></a>最终方案：</h5><ul>\n<li><p>闭包版本</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">\tfor (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\t(function(j)&#123;//闭包</span><br><span class=\"line\">\t\t\tsetTimeout(function()&#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(j);//分别输出i的值</span><br><span class=\"line\">\t\t\t&#125;,2000*j)\t\t</span><br><span class=\"line\">\t\t&#125;)(i);//闭包</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>let 版本</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">\tfor (let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\tsetTimeout(function()&#123;</span><br><span class=\"line\">\t\t\tconsole.log(i);//分别输出i的值</span><br><span class=\"line\">\t\t&#125;, 2000 * i)\t\t</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure></li>\n<li><p>Promise版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Print = (i) =&gt; &#123;</span><br><span class=\"line\">  return new Promise(resolve =&gt; &#123;</span><br><span class=\"line\">      setTimeout(function()&#123;</span><br><span class=\"line\">          resolve(i)</span><br><span class=\"line\">          console.log(i)</span><br><span class=\"line\">\t  &#125;, 2000 )\t</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function test ()&#123;</span><br><span class=\"line\">\tfor (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">        await Print(i)\t</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p><a href=\"https://miss-me.github.io/2018/09/01/%E7%94%A8setTimeout%E5%AE%9E%E7%8E%B0for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E8%AE%A1%E6%97%B6%E5%99%A8/\">用setTimeout实现for循环中的计时器</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a67f2b1a469d40b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"for-异步请求同步执行问题\"><a href=\"#for-异步请求同步执行问题\" class=\"headerlink\" title=\"for + 异步请求同步执行问题\"></a>for + 异步请求同步执行问题</h4><p>有个需求是循环请求一个接口获得数据，<br>问题是循环请求了但是接口是异步的，按顺序传过去的返回来的并<code>不一定</code>按顺序返回来。</p>\n<h5 id=\"解法一——async-await\"><a href=\"#解法一——async-await\" class=\"headerlink\" title=\"解法一——async await\"></a>解法一——async await</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">queryNewFund</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">queryNewFund</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> codeList = [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; codeList.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> obj = <span class=\"keyword\">await</span> that.<span class=\"title function_\">getData</span>(codeList[i]);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">getData</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        axios.<span class=\"title function_\">get</span>(id).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h5 id=\"解法二——Promise-all\"><a href=\"#解法二——Promise-all\" class=\"headerlink\" title=\"解法二——Promise.all\"></a>解法二——Promise.all</h5><p>利用Promise.all 顺序返回的特性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">queryNewFund</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">queryNewFund</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> codeList = [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; codeList.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">asyncLists</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">getData</span>(codeList[i]))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">asyncLists</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 四个result 结果 顺序返回</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">getData</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        axios.<span class=\"title function_\">get</span>(id).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h5 id=\"解法三-——递归\"><a href=\"#解法三-——递归\" class=\"headerlink\" title=\"解法三 ——递归\"></a>解法三 ——递归</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"title function_\">queryNewFund</span>();</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">   <span class=\"title function_\">queryNewFund</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> codeList = [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>];</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">getData</span>(codeList, <span class=\"number\">0</span>);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"title function_\">getData</span>(<span class=\"params\">codeList,index</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (i === codeList.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     axios.<span class=\"title function_\">get</span>(codeList[index]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">         <span class=\"variable language_\">this</span>.<span class=\"title function_\">getData</span>(codeList,index + <span class=\"number\">1</span>);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"间隔打印问题\"><a href=\"#间隔打印问题\" class=\"headerlink\" title=\"间隔打印问题\"></a>间隔打印问题</h4><p>要实现的功能：在for循环中写一个计时器，先隔2000毫秒打印1，再隔2000毫秒打印2….依次每间隔2000毫秒打印出0到9.</p>\n<h5 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h5><p>要实现分别输出数组中的所有值，通过简单的for循环就能实现。要实现间隔一段时间输出，则使用setTimeout函数。<br>先写一个基本循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);<span class=\"comment\">//分别输出i的值\t\t</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">test</span>();</span><br></pre></td></tr></table></figure>\n<p>可以在控制台看到紧跟着分别输出了小于10的i的值。</p>\n<ul>\n<li>加上setTimeout<figure class=\"highlight diff\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">\tfor (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\"><span class=\"addition\">+\t  setTimeout(function()&#123;</span></span><br><span class=\"line\">\t\tconsole.log(i);//分别输出i的值</span><br><span class=\"line\"><span class=\"addition\">+\t  &#125;,2000)\t\t\t</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n加上setTimeout函数后，因为js执行机制和作用域问题，控制台的内容却都变成了10。</li>\n</ul>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h5 id=\"解决方案一-——闭包\"><a href=\"#解决方案一-——闭包\" class=\"headerlink\" title=\"解决方案一 ——闭包\"></a>解决方案一 ——闭包</h5><p>终于来到了本文中最重要的一部分。什么是闭包？！</p>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数。或者说，将函数作为参数或者返回值。创建闭包的常见方式，就是在一个函数内部创建另一个函数。以下面的代码为例。</p>\n<figure class=\"highlight diff\"><figcaption><span>js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\"><span class=\"addition\">+    \t(function(j)&#123;//闭包</span></span><br><span class=\"line\">    \t\tsetTimeout(function()&#123;</span><br><span class=\"line\"><span class=\"deletion\">-               console.log(i);//分别输出i的值</span></span><br><span class=\"line\"><span class=\"addition\">+    \t\t\tconsole.log(j);//分别输出i的值</span></span><br><span class=\"line\">    \t\t&#125;,4000)\t\t</span><br><span class=\"line\"><span class=\"addition\">+   \t&#125;)(i);//闭包</span></span><br><span class=\"line\">    &#125;;\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<h5 id=\"解决方案二——let\"><a href=\"#解决方案二——let\" class=\"headerlink\" title=\"解决方案二——let\"></a>解决方案二——let</h5><p> 如下面的代码所示，使用let替换var，也能输出0-9的值。这是因为，当for循环中的i是通过var定义的变量时，作用域是一整个封闭函数，是全局作用域；当i是通过let定义的变量时，作用域在代码块中，叫做块级作用域，在for循环这个子块中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">\tfor (let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\tsetTimeout(function()&#123;</span><br><span class=\"line\">\t\t\tconsole.log(i);//分别输出i的值</span><br><span class=\"line\">\t\t&#125;,2000)\t\t</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"最终方案：\"><a href=\"#最终方案：\" class=\"headerlink\" title=\"最终方案：\"></a>最终方案：</h5><ul>\n<li><p>闭包版本</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">\tfor (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\t(function(j)&#123;//闭包</span><br><span class=\"line\">\t\t\tsetTimeout(function()&#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(j);//分别输出i的值</span><br><span class=\"line\">\t\t\t&#125;,2000*j)\t\t</span><br><span class=\"line\">\t\t&#125;)(i);//闭包</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>let 版本</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">\tfor (let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">\t\tsetTimeout(function()&#123;</span><br><span class=\"line\">\t\t\tconsole.log(i);//分别输出i的值</span><br><span class=\"line\">\t\t&#125;, 2000 * i)\t\t</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure></li>\n<li><p>Promise版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Print = (i) =&gt; &#123;</span><br><span class=\"line\">  return new Promise(resolve =&gt; &#123;</span><br><span class=\"line\">      setTimeout(function()&#123;</span><br><span class=\"line\">          resolve(i)</span><br><span class=\"line\">          console.log(i)</span><br><span class=\"line\">\t  &#125;, 2000 )\t</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function test ()&#123;</span><br><span class=\"line\">\tfor (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">        await Print(i)\t</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p><a href=\"https://miss-me.github.io/2018/09/01/%E7%94%A8setTimeout%E5%AE%9E%E7%8E%B0for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E8%AE%A1%E6%97%B6%E5%99%A8/\">用setTimeout实现for循环中的计时器</a></p>\n</blockquote>\n"},{"title":"🌦🌦forEach不改变原数组,-但是改变对象属性的问题","date":"2021-03-10T16:00:00.000Z","_content":"#####  1.forEach(item, index, arr)，三个参数，如果直接用item=xxx是无法改变原数组的，但是如果用arr[index]就可以改变原数组。\n```js\n \nvar s = [1, 2, 3, 4];\n// 未改变原数组\ns.forEach(item=>{\n    item = 'a'\n});\nconsole.log(s); //  [1, 2, 3, 4] \n \n//  改变了原数组\ns.forEach((item, index, arr)=>{\n    arr[index] = 'b'\n});\nconsole.log(s); // [\"b\", \"b\", \"b\", \"b\"]\n\n```\n##### 2.数组里面的子元素是对象，那么是可以改变对应属性的\n```js\n\n// 未改变原数组\nvar s = [{a:1}, {a:1}];\ns.forEach(item=>{\n    item = null;\n});\nconsole.log(s); // [{a: 1} ,{a: 1}] \n\n// 改变的原数组里面的对象属性\ns.forEach(item=>{\n    item.a = 666;\n});\nconsole.log(s); // [{a: 666}, {a: 666}] \n\n```\n","source":"_posts/🌦🌦forEach不改变原数组,-但是改变对象属性的问题.md","raw":"---\ntitle: \"🌦🌦forEach不改变原数组,-但是改变对象属性的问题\"\ndate: 2021-03-11\ntags: \n- 开发日常\n---\n#####  1.forEach(item, index, arr)，三个参数，如果直接用item=xxx是无法改变原数组的，但是如果用arr[index]就可以改变原数组。\n```js\n \nvar s = [1, 2, 3, 4];\n// 未改变原数组\ns.forEach(item=>{\n    item = 'a'\n});\nconsole.log(s); //  [1, 2, 3, 4] \n \n//  改变了原数组\ns.forEach((item, index, arr)=>{\n    arr[index] = 'b'\n});\nconsole.log(s); // [\"b\", \"b\", \"b\", \"b\"]\n\n```\n##### 2.数组里面的子元素是对象，那么是可以改变对应属性的\n```js\n\n// 未改变原数组\nvar s = [{a:1}, {a:1}];\ns.forEach(item=>{\n    item = null;\n});\nconsole.log(s); // [{a: 1} ,{a: 1}] \n\n// 改变的原数组里面的对象属性\ns.forEach(item=>{\n    item.a = 666;\n});\nconsole.log(s); // [{a: 666}, {a: 666}] \n\n```\n","slug":"🌦🌦forEach不改变原数组,-但是改变对象属性的问题","published":1,"updated":"2024-05-16T07:39:11.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ns003k2omv76hmgv6g","content":"<h5 id=\"1-forEach-item-index-arr-，三个参数，如果直接用item-x3D-xxx是无法改变原数组的，但是如果用arr-index-就可以改变原数组。\"><a href=\"#1-forEach-item-index-arr-，三个参数，如果直接用item-x3D-xxx是无法改变原数组的，但是如果用arr-index-就可以改变原数组。\" class=\"headerlink\" title=\"1.forEach(item, index, arr)，三个参数，如果直接用item&#x3D;xxx是无法改变原数组的，但是如果用arr[index]就可以改变原数组。\"></a>1.forEach(item, index, arr)，三个参数，如果直接用item&#x3D;xxx是无法改变原数组的，但是如果用arr[index]就可以改变原数组。</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">// 未改变原数组</span></span><br><span class=\"line\">s.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">    item = <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s); <span class=\"comment\">//  [1, 2, 3, 4] </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//  改变了原数组</span></span><br><span class=\"line\">s.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    arr[index] = <span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s); <span class=\"comment\">// [&quot;b&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-数组里面的子元素是对象，那么是可以改变对应属性的\"><a href=\"#2-数组里面的子元素是对象，那么是可以改变对应属性的\" class=\"headerlink\" title=\"2.数组里面的子元素是对象，那么是可以改变对应属性的\"></a>2.数组里面的子元素是对象，那么是可以改变对应属性的</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 未改变原数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;];</span><br><span class=\"line\">s.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">    item = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s); <span class=\"comment\">// [&#123;a: 1&#125; ,&#123;a: 1&#125;] </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改变的原数组里面的对象属性</span></span><br><span class=\"line\">s.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">    item.<span class=\"property\">a</span> = <span class=\"number\">666</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s); <span class=\"comment\">// [&#123;a: 666&#125;, &#123;a: 666&#125;] </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"1-forEach-item-index-arr-，三个参数，如果直接用item-x3D-xxx是无法改变原数组的，但是如果用arr-index-就可以改变原数组。\"><a href=\"#1-forEach-item-index-arr-，三个参数，如果直接用item-x3D-xxx是无法改变原数组的，但是如果用arr-index-就可以改变原数组。\" class=\"headerlink\" title=\"1.forEach(item, index, arr)，三个参数，如果直接用item&#x3D;xxx是无法改变原数组的，但是如果用arr[index]就可以改变原数组。\"></a>1.forEach(item, index, arr)，三个参数，如果直接用item&#x3D;xxx是无法改变原数组的，但是如果用arr[index]就可以改变原数组。</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">// 未改变原数组</span></span><br><span class=\"line\">s.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">    item = <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s); <span class=\"comment\">//  [1, 2, 3, 4] </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//  改变了原数组</span></span><br><span class=\"line\">s.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    arr[index] = <span class=\"string\">&#x27;b&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s); <span class=\"comment\">// [&quot;b&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-数组里面的子元素是对象，那么是可以改变对应属性的\"><a href=\"#2-数组里面的子元素是对象，那么是可以改变对应属性的\" class=\"headerlink\" title=\"2.数组里面的子元素是对象，那么是可以改变对应属性的\"></a>2.数组里面的子元素是对象，那么是可以改变对应属性的</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 未改变原数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;];</span><br><span class=\"line\">s.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">    item = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s); <span class=\"comment\">// [&#123;a: 1&#125; ,&#123;a: 1&#125;] </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改变的原数组里面的对象属性</span></span><br><span class=\"line\">s.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">    item.<span class=\"property\">a</span> = <span class=\"number\">666</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s); <span class=\"comment\">// [&#123;a: 666&#125;, &#123;a: 666&#125;] </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"🌦🌦js-数字溢出问题","date":"2022-03-31T16:00:00.000Z","_content":"场景：后端向前端通过一个接口返回一系列商品ID，前端通过商品ID去获取商品信息。\n问题：前端请求，但是没有这个商品的信息\n原因：后端返回的商品ID ，和前端获取的不一致，js数字采用64位双浮点数。\n范围 -(2^53 ) <= number <= 2^53 \n所以当后端返回数字不在这一区间时，前端会丢失。\n比如：\n![](https://upload-images.jianshu.io/upload_images/15312191-a62d13274a7b796a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n解决方法：后端转成字符串。\n\n总结：js 简单弱类语言，这是设计不严谨的地方，导致很多混乱，\n> [Javascript的10个设计缺陷](http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html)\n[C语言中关于float、double、long double精度及数值范围理解 ](http://blog.sina.com.cn/s/blog_6ebd49350101gdgo.html)\n[Number.MAX_SAFE_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\n","source":"_posts/🌦🌦js-数字溢出问题.md","raw":"---\ntitle: \"🌦🌦js-数字溢出问题\"\ndate: 2022-04-01\ntags: \n- 开发日常\n---\n场景：后端向前端通过一个接口返回一系列商品ID，前端通过商品ID去获取商品信息。\n问题：前端请求，但是没有这个商品的信息\n原因：后端返回的商品ID ，和前端获取的不一致，js数字采用64位双浮点数。\n范围 -(2^53 ) <= number <= 2^53 \n所以当后端返回数字不在这一区间时，前端会丢失。\n比如：\n![](https://upload-images.jianshu.io/upload_images/15312191-a62d13274a7b796a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n解决方法：后端转成字符串。\n\n总结：js 简单弱类语言，这是设计不严谨的地方，导致很多混乱，\n> [Javascript的10个设计缺陷](http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html)\n[C语言中关于float、double、long double精度及数值范围理解 ](http://blog.sina.com.cn/s/blog_6ebd49350101gdgo.html)\n[Number.MAX_SAFE_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\n","slug":"🌦🌦js-数字溢出问题","published":1,"updated":"2024-05-16T07:39:11.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nt003m2omv56roczwa","content":"<p>场景：后端向前端通过一个接口返回一系列商品ID，前端通过商品ID去获取商品信息。<br>问题：前端请求，但是没有这个商品的信息<br>原因：后端返回的商品ID ，和前端获取的不一致，js数字采用64位双浮点数。<br>范围 -(2^53 ) &lt;&#x3D; number &lt;&#x3D; 2^53<br>所以当后端返回数字不在这一区间时，前端会丢失。<br>比如：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a62d13274a7b796a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>解决方法：后端转成字符串。</p>\n<p>总结：js 简单弱类语言，这是设计不严谨的地方，导致很多混乱，</p>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html\">Javascript的10个设计缺陷</a><br><a href=\"http://blog.sina.com.cn/s/blog_6ebd49350101gdgo.html\">C语言中关于float、double、long double精度及数值范围理解 </a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">Number.MAX_SAFE_INTEGER</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p>场景：后端向前端通过一个接口返回一系列商品ID，前端通过商品ID去获取商品信息。<br>问题：前端请求，但是没有这个商品的信息<br>原因：后端返回的商品ID ，和前端获取的不一致，js数字采用64位双浮点数。<br>范围 -(2^53 ) &lt;&#x3D; number &lt;&#x3D; 2^53<br>所以当后端返回数字不在这一区间时，前端会丢失。<br>比如：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-a62d13274a7b796a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>解决方法：后端转成字符串。</p>\n<p>总结：js 简单弱类语言，这是设计不严谨的地方，导致很多混乱，</p>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html\">Javascript的10个设计缺陷</a><br><a href=\"http://blog.sina.com.cn/s/blog_6ebd49350101gdgo.html\">C语言中关于float、double、long double精度及数值范围理解 </a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">Number.MAX_SAFE_INTEGER</a></p>\n</blockquote>\n"},{"title":"🌦🌦webpack&Esbuild--两者可以兼得","date":"2022-05-11T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-95090f655ae229f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nesbuild打包速度碾压webpack,其优势我在另一篇文章中写过，请见[为什么esbuild更快](https://www.jianshu.com/p/b45c020aa368) \n\n下面介绍将webpack和esbuild结合的工具: esbuild-loader\n#### install\n`$ npm i -D esbuild-loader`\n#### Quick Setup\n ```\n  module.exports = {\n    module: {\n      rules: [\n-       {\n-         test: /\\.js$/,\n-         use: 'babel-loader',\n-       },\n+       {\n+         test: /\\.js$/,\n+         loader: 'esbuild-loader',\n+         options: {\n+           loader: 'jsx',  // Remove this if you're not using JSX\n+           target: 'es2015'  // Syntax to compile to (see options below for possible values)\n+         }\n+       },\n\n        ...\n      ],\n    },\n  }\n```\n原理\n1.esbulder-loader 调用 esbulid 去打包js 代码。\n2.esbuild是go写的，可以打包成二进制文件，不用再安装go相关环境。\n\n#### 速度对比\nBefore:\n![](https://upload-images.jianshu.io/upload_images/15312191-4de927aca2f3f44d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nAfter:\n![](https://upload-images.jianshu.io/upload_images/15312191-bbc28ee5237260a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n结论：速度快了1/3左右，esbuilder-loader只能取代babal-loader的左右，像png,css等资源无法提供支持。\n","source":"_posts/🌦🌦webpack&Esbuild--两者可以兼得.md","raw":"---\ntitle: \"🌦🌦webpack&Esbuild--两者可以兼得\"\ndate: 2022-05-12\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-95090f655ae229f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nesbuild打包速度碾压webpack,其优势我在另一篇文章中写过，请见[为什么esbuild更快](https://www.jianshu.com/p/b45c020aa368) \n\n下面介绍将webpack和esbuild结合的工具: esbuild-loader\n#### install\n`$ npm i -D esbuild-loader`\n#### Quick Setup\n ```\n  module.exports = {\n    module: {\n      rules: [\n-       {\n-         test: /\\.js$/,\n-         use: 'babel-loader',\n-       },\n+       {\n+         test: /\\.js$/,\n+         loader: 'esbuild-loader',\n+         options: {\n+           loader: 'jsx',  // Remove this if you're not using JSX\n+           target: 'es2015'  // Syntax to compile to (see options below for possible values)\n+         }\n+       },\n\n        ...\n      ],\n    },\n  }\n```\n原理\n1.esbulder-loader 调用 esbulid 去打包js 代码。\n2.esbuild是go写的，可以打包成二进制文件，不用再安装go相关环境。\n\n#### 速度对比\nBefore:\n![](https://upload-images.jianshu.io/upload_images/15312191-4de927aca2f3f44d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nAfter:\n![](https://upload-images.jianshu.io/upload_images/15312191-bbc28ee5237260a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n结论：速度快了1/3左右，esbuilder-loader只能取代babal-loader的左右，像png,css等资源无法提供支持。\n","slug":"🌦🌦webpack&Esbuild--两者可以兼得","published":1,"updated":"2024-05-16T07:39:11.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nu003o2omv4z4h0q9f","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-95090f655ae229f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>esbuild打包速度碾压webpack,其优势我在另一篇文章中写过，请见<a href=\"https://www.jianshu.com/p/b45c020aa368\">为什么esbuild更快</a> </p>\n<p>下面介绍将webpack和esbuild结合的工具: esbuild-loader</p>\n<h4 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h4><p><code>$ npm i -D esbuild-loader</code></p>\n<h4 id=\"Quick-Setup\"><a href=\"#Quick-Setup\" class=\"headerlink\" title=\"Quick Setup\"></a>Quick Setup</h4> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">-       &#123;</span><br><span class=\"line\">-         test: /\\.js$/,</span><br><span class=\"line\">-         use: &#x27;babel-loader&#x27;,</span><br><span class=\"line\">-       &#125;,</span><br><span class=\"line\">+       &#123;</span><br><span class=\"line\">+         test: /\\.js$/,</span><br><span class=\"line\">+         loader: &#x27;esbuild-loader&#x27;,</span><br><span class=\"line\">+         options: &#123;</span><br><span class=\"line\">+           loader: &#x27;jsx&#x27;,  // Remove this if you&#x27;re not using JSX</span><br><span class=\"line\">+           target: &#x27;es2015&#x27;  // Syntax to compile to (see options below for possible values)</span><br><span class=\"line\">+         &#125;</span><br><span class=\"line\">+       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>原理<br>1.esbulder-loader 调用 esbulid 去打包js 代码。<br>2.esbuild是go写的，可以打包成二进制文件，不用再安装go相关环境。</p>\n<h4 id=\"速度对比\"><a href=\"#速度对比\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><p>Before:<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4de927aca2f3f44d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>After:<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-bbc28ee5237260a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>结论：速度快了1&#x2F;3左右，esbuilder-loader只能取代babal-loader的左右，像png,css等资源无法提供支持。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-95090f655ae229f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>esbuild打包速度碾压webpack,其优势我在另一篇文章中写过，请见<a href=\"https://www.jianshu.com/p/b45c020aa368\">为什么esbuild更快</a> </p>\n<p>下面介绍将webpack和esbuild结合的工具: esbuild-loader</p>\n<h4 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h4><p><code>$ npm i -D esbuild-loader</code></p>\n<h4 id=\"Quick-Setup\"><a href=\"#Quick-Setup\" class=\"headerlink\" title=\"Quick Setup\"></a>Quick Setup</h4> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">-       &#123;</span><br><span class=\"line\">-         test: /\\.js$/,</span><br><span class=\"line\">-         use: &#x27;babel-loader&#x27;,</span><br><span class=\"line\">-       &#125;,</span><br><span class=\"line\">+       &#123;</span><br><span class=\"line\">+         test: /\\.js$/,</span><br><span class=\"line\">+         loader: &#x27;esbuild-loader&#x27;,</span><br><span class=\"line\">+         options: &#123;</span><br><span class=\"line\">+           loader: &#x27;jsx&#x27;,  // Remove this if you&#x27;re not using JSX</span><br><span class=\"line\">+           target: &#x27;es2015&#x27;  // Syntax to compile to (see options below for possible values)</span><br><span class=\"line\">+         &#125;</span><br><span class=\"line\">+       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>原理<br>1.esbulder-loader 调用 esbulid 去打包js 代码。<br>2.esbuild是go写的，可以打包成二进制文件，不用再安装go相关环境。</p>\n<h4 id=\"速度对比\"><a href=\"#速度对比\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><p>Before:<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4de927aca2f3f44d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>After:<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-bbc28ee5237260a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>结论：速度快了1&#x2F;3左右，esbuilder-loader只能取代babal-loader的左右，像png,css等资源无法提供支持。</p>\n"},{"title":"🌦🌦前端位运算","date":"2021-08-04T16:00:00.000Z","_content":"#### 一、定义\n\n\n\n|  位运算符   | 符号  |  定义 | \n| --- | --- | --- | \n| 与 | & |相同位的两个数字都为1，则为1；若有一个不为1，则为0|\n | 或  | \\| |两个位有一个为1，结果就是1，否则结果为0|\n| 非  | ~ |如果位为0，结果是1，如果位为1，结果是0 具体参考连接|\n| 异或  | ^ |两个位相同结果为0，不同结果为1|\n\n\n#### 二、实例\n\n\n|  位运算符   | 实例  |  解析 |\n| --- | --- | --- | \n| 与  | 128 & 129 =128| ![image.png](https://upload-images.jianshu.io/upload_images/15312191-3fa78f0610be2b26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)|\n| 或  | 129 = 129 |![](https://upload-images.jianshu.io/upload_images/15312191-355a612100b3b959.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n|\n| 非  | ~128 = -129 |![](https://upload-images.jianshu.io/upload_images/15312191-870525f1579c2e25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n|\n| 异或  | 128 ^ 129 = 1 |![](https://upload-images.jianshu.io/upload_images/15312191-2f19c09ed63d286f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n|\n\n#### 常用公式\n##### 0,1 互转\n\n第一种：使用异或的方式，异或运算符^，即参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。\n```\n1^0 = 1\n \n1^1 = 0\n \nfunction reverse(num){\n  return 1^num\n}\n\n```\n\n第二种：使用按位非运算符的方式\n\n```\n~0 = -1\n~0 + 2 = 1\n \n~1 = -2\n~1 + 2 = 0\n \nfunction reverse(num){\n  return ~num + 2\n}\n\n```\n> [百度百科：位运算](https://baike.baidu.com/item/%E4%BD%8D%E8%BF%90%E7%AE%97/6888804?fr=aladdin)\n[关于按位取反怎么算](https://blog.csdn.net/qk233/article/details/108715207?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-6-108715207-blog-120214115.pc_relevant_multi_platform_featuressortv2removedup&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-6-108715207-blog-120214115.pc_relevant_multi_platform_featuressortv2removedup)\n","source":"_posts/🌦🌦前端位运算.md","raw":"---\ntitle: \"🌦🌦前端位运算\"\ndate: 2021-08-05\ntags: \n- 开发日常\n---\n#### 一、定义\n\n\n\n|  位运算符   | 符号  |  定义 | \n| --- | --- | --- | \n| 与 | & |相同位的两个数字都为1，则为1；若有一个不为1，则为0|\n | 或  | \\| |两个位有一个为1，结果就是1，否则结果为0|\n| 非  | ~ |如果位为0，结果是1，如果位为1，结果是0 具体参考连接|\n| 异或  | ^ |两个位相同结果为0，不同结果为1|\n\n\n#### 二、实例\n\n\n|  位运算符   | 实例  |  解析 |\n| --- | --- | --- | \n| 与  | 128 & 129 =128| ![image.png](https://upload-images.jianshu.io/upload_images/15312191-3fa78f0610be2b26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)|\n| 或  | 129 = 129 |![](https://upload-images.jianshu.io/upload_images/15312191-355a612100b3b959.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n|\n| 非  | ~128 = -129 |![](https://upload-images.jianshu.io/upload_images/15312191-870525f1579c2e25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n|\n| 异或  | 128 ^ 129 = 1 |![](https://upload-images.jianshu.io/upload_images/15312191-2f19c09ed63d286f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n|\n\n#### 常用公式\n##### 0,1 互转\n\n第一种：使用异或的方式，异或运算符^，即参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。\n```\n1^0 = 1\n \n1^1 = 0\n \nfunction reverse(num){\n  return 1^num\n}\n\n```\n\n第二种：使用按位非运算符的方式\n\n```\n~0 = -1\n~0 + 2 = 1\n \n~1 = -2\n~1 + 2 = 0\n \nfunction reverse(num){\n  return ~num + 2\n}\n\n```\n> [百度百科：位运算](https://baike.baidu.com/item/%E4%BD%8D%E8%BF%90%E7%AE%97/6888804?fr=aladdin)\n[关于按位取反怎么算](https://blog.csdn.net/qk233/article/details/108715207?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-6-108715207-blog-120214115.pc_relevant_multi_platform_featuressortv2removedup&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-6-108715207-blog-120214115.pc_relevant_multi_platform_featuressortv2removedup)\n","slug":"🌦🌦前端位运算","published":1,"updated":"2024-05-16T07:39:11.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nv003q2omvcl7m33zu","content":"<h4 id=\"一、定义\"><a href=\"#一、定义\" class=\"headerlink\" title=\"一、定义\"></a>一、定义</h4><table>\n<thead>\n<tr>\n<th>位运算符</th>\n<th>符号</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>与</td>\n<td>&amp;</td>\n<td>相同位的两个数字都为1，则为1；若有一个不为1，则为0</td>\n</tr>\n<tr>\n<td>或</td>\n<td>|</td>\n<td>两个位有一个为1，结果就是1，否则结果为0</td>\n</tr>\n<tr>\n<td>非</td>\n<td>~</td>\n<td>如果位为0，结果是1，如果位为1，结果是0 具体参考连接</td>\n</tr>\n<tr>\n<td>异或</td>\n<td>^</td>\n<td>两个位相同结果为0，不同结果为1</td>\n</tr>\n</tbody></table>\n<h4 id=\"二、实例\"><a href=\"#二、实例\" class=\"headerlink\" title=\"二、实例\"></a>二、实例</h4><table>\n<thead>\n<tr>\n<th>位运算符</th>\n<th>实例</th>\n<th>解析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>与</td>\n<td>128 &amp; 129 &#x3D;128</td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3fa78f0610be2b26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></td>\n</tr>\n<tr>\n<td>或</td>\n<td>129 &#x3D; 129</td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/15312191-355a612100b3b959.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>非</td>\n<td>~128 &#x3D; -129</td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/15312191-870525f1579c2e25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>异或</td>\n<td>128 ^ 129 &#x3D; 1</td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/15312191-2f19c09ed63d286f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"常用公式\"><a href=\"#常用公式\" class=\"headerlink\" title=\"常用公式\"></a>常用公式</h4><h5 id=\"0-1-互转\"><a href=\"#0-1-互转\" class=\"headerlink\" title=\"0,1 互转\"></a>0,1 互转</h5><p>第一种：使用异或的方式，异或运算符^，即参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1^0 = 1</span><br><span class=\"line\"> </span><br><span class=\"line\">1^1 = 0</span><br><span class=\"line\"> </span><br><span class=\"line\">function reverse(num)&#123;</span><br><span class=\"line\">  return 1^num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>第二种：使用按位非运算符的方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~0 = -1</span><br><span class=\"line\">~0 + 2 = 1</span><br><span class=\"line\"> </span><br><span class=\"line\">~1 = -2</span><br><span class=\"line\">~1 + 2 = 0</span><br><span class=\"line\"> </span><br><span class=\"line\">function reverse(num)&#123;</span><br><span class=\"line\">  return ~num + 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E4%BD%8D%E8%BF%90%E7%AE%97/6888804?fr=aladdin\">百度百科：位运算</a><br><a href=\"https://blog.csdn.net/qk233/article/details/108715207?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-108715207-blog-120214115.pc_relevant_multi_platform_featuressortv2removedup&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-108715207-blog-120214115.pc_relevant_multi_platform_featuressortv2removedup\">关于按位取反怎么算</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、定义\"><a href=\"#一、定义\" class=\"headerlink\" title=\"一、定义\"></a>一、定义</h4><table>\n<thead>\n<tr>\n<th>位运算符</th>\n<th>符号</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>与</td>\n<td>&amp;</td>\n<td>相同位的两个数字都为1，则为1；若有一个不为1，则为0</td>\n</tr>\n<tr>\n<td>或</td>\n<td>|</td>\n<td>两个位有一个为1，结果就是1，否则结果为0</td>\n</tr>\n<tr>\n<td>非</td>\n<td>~</td>\n<td>如果位为0，结果是1，如果位为1，结果是0 具体参考连接</td>\n</tr>\n<tr>\n<td>异或</td>\n<td>^</td>\n<td>两个位相同结果为0，不同结果为1</td>\n</tr>\n</tbody></table>\n<h4 id=\"二、实例\"><a href=\"#二、实例\" class=\"headerlink\" title=\"二、实例\"></a>二、实例</h4><table>\n<thead>\n<tr>\n<th>位运算符</th>\n<th>实例</th>\n<th>解析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>与</td>\n<td>128 &amp; 129 &#x3D;128</td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3fa78f0610be2b26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></td>\n</tr>\n<tr>\n<td>或</td>\n<td>129 &#x3D; 129</td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/15312191-355a612100b3b959.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>非</td>\n<td>~128 &#x3D; -129</td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/15312191-870525f1579c2e25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>异或</td>\n<td>128 ^ 129 &#x3D; 1</td>\n<td><img src=\"https://upload-images.jianshu.io/upload_images/15312191-2f19c09ed63d286f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"常用公式\"><a href=\"#常用公式\" class=\"headerlink\" title=\"常用公式\"></a>常用公式</h4><h5 id=\"0-1-互转\"><a href=\"#0-1-互转\" class=\"headerlink\" title=\"0,1 互转\"></a>0,1 互转</h5><p>第一种：使用异或的方式，异或运算符^，即参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1^0 = 1</span><br><span class=\"line\"> </span><br><span class=\"line\">1^1 = 0</span><br><span class=\"line\"> </span><br><span class=\"line\">function reverse(num)&#123;</span><br><span class=\"line\">  return 1^num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>第二种：使用按位非运算符的方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~0 = -1</span><br><span class=\"line\">~0 + 2 = 1</span><br><span class=\"line\"> </span><br><span class=\"line\">~1 = -2</span><br><span class=\"line\">~1 + 2 = 0</span><br><span class=\"line\"> </span><br><span class=\"line\">function reverse(num)&#123;</span><br><span class=\"line\">  return ~num + 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E4%BD%8D%E8%BF%90%E7%AE%97/6888804?fr=aladdin\">百度百科：位运算</a><br><a href=\"https://blog.csdn.net/qk233/article/details/108715207?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-108715207-blog-120214115.pc_relevant_multi_platform_featuressortv2removedup&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-108715207-blog-120214115.pc_relevant_multi_platform_featuressortv2removedup\">关于按位取反怎么算</a></p>\n</blockquote>\n"},{"title":"🌦🌦前端大文件上传","date":"2022-07-11T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-18c6200c98115ddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 背景：\n前端文件上传是非常普遍的功能，当需要上传大文件时会有以下问题。\n\n1.前后端上传时间限制，一次性传输大小限制。\n2.网络抖动等，失败后需要重新上传。\n3.http1.1版本， TCP只有传送一个请求\n4.无进度条，用户体验极差\n\n#### 主要步骤：\n\n\n\n![](https://upload-images.jianshu.io/upload_images/15312191-aa5a7a1d5b785dc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n**前端**：\n**加载文件 ➡️  分片 ➡️  上传**\n\n**node.js**：\n**解析文件**  ➡️   **存放文件碎片**  ➡️   **合并文件**\n\n比如重庆市向上海市订购了一批高铁列车，如果一次性运过来不太现场，没有那么大的船，还有就是一次性运过来，如果路上出事故，需要重新发送一批了，损失严重。\n\n所以我们准备分批发送。\n\n\n#### 1.浏览器加载文件\n\n```html\n  <input id=\"file\" type=\"file\" onchange=\"uploadFile()\"id=\"upload\" />\n  <input type=\"button\" id=\"upload\" value=\"文件上传\" class=\"btn btn-warning\"  onclick=\"handleUpload()\" />\n```\n\n这一步主要是把文件读取到内存里。\n\ndocument.getElementById('file').files 是 FileList类型。\n\ndocument.getElementById('file').files[0] 是File类型的包装器。\n\n> File FileList FileReader关系：\nFileReader只能读取 File或者 blob对象，File对象是[`FileList`](https://developer.mozilla.org/zh-CN/docs/Web/API/FileList)的子集，constructor ==  Blob, 有slice方法。\n\n#### 2.上传文件方式选择\n文件上传采用 formData形式，而不是json。原因json传参需要JSON. stringify序列化\n比如一下代码：\n\n```\nvar xhr = new XMLHttpRequest();\nxhr.open('post','http://localhost:3000/ajaxpost');\nxhr.setReuqestHeader('Content-Type','application/json');\nvar params = JSON.stringify({\n    city: '重庆',\n    spcial: '山城'\n})\nxhr.send(params);\nxhr.onload = function () {\n    console.log(xhr.responseText);    \n}\n```\n\n在序列化过程中，会抹掉一些比如 function File blob的对象，所以采用formData形式进行文件上传。\n\n\n#### 3.上传\n##### 3.1直接上传\n\n+ Promise 封装 ajax\n\n```\n const postAjax = (url,fd) => {\n      const xhr = new XMLHttpRequest();\n      return new Promise((resolve, reject) => {\n        xhr.open('POST', url, true);\n        xhr.onreadystatechange = function() {\n          if (xhr.readyState == 4 && xhr.status == 200) {\n            console.log(xhr.responseText, \"responseText\" )\n            resolve(xhr.responseText)\n          }\n        };\n        xhr.send(fd);\n      })\n    }\n```\n\n```\n const url = \"http://127.0.0.1:1000/file/uploading\"\n function uploadFile() {\n      const file = document.getElementById('file').files[0];\n      blockUpload(file)\n    }\n const blockUpload = (file) => {\n      const fd = new FormData();\n      fd.append(\"file\", file);\n      fd.append(\"fileName\", file.name)\n      postAjax(url, fd);\n    }\n```\n\n##### 3.2 分片上传 \nFile对象可以使用，slice + File.size，对文件进行切割，切割后的chunk实际上是浏览器对象Blob。\n\n```js\n const url = \"http://127.0.0.1:1000/file/uploading\"\n const mergrUrl = \"http://127.0.0.1:1000/file/mergrChunk\"\n const handleUpload = () => {\n        $(\"#file\").click();\n  }\n\n  function uploadFile() {\n      const file = document.getElementById('file').files[0];\n      chunkedUpload(file)\n  }\n\n```\n\n+ 分片\n\n```\n const chunkedUpload = async (file) => {\n      const chunkSize = 1024;\n      for (let start = 0; start <= file.size; start += chunkSize) {\n        const chunk = file.slice(start, start + chunkSize); // 分片 blob对象\n        const fd = new FormData();\n        fd.append(\"chunk\", chunk);\n        fd.append(\"hash\", start);\n        fd.append(\"fileName\", file.name)\n        // 上传 利用async实现，同步请求\n        let per = Math.floor(100 * start / file.size );\n\n        if ((file.size - start) < chunkSize) {\n          per = 100;\n        }\n     \n        await postAjax(url, fd).then(res => {\n          $('#bar').css({'width': per + \"%\",});\n          $('#bar').html(per + '%');\n        })\n      }\n``` \n\n此时我们会等待一条船到达重庆，再让下一条船出发，河里同时只有一条船通行，就是说分片请求会等待上一个完成。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-bd2b954aa5060495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n##### 3.3 并发上传\n为了利用浏览器的并发能力，把请求分批发送，每次并发11个，node.js同一个IP最多可以异步处理11个请求。\n\n\n```js\nconst chunkedUpload = async (file) => {\n++ const chunkSize = 1024;\n++ let postQueue = [];\n++ const parallelNum = 11; //谷歌最大线程数量 大于11后提效不明显\n        for (let start = 0; start <= file.size; start += chunkSize) {\n          const chunk = file.slice(start, start + chunkSize); // 分片 blob对象\n          const fd = new FormData();\n          fd.append(\"chunk\", chunk);\n+         fd.append(\"hash\", start); //node.js 接受时做为文件名\n          fd.append(\"fileName\", file.name)\n\n+         let per = Math.floor(100 * start / file.size );\n          \n+         if ((file.size - start) < chunkSize) {\n+            per = 100;\n+          }\n        \n+          // 一个线程使用完，再发送另一个\n-        await postAjax(url, fd).then(res => {\n-        })\n+        if (postQueue.length < parallelNum) {\n+           postQueue.push(postAjax(url, fd))\n+        }\n\n+        if (postQueue.length >= parallelNum || per === 100) {\n+            // 11个请求并发\n+            await Promise.all(postQueue).then(res => {\n               $('#bar').css({'width': per + \"%\",});\n               $('#bar').html(per + '%');\n+              postQueue = [];\n+            }).catch(err => {\n+                console.error(err)\n+            })\n+          }\n+        }\n};\n\n```\n\n此时，我们可以同时发出11条船，等这11条到达重庆，开始下一轮，重新发送11条船，这样就能缩短运输时间啦。\n\n\n![](https://upload-images.jianshu.io/upload_images/15312191-4e8459cce3024de9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n##### 3.4 any版\n\n```js\n...\n       if (postQueue.length < parallelNum) {\n-          postQueue.push(postAjax(url, fd))\n+          postQueue.push({post: (postAjax(url, fd)), hash: start} )\n        }\n       \n        let per = Math.floor(100 * start / file.size );\n\n        if ((file.size - start) < chunkSize) {\n          per = 100;\n        }\n        if (postQueue.length >= parallelNum || per === 100) {\n          // 维持一个请求队列，一个请求完成加入一个，不用等待上一轮完成\n+         const postApiQueues = postQueue.map(item => item.post)\n          await Promise.any(postApiQueues).then(res => {\n+           let hash = res.hash\n+           const index = postQueue.find(item => item.hash = hash)\n+           postQueue.splice(index, 1)\n-           postQueue = [];\n            $('#bar').css({'width': per + \"%\",});\n            $('#bar').html(per + '%');\n            if (per >= 100) {\n              postAjax(mergrUrl, fd).then(res => {\n              \n            })\n          }\n          }).catch(err => {\n              console.error(err)\n            })\n        }\n...\n```\n\n把以上代码Promise.all 改成 Promise.any\n\n这样等任何一条船到达重启，我们就可以开始马上让一艘船发货。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-71a3a9bb01e4fb24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 4.文件接收\n##### 4.1 node.js 接收文件流\n\n+ app.js 接收文件流\n\n```js\nconst express = require(\"express\");\nconst app = express();\napp.use(express.static(\"public\"));\nconst multiparty = require(\"multiparty\");\nconst fs = require(\"fs-extra\");\n\nconst path = require(\"path\");\nconst UPLOAD_DIR = path.resolve(__dirname);\n\n\napp.get(\"/\", (req, res) => {\n  res.sendFile(`${__dirname}/index.html`);\n});\nlet FILE_NAME = \"\";\nlet chunkDir = \"\";\n\napp.post(\"/file/uploading\", (req, res, next) => {\n  /* 生成multiparty对象，并配置上传目标路径 */\n  var form = new multiparty.Form();\n  form.parse(req, async (err, fields, files) => {\n    if(err) return;\n    const [chunk] = files.chunk;\n    const [hash] = fields.hash;\n    const [fileName] = fields.fileName;\n    FILE_NAME = fileName;\n    chunkDir = path.resolve(UPLOAD_DIR, \"fileSteam/fchunkDir\" + fileName);\n\n    if (!fs.existsSync(chunkDir)) {\n      await fs.mkdirs(chunkDir);\n    }\n    // 文件暂时放入 chunkDir文件夹中\n\n    await fs.move(chunk.path, `${chunkDir}/${hash}`);\n\n    res.writeHead(200, { \"content-type\": \"text/plain;charset=utf-8\" });\n    res.write(\"200\");\n    res.end();\n  });\n});\n\n\napp.use(express.static(\"public\")).listen(1000);\n\n```\n\n上面的app.js 解析文件，然后临时存放在 chunkDir+文件名的文件夹下\n![](https://upload-images.jianshu.io/upload_images/15312191-170c242f33c2b3b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**`相当于把高铁车的所有零件放入一个独立的仓库，仓库的名字就是高铁的名字，比如复兴号。`**\n![](https://upload-images.jianshu.io/upload_images/15312191-219adb7744d65304.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n##### 4.2 node.js 合并文件流  生成文件\n\n+ app.js\n\n```js\napp.post(\"/file/uploading\", (req, res, next) => {\n   ......\n});\n\n// 合并chunk\n+ const stream = require(\"./writeStream\");\n\n+ app.post(\"/file/mergrChunk\", async (req, res, next) => {\n+  FILE_NAME = path.resolve(UPLOAD_DIR, \"fileSteam/\" + FILE_NAME);\n+  console.log(FILE_NAME, \"========================\");\n+  let dests = fs.readdirSync(chunkDir);\n+  dests = dests.sort((a, b) => a - b);\n+  await stream.WriteStreamsAsync(dests, FILE_NAME, chunkDir);\n+  await fs.removeSync(chunkDir);\n+  res.write(\"200\");\n+  res.end();\n});\n\napp.use(express.static(\"public\")).listen(1000);\n\n```\n\n前端文件传送完成，向后端发送一个合并请求，合并前把文件排序一下，文件合并操作在writeStream.js中。\n\n+ writeStream.js\n\n```js\nconst fs = require(\"fs\"); // 引入fs模块\nconst path = require(\"path\");\n/**\n * @params dests 文件流\n * @params FILE_NAME  生成的文件名\n * @params chunkDir 文件路径\n */\nconst WriteStreamsAsync = async (dests, FILE_NAME, chunkDir) => {\n  let writeable = fs.createWriteStream(FILE_NAME);\n  for (let i = 0; i < dests.length; i++) {\n    await write(dests[i], writeable, chunkDir);\n  }\n};\n\nconst write = (item, writeable, chunkDir) => {\n  return new Promise((resolve, reject) => {\n    let destPath = path.resolve(__dirname, chunkDir + '/' + item);\n    let readable = fs.createReadStream(destPath);\n    readable.pipe(writeable, { end: false });\n    readable.on(\"end\", () => {\n      // 关闭流之前立即写入最后一个额外的数据块\n      resolve();\n    });\n  });\n};\n\nmodule.exports = { WriteStreamsAsync };\n\n```\n\n利用  fs. createReadStream fs. createWriteStream 文件流api合并文件切片，生成文件，大文件上传完成。\n**`这一步相当于把高铁组装起来，复原了。`**\n![](https://upload-images.jianshu.io/upload_images/15312191-35b45dcce71b98bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 断点续传\n\n断点续传可以，在文件中断后继续上次的传输节点，继续上传。\n\n在网页刷新后，把上传的节点存储到localStorage中，下次上传从localStorage查找是否有这个文件的节点存在，如果有从这个节点上传，如果没有，重新上传。\n\n```js\n  const postAjax = (url,fd) => {\n      const xhr = new XMLHttpRequest();\n      return new Promise((resolve, reject) => {\n        xhr.open('POST', url, true);\n        xhr.onreadystatechange = function() {\n          if (xhr.readyState == 4 && xhr.status == 200) {\n          const res = JSON.parse(xhr.responseText)\n+         if (res.hash) {\n+              window.localStorage.setItem(fileName, res.hash);\n+         }\n            resolve(res)\n          }\n        };\n        xhr.send(fd);\n      })\n    }\n```\n\n```js\nfunction uploadFile() {\n      const file = document.getElementById('file').files[0];\n+      let fileName = window.localStorage.getItem('fileName');\n+      const pointHash = window.localStorage.getItem(fileName) || 0;\n       chunkedUpload(file, +pointHash)\n}\n```\n\n```js\nconst chunkedUpload = async (file, pointHash) => {\n      const chunkSize = 1024 * 10;\n      let postQueue = [];\n      const parallelNum = 25; //谷歌最大线程数量 大于11后提效不明显，node.js在1s内最多异步处理11个请求\n      for (let start = pointHash; start <= file.size; start += chunkSize) {\n        const chunk = file.slice(start, start + chunkSize); // 分片 blob对象\n        const fd = new FormData();\n        fd.append(\"chunk\", chunk);\n        fd.append(\"hash\", start);\n        fd.append(\"fileName\", file.name)\n+        window.localStorage.setItem('fileName', file.name);\n        // 线程并发\n        if (postQueue.length < parallelNum) {\n          postQueue.push({post: (postAjax(url, fd)), hash: start} )\n        }\n       \n        let per = Math.floor(100 * start / file.size );\n\n        if ((file.size - start) < chunkSize) {\n          per = 100;\n        }\n        if (postQueue.length >= parallelNum || per === 100) {\n\n          const postApiQueues = postQueue.map(item => item.post)\n          await Promise.any(postApiQueues).then(res => {\n            let hash = res.hash\n            const index = postQueue.find(item => item.hash = hash)\n            postQueue.splice(index, 1)\n            \n            $('#bar').css({'width': per + \"%\",});\n            $('#bar').html(per + '%');\n            if (per >= 100) {\n              postAjax(mergrUrl, fd).then(res => {\n+                let fileName = window.localStorage.getItem('fileName');\n+                window.localStorage.removeItem(fileName);\n+                window.localStorage.removeItem('fileName');\n              })\n            }\n          }).catch(err => {\n              console.error(err)\n            })\n        }\n      }\n    };\n```\n\n\n#### 速度对比：\n为了便于观测我们先把网络设置成fast3G\n这样能保证带宽不会影响传输速度\n\n\n1.promise.all并行版\n![](https://upload-images.jianshu.io/upload_images/15312191-e78246332d20f4d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n并行上传时间： **32.95S**\n\n2.any版上传\n![](https://upload-images.jianshu.io/upload_images/15312191-e961c71e1378a247.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nany上传时间： **25.96S**\n\n3.await排队版\n![](https://upload-images.jianshu.io/upload_images/15312191-b6f813b2c9b8551d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n排队上传时间： **1.5min**\n\n4.直传版\n![](https://upload-images.jianshu.io/upload_images/15312191-1404e1b43913ddfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n上传时间： **18.88s**\n\n可以看出，在传送速度上。\n\n直传版(**18.88s**) >  any版(**25.96s**)  > 并行版(**32.95s**) > 排队版(**1.5min**)\n\n#### 结论\n\n1.TCP建立请求，关闭请求是非常费时间的。\n2.并行请求速度是排队上传快很多，这个方式是可行的。\n\n[git代码地址](https://github.com/qiudaoermu/node-upload/tree/bigFile)\n","source":"_posts/🌦🌦前端大文件上传.md","raw":"---\ntitle: \"🌦🌦前端大文件上传\"\ndate: 2022-07-12\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-18c6200c98115ddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 背景：\n前端文件上传是非常普遍的功能，当需要上传大文件时会有以下问题。\n\n1.前后端上传时间限制，一次性传输大小限制。\n2.网络抖动等，失败后需要重新上传。\n3.http1.1版本， TCP只有传送一个请求\n4.无进度条，用户体验极差\n\n#### 主要步骤：\n\n\n\n![](https://upload-images.jianshu.io/upload_images/15312191-aa5a7a1d5b785dc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n**前端**：\n**加载文件 ➡️  分片 ➡️  上传**\n\n**node.js**：\n**解析文件**  ➡️   **存放文件碎片**  ➡️   **合并文件**\n\n比如重庆市向上海市订购了一批高铁列车，如果一次性运过来不太现场，没有那么大的船，还有就是一次性运过来，如果路上出事故，需要重新发送一批了，损失严重。\n\n所以我们准备分批发送。\n\n\n#### 1.浏览器加载文件\n\n```html\n  <input id=\"file\" type=\"file\" onchange=\"uploadFile()\"id=\"upload\" />\n  <input type=\"button\" id=\"upload\" value=\"文件上传\" class=\"btn btn-warning\"  onclick=\"handleUpload()\" />\n```\n\n这一步主要是把文件读取到内存里。\n\ndocument.getElementById('file').files 是 FileList类型。\n\ndocument.getElementById('file').files[0] 是File类型的包装器。\n\n> File FileList FileReader关系：\nFileReader只能读取 File或者 blob对象，File对象是[`FileList`](https://developer.mozilla.org/zh-CN/docs/Web/API/FileList)的子集，constructor ==  Blob, 有slice方法。\n\n#### 2.上传文件方式选择\n文件上传采用 formData形式，而不是json。原因json传参需要JSON. stringify序列化\n比如一下代码：\n\n```\nvar xhr = new XMLHttpRequest();\nxhr.open('post','http://localhost:3000/ajaxpost');\nxhr.setReuqestHeader('Content-Type','application/json');\nvar params = JSON.stringify({\n    city: '重庆',\n    spcial: '山城'\n})\nxhr.send(params);\nxhr.onload = function () {\n    console.log(xhr.responseText);    \n}\n```\n\n在序列化过程中，会抹掉一些比如 function File blob的对象，所以采用formData形式进行文件上传。\n\n\n#### 3.上传\n##### 3.1直接上传\n\n+ Promise 封装 ajax\n\n```\n const postAjax = (url,fd) => {\n      const xhr = new XMLHttpRequest();\n      return new Promise((resolve, reject) => {\n        xhr.open('POST', url, true);\n        xhr.onreadystatechange = function() {\n          if (xhr.readyState == 4 && xhr.status == 200) {\n            console.log(xhr.responseText, \"responseText\" )\n            resolve(xhr.responseText)\n          }\n        };\n        xhr.send(fd);\n      })\n    }\n```\n\n```\n const url = \"http://127.0.0.1:1000/file/uploading\"\n function uploadFile() {\n      const file = document.getElementById('file').files[0];\n      blockUpload(file)\n    }\n const blockUpload = (file) => {\n      const fd = new FormData();\n      fd.append(\"file\", file);\n      fd.append(\"fileName\", file.name)\n      postAjax(url, fd);\n    }\n```\n\n##### 3.2 分片上传 \nFile对象可以使用，slice + File.size，对文件进行切割，切割后的chunk实际上是浏览器对象Blob。\n\n```js\n const url = \"http://127.0.0.1:1000/file/uploading\"\n const mergrUrl = \"http://127.0.0.1:1000/file/mergrChunk\"\n const handleUpload = () => {\n        $(\"#file\").click();\n  }\n\n  function uploadFile() {\n      const file = document.getElementById('file').files[0];\n      chunkedUpload(file)\n  }\n\n```\n\n+ 分片\n\n```\n const chunkedUpload = async (file) => {\n      const chunkSize = 1024;\n      for (let start = 0; start <= file.size; start += chunkSize) {\n        const chunk = file.slice(start, start + chunkSize); // 分片 blob对象\n        const fd = new FormData();\n        fd.append(\"chunk\", chunk);\n        fd.append(\"hash\", start);\n        fd.append(\"fileName\", file.name)\n        // 上传 利用async实现，同步请求\n        let per = Math.floor(100 * start / file.size );\n\n        if ((file.size - start) < chunkSize) {\n          per = 100;\n        }\n     \n        await postAjax(url, fd).then(res => {\n          $('#bar').css({'width': per + \"%\",});\n          $('#bar').html(per + '%');\n        })\n      }\n``` \n\n此时我们会等待一条船到达重庆，再让下一条船出发，河里同时只有一条船通行，就是说分片请求会等待上一个完成。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-bd2b954aa5060495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n##### 3.3 并发上传\n为了利用浏览器的并发能力，把请求分批发送，每次并发11个，node.js同一个IP最多可以异步处理11个请求。\n\n\n```js\nconst chunkedUpload = async (file) => {\n++ const chunkSize = 1024;\n++ let postQueue = [];\n++ const parallelNum = 11; //谷歌最大线程数量 大于11后提效不明显\n        for (let start = 0; start <= file.size; start += chunkSize) {\n          const chunk = file.slice(start, start + chunkSize); // 分片 blob对象\n          const fd = new FormData();\n          fd.append(\"chunk\", chunk);\n+         fd.append(\"hash\", start); //node.js 接受时做为文件名\n          fd.append(\"fileName\", file.name)\n\n+         let per = Math.floor(100 * start / file.size );\n          \n+         if ((file.size - start) < chunkSize) {\n+            per = 100;\n+          }\n        \n+          // 一个线程使用完，再发送另一个\n-        await postAjax(url, fd).then(res => {\n-        })\n+        if (postQueue.length < parallelNum) {\n+           postQueue.push(postAjax(url, fd))\n+        }\n\n+        if (postQueue.length >= parallelNum || per === 100) {\n+            // 11个请求并发\n+            await Promise.all(postQueue).then(res => {\n               $('#bar').css({'width': per + \"%\",});\n               $('#bar').html(per + '%');\n+              postQueue = [];\n+            }).catch(err => {\n+                console.error(err)\n+            })\n+          }\n+        }\n};\n\n```\n\n此时，我们可以同时发出11条船，等这11条到达重庆，开始下一轮，重新发送11条船，这样就能缩短运输时间啦。\n\n\n![](https://upload-images.jianshu.io/upload_images/15312191-4e8459cce3024de9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n##### 3.4 any版\n\n```js\n...\n       if (postQueue.length < parallelNum) {\n-          postQueue.push(postAjax(url, fd))\n+          postQueue.push({post: (postAjax(url, fd)), hash: start} )\n        }\n       \n        let per = Math.floor(100 * start / file.size );\n\n        if ((file.size - start) < chunkSize) {\n          per = 100;\n        }\n        if (postQueue.length >= parallelNum || per === 100) {\n          // 维持一个请求队列，一个请求完成加入一个，不用等待上一轮完成\n+         const postApiQueues = postQueue.map(item => item.post)\n          await Promise.any(postApiQueues).then(res => {\n+           let hash = res.hash\n+           const index = postQueue.find(item => item.hash = hash)\n+           postQueue.splice(index, 1)\n-           postQueue = [];\n            $('#bar').css({'width': per + \"%\",});\n            $('#bar').html(per + '%');\n            if (per >= 100) {\n              postAjax(mergrUrl, fd).then(res => {\n              \n            })\n          }\n          }).catch(err => {\n              console.error(err)\n            })\n        }\n...\n```\n\n把以上代码Promise.all 改成 Promise.any\n\n这样等任何一条船到达重启，我们就可以开始马上让一艘船发货。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-71a3a9bb01e4fb24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 4.文件接收\n##### 4.1 node.js 接收文件流\n\n+ app.js 接收文件流\n\n```js\nconst express = require(\"express\");\nconst app = express();\napp.use(express.static(\"public\"));\nconst multiparty = require(\"multiparty\");\nconst fs = require(\"fs-extra\");\n\nconst path = require(\"path\");\nconst UPLOAD_DIR = path.resolve(__dirname);\n\n\napp.get(\"/\", (req, res) => {\n  res.sendFile(`${__dirname}/index.html`);\n});\nlet FILE_NAME = \"\";\nlet chunkDir = \"\";\n\napp.post(\"/file/uploading\", (req, res, next) => {\n  /* 生成multiparty对象，并配置上传目标路径 */\n  var form = new multiparty.Form();\n  form.parse(req, async (err, fields, files) => {\n    if(err) return;\n    const [chunk] = files.chunk;\n    const [hash] = fields.hash;\n    const [fileName] = fields.fileName;\n    FILE_NAME = fileName;\n    chunkDir = path.resolve(UPLOAD_DIR, \"fileSteam/fchunkDir\" + fileName);\n\n    if (!fs.existsSync(chunkDir)) {\n      await fs.mkdirs(chunkDir);\n    }\n    // 文件暂时放入 chunkDir文件夹中\n\n    await fs.move(chunk.path, `${chunkDir}/${hash}`);\n\n    res.writeHead(200, { \"content-type\": \"text/plain;charset=utf-8\" });\n    res.write(\"200\");\n    res.end();\n  });\n});\n\n\napp.use(express.static(\"public\")).listen(1000);\n\n```\n\n上面的app.js 解析文件，然后临时存放在 chunkDir+文件名的文件夹下\n![](https://upload-images.jianshu.io/upload_images/15312191-170c242f33c2b3b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**`相当于把高铁车的所有零件放入一个独立的仓库，仓库的名字就是高铁的名字，比如复兴号。`**\n![](https://upload-images.jianshu.io/upload_images/15312191-219adb7744d65304.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n##### 4.2 node.js 合并文件流  生成文件\n\n+ app.js\n\n```js\napp.post(\"/file/uploading\", (req, res, next) => {\n   ......\n});\n\n// 合并chunk\n+ const stream = require(\"./writeStream\");\n\n+ app.post(\"/file/mergrChunk\", async (req, res, next) => {\n+  FILE_NAME = path.resolve(UPLOAD_DIR, \"fileSteam/\" + FILE_NAME);\n+  console.log(FILE_NAME, \"========================\");\n+  let dests = fs.readdirSync(chunkDir);\n+  dests = dests.sort((a, b) => a - b);\n+  await stream.WriteStreamsAsync(dests, FILE_NAME, chunkDir);\n+  await fs.removeSync(chunkDir);\n+  res.write(\"200\");\n+  res.end();\n});\n\napp.use(express.static(\"public\")).listen(1000);\n\n```\n\n前端文件传送完成，向后端发送一个合并请求，合并前把文件排序一下，文件合并操作在writeStream.js中。\n\n+ writeStream.js\n\n```js\nconst fs = require(\"fs\"); // 引入fs模块\nconst path = require(\"path\");\n/**\n * @params dests 文件流\n * @params FILE_NAME  生成的文件名\n * @params chunkDir 文件路径\n */\nconst WriteStreamsAsync = async (dests, FILE_NAME, chunkDir) => {\n  let writeable = fs.createWriteStream(FILE_NAME);\n  for (let i = 0; i < dests.length; i++) {\n    await write(dests[i], writeable, chunkDir);\n  }\n};\n\nconst write = (item, writeable, chunkDir) => {\n  return new Promise((resolve, reject) => {\n    let destPath = path.resolve(__dirname, chunkDir + '/' + item);\n    let readable = fs.createReadStream(destPath);\n    readable.pipe(writeable, { end: false });\n    readable.on(\"end\", () => {\n      // 关闭流之前立即写入最后一个额外的数据块\n      resolve();\n    });\n  });\n};\n\nmodule.exports = { WriteStreamsAsync };\n\n```\n\n利用  fs. createReadStream fs. createWriteStream 文件流api合并文件切片，生成文件，大文件上传完成。\n**`这一步相当于把高铁组装起来，复原了。`**\n![](https://upload-images.jianshu.io/upload_images/15312191-35b45dcce71b98bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 断点续传\n\n断点续传可以，在文件中断后继续上次的传输节点，继续上传。\n\n在网页刷新后，把上传的节点存储到localStorage中，下次上传从localStorage查找是否有这个文件的节点存在，如果有从这个节点上传，如果没有，重新上传。\n\n```js\n  const postAjax = (url,fd) => {\n      const xhr = new XMLHttpRequest();\n      return new Promise((resolve, reject) => {\n        xhr.open('POST', url, true);\n        xhr.onreadystatechange = function() {\n          if (xhr.readyState == 4 && xhr.status == 200) {\n          const res = JSON.parse(xhr.responseText)\n+         if (res.hash) {\n+              window.localStorage.setItem(fileName, res.hash);\n+         }\n            resolve(res)\n          }\n        };\n        xhr.send(fd);\n      })\n    }\n```\n\n```js\nfunction uploadFile() {\n      const file = document.getElementById('file').files[0];\n+      let fileName = window.localStorage.getItem('fileName');\n+      const pointHash = window.localStorage.getItem(fileName) || 0;\n       chunkedUpload(file, +pointHash)\n}\n```\n\n```js\nconst chunkedUpload = async (file, pointHash) => {\n      const chunkSize = 1024 * 10;\n      let postQueue = [];\n      const parallelNum = 25; //谷歌最大线程数量 大于11后提效不明显，node.js在1s内最多异步处理11个请求\n      for (let start = pointHash; start <= file.size; start += chunkSize) {\n        const chunk = file.slice(start, start + chunkSize); // 分片 blob对象\n        const fd = new FormData();\n        fd.append(\"chunk\", chunk);\n        fd.append(\"hash\", start);\n        fd.append(\"fileName\", file.name)\n+        window.localStorage.setItem('fileName', file.name);\n        // 线程并发\n        if (postQueue.length < parallelNum) {\n          postQueue.push({post: (postAjax(url, fd)), hash: start} )\n        }\n       \n        let per = Math.floor(100 * start / file.size );\n\n        if ((file.size - start) < chunkSize) {\n          per = 100;\n        }\n        if (postQueue.length >= parallelNum || per === 100) {\n\n          const postApiQueues = postQueue.map(item => item.post)\n          await Promise.any(postApiQueues).then(res => {\n            let hash = res.hash\n            const index = postQueue.find(item => item.hash = hash)\n            postQueue.splice(index, 1)\n            \n            $('#bar').css({'width': per + \"%\",});\n            $('#bar').html(per + '%');\n            if (per >= 100) {\n              postAjax(mergrUrl, fd).then(res => {\n+                let fileName = window.localStorage.getItem('fileName');\n+                window.localStorage.removeItem(fileName);\n+                window.localStorage.removeItem('fileName');\n              })\n            }\n          }).catch(err => {\n              console.error(err)\n            })\n        }\n      }\n    };\n```\n\n\n#### 速度对比：\n为了便于观测我们先把网络设置成fast3G\n这样能保证带宽不会影响传输速度\n\n\n1.promise.all并行版\n![](https://upload-images.jianshu.io/upload_images/15312191-e78246332d20f4d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n并行上传时间： **32.95S**\n\n2.any版上传\n![](https://upload-images.jianshu.io/upload_images/15312191-e961c71e1378a247.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nany上传时间： **25.96S**\n\n3.await排队版\n![](https://upload-images.jianshu.io/upload_images/15312191-b6f813b2c9b8551d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n排队上传时间： **1.5min**\n\n4.直传版\n![](https://upload-images.jianshu.io/upload_images/15312191-1404e1b43913ddfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n上传时间： **18.88s**\n\n可以看出，在传送速度上。\n\n直传版(**18.88s**) >  any版(**25.96s**)  > 并行版(**32.95s**) > 排队版(**1.5min**)\n\n#### 结论\n\n1.TCP建立请求，关闭请求是非常费时间的。\n2.并行请求速度是排队上传快很多，这个方式是可行的。\n\n[git代码地址](https://github.com/qiudaoermu/node-upload/tree/bigFile)\n","slug":"🌦🌦前端大文件上传","published":1,"updated":"2024-05-16T07:39:11.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nw003s2omv30o0cdvb","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-18c6200c98115ddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h4><p>前端文件上传是非常普遍的功能，当需要上传大文件时会有以下问题。</p>\n<p>1.前后端上传时间限制，一次性传输大小限制。<br>2.网络抖动等，失败后需要重新上传。<br>3.http1.1版本， TCP只有传送一个请求<br>4.无进度条，用户体验极差</p>\n<h4 id=\"主要步骤：\"><a href=\"#主要步骤：\" class=\"headerlink\" title=\"主要步骤：\"></a>主要步骤：</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-aa5a7a1d5b785dc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>前端</strong>：<br><strong>加载文件 ➡️  分片 ➡️  上传</strong></p>\n<p><strong>node.js</strong>：<br><strong>解析文件</strong>  ➡️   <strong>存放文件碎片</strong>  ➡️   <strong>合并文件</strong></p>\n<p>比如重庆市向上海市订购了一批高铁列车，如果一次性运过来不太现场，没有那么大的船，还有就是一次性运过来，如果路上出事故，需要重新发送一批了，损失严重。</p>\n<p>所以我们准备分批发送。</p>\n<h4 id=\"1-浏览器加载文件\"><a href=\"#1-浏览器加载文件\" class=\"headerlink\" title=\"1.浏览器加载文件\"></a>1.浏览器加载文件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">onchange</span>=<span class=\"string\">&quot;uploadFile()&quot;</span><span class=\"attr\">id</span>=<span class=\"string\">&quot;upload&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;upload&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;文件上传&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-warning&quot;</span>  <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;handleUpload()&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这一步主要是把文件读取到内存里。</p>\n<p>document.getElementById(‘file’).files 是 FileList类型。</p>\n<p>document.getElementById(‘file’).files[0] 是File类型的包装器。</p>\n<blockquote>\n<p>File FileList FileReader关系：<br>FileReader只能读取 File或者 blob对象，File对象是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileList\"><code>FileList</code></a>的子集，constructor &#x3D;&#x3D;  Blob, 有slice方法。</p>\n</blockquote>\n<h4 id=\"2-上传文件方式选择\"><a href=\"#2-上传文件方式选择\" class=\"headerlink\" title=\"2.上传文件方式选择\"></a>2.上传文件方式选择</h4><p>文件上传采用 formData形式，而不是json。原因json传参需要JSON. stringify序列化<br>比如一下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();</span><br><span class=\"line\">xhr.open(&#x27;post&#x27;,&#x27;http://localhost:3000/ajaxpost&#x27;);</span><br><span class=\"line\">xhr.setReuqestHeader(&#x27;Content-Type&#x27;,&#x27;application/json&#x27;);</span><br><span class=\"line\">var params = JSON.stringify(&#123;</span><br><span class=\"line\">    city: &#x27;重庆&#x27;,</span><br><span class=\"line\">    spcial: &#x27;山城&#x27;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">xhr.send(params);</span><br><span class=\"line\">xhr.onload = function () &#123;</span><br><span class=\"line\">    console.log(xhr.responseText);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在序列化过程中，会抹掉一些比如 function File blob的对象，所以采用formData形式进行文件上传。</p>\n<h4 id=\"3-上传\"><a href=\"#3-上传\" class=\"headerlink\" title=\"3.上传\"></a>3.上传</h4><h5 id=\"3-1直接上传\"><a href=\"#3-1直接上传\" class=\"headerlink\" title=\"3.1直接上传\"></a>3.1直接上传</h5><ul>\n<li>Promise 封装 ajax</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const postAjax = (url,fd) =&gt; &#123;</span><br><span class=\"line\">     const xhr = new XMLHttpRequest();</span><br><span class=\"line\">     return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">       xhr.open(&#x27;POST&#x27;, url, true);</span><br><span class=\"line\">       xhr.onreadystatechange = function() &#123;</span><br><span class=\"line\">         if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class=\"line\">           console.log(xhr.responseText, &quot;responseText&quot; )</span><br><span class=\"line\">           resolve(xhr.responseText)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       xhr.send(fd);</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const url = &quot;http://127.0.0.1:1000/file/uploading&quot;</span><br><span class=\"line\">function uploadFile() &#123;</span><br><span class=\"line\">     const file = document.getElementById(&#x27;file&#x27;).files[0];</span><br><span class=\"line\">     blockUpload(file)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">const blockUpload = (file) =&gt; &#123;</span><br><span class=\"line\">     const fd = new FormData();</span><br><span class=\"line\">     fd.append(&quot;file&quot;, file);</span><br><span class=\"line\">     fd.append(&quot;fileName&quot;, file.name)</span><br><span class=\"line\">     postAjax(url, fd);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-2-分片上传\"><a href=\"#3-2-分片上传\" class=\"headerlink\" title=\"3.2 分片上传\"></a>3.2 分片上传</h5><p>File对象可以使用，slice + File.size，对文件进行切割，切割后的chunk实际上是浏览器对象Blob。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">&quot;http://127.0.0.1:1000/file/uploading&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergrUrl = <span class=\"string\">&quot;http://127.0.0.1:1000/file/mergrChunk&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleUpload</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">       $(<span class=\"string\">&quot;#file&quot;</span>).<span class=\"title function_\">click</span>();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">uploadFile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> file = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;file&#x27;</span>).<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">     <span class=\"title function_\">chunkedUpload</span>(file)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分片</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const chunkedUpload = async (file) =&gt; &#123;</span><br><span class=\"line\">     const chunkSize = 1024;</span><br><span class=\"line\">     for (let start = 0; start &lt;= file.size; start += chunkSize) &#123;</span><br><span class=\"line\">       const chunk = file.slice(start, start + chunkSize); // 分片 blob对象</span><br><span class=\"line\">       const fd = new FormData();</span><br><span class=\"line\">       fd.append(&quot;chunk&quot;, chunk);</span><br><span class=\"line\">       fd.append(&quot;hash&quot;, start);</span><br><span class=\"line\">       fd.append(&quot;fileName&quot;, file.name)</span><br><span class=\"line\">       // 上传 利用async实现，同步请求</span><br><span class=\"line\">       let per = Math.floor(100 * start / file.size );</span><br><span class=\"line\"></span><br><span class=\"line\">       if ((file.size - start) &lt; chunkSize) &#123;</span><br><span class=\"line\">         per = 100;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">       await postAjax(url, fd).then(res =&gt; &#123;</span><br><span class=\"line\">         $(&#x27;#bar&#x27;).css(&#123;&#x27;width&#x27;: per + &quot;%&quot;,&#125;);</span><br><span class=\"line\">         $(&#x27;#bar&#x27;).html(per + &#x27;%&#x27;);</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时我们会等待一条船到达重庆，再让下一条船出发，河里同时只有一条船通行，就是说分片请求会等待上一个完成。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-bd2b954aa5060495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"3-3-并发上传\"><a href=\"#3-3-并发上传\" class=\"headerlink\" title=\"3.3 并发上传\"></a>3.3 并发上传</h5><p>为了利用浏览器的并发能力，把请求分批发送，每次并发11个，node.js同一个IP最多可以异步处理11个请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">chunkedUpload</span> = <span class=\"keyword\">async</span> (<span class=\"params\">file</span>) =&gt; &#123;</span><br><span class=\"line\">++ <span class=\"keyword\">const</span> chunkSize = <span class=\"number\">1024</span>;</span><br><span class=\"line\">++ <span class=\"keyword\">let</span> postQueue = [];</span><br><span class=\"line\">++ <span class=\"keyword\">const</span> parallelNum = <span class=\"number\">11</span>; <span class=\"comment\">//谷歌最大线程数量 大于11后提效不明显</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> start = <span class=\"number\">0</span>; start &lt;= file.<span class=\"property\">size</span>; start += chunkSize) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> chunk = file.<span class=\"title function_\">slice</span>(start, start + chunkSize); <span class=\"comment\">// 分片 blob对象</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">          fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;chunk&quot;</span>, chunk);</span><br><span class=\"line\">+         fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;hash&quot;</span>, start); <span class=\"comment\">//node.js 接受时做为文件名</span></span><br><span class=\"line\">          fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;fileName&quot;</span>, file.<span class=\"property\">name</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">+         <span class=\"keyword\">let</span> per = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"number\">100</span> * start / file.<span class=\"property\">size</span> );</span><br><span class=\"line\">          </span><br><span class=\"line\">+         <span class=\"keyword\">if</span> ((file.<span class=\"property\">size</span> - start) &lt; chunkSize) &#123;</span><br><span class=\"line\">+            per = <span class=\"number\">100</span>;</span><br><span class=\"line\">+          &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">+          <span class=\"comment\">// 一个线程使用完，再发送另一个</span></span><br><span class=\"line\">-        <span class=\"keyword\">await</span> <span class=\"title function_\">postAjax</span>(url, fd).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">-        &#125;)</span><br><span class=\"line\">+        <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &lt; parallelNum) &#123;</span><br><span class=\"line\">+           postQueue.<span class=\"title function_\">push</span>(<span class=\"title function_\">postAjax</span>(url, fd))</span><br><span class=\"line\">+        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+        <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &gt;= parallelNum || per === <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">+            <span class=\"comment\">// 11个请求并发</span></span><br><span class=\"line\">+            <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(postQueue).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">               $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">css</span>(&#123;<span class=\"string\">&#x27;width&#x27;</span>: per + <span class=\"string\">&quot;%&quot;</span>,&#125;);</span><br><span class=\"line\">               $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">html</span>(per + <span class=\"string\">&#x27;%&#x27;</span>);</span><br><span class=\"line\">+              postQueue = [];</span><br><span class=\"line\">+            &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">+                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">+            &#125;)</span><br><span class=\"line\">+          &#125;</span><br><span class=\"line\">+        &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>此时，我们可以同时发出11条船，等这11条到达重庆，开始下一轮，重新发送11条船，这样就能缩短运输时间啦。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4e8459cce3024de9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"3-4-any版\"><a href=\"#3-4-any版\" class=\"headerlink\" title=\"3.4 any版\"></a>3.4 any版</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &lt; parallelNum) &#123;</span><br><span class=\"line\">-          postQueue.<span class=\"title function_\">push</span>(<span class=\"title function_\">postAjax</span>(url, fd))</span><br><span class=\"line\">+          postQueue.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">post</span>: (<span class=\"title function_\">postAjax</span>(url, fd)), <span class=\"attr\">hash</span>: start&#125; )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">let</span> per = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"number\">100</span> * start / file.<span class=\"property\">size</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((file.<span class=\"property\">size</span> - start) &lt; chunkSize) &#123;</span><br><span class=\"line\">          per = <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &gt;= parallelNum || per === <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 维持一个请求队列，一个请求完成加入一个，不用等待上一轮完成</span></span><br><span class=\"line\">+         <span class=\"keyword\">const</span> postApiQueues = postQueue.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">post</span>)</span><br><span class=\"line\">          <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">any</span>(postApiQueues).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">+           <span class=\"keyword\">let</span> hash = res.<span class=\"property\">hash</span></span><br><span class=\"line\">+           <span class=\"keyword\">const</span> index = postQueue.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">hash</span> = hash)</span><br><span class=\"line\">+           postQueue.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">-           postQueue = [];</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">css</span>(&#123;<span class=\"string\">&#x27;width&#x27;</span>: per + <span class=\"string\">&quot;%&quot;</span>,&#125;);</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">html</span>(per + <span class=\"string\">&#x27;%&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (per &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">postAjax</span>(mergrUrl, fd).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">              </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>把以上代码Promise.all 改成 Promise.any</p>\n<p>这样等任何一条船到达重启，我们就可以开始马上让一艘船发货。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-71a3a9bb01e4fb24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"4-文件接收\"><a href=\"#4-文件接收\" class=\"headerlink\" title=\"4.文件接收\"></a>4.文件接收</h4><h5 id=\"4-1-node-js-接收文件流\"><a href=\"#4-1-node-js-接收文件流\" class=\"headerlink\" title=\"4.1 node.js 接收文件流\"></a>4.1 node.js 接收文件流</h5><ul>\n<li>app.js 接收文件流</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&quot;public&quot;</span>));</span><br><span class=\"line\"><span class=\"keyword\">const</span> multiparty = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;multiparty&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs-extra&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">UPLOAD_DIR</span> = path.<span class=\"title function_\">resolve</span>(__dirname);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">sendFile</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/index.html`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">FILE_NAME</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> chunkDir = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/file/uploading&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 生成multiparty对象，并配置上传目标路径 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> multiparty.<span class=\"title class_\">Form</span>();</span><br><span class=\"line\">  form.<span class=\"title function_\">parse</span>(req, <span class=\"keyword\">async</span> (err, fields, files) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [chunk] = files.<span class=\"property\">chunk</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [hash] = fields.<span class=\"property\">hash</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [fileName] = fields.<span class=\"property\">fileName</span>;</span><br><span class=\"line\">    <span class=\"variable constant_\">FILE_NAME</span> = fileName;</span><br><span class=\"line\">    chunkDir = path.<span class=\"title function_\">resolve</span>(<span class=\"variable constant_\">UPLOAD_DIR</span>, <span class=\"string\">&quot;fileSteam/fchunkDir&quot;</span> + fileName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(chunkDir)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> fs.<span class=\"title function_\">mkdirs</span>(chunkDir);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 文件暂时放入 chunkDir文件夹中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> fs.<span class=\"title function_\">move</span>(chunk.<span class=\"property\">path</span>, <span class=\"string\">`<span class=\"subst\">$&#123;chunkDir&#125;</span>/<span class=\"subst\">$&#123;hash&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123; <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain;charset=utf-8&quot;</span> &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;200&quot;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&quot;public&quot;</span>)).<span class=\"title function_\">listen</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的app.js 解析文件，然后临时存放在 chunkDir+文件名的文件夹下<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-170c242f33c2b3b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong><code>相当于把高铁车的所有零件放入一个独立的仓库，仓库的名字就是高铁的名字，比如复兴号。</code></strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-219adb7744d65304.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"4-2-node-js-合并文件流-生成文件\"><a href=\"#4-2-node-js-合并文件流-生成文件\" class=\"headerlink\" title=\"4.2 node.js 合并文件流  生成文件\"></a>4.2 node.js 合并文件流  生成文件</h5><ul>\n<li>app.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/file/uploading&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并chunk</span></span><br><span class=\"line\">+ <span class=\"keyword\">const</span> stream = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./writeStream&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">+ app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/file/mergrChunk&quot;</span>, <span class=\"keyword\">async</span> (req, res, next) =&gt; &#123;</span><br><span class=\"line\">+  <span class=\"variable constant_\">FILE_NAME</span> = path.<span class=\"title function_\">resolve</span>(<span class=\"variable constant_\">UPLOAD_DIR</span>, <span class=\"string\">&quot;fileSteam/&quot;</span> + <span class=\"variable constant_\">FILE_NAME</span>);</span><br><span class=\"line\">+  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">FILE_NAME</span>, <span class=\"string\">&quot;========================&quot;</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">let</span> dests = fs.<span class=\"title function_\">readdirSync</span>(chunkDir);</span><br><span class=\"line\">+  dests = dests.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\">+  <span class=\"keyword\">await</span> stream.<span class=\"title class_\">WriteStreamsAsync</span>(dests, <span class=\"variable constant_\">FILE_NAME</span>, chunkDir);</span><br><span class=\"line\">+  <span class=\"keyword\">await</span> fs.<span class=\"title function_\">removeSync</span>(chunkDir);</span><br><span class=\"line\">+  res.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;200&quot;</span>);</span><br><span class=\"line\">+  res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&quot;public&quot;</span>)).<span class=\"title function_\">listen</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>前端文件传送完成，向后端发送一个合并请求，合并前把文件排序一下，文件合并操作在writeStream.js中。</p>\n<ul>\n<li>writeStream.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>); <span class=\"comment\">// 引入fs模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@params</span> dests 文件流</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@params</span> FILE_NAME  生成的文件名</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@params</span> chunkDir 文件路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">WriteStreamsAsync</span> = <span class=\"keyword\">async</span> (<span class=\"params\">dests, FILE_NAME, chunkDir</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> writeable = fs.<span class=\"title function_\">createWriteStream</span>(<span class=\"variable constant_\">FILE_NAME</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dests.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">write</span>(dests[i], writeable, chunkDir);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">write</span> = (<span class=\"params\">item, writeable, chunkDir</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> destPath = path.<span class=\"title function_\">resolve</span>(__dirname, chunkDir + <span class=\"string\">&#x27;/&#x27;</span> + item);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> readable = fs.<span class=\"title function_\">createReadStream</span>(destPath);</span><br><span class=\"line\">    readable.<span class=\"title function_\">pipe</span>(writeable, &#123; <span class=\"attr\">end</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">    readable.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;end&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 关闭流之前立即写入最后一个额外的数据块</span></span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; <span class=\"title class_\">WriteStreamsAsync</span> &#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>利用  fs. createReadStream fs. createWriteStream 文件流api合并文件切片，生成文件，大文件上传完成。<br><strong><code>这一步相当于把高铁组装起来，复原了。</code></strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-35b45dcce71b98bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"断点续传\"><a href=\"#断点续传\" class=\"headerlink\" title=\"断点续传\"></a>断点续传</h4><p>断点续传可以，在文件中断后继续上次的传输节点，继续上传。</p>\n<p>在网页刷新后，把上传的节点存储到localStorage中，下次上传从localStorage查找是否有这个文件的节点存在，如果有从这个节点上传，如果没有，重新上传。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">postAjax</span> = (<span class=\"params\">url,fd</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> res = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">+         <span class=\"keyword\">if</span> (res.<span class=\"property\">hash</span>) &#123;</span><br><span class=\"line\">+              <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">setItem</span>(fileName, res.<span class=\"property\">hash</span>);</span><br><span class=\"line\">+         &#125;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uploadFile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> file = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;file&#x27;</span>).<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">+      <span class=\"keyword\">let</span> fileName = <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;fileName&#x27;</span>);</span><br><span class=\"line\">+      <span class=\"keyword\">const</span> pointHash = <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">getItem</span>(fileName) || <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"title function_\">chunkedUpload</span>(file, +pointHash)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">chunkedUpload</span> = <span class=\"keyword\">async</span> (<span class=\"params\">file, pointHash</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> chunkSize = <span class=\"number\">1024</span> * <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> postQueue = [];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> parallelNum = <span class=\"number\">25</span>; <span class=\"comment\">//谷歌最大线程数量 大于11后提效不明显，node.js在1s内最多异步处理11个请求</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> start = pointHash; start &lt;= file.<span class=\"property\">size</span>; start += chunkSize) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> chunk = file.<span class=\"title function_\">slice</span>(start, start + chunkSize); <span class=\"comment\">// 分片 blob对象</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">        fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;chunk&quot;</span>, chunk);</span><br><span class=\"line\">        fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;hash&quot;</span>, start);</span><br><span class=\"line\">        fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;fileName&quot;</span>, file.<span class=\"property\">name</span>)</span><br><span class=\"line\">+        <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;fileName&#x27;</span>, file.<span class=\"property\">name</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 线程并发</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &lt; parallelNum) &#123;</span><br><span class=\"line\">          postQueue.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">post</span>: (<span class=\"title function_\">postAjax</span>(url, fd)), <span class=\"attr\">hash</span>: start&#125; )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">let</span> per = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"number\">100</span> * start / file.<span class=\"property\">size</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((file.<span class=\"property\">size</span> - start) &lt; chunkSize) &#123;</span><br><span class=\"line\">          per = <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &gt;= parallelNum || per === <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">const</span> postApiQueues = postQueue.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">post</span>)</span><br><span class=\"line\">          <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">any</span>(postApiQueues).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> hash = res.<span class=\"property\">hash</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> index = postQueue.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">hash</span> = hash)</span><br><span class=\"line\">            postQueue.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">css</span>(&#123;<span class=\"string\">&#x27;width&#x27;</span>: per + <span class=\"string\">&quot;%&quot;</span>,&#125;);</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">html</span>(per + <span class=\"string\">&#x27;%&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (per &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">postAjax</span>(mergrUrl, fd).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">+                <span class=\"keyword\">let</span> fileName = <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;fileName&#x27;</span>);</span><br><span class=\"line\">+                <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">removeItem</span>(fileName);</span><br><span class=\"line\">+                <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">removeItem</span>(<span class=\"string\">&#x27;fileName&#x27;</span>);</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"速度对比：\"><a href=\"#速度对比：\" class=\"headerlink\" title=\"速度对比：\"></a>速度对比：</h4><p>为了便于观测我们先把网络设置成fast3G<br>这样能保证带宽不会影响传输速度</p>\n<p>1.promise.all并行版<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-e78246332d20f4d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>并行上传时间： <strong>32.95S</strong></p>\n<p>2.any版上传<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-e961c71e1378a247.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>any上传时间： <strong>25.96S</strong></p>\n<p>3.await排队版<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b6f813b2c9b8551d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>排队上传时间： <strong>1.5min</strong></p>\n<p>4.直传版<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1404e1b43913ddfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>上传时间： <strong>18.88s</strong></p>\n<p>可以看出，在传送速度上。</p>\n<p>直传版(<strong>18.88s</strong>) &gt;  any版(<strong>25.96s</strong>)  &gt; 并行版(<strong>32.95s</strong>) &gt; 排队版(<strong>1.5min</strong>)</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>1.TCP建立请求，关闭请求是非常费时间的。<br>2.并行请求速度是排队上传快很多，这个方式是可行的。</p>\n<p><a href=\"https://github.com/qiudaoermu/node-upload/tree/bigFile\">git代码地址</a></p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-18c6200c98115ddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h4><p>前端文件上传是非常普遍的功能，当需要上传大文件时会有以下问题。</p>\n<p>1.前后端上传时间限制，一次性传输大小限制。<br>2.网络抖动等，失败后需要重新上传。<br>3.http1.1版本， TCP只有传送一个请求<br>4.无进度条，用户体验极差</p>\n<h4 id=\"主要步骤：\"><a href=\"#主要步骤：\" class=\"headerlink\" title=\"主要步骤：\"></a>主要步骤：</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-aa5a7a1d5b785dc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>前端</strong>：<br><strong>加载文件 ➡️  分片 ➡️  上传</strong></p>\n<p><strong>node.js</strong>：<br><strong>解析文件</strong>  ➡️   <strong>存放文件碎片</strong>  ➡️   <strong>合并文件</strong></p>\n<p>比如重庆市向上海市订购了一批高铁列车，如果一次性运过来不太现场，没有那么大的船，还有就是一次性运过来，如果路上出事故，需要重新发送一批了，损失严重。</p>\n<p>所以我们准备分批发送。</p>\n<h4 id=\"1-浏览器加载文件\"><a href=\"#1-浏览器加载文件\" class=\"headerlink\" title=\"1.浏览器加载文件\"></a>1.浏览器加载文件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">onchange</span>=<span class=\"string\">&quot;uploadFile()&quot;</span><span class=\"attr\">id</span>=<span class=\"string\">&quot;upload&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;upload&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;文件上传&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-warning&quot;</span>  <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;handleUpload()&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这一步主要是把文件读取到内存里。</p>\n<p>document.getElementById(‘file’).files 是 FileList类型。</p>\n<p>document.getElementById(‘file’).files[0] 是File类型的包装器。</p>\n<blockquote>\n<p>File FileList FileReader关系：<br>FileReader只能读取 File或者 blob对象，File对象是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileList\"><code>FileList</code></a>的子集，constructor &#x3D;&#x3D;  Blob, 有slice方法。</p>\n</blockquote>\n<h4 id=\"2-上传文件方式选择\"><a href=\"#2-上传文件方式选择\" class=\"headerlink\" title=\"2.上传文件方式选择\"></a>2.上传文件方式选择</h4><p>文件上传采用 formData形式，而不是json。原因json传参需要JSON. stringify序列化<br>比如一下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();</span><br><span class=\"line\">xhr.open(&#x27;post&#x27;,&#x27;http://localhost:3000/ajaxpost&#x27;);</span><br><span class=\"line\">xhr.setReuqestHeader(&#x27;Content-Type&#x27;,&#x27;application/json&#x27;);</span><br><span class=\"line\">var params = JSON.stringify(&#123;</span><br><span class=\"line\">    city: &#x27;重庆&#x27;,</span><br><span class=\"line\">    spcial: &#x27;山城&#x27;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">xhr.send(params);</span><br><span class=\"line\">xhr.onload = function () &#123;</span><br><span class=\"line\">    console.log(xhr.responseText);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在序列化过程中，会抹掉一些比如 function File blob的对象，所以采用formData形式进行文件上传。</p>\n<h4 id=\"3-上传\"><a href=\"#3-上传\" class=\"headerlink\" title=\"3.上传\"></a>3.上传</h4><h5 id=\"3-1直接上传\"><a href=\"#3-1直接上传\" class=\"headerlink\" title=\"3.1直接上传\"></a>3.1直接上传</h5><ul>\n<li>Promise 封装 ajax</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const postAjax = (url,fd) =&gt; &#123;</span><br><span class=\"line\">     const xhr = new XMLHttpRequest();</span><br><span class=\"line\">     return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">       xhr.open(&#x27;POST&#x27;, url, true);</span><br><span class=\"line\">       xhr.onreadystatechange = function() &#123;</span><br><span class=\"line\">         if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class=\"line\">           console.log(xhr.responseText, &quot;responseText&quot; )</span><br><span class=\"line\">           resolve(xhr.responseText)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       xhr.send(fd);</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const url = &quot;http://127.0.0.1:1000/file/uploading&quot;</span><br><span class=\"line\">function uploadFile() &#123;</span><br><span class=\"line\">     const file = document.getElementById(&#x27;file&#x27;).files[0];</span><br><span class=\"line\">     blockUpload(file)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">const blockUpload = (file) =&gt; &#123;</span><br><span class=\"line\">     const fd = new FormData();</span><br><span class=\"line\">     fd.append(&quot;file&quot;, file);</span><br><span class=\"line\">     fd.append(&quot;fileName&quot;, file.name)</span><br><span class=\"line\">     postAjax(url, fd);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-2-分片上传\"><a href=\"#3-2-分片上传\" class=\"headerlink\" title=\"3.2 分片上传\"></a>3.2 分片上传</h5><p>File对象可以使用，slice + File.size，对文件进行切割，切割后的chunk实际上是浏览器对象Blob。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">&quot;http://127.0.0.1:1000/file/uploading&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergrUrl = <span class=\"string\">&quot;http://127.0.0.1:1000/file/mergrChunk&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleUpload</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">       $(<span class=\"string\">&quot;#file&quot;</span>).<span class=\"title function_\">click</span>();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">uploadFile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> file = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;file&#x27;</span>).<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">     <span class=\"title function_\">chunkedUpload</span>(file)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分片</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const chunkedUpload = async (file) =&gt; &#123;</span><br><span class=\"line\">     const chunkSize = 1024;</span><br><span class=\"line\">     for (let start = 0; start &lt;= file.size; start += chunkSize) &#123;</span><br><span class=\"line\">       const chunk = file.slice(start, start + chunkSize); // 分片 blob对象</span><br><span class=\"line\">       const fd = new FormData();</span><br><span class=\"line\">       fd.append(&quot;chunk&quot;, chunk);</span><br><span class=\"line\">       fd.append(&quot;hash&quot;, start);</span><br><span class=\"line\">       fd.append(&quot;fileName&quot;, file.name)</span><br><span class=\"line\">       // 上传 利用async实现，同步请求</span><br><span class=\"line\">       let per = Math.floor(100 * start / file.size );</span><br><span class=\"line\"></span><br><span class=\"line\">       if ((file.size - start) &lt; chunkSize) &#123;</span><br><span class=\"line\">         per = 100;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">       await postAjax(url, fd).then(res =&gt; &#123;</span><br><span class=\"line\">         $(&#x27;#bar&#x27;).css(&#123;&#x27;width&#x27;: per + &quot;%&quot;,&#125;);</span><br><span class=\"line\">         $(&#x27;#bar&#x27;).html(per + &#x27;%&#x27;);</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时我们会等待一条船到达重庆，再让下一条船出发，河里同时只有一条船通行，就是说分片请求会等待上一个完成。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-bd2b954aa5060495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"3-3-并发上传\"><a href=\"#3-3-并发上传\" class=\"headerlink\" title=\"3.3 并发上传\"></a>3.3 并发上传</h5><p>为了利用浏览器的并发能力，把请求分批发送，每次并发11个，node.js同一个IP最多可以异步处理11个请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">chunkedUpload</span> = <span class=\"keyword\">async</span> (<span class=\"params\">file</span>) =&gt; &#123;</span><br><span class=\"line\">++ <span class=\"keyword\">const</span> chunkSize = <span class=\"number\">1024</span>;</span><br><span class=\"line\">++ <span class=\"keyword\">let</span> postQueue = [];</span><br><span class=\"line\">++ <span class=\"keyword\">const</span> parallelNum = <span class=\"number\">11</span>; <span class=\"comment\">//谷歌最大线程数量 大于11后提效不明显</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> start = <span class=\"number\">0</span>; start &lt;= file.<span class=\"property\">size</span>; start += chunkSize) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> chunk = file.<span class=\"title function_\">slice</span>(start, start + chunkSize); <span class=\"comment\">// 分片 blob对象</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">          fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;chunk&quot;</span>, chunk);</span><br><span class=\"line\">+         fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;hash&quot;</span>, start); <span class=\"comment\">//node.js 接受时做为文件名</span></span><br><span class=\"line\">          fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;fileName&quot;</span>, file.<span class=\"property\">name</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">+         <span class=\"keyword\">let</span> per = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"number\">100</span> * start / file.<span class=\"property\">size</span> );</span><br><span class=\"line\">          </span><br><span class=\"line\">+         <span class=\"keyword\">if</span> ((file.<span class=\"property\">size</span> - start) &lt; chunkSize) &#123;</span><br><span class=\"line\">+            per = <span class=\"number\">100</span>;</span><br><span class=\"line\">+          &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">+          <span class=\"comment\">// 一个线程使用完，再发送另一个</span></span><br><span class=\"line\">-        <span class=\"keyword\">await</span> <span class=\"title function_\">postAjax</span>(url, fd).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">-        &#125;)</span><br><span class=\"line\">+        <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &lt; parallelNum) &#123;</span><br><span class=\"line\">+           postQueue.<span class=\"title function_\">push</span>(<span class=\"title function_\">postAjax</span>(url, fd))</span><br><span class=\"line\">+        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+        <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &gt;= parallelNum || per === <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">+            <span class=\"comment\">// 11个请求并发</span></span><br><span class=\"line\">+            <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(postQueue).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">               $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">css</span>(&#123;<span class=\"string\">&#x27;width&#x27;</span>: per + <span class=\"string\">&quot;%&quot;</span>,&#125;);</span><br><span class=\"line\">               $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">html</span>(per + <span class=\"string\">&#x27;%&#x27;</span>);</span><br><span class=\"line\">+              postQueue = [];</span><br><span class=\"line\">+            &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">+                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">+            &#125;)</span><br><span class=\"line\">+          &#125;</span><br><span class=\"line\">+        &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>此时，我们可以同时发出11条船，等这11条到达重庆，开始下一轮，重新发送11条船，这样就能缩短运输时间啦。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4e8459cce3024de9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"3-4-any版\"><a href=\"#3-4-any版\" class=\"headerlink\" title=\"3.4 any版\"></a>3.4 any版</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &lt; parallelNum) &#123;</span><br><span class=\"line\">-          postQueue.<span class=\"title function_\">push</span>(<span class=\"title function_\">postAjax</span>(url, fd))</span><br><span class=\"line\">+          postQueue.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">post</span>: (<span class=\"title function_\">postAjax</span>(url, fd)), <span class=\"attr\">hash</span>: start&#125; )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">let</span> per = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"number\">100</span> * start / file.<span class=\"property\">size</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((file.<span class=\"property\">size</span> - start) &lt; chunkSize) &#123;</span><br><span class=\"line\">          per = <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &gt;= parallelNum || per === <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 维持一个请求队列，一个请求完成加入一个，不用等待上一轮完成</span></span><br><span class=\"line\">+         <span class=\"keyword\">const</span> postApiQueues = postQueue.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">post</span>)</span><br><span class=\"line\">          <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">any</span>(postApiQueues).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">+           <span class=\"keyword\">let</span> hash = res.<span class=\"property\">hash</span></span><br><span class=\"line\">+           <span class=\"keyword\">const</span> index = postQueue.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">hash</span> = hash)</span><br><span class=\"line\">+           postQueue.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">-           postQueue = [];</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">css</span>(&#123;<span class=\"string\">&#x27;width&#x27;</span>: per + <span class=\"string\">&quot;%&quot;</span>,&#125;);</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">html</span>(per + <span class=\"string\">&#x27;%&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (per &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">postAjax</span>(mergrUrl, fd).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">              </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>把以上代码Promise.all 改成 Promise.any</p>\n<p>这样等任何一条船到达重启，我们就可以开始马上让一艘船发货。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-71a3a9bb01e4fb24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"4-文件接收\"><a href=\"#4-文件接收\" class=\"headerlink\" title=\"4.文件接收\"></a>4.文件接收</h4><h5 id=\"4-1-node-js-接收文件流\"><a href=\"#4-1-node-js-接收文件流\" class=\"headerlink\" title=\"4.1 node.js 接收文件流\"></a>4.1 node.js 接收文件流</h5><ul>\n<li>app.js 接收文件流</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&quot;public&quot;</span>));</span><br><span class=\"line\"><span class=\"keyword\">const</span> multiparty = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;multiparty&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs-extra&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">UPLOAD_DIR</span> = path.<span class=\"title function_\">resolve</span>(__dirname);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">sendFile</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/index.html`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">FILE_NAME</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> chunkDir = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/file/uploading&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 生成multiparty对象，并配置上传目标路径 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> multiparty.<span class=\"title class_\">Form</span>();</span><br><span class=\"line\">  form.<span class=\"title function_\">parse</span>(req, <span class=\"keyword\">async</span> (err, fields, files) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [chunk] = files.<span class=\"property\">chunk</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [hash] = fields.<span class=\"property\">hash</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [fileName] = fields.<span class=\"property\">fileName</span>;</span><br><span class=\"line\">    <span class=\"variable constant_\">FILE_NAME</span> = fileName;</span><br><span class=\"line\">    chunkDir = path.<span class=\"title function_\">resolve</span>(<span class=\"variable constant_\">UPLOAD_DIR</span>, <span class=\"string\">&quot;fileSteam/fchunkDir&quot;</span> + fileName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fs.<span class=\"title function_\">existsSync</span>(chunkDir)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> fs.<span class=\"title function_\">mkdirs</span>(chunkDir);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 文件暂时放入 chunkDir文件夹中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> fs.<span class=\"title function_\">move</span>(chunk.<span class=\"property\">path</span>, <span class=\"string\">`<span class=\"subst\">$&#123;chunkDir&#125;</span>/<span class=\"subst\">$&#123;hash&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123; <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain;charset=utf-8&quot;</span> &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;200&quot;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&quot;public&quot;</span>)).<span class=\"title function_\">listen</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的app.js 解析文件，然后临时存放在 chunkDir+文件名的文件夹下<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-170c242f33c2b3b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong><code>相当于把高铁车的所有零件放入一个独立的仓库，仓库的名字就是高铁的名字，比如复兴号。</code></strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-219adb7744d65304.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"4-2-node-js-合并文件流-生成文件\"><a href=\"#4-2-node-js-合并文件流-生成文件\" class=\"headerlink\" title=\"4.2 node.js 合并文件流  生成文件\"></a>4.2 node.js 合并文件流  生成文件</h5><ul>\n<li>app.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/file/uploading&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并chunk</span></span><br><span class=\"line\">+ <span class=\"keyword\">const</span> stream = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./writeStream&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">+ app.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/file/mergrChunk&quot;</span>, <span class=\"keyword\">async</span> (req, res, next) =&gt; &#123;</span><br><span class=\"line\">+  <span class=\"variable constant_\">FILE_NAME</span> = path.<span class=\"title function_\">resolve</span>(<span class=\"variable constant_\">UPLOAD_DIR</span>, <span class=\"string\">&quot;fileSteam/&quot;</span> + <span class=\"variable constant_\">FILE_NAME</span>);</span><br><span class=\"line\">+  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">FILE_NAME</span>, <span class=\"string\">&quot;========================&quot;</span>);</span><br><span class=\"line\">+  <span class=\"keyword\">let</span> dests = fs.<span class=\"title function_\">readdirSync</span>(chunkDir);</span><br><span class=\"line\">+  dests = dests.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\">+  <span class=\"keyword\">await</span> stream.<span class=\"title class_\">WriteStreamsAsync</span>(dests, <span class=\"variable constant_\">FILE_NAME</span>, chunkDir);</span><br><span class=\"line\">+  <span class=\"keyword\">await</span> fs.<span class=\"title function_\">removeSync</span>(chunkDir);</span><br><span class=\"line\">+  res.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;200&quot;</span>);</span><br><span class=\"line\">+  res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&quot;public&quot;</span>)).<span class=\"title function_\">listen</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>前端文件传送完成，向后端发送一个合并请求，合并前把文件排序一下，文件合并操作在writeStream.js中。</p>\n<ul>\n<li>writeStream.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>); <span class=\"comment\">// 引入fs模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@params</span> dests 文件流</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@params</span> FILE_NAME  生成的文件名</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@params</span> chunkDir 文件路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">WriteStreamsAsync</span> = <span class=\"keyword\">async</span> (<span class=\"params\">dests, FILE_NAME, chunkDir</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> writeable = fs.<span class=\"title function_\">createWriteStream</span>(<span class=\"variable constant_\">FILE_NAME</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dests.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">write</span>(dests[i], writeable, chunkDir);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">write</span> = (<span class=\"params\">item, writeable, chunkDir</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> destPath = path.<span class=\"title function_\">resolve</span>(__dirname, chunkDir + <span class=\"string\">&#x27;/&#x27;</span> + item);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> readable = fs.<span class=\"title function_\">createReadStream</span>(destPath);</span><br><span class=\"line\">    readable.<span class=\"title function_\">pipe</span>(writeable, &#123; <span class=\"attr\">end</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">    readable.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;end&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 关闭流之前立即写入最后一个额外的数据块</span></span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123; <span class=\"title class_\">WriteStreamsAsync</span> &#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>利用  fs. createReadStream fs. createWriteStream 文件流api合并文件切片，生成文件，大文件上传完成。<br><strong><code>这一步相当于把高铁组装起来，复原了。</code></strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-35b45dcce71b98bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"断点续传\"><a href=\"#断点续传\" class=\"headerlink\" title=\"断点续传\"></a>断点续传</h4><p>断点续传可以，在文件中断后继续上次的传输节点，继续上传。</p>\n<p>在网页刷新后，把上传的节点存储到localStorage中，下次上传从localStorage查找是否有这个文件的节点存在，如果有从这个节点上传，如果没有，重新上传。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">postAjax</span> = (<span class=\"params\">url,fd</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> res = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>)</span><br><span class=\"line\">+         <span class=\"keyword\">if</span> (res.<span class=\"property\">hash</span>) &#123;</span><br><span class=\"line\">+              <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">setItem</span>(fileName, res.<span class=\"property\">hash</span>);</span><br><span class=\"line\">+         &#125;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uploadFile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> file = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;file&#x27;</span>).<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">+      <span class=\"keyword\">let</span> fileName = <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;fileName&#x27;</span>);</span><br><span class=\"line\">+      <span class=\"keyword\">const</span> pointHash = <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">getItem</span>(fileName) || <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"title function_\">chunkedUpload</span>(file, +pointHash)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">chunkedUpload</span> = <span class=\"keyword\">async</span> (<span class=\"params\">file, pointHash</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> chunkSize = <span class=\"number\">1024</span> * <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> postQueue = [];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> parallelNum = <span class=\"number\">25</span>; <span class=\"comment\">//谷歌最大线程数量 大于11后提效不明显，node.js在1s内最多异步处理11个请求</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> start = pointHash; start &lt;= file.<span class=\"property\">size</span>; start += chunkSize) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> chunk = file.<span class=\"title function_\">slice</span>(start, start + chunkSize); <span class=\"comment\">// 分片 blob对象</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">        fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;chunk&quot;</span>, chunk);</span><br><span class=\"line\">        fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;hash&quot;</span>, start);</span><br><span class=\"line\">        fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;fileName&quot;</span>, file.<span class=\"property\">name</span>)</span><br><span class=\"line\">+        <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;fileName&#x27;</span>, file.<span class=\"property\">name</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 线程并发</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &lt; parallelNum) &#123;</span><br><span class=\"line\">          postQueue.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">post</span>: (<span class=\"title function_\">postAjax</span>(url, fd)), <span class=\"attr\">hash</span>: start&#125; )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">let</span> per = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"number\">100</span> * start / file.<span class=\"property\">size</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((file.<span class=\"property\">size</span> - start) &lt; chunkSize) &#123;</span><br><span class=\"line\">          per = <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (postQueue.<span class=\"property\">length</span> &gt;= parallelNum || per === <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">const</span> postApiQueues = postQueue.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">post</span>)</span><br><span class=\"line\">          <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">any</span>(postApiQueues).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> hash = res.<span class=\"property\">hash</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> index = postQueue.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">hash</span> = hash)</span><br><span class=\"line\">            postQueue.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">css</span>(&#123;<span class=\"string\">&#x27;width&#x27;</span>: per + <span class=\"string\">&quot;%&quot;</span>,&#125;);</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;#bar&#x27;</span>).<span class=\"title function_\">html</span>(per + <span class=\"string\">&#x27;%&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (per &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">postAjax</span>(mergrUrl, fd).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">+                <span class=\"keyword\">let</span> fileName = <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;fileName&#x27;</span>);</span><br><span class=\"line\">+                <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">removeItem</span>(fileName);</span><br><span class=\"line\">+                <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">removeItem</span>(<span class=\"string\">&#x27;fileName&#x27;</span>);</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"速度对比：\"><a href=\"#速度对比：\" class=\"headerlink\" title=\"速度对比：\"></a>速度对比：</h4><p>为了便于观测我们先把网络设置成fast3G<br>这样能保证带宽不会影响传输速度</p>\n<p>1.promise.all并行版<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-e78246332d20f4d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>并行上传时间： <strong>32.95S</strong></p>\n<p>2.any版上传<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-e961c71e1378a247.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>any上传时间： <strong>25.96S</strong></p>\n<p>3.await排队版<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b6f813b2c9b8551d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>排队上传时间： <strong>1.5min</strong></p>\n<p>4.直传版<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1404e1b43913ddfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>上传时间： <strong>18.88s</strong></p>\n<p>可以看出，在传送速度上。</p>\n<p>直传版(<strong>18.88s</strong>) &gt;  any版(<strong>25.96s</strong>)  &gt; 并行版(<strong>32.95s</strong>) &gt; 排队版(<strong>1.5min</strong>)</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>1.TCP建立请求，关闭请求是非常费时间的。<br>2.并行请求速度是排队上传快很多，这个方式是可行的。</p>\n<p><a href=\"https://github.com/qiudaoermu/node-upload/tree/bigFile\">git代码地址</a></p>\n"},{"title":"🌦🌦小程序框架对比","date":"2023-04-13T16:00:00.000Z","_content":"# \n## 跨端框架深度评测：微信原生小程序、wepy、mpvue、uni-app、taro\n\n## 1.学习门槛\n### DSL语法支持度\n微信原生小程序有自己的语法糖，wepy类似，有一定的学习成本。\n当前前端开发组员有vue2开发经验，上手vue3难度不大。\n和vue语法相似度\nTaro，uniapp \t⭐️⭐️⭐️⭐️\n mpvue           \t⭐️⭐️\n 微信原生小程序，wepy  ⭐️\n\n## 2.跨端支持度\n本次需求只有小程序端，没有对比性\n\n## 3.开发效率体验\nUni-app有自己的IDE，HBuilder 但是UI比较粗糙，用户体检不佳，配置比较麻烦。\n微信小程序有小程序开发者工具。\n都支持CLI，初始化比较简单。\n都可以用vscode开发，差别不大。\n\n## 4.生态社区\n### 微信小程序 ⭐️⭐️⭐️⭐️⭐️\n有内置的UI框架和基础原生API， 开发者工具1.02.1808300 或以上开始已支持npm \n### Uni-app ⭐️⭐️⭐️⭐️\nVue为主，案例比较多，很成熟。\n社区比较强大，插件丰富，但是文档比较混乱，近期工程质量降低，新功能有风险。 \n### Taro ⭐️⭐️⭐️⭐️\n社区丰富，但react插件居多，UI可以使用，taro-ui-vue3, NutUI, \nTaro + vue3 组合案例少\n支持使用  Pinia进行状态管理 \n### Mpvue  ⭐️⭐️\n美团kpi项目，已经停止维护\n### wepy ⭐️\n个人项目，就职腾讯前端，issue回复慢，社区不繁荣。\n为解决微信小程序工程问题和组件数据问题，由于小程序原生的升级，性价比很低。 \n\n## 5.深度开发\n### wepy ⭐️\n开源，通过 wepy-cli 编译，由于社区不繁荣，后期如果开发相关插件，或者定制开发，参考比较少\n### 微信小程序 ⭐️\n闭源，独立优化空间小 ⭐️\n### Uni-app ⭐️⭐️⭐️\n开源，支持分包，编译器Vite ，配置灵活\n### Taro ⭐️⭐️⭐️\n部分开源，支持分包，配置灵活，部分文件编译可选择使用Webpack5 / Vite  \nPs:  总体来说uni-app和Taro差距不大，在工程化方面互相借鉴，趋于同化。\n\n## 结论：\n上述框架都是优秀的小程序框架\nWepy: 已经被原生超越。\nMpvue: 已经停止维护。\n微信原生： 需要一定学习成本。\nUni-ap：案例多，开发比较成熟。\nTaro + vue3：开发案例少，有一定风险，但是有前端同事相关项目检测，可以使用。\n\n","source":"_posts/🌦🌦小程序框架对比.md","raw":"---\ntitle: \"🌦🌦小程序框架对比\"\ndate: 2023-04-14\ntags: \n- 开发日常\n---\n# \n## 跨端框架深度评测：微信原生小程序、wepy、mpvue、uni-app、taro\n\n## 1.学习门槛\n### DSL语法支持度\n微信原生小程序有自己的语法糖，wepy类似，有一定的学习成本。\n当前前端开发组员有vue2开发经验，上手vue3难度不大。\n和vue语法相似度\nTaro，uniapp \t⭐️⭐️⭐️⭐️\n mpvue           \t⭐️⭐️\n 微信原生小程序，wepy  ⭐️\n\n## 2.跨端支持度\n本次需求只有小程序端，没有对比性\n\n## 3.开发效率体验\nUni-app有自己的IDE，HBuilder 但是UI比较粗糙，用户体检不佳，配置比较麻烦。\n微信小程序有小程序开发者工具。\n都支持CLI，初始化比较简单。\n都可以用vscode开发，差别不大。\n\n## 4.生态社区\n### 微信小程序 ⭐️⭐️⭐️⭐️⭐️\n有内置的UI框架和基础原生API， 开发者工具1.02.1808300 或以上开始已支持npm \n### Uni-app ⭐️⭐️⭐️⭐️\nVue为主，案例比较多，很成熟。\n社区比较强大，插件丰富，但是文档比较混乱，近期工程质量降低，新功能有风险。 \n### Taro ⭐️⭐️⭐️⭐️\n社区丰富，但react插件居多，UI可以使用，taro-ui-vue3, NutUI, \nTaro + vue3 组合案例少\n支持使用  Pinia进行状态管理 \n### Mpvue  ⭐️⭐️\n美团kpi项目，已经停止维护\n### wepy ⭐️\n个人项目，就职腾讯前端，issue回复慢，社区不繁荣。\n为解决微信小程序工程问题和组件数据问题，由于小程序原生的升级，性价比很低。 \n\n## 5.深度开发\n### wepy ⭐️\n开源，通过 wepy-cli 编译，由于社区不繁荣，后期如果开发相关插件，或者定制开发，参考比较少\n### 微信小程序 ⭐️\n闭源，独立优化空间小 ⭐️\n### Uni-app ⭐️⭐️⭐️\n开源，支持分包，编译器Vite ，配置灵活\n### Taro ⭐️⭐️⭐️\n部分开源，支持分包，配置灵活，部分文件编译可选择使用Webpack5 / Vite  \nPs:  总体来说uni-app和Taro差距不大，在工程化方面互相借鉴，趋于同化。\n\n## 结论：\n上述框架都是优秀的小程序框架\nWepy: 已经被原生超越。\nMpvue: 已经停止维护。\n微信原生： 需要一定学习成本。\nUni-ap：案例多，开发比较成熟。\nTaro + vue3：开发案例少，有一定风险，但是有前端同事相关项目检测，可以使用。\n\n","slug":"🌦🌦小程序框架对比","published":1,"updated":"2024-05-16T07:39:11.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nx003u2omv1clt2eky","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><div class=\"\"><h2 id=\"跨端框架深度评测：微信原生小程序、wepy、mpvue、uni-app、taro\"><a href=\"#跨端框架深度评测：微信原生小程序、wepy、mpvue、uni-app、taro\" class=\"headerlink\" title=\"跨端框架深度评测：微信原生小程序、wepy、mpvue、uni-app、taro\"></a>跨端框架深度评测：微信原生小程序、wepy、mpvue、uni-app、taro</h2><h2 id=\"1-学习门槛\"><a href=\"#1-学习门槛\" class=\"headerlink\" title=\"1.学习门槛\"></a>1.学习门槛</h2><h3 id=\"DSL语法支持度\"><a href=\"#DSL语法支持度\" class=\"headerlink\" title=\"DSL语法支持度\"></a>DSL语法支持度</h3><p>微信原生小程序有自己的语法糖，wepy类似，有一定的学习成本。<br>当前前端开发组员有vue2开发经验，上手vue3难度不大。<br>和vue语法相似度<br>Taro，uniapp \t⭐️⭐️⭐️⭐️<br> mpvue           \t⭐️⭐️<br> 微信原生小程序，wepy  ⭐️</p>\n</div><div class=\"\"><h2 id=\"2-跨端支持度\"><a href=\"#2-跨端支持度\" class=\"headerlink\" title=\"2.跨端支持度\"></a>2.跨端支持度</h2><p>本次需求只有小程序端，没有对比性</p>\n</div><div class=\"\"><h2 id=\"3-开发效率体验\"><a href=\"#3-开发效率体验\" class=\"headerlink\" title=\"3.开发效率体验\"></a>3.开发效率体验</h2><p>Uni-app有自己的IDE，HBuilder 但是UI比较粗糙，用户体检不佳，配置比较麻烦。<br>微信小程序有小程序开发者工具。<br>都支持CLI，初始化比较简单。<br>都可以用vscode开发，差别不大。</p>\n</div><div class=\"\"><h2 id=\"4-生态社区\"><a href=\"#4-生态社区\" class=\"headerlink\" title=\"4.生态社区\"></a>4.生态社区</h2><h3 id=\"微信小程序-⭐️⭐️⭐️⭐️⭐️\"><a href=\"#微信小程序-⭐️⭐️⭐️⭐️⭐️\" class=\"headerlink\" title=\"微信小程序 ⭐️⭐️⭐️⭐️⭐️\"></a>微信小程序 ⭐️⭐️⭐️⭐️⭐️</h3><p>有内置的UI框架和基础原生API， 开发者工具1.02.1808300 或以上开始已支持npm </p>\n<h3 id=\"Uni-app-⭐️⭐️⭐️⭐️\"><a href=\"#Uni-app-⭐️⭐️⭐️⭐️\" class=\"headerlink\" title=\"Uni-app ⭐️⭐️⭐️⭐️\"></a>Uni-app ⭐️⭐️⭐️⭐️</h3><p>Vue为主，案例比较多，很成熟。<br>社区比较强大，插件丰富，但是文档比较混乱，近期工程质量降低，新功能有风险。 </p>\n<h3 id=\"Taro-⭐️⭐️⭐️⭐️\"><a href=\"#Taro-⭐️⭐️⭐️⭐️\" class=\"headerlink\" title=\"Taro ⭐️⭐️⭐️⭐️\"></a>Taro ⭐️⭐️⭐️⭐️</h3><p>社区丰富，但react插件居多，UI可以使用，taro-ui-vue3, NutUI,<br>Taro + vue3 组合案例少<br>支持使用  Pinia进行状态管理 </p>\n<h3 id=\"Mpvue-⭐️⭐️\"><a href=\"#Mpvue-⭐️⭐️\" class=\"headerlink\" title=\"Mpvue  ⭐️⭐️\"></a>Mpvue  ⭐️⭐️</h3><p>美团kpi项目，已经停止维护</p>\n<h3 id=\"wepy-⭐️\"><a href=\"#wepy-⭐️\" class=\"headerlink\" title=\"wepy ⭐️\"></a>wepy ⭐️</h3><p>个人项目，就职腾讯前端，issue回复慢，社区不繁荣。<br>为解决微信小程序工程问题和组件数据问题，由于小程序原生的升级，性价比很低。 </p>\n</div><div class=\"\"><h2 id=\"5-深度开发\"><a href=\"#5-深度开发\" class=\"headerlink\" title=\"5.深度开发\"></a>5.深度开发</h2><h3 id=\"wepy-⭐️-1\"><a href=\"#wepy-⭐️-1\" class=\"headerlink\" title=\"wepy ⭐️\"></a>wepy ⭐️</h3><p>开源，通过 wepy-cli 编译，由于社区不繁荣，后期如果开发相关插件，或者定制开发，参考比较少</p>\n<h3 id=\"微信小程序-⭐️\"><a href=\"#微信小程序-⭐️\" class=\"headerlink\" title=\"微信小程序 ⭐️\"></a>微信小程序 ⭐️</h3><p>闭源，独立优化空间小 ⭐️</p>\n<h3 id=\"Uni-app-⭐️⭐️⭐️\"><a href=\"#Uni-app-⭐️⭐️⭐️\" class=\"headerlink\" title=\"Uni-app ⭐️⭐️⭐️\"></a>Uni-app ⭐️⭐️⭐️</h3><p>开源，支持分包，编译器Vite ，配置灵活</p>\n<h3 id=\"Taro-⭐️⭐️⭐️\"><a href=\"#Taro-⭐️⭐️⭐️\" class=\"headerlink\" title=\"Taro ⭐️⭐️⭐️\"></a>Taro ⭐️⭐️⭐️</h3><p>部分开源，支持分包，配置灵活，部分文件编译可选择使用Webpack5 &#x2F; Vite<br>Ps:  总体来说uni-app和Taro差距不大，在工程化方面互相借鉴，趋于同化。</p>\n</div><div class=\"\"><h2 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h2><p>上述框架都是优秀的小程序框架<br>Wepy: 已经被原生超越。<br>Mpvue: 已经停止维护。<br>微信原生： 需要一定学习成本。<br>Uni-ap：案例多，开发比较成熟。<br>Taro + vue3：开发案例少，有一定风险，但是有前端同事相关项目检测，可以使用。</p>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h2 id=\"跨端框架深度评测：微信原生小程序、wepy、mpvue、uni-app、taro\"><a href=\"#跨端框架深度评测：微信原生小程序、wepy、mpvue、uni-app、taro\" class=\"headerlink\" title=\"跨端框架深度评测：微信原生小程序、wepy、mpvue、uni-app、taro\"></a>跨端框架深度评测：微信原生小程序、wepy、mpvue、uni-app、taro</h2><h2 id=\"1-学习门槛\"><a href=\"#1-学习门槛\" class=\"headerlink\" title=\"1.学习门槛\"></a>1.学习门槛</h2><h3 id=\"DSL语法支持度\"><a href=\"#DSL语法支持度\" class=\"headerlink\" title=\"DSL语法支持度\"></a>DSL语法支持度</h3><p>微信原生小程序有自己的语法糖，wepy类似，有一定的学习成本。<br>当前前端开发组员有vue2开发经验，上手vue3难度不大。<br>和vue语法相似度<br>Taro，uniapp \t⭐️⭐️⭐️⭐️<br> mpvue           \t⭐️⭐️<br> 微信原生小程序，wepy  ⭐️</p>\n<h2 id=\"2-跨端支持度\"><a href=\"#2-跨端支持度\" class=\"headerlink\" title=\"2.跨端支持度\"></a>2.跨端支持度</h2><p>本次需求只有小程序端，没有对比性</p>\n<h2 id=\"3-开发效率体验\"><a href=\"#3-开发效率体验\" class=\"headerlink\" title=\"3.开发效率体验\"></a>3.开发效率体验</h2><p>Uni-app有自己的IDE，HBuilder 但是UI比较粗糙，用户体检不佳，配置比较麻烦。<br>微信小程序有小程序开发者工具。<br>都支持CLI，初始化比较简单。<br>都可以用vscode开发，差别不大。</p>\n<h2 id=\"4-生态社区\"><a href=\"#4-生态社区\" class=\"headerlink\" title=\"4.生态社区\"></a>4.生态社区</h2><h3 id=\"微信小程序-⭐️⭐️⭐️⭐️⭐️\"><a href=\"#微信小程序-⭐️⭐️⭐️⭐️⭐️\" class=\"headerlink\" title=\"微信小程序 ⭐️⭐️⭐️⭐️⭐️\"></a>微信小程序 ⭐️⭐️⭐️⭐️⭐️</h3><p>有内置的UI框架和基础原生API， 开发者工具1.02.1808300 或以上开始已支持npm </p>\n<h3 id=\"Uni-app-⭐️⭐️⭐️⭐️\"><a href=\"#Uni-app-⭐️⭐️⭐️⭐️\" class=\"headerlink\" title=\"Uni-app ⭐️⭐️⭐️⭐️\"></a>Uni-app ⭐️⭐️⭐️⭐️</h3><p>Vue为主，案例比较多，很成熟。<br>社区比较强大，插件丰富，但是文档比较混乱，近期工程质量降低，新功能有风险。 </p>\n<h3 id=\"Taro-⭐️⭐️⭐️⭐️\"><a href=\"#Taro-⭐️⭐️⭐️⭐️\" class=\"headerlink\" title=\"Taro ⭐️⭐️⭐️⭐️\"></a>Taro ⭐️⭐️⭐️⭐️</h3><p>社区丰富，但react插件居多，UI可以使用，taro-ui-vue3, NutUI,<br>Taro + vue3 组合案例少<br>支持使用  Pinia进行状态管理 </p>\n<h3 id=\"Mpvue-⭐️⭐️\"><a href=\"#Mpvue-⭐️⭐️\" class=\"headerlink\" title=\"Mpvue  ⭐️⭐️\"></a>Mpvue  ⭐️⭐️</h3><p>美团kpi项目，已经停止维护</p>\n<h3 id=\"wepy-⭐️\"><a href=\"#wepy-⭐️\" class=\"headerlink\" title=\"wepy ⭐️\"></a>wepy ⭐️</h3><p>个人项目，就职腾讯前端，issue回复慢，社区不繁荣。<br>为解决微信小程序工程问题和组件数据问题，由于小程序原生的升级，性价比很低。 </p>\n<h2 id=\"5-深度开发\"><a href=\"#5-深度开发\" class=\"headerlink\" title=\"5.深度开发\"></a>5.深度开发</h2><h3 id=\"wepy-⭐️-1\"><a href=\"#wepy-⭐️-1\" class=\"headerlink\" title=\"wepy ⭐️\"></a>wepy ⭐️</h3><p>开源，通过 wepy-cli 编译，由于社区不繁荣，后期如果开发相关插件，或者定制开发，参考比较少</p>\n<h3 id=\"微信小程序-⭐️\"><a href=\"#微信小程序-⭐️\" class=\"headerlink\" title=\"微信小程序 ⭐️\"></a>微信小程序 ⭐️</h3><p>闭源，独立优化空间小 ⭐️</p>\n<h3 id=\"Uni-app-⭐️⭐️⭐️\"><a href=\"#Uni-app-⭐️⭐️⭐️\" class=\"headerlink\" title=\"Uni-app ⭐️⭐️⭐️\"></a>Uni-app ⭐️⭐️⭐️</h3><p>开源，支持分包，编译器Vite ，配置灵活</p>\n<h3 id=\"Taro-⭐️⭐️⭐️\"><a href=\"#Taro-⭐️⭐️⭐️\" class=\"headerlink\" title=\"Taro ⭐️⭐️⭐️\"></a>Taro ⭐️⭐️⭐️</h3><p>部分开源，支持分包，配置灵活，部分文件编译可选择使用Webpack5 &#x2F; Vite<br>Ps:  总体来说uni-app和Taro差距不大，在工程化方面互相借鉴，趋于同化。</p>\n<h2 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h2><p>上述框架都是优秀的小程序框架<br>Wepy: 已经被原生超越。<br>Mpvue: 已经停止维护。<br>微信原生： 需要一定学习成本。<br>Uni-ap：案例多，开发比较成熟。<br>Taro + vue3：开发案例少，有一定风险，但是有前端同事相关项目检测，可以使用。</p>\n"},{"title":"🌦🌦数组删除某个下标对象","date":"2021-07-15T16:00:00.000Z","_content":"\n#### 1.splice\n> splice(index, num)\nindex: 下标\nnum: 删除的数量\n@return 删除的元素\n\n原来的数组会被修改\n\n##### 删掉第三个元素\n```js\nlet dataSource = [\"a\", \"b\", \"c\"]\nlet newDataSource = dataSource.splice(2, 1);\nconsole.log(newDataSource) // [\"c\"]\nconsole.log(dataSource) //  [\"a\", \"b\"]\n```\n##### 在for 循环使用\n比如要依次删除 dataSource中的元素\n\n```js\nlet dataSource = [\"a\", \"b\", \"c\"]\nfor (let i = 0; i < dataSource.length; i ++) {\n  dataSource.splice(i, 1)\n  console.log(dataSource) // [\"b\", \"c\"],  [\"c\"] , []\n  i = i - 1 // 原来的元素被删掉需要往前一位\n}\n```\n#### 2.slice\n> 2.slice(startIndex, endIndex)\nstartIndex: 开始下标 必填\nendIndex: 结束下标(不包含这个元素) 非必填\n@return 截取的元素\n\n原来的数组不会被修改\n\n```js\nlet dataSource = [\"a\", \"b\", \"c\"]\nlet newDataSource = dataSource.slice(1,2);\nconsole.log(newDataSource) // [\"b\"]\nconsole.log(dataSource) //  [\"a\", \"b\", \"c\"]\n```\n","source":"_posts/🌦🌦数组删除某个下标对象.md","raw":"---\ntitle: \"🌦🌦数组删除某个下标对象\"\ndate: 2021-07-16\ntags: \n- 开发日常\n---\n\n#### 1.splice\n> splice(index, num)\nindex: 下标\nnum: 删除的数量\n@return 删除的元素\n\n原来的数组会被修改\n\n##### 删掉第三个元素\n```js\nlet dataSource = [\"a\", \"b\", \"c\"]\nlet newDataSource = dataSource.splice(2, 1);\nconsole.log(newDataSource) // [\"c\"]\nconsole.log(dataSource) //  [\"a\", \"b\"]\n```\n##### 在for 循环使用\n比如要依次删除 dataSource中的元素\n\n```js\nlet dataSource = [\"a\", \"b\", \"c\"]\nfor (let i = 0; i < dataSource.length; i ++) {\n  dataSource.splice(i, 1)\n  console.log(dataSource) // [\"b\", \"c\"],  [\"c\"] , []\n  i = i - 1 // 原来的元素被删掉需要往前一位\n}\n```\n#### 2.slice\n> 2.slice(startIndex, endIndex)\nstartIndex: 开始下标 必填\nendIndex: 结束下标(不包含这个元素) 非必填\n@return 截取的元素\n\n原来的数组不会被修改\n\n```js\nlet dataSource = [\"a\", \"b\", \"c\"]\nlet newDataSource = dataSource.slice(1,2);\nconsole.log(newDataSource) // [\"b\"]\nconsole.log(dataSource) //  [\"a\", \"b\", \"c\"]\n```\n","slug":"🌦🌦数组删除某个下标对象","published":1,"updated":"2024-05-16T07:39:11.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ny003w2omveqp91st6","content":"<h4 id=\"1-splice\"><a href=\"#1-splice\" class=\"headerlink\" title=\"1.splice\"></a>1.splice</h4><blockquote>\n<p>splice(index, num)<br>index: 下标<br>num: 删除的数量<br>@return 删除的元素</p>\n</blockquote>\n<p>原来的数组会被修改</p>\n<h5 id=\"删掉第三个元素\"><a href=\"#删掉第三个元素\" class=\"headerlink\" title=\"删掉第三个元素\"></a>删掉第三个元素</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dataSource = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newDataSource = dataSource.<span class=\"title function_\">splice</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newDataSource) <span class=\"comment\">// [&quot;c&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dataSource) <span class=\"comment\">//  [&quot;a&quot;, &quot;b&quot;]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"在for-循环使用\"><a href=\"#在for-循环使用\" class=\"headerlink\" title=\"在for 循环使用\"></a>在for 循环使用</h5><p>比如要依次删除 dataSource中的元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dataSource = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dataSource.<span class=\"property\">length</span>; i ++) &#123;</span><br><span class=\"line\">  dataSource.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dataSource) <span class=\"comment\">// [&quot;b&quot;, &quot;c&quot;],  [&quot;c&quot;] , []</span></span><br><span class=\"line\">  i = i - <span class=\"number\">1</span> <span class=\"comment\">// 原来的元素被删掉需要往前一位</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-slice\"><a href=\"#2-slice\" class=\"headerlink\" title=\"2.slice\"></a>2.slice</h4><blockquote>\n<p>2.slice(startIndex, endIndex)<br>startIndex: 开始下标 必填<br>endIndex: 结束下标(不包含这个元素) 非必填<br>@return 截取的元素</p>\n</blockquote>\n<p>原来的数组不会被修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dataSource = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newDataSource = dataSource.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newDataSource) <span class=\"comment\">// [&quot;b&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dataSource) <span class=\"comment\">//  [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-splice\"><a href=\"#1-splice\" class=\"headerlink\" title=\"1.splice\"></a>1.splice</h4><blockquote>\n<p>splice(index, num)<br>index: 下标<br>num: 删除的数量<br>@return 删除的元素</p>\n</blockquote>\n<p>原来的数组会被修改</p>\n<h5 id=\"删掉第三个元素\"><a href=\"#删掉第三个元素\" class=\"headerlink\" title=\"删掉第三个元素\"></a>删掉第三个元素</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dataSource = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newDataSource = dataSource.<span class=\"title function_\">splice</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newDataSource) <span class=\"comment\">// [&quot;c&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dataSource) <span class=\"comment\">//  [&quot;a&quot;, &quot;b&quot;]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"在for-循环使用\"><a href=\"#在for-循环使用\" class=\"headerlink\" title=\"在for 循环使用\"></a>在for 循环使用</h5><p>比如要依次删除 dataSource中的元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dataSource = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dataSource.<span class=\"property\">length</span>; i ++) &#123;</span><br><span class=\"line\">  dataSource.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dataSource) <span class=\"comment\">// [&quot;b&quot;, &quot;c&quot;],  [&quot;c&quot;] , []</span></span><br><span class=\"line\">  i = i - <span class=\"number\">1</span> <span class=\"comment\">// 原来的元素被删掉需要往前一位</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-slice\"><a href=\"#2-slice\" class=\"headerlink\" title=\"2.slice\"></a>2.slice</h4><blockquote>\n<p>2.slice(startIndex, endIndex)<br>startIndex: 开始下标 必填<br>endIndex: 结束下标(不包含这个元素) 非必填<br>@return 截取的元素</p>\n</blockquote>\n<p>原来的数组不会被修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dataSource = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newDataSource = dataSource.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newDataSource) <span class=\"comment\">// [&quot;b&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dataSource) <span class=\"comment\">//  [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"🌦🌦神秘的sass-node","date":"2023-04-20T16:00:00.000Z","_content":"在安装sass-loader过程中，经常会有版本问题，比如\n\n![](https://upload-images.jianshu.io/upload_images/15312191-7955787d8d51eb6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`sass-node`是 C++ 写的npm原生包，原因是sass之前一直是C++,而且C++编译更快。\n\n1.在`webpack`加载`sass-loader`时，`sass-loader`调用`sass-node`去编译`.sass`文件。\n\n2.`sass-node`作为`C++`模块，需要适配不同平台，这就需要编译。\n    这就是`node-gyp`，在执行`npm install`安装包含native模块时，`node-gyp`会自动编译这些模块。\n在sass-node下载过程中，`node-gyp`会把`sass-node`编程成对应平台的二进制文件。\n\n3.不同的`sass-loader`需要不同的`node-gyp`和对应的node.api，所以才有版本问题了。\n\n","source":"_posts/🌦🌦神秘的sass-node.md","raw":"---\ntitle: \"🌦🌦神秘的sass-node\"\ndate: 2023-04-21\ntags: \n- 开发日常\n---\n在安装sass-loader过程中，经常会有版本问题，比如\n\n![](https://upload-images.jianshu.io/upload_images/15312191-7955787d8d51eb6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`sass-node`是 C++ 写的npm原生包，原因是sass之前一直是C++,而且C++编译更快。\n\n1.在`webpack`加载`sass-loader`时，`sass-loader`调用`sass-node`去编译`.sass`文件。\n\n2.`sass-node`作为`C++`模块，需要适配不同平台，这就需要编译。\n    这就是`node-gyp`，在执行`npm install`安装包含native模块时，`node-gyp`会自动编译这些模块。\n在sass-node下载过程中，`node-gyp`会把`sass-node`编程成对应平台的二进制文件。\n\n3.不同的`sass-loader`需要不同的`node-gyp`和对应的node.api，所以才有版本问题了。\n\n","slug":"🌦🌦神秘的sass-node","published":1,"updated":"2024-05-16T07:39:11.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094nz003y2omv8ddoc5tr","content":"<p>在安装sass-loader过程中，经常会有版本问题，比如</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7955787d8d51eb6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><code>sass-node</code>是 C++ 写的npm原生包，原因是sass之前一直是C++,而且C++编译更快。</p>\n<p>1.在<code>webpack</code>加载<code>sass-loader</code>时，<code>sass-loader</code>调用<code>sass-node</code>去编译<code>.sass</code>文件。</p>\n<p>2.<code>sass-node</code>作为<code>C++</code>模块，需要适配不同平台，这就需要编译。<br>    这就是<code>node-gyp</code>，在执行<code>npm install</code>安装包含native模块时，<code>node-gyp</code>会自动编译这些模块。<br>在sass-node下载过程中，<code>node-gyp</code>会把<code>sass-node</code>编程成对应平台的二进制文件。</p>\n<p>3.不同的<code>sass-loader</code>需要不同的<code>node-gyp</code>和对应的node.api，所以才有版本问题了。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>在安装sass-loader过程中，经常会有版本问题，比如</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7955787d8d51eb6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><code>sass-node</code>是 C++ 写的npm原生包，原因是sass之前一直是C++,而且C++编译更快。</p>\n<p>1.在<code>webpack</code>加载<code>sass-loader</code>时，<code>sass-loader</code>调用<code>sass-node</code>去编译<code>.sass</code>文件。</p>\n<p>2.<code>sass-node</code>作为<code>C++</code>模块，需要适配不同平台，这就需要编译。<br>    这就是<code>node-gyp</code>，在执行<code>npm install</code>安装包含native模块时，<code>node-gyp</code>会自动编译这些模块。<br>在sass-node下载过程中，<code>node-gyp</code>会把<code>sass-node</code>编程成对应平台的二进制文件。</p>\n<p>3.不同的<code>sass-loader</code>需要不同的<code>node-gyp</code>和对应的node.api，所以才有版本问题了。</p>\n"},{"title":"🌦🌦移动端适配方案选择","date":"2022-09-19T16:00:00.000Z","_content":"### 一.Flexible方案\n\n核心思路：利用终端宽度，设置body font-size 适配rem。\n\n\n根据上述方案，我们需要将设计稿中的 px 转化为 rem，如果每一次都需要自己计算 px 转换 rem，就太麻烦了。为了简化改过程，衍生出很多 px 转换 rem 的小工具。其中使用最为广泛的是 [postcss-px2rem](https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fpostcss-px2rem \"https://www.npmjs.com/package/postcss-px2rem\") 。使用该用具，在实际开发中直接按照设计稿写 px 就可以了。\n\n\n示例：\n```\n.selector {\n    width: 150px;\n    height: 64px; /*px*/\n    font-size: 28px; /*px*/\n    border: 1px solid #ddd; /*no*/\n}\n```\n\n使用插件转换后：\n\n```\n.selector {\n    width: 2rem;\n    border: 1px solid #ddd;\n}\n[data-dpr=\"1\"] .selector {\n    height: 32px;\n    font-size: 14px;\n}\n[data-dpr=\"2\"] .selector {\n    height: 64px;\n    font-size: 28px;\n}\n[data-dpr=\"3\"] .selector {\n    height: 96px;\n    font-size: 42px;\n}\n```\n**文本字号**不建议使用 rem。前面大家都见证了如何使用 rem 来完成 H5 适配。那么文本又将如何处理适配。是不是也通过rem来做自动适配。显然，我们在 iPhone3G 和 iPhone4 的 Retina 屏下面，希望看到的文本字号是相同的。也就是说，我们不希望文本在 Retina 屏幕下变小，另外，我们希望在大屏手机上看到更多文本，以及，现在绝大多数的字体文件都自带一些点阵尺寸，通常是 16px 和  24px，所以我们不希望出现 13px 和 15px 这样的奇葩尺寸。如此一来，就决定了在制作 H5 的页面中，rem 并不适合用到段落文本上。\n\n\n总结一下，使用动态 rem 方案需要做的工作：\n\n1.  meta 标签设置 viewport 宽度为屏幕宽度；\n2.  根据不同屏幕修改根元素 font-size 大小，一般设置为屏幕宽度的十分之一（可引入 [lib-flexible](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Famfe%2Flib-flexible \"https://github.com/amfe/lib-flexible\") 库，或者自己写相应逻辑）；\n3.  开发环境配置 [postcss-px2rem](https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fpostcss-px2rem \"https://www.npmjs.com/package/postcss-px2rem\") 或者类似插件；\n4.  根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 rem；\n5.  段落文本也按照设计稿写，单位为px，不需要转换为 rem；\n\n#### 缺点：\nflexible对dpr一刀切，无法正确适配屏幕字体。\n\n[lib-flexible](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Famfe%2Flib-flexible \"https://github.com/amfe/lib-flexible\") 文档中有如下一段话，表示 flexible 方案已经可以废弃，推荐使用 vw 视口单位进行适配。\n>由于 viewport 单位得到众多浏览器的兼容，lib-flexible 这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用 viewport 来替代此方案。\n\n### 二、Viewport方案\n\n\n\n核心思路：利用跟元素百分比，子元素都可以使用 这个百分比。有人会问，为什么不直接使用100%呢，因为浏览器的子元素只能继承父元素的高宽，不能继承根元素的百分比。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-8cf771d2a170ba6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nvw单位换算：如果按照375的设计稿为基础， 视口宽度为 100vw 占满整个视口区域，那么 1vw 相当于占整个视口宽度的1%，所以 1px= 1/375*100 vw 所有的页面元素都可以直接进行计算换算成 vw 单位，但是这样计算和百分比方案计算比较类似，都会比较麻烦。\n\nvw 适配方案的流程：\n\n1.  meta 标签设置 viewport 宽度为屏幕宽度；\n2.  开发环境配置 [postcss-px-to-viewport](https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fpostcss-px-to-viewport \"https://www.npmjs.com/package/postcss-px-to-viewport\") 或者类似插件；\n3.  根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 vw；\n4.  段落文本也按照设计稿写，单位为px，不需要转换为 vw；\n> [# Web移动端最强适配方案总结，没想到这么好用！](https://segmentfault.com/a/1190000038159934)\n[# 移动端适配原理与方案详解](https://juejin.cn/post/6959047144065990663#heading-13)\n","source":"_posts/🌦🌦移动端适配方案选择.md","raw":"---\ntitle: \"🌦🌦移动端适配方案选择\"\ndate: 2022-09-20\ntags: \n- 开发日常\n---\n### 一.Flexible方案\n\n核心思路：利用终端宽度，设置body font-size 适配rem。\n\n\n根据上述方案，我们需要将设计稿中的 px 转化为 rem，如果每一次都需要自己计算 px 转换 rem，就太麻烦了。为了简化改过程，衍生出很多 px 转换 rem 的小工具。其中使用最为广泛的是 [postcss-px2rem](https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fpostcss-px2rem \"https://www.npmjs.com/package/postcss-px2rem\") 。使用该用具，在实际开发中直接按照设计稿写 px 就可以了。\n\n\n示例：\n```\n.selector {\n    width: 150px;\n    height: 64px; /*px*/\n    font-size: 28px; /*px*/\n    border: 1px solid #ddd; /*no*/\n}\n```\n\n使用插件转换后：\n\n```\n.selector {\n    width: 2rem;\n    border: 1px solid #ddd;\n}\n[data-dpr=\"1\"] .selector {\n    height: 32px;\n    font-size: 14px;\n}\n[data-dpr=\"2\"] .selector {\n    height: 64px;\n    font-size: 28px;\n}\n[data-dpr=\"3\"] .selector {\n    height: 96px;\n    font-size: 42px;\n}\n```\n**文本字号**不建议使用 rem。前面大家都见证了如何使用 rem 来完成 H5 适配。那么文本又将如何处理适配。是不是也通过rem来做自动适配。显然，我们在 iPhone3G 和 iPhone4 的 Retina 屏下面，希望看到的文本字号是相同的。也就是说，我们不希望文本在 Retina 屏幕下变小，另外，我们希望在大屏手机上看到更多文本，以及，现在绝大多数的字体文件都自带一些点阵尺寸，通常是 16px 和  24px，所以我们不希望出现 13px 和 15px 这样的奇葩尺寸。如此一来，就决定了在制作 H5 的页面中，rem 并不适合用到段落文本上。\n\n\n总结一下，使用动态 rem 方案需要做的工作：\n\n1.  meta 标签设置 viewport 宽度为屏幕宽度；\n2.  根据不同屏幕修改根元素 font-size 大小，一般设置为屏幕宽度的十分之一（可引入 [lib-flexible](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Famfe%2Flib-flexible \"https://github.com/amfe/lib-flexible\") 库，或者自己写相应逻辑）；\n3.  开发环境配置 [postcss-px2rem](https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fpostcss-px2rem \"https://www.npmjs.com/package/postcss-px2rem\") 或者类似插件；\n4.  根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 rem；\n5.  段落文本也按照设计稿写，单位为px，不需要转换为 rem；\n\n#### 缺点：\nflexible对dpr一刀切，无法正确适配屏幕字体。\n\n[lib-flexible](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Famfe%2Flib-flexible \"https://github.com/amfe/lib-flexible\") 文档中有如下一段话，表示 flexible 方案已经可以废弃，推荐使用 vw 视口单位进行适配。\n>由于 viewport 单位得到众多浏览器的兼容，lib-flexible 这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用 viewport 来替代此方案。\n\n### 二、Viewport方案\n\n\n\n核心思路：利用跟元素百分比，子元素都可以使用 这个百分比。有人会问，为什么不直接使用100%呢，因为浏览器的子元素只能继承父元素的高宽，不能继承根元素的百分比。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-8cf771d2a170ba6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nvw单位换算：如果按照375的设计稿为基础， 视口宽度为 100vw 占满整个视口区域，那么 1vw 相当于占整个视口宽度的1%，所以 1px= 1/375*100 vw 所有的页面元素都可以直接进行计算换算成 vw 单位，但是这样计算和百分比方案计算比较类似，都会比较麻烦。\n\nvw 适配方案的流程：\n\n1.  meta 标签设置 viewport 宽度为屏幕宽度；\n2.  开发环境配置 [postcss-px-to-viewport](https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fpostcss-px-to-viewport \"https://www.npmjs.com/package/postcss-px-to-viewport\") 或者类似插件；\n3.  根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 vw；\n4.  段落文本也按照设计稿写，单位为px，不需要转换为 vw；\n> [# Web移动端最强适配方案总结，没想到这么好用！](https://segmentfault.com/a/1190000038159934)\n[# 移动端适配原理与方案详解](https://juejin.cn/post/6959047144065990663#heading-13)\n","slug":"🌦🌦移动端适配方案选择","published":1,"updated":"2024-05-16T07:39:11.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094o000402omv5cwr6b0j","content":"<h3 id=\"一-Flexible方案\"><a href=\"#一-Flexible方案\" class=\"headerlink\" title=\"一.Flexible方案\"></a>一.Flexible方案</h3><p>核心思路：利用终端宽度，设置body font-size 适配rem。</p>\n<p>根据上述方案，我们需要将设计稿中的 px 转化为 rem，如果每一次都需要自己计算 px 转换 rem，就太麻烦了。为了简化改过程，衍生出很多 px 转换 rem 的小工具。其中使用最为广泛的是 <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/postcss-px2rem\" title=\"https://www.npmjs.com/package/postcss-px2rem\">postcss-px2rem</a> 。使用该用具，在实际开发中直接按照设计稿写 px 就可以了。</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.selector &#123;</span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    height: 64px; /*px*/</span><br><span class=\"line\">    font-size: 28px; /*px*/</span><br><span class=\"line\">    border: 1px solid #ddd; /*no*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用插件转换后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.selector &#123;</span><br><span class=\"line\">    width: 2rem;</span><br><span class=\"line\">    border: 1px solid #ddd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[data-dpr=&quot;1&quot;] .selector &#123;</span><br><span class=\"line\">    height: 32px;</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[data-dpr=&quot;2&quot;] .selector &#123;</span><br><span class=\"line\">    height: 64px;</span><br><span class=\"line\">    font-size: 28px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[data-dpr=&quot;3&quot;] .selector &#123;</span><br><span class=\"line\">    height: 96px;</span><br><span class=\"line\">    font-size: 42px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>文本字号</strong>不建议使用 rem。前面大家都见证了如何使用 rem 来完成 H5 适配。那么文本又将如何处理适配。是不是也通过rem来做自动适配。显然，我们在 iPhone3G 和 iPhone4 的 Retina 屏下面，希望看到的文本字号是相同的。也就是说，我们不希望文本在 Retina 屏幕下变小，另外，我们希望在大屏手机上看到更多文本，以及，现在绝大多数的字体文件都自带一些点阵尺寸，通常是 16px 和  24px，所以我们不希望出现 13px 和 15px 这样的奇葩尺寸。如此一来，就决定了在制作 H5 的页面中，rem 并不适合用到段落文本上。</p>\n<p>总结一下，使用动态 rem 方案需要做的工作：</p>\n<ol>\n<li>meta 标签设置 viewport 宽度为屏幕宽度；</li>\n<li>根据不同屏幕修改根元素 font-size 大小，一般设置为屏幕宽度的十分之一（可引入 <a href=\"https://link.juejin.cn/?target=https://github.com/amfe/lib-flexible\" title=\"https://github.com/amfe/lib-flexible\">lib-flexible</a> 库，或者自己写相应逻辑）；</li>\n<li>开发环境配置 <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/postcss-px2rem\" title=\"https://www.npmjs.com/package/postcss-px2rem\">postcss-px2rem</a> 或者类似插件；</li>\n<li>根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 rem；</li>\n<li>段落文本也按照设计稿写，单位为px，不需要转换为 rem；</li>\n</ol>\n<h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><p>flexible对dpr一刀切，无法正确适配屏幕字体。</p>\n<p><a href=\"https://link.juejin.cn/?target=https://github.com/amfe/lib-flexible\" title=\"https://github.com/amfe/lib-flexible\">lib-flexible</a> 文档中有如下一段话，表示 flexible 方案已经可以废弃，推荐使用 vw 视口单位进行适配。</p>\n<blockquote>\n<p>由于 viewport 单位得到众多浏览器的兼容，lib-flexible 这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用 viewport 来替代此方案。</p>\n</blockquote>\n<h3 id=\"二、Viewport方案\"><a href=\"#二、Viewport方案\" class=\"headerlink\" title=\"二、Viewport方案\"></a>二、Viewport方案</h3><p>核心思路：利用跟元素百分比，子元素都可以使用 这个百分比。有人会问，为什么不直接使用100%呢，因为浏览器的子元素只能继承父元素的高宽，不能继承根元素的百分比。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8cf771d2a170ba6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>vw单位换算：如果按照375的设计稿为基础， 视口宽度为 100vw 占满整个视口区域，那么 1vw 相当于占整个视口宽度的1%，所以 1px&#x3D; 1&#x2F;375*100 vw 所有的页面元素都可以直接进行计算换算成 vw 单位，但是这样计算和百分比方案计算比较类似，都会比较麻烦。</p>\n<p>vw 适配方案的流程：</p>\n<ol>\n<li>meta 标签设置 viewport 宽度为屏幕宽度；</li>\n<li>开发环境配置 <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/postcss-px-to-viewport\" title=\"https://www.npmjs.com/package/postcss-px-to-viewport\">postcss-px-to-viewport</a> 或者类似插件；</li>\n<li>根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 vw；</li>\n<li>段落文本也按照设计稿写，单位为px，不需要转换为 vw；<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000038159934\"># Web移动端最强适配方案总结，没想到这么好用！</a><br><a href=\"https://juejin.cn/post/6959047144065990663#heading-13\"># 移动端适配原理与方案详解</a></p>\n</blockquote>\n</li>\n</ol>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-Flexible方案\"><a href=\"#一-Flexible方案\" class=\"headerlink\" title=\"一.Flexible方案\"></a>一.Flexible方案</h3><p>核心思路：利用终端宽度，设置body font-size 适配rem。</p>\n<p>根据上述方案，我们需要将设计稿中的 px 转化为 rem，如果每一次都需要自己计算 px 转换 rem，就太麻烦了。为了简化改过程，衍生出很多 px 转换 rem 的小工具。其中使用最为广泛的是 <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/postcss-px2rem\" title=\"https://www.npmjs.com/package/postcss-px2rem\">postcss-px2rem</a> 。使用该用具，在实际开发中直接按照设计稿写 px 就可以了。</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.selector &#123;</span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    height: 64px; /*px*/</span><br><span class=\"line\">    font-size: 28px; /*px*/</span><br><span class=\"line\">    border: 1px solid #ddd; /*no*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用插件转换后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.selector &#123;</span><br><span class=\"line\">    width: 2rem;</span><br><span class=\"line\">    border: 1px solid #ddd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[data-dpr=&quot;1&quot;] .selector &#123;</span><br><span class=\"line\">    height: 32px;</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[data-dpr=&quot;2&quot;] .selector &#123;</span><br><span class=\"line\">    height: 64px;</span><br><span class=\"line\">    font-size: 28px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[data-dpr=&quot;3&quot;] .selector &#123;</span><br><span class=\"line\">    height: 96px;</span><br><span class=\"line\">    font-size: 42px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>文本字号</strong>不建议使用 rem。前面大家都见证了如何使用 rem 来完成 H5 适配。那么文本又将如何处理适配。是不是也通过rem来做自动适配。显然，我们在 iPhone3G 和 iPhone4 的 Retina 屏下面，希望看到的文本字号是相同的。也就是说，我们不希望文本在 Retina 屏幕下变小，另外，我们希望在大屏手机上看到更多文本，以及，现在绝大多数的字体文件都自带一些点阵尺寸，通常是 16px 和  24px，所以我们不希望出现 13px 和 15px 这样的奇葩尺寸。如此一来，就决定了在制作 H5 的页面中，rem 并不适合用到段落文本上。</p>\n<p>总结一下，使用动态 rem 方案需要做的工作：</p>\n<ol>\n<li>meta 标签设置 viewport 宽度为屏幕宽度；</li>\n<li>根据不同屏幕修改根元素 font-size 大小，一般设置为屏幕宽度的十分之一（可引入 <a href=\"https://link.juejin.cn/?target=https://github.com/amfe/lib-flexible\" title=\"https://github.com/amfe/lib-flexible\">lib-flexible</a> 库，或者自己写相应逻辑）；</li>\n<li>开发环境配置 <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/postcss-px2rem\" title=\"https://www.npmjs.com/package/postcss-px2rem\">postcss-px2rem</a> 或者类似插件；</li>\n<li>根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 rem；</li>\n<li>段落文本也按照设计稿写，单位为px，不需要转换为 rem；</li>\n</ol>\n<h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><p>flexible对dpr一刀切，无法正确适配屏幕字体。</p>\n<p><a href=\"https://link.juejin.cn/?target=https://github.com/amfe/lib-flexible\" title=\"https://github.com/amfe/lib-flexible\">lib-flexible</a> 文档中有如下一段话，表示 flexible 方案已经可以废弃，推荐使用 vw 视口单位进行适配。</p>\n<blockquote>\n<p>由于 viewport 单位得到众多浏览器的兼容，lib-flexible 这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用 viewport 来替代此方案。</p>\n</blockquote>\n<h3 id=\"二、Viewport方案\"><a href=\"#二、Viewport方案\" class=\"headerlink\" title=\"二、Viewport方案\"></a>二、Viewport方案</h3><p>核心思路：利用跟元素百分比，子元素都可以使用 这个百分比。有人会问，为什么不直接使用100%呢，因为浏览器的子元素只能继承父元素的高宽，不能继承根元素的百分比。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8cf771d2a170ba6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>vw单位换算：如果按照375的设计稿为基础， 视口宽度为 100vw 占满整个视口区域，那么 1vw 相当于占整个视口宽度的1%，所以 1px&#x3D; 1&#x2F;375*100 vw 所有的页面元素都可以直接进行计算换算成 vw 单位，但是这样计算和百分比方案计算比较类似，都会比较麻烦。</p>\n<p>vw 适配方案的流程：</p>\n<ol>\n<li>meta 标签设置 viewport 宽度为屏幕宽度；</li>\n<li>开发环境配置 <a href=\"https://link.juejin.cn/?target=https://www.npmjs.com/package/postcss-px-to-viewport\" title=\"https://www.npmjs.com/package/postcss-px-to-viewport\">postcss-px-to-viewport</a> 或者类似插件；</li>\n<li>根据设计稿写样式，元素宽高直接取设计稿宽高即可，单位为 px，插件会将其转换为 vw；</li>\n<li>段落文本也按照设计稿写，单位为px，不需要转换为 vw；<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000038159934\"># Web移动端最强适配方案总结，没想到这么好用！</a><br><a href=\"https://juejin.cn/post/6959047144065990663#heading-13\"># 移动端适配原理与方案详解</a></p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"🍎🍎-Mac-OS-配置环境变量","date":"2021-09-18T16:00:00.000Z","_content":"### Mac端环境变量配置\nMac使用bash做为默认的shell\n\nMAC OS X环境配置的加载顺序\n```\n# 系统级别\n/etc/profile\n/etc/paths \n\n# 用户级别\n~/.zshrc\n```\n前两个是系统级别的环境变量，针对所有用户，后面四个带有~/用户级别的环境变量。\n-前两个环境配置在系统启动时候就会加载。\n- **~/.zshrc** 是zsh shell打开时候加载\n\nps: \n>老mac 是使用**bash** ，配置对应**.bash_profile**文件\n新版本mac默认使用zsh，需要再配置.zshrc（新建.zshrc）\n配置内容：\n```\nif [ -f ~/.bash_profile ]; then\nsource ~/.bash_profile\nfi\n```\n\n\n一、shell中可执行文件的两种执行方式\n\n（1）绝对路径\n\n比如，打开电脑上安装的python3，使用绝对路径方式打开为：\n```\n/usr/local/bin/python3\n```\n（2）使用PATH\n将python3的绝对路径添加到PATH中，直接输入可执行文件名称时：\nshell会根据PATH中提供的路径查找相应的可执行文件。\n\nPATH的全局属性是指将PATH导入系统配置文件/etc/profile中，PATH的局部属性是指将PATH导入在使用的shell的配置文件/etc/zprofile中，也可以在当前用户的主目录下新建自己的专属配置文件～/.zshrc。\n查看系统所有PATH：\n```\necho $PATH\n```\n输出结果如下：\n```\nusr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Frameworks/Mono.framework/Versions/Current/Commands::/Users/chen/.rvm/bin\n```\n如果要新增一个PATH，比如某个文件夹下的可执行文件,**crowbar**命令\n在.zshrc中新增：\n```\nexport PATH=\"/Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1:$PATH\" \n\n//解析 现在的PATH是  /Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1 + PATH\n```\n再次查看系统所有PATH：\n```\n/Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1:/usr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/Users/chen/github/emsdk:/Users/chen/github/emsdk/upstream/emscripten:/Users/chen/github/emsdk/node/14.18.2_64bit/bin:/usr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Frameworks/Mono.framework/Versions/Current/Commands::/Users/chen/.rvm/bin::/Users/chen/.rvm/bin\n```\n全局运行 **crowbar**\n```\n$ crowbar\n$ usage:crowbar filename%\n```\n成功！\n\n### Linux环境变量配置方法\n\nLinux默认bash\n\n1. Linux环境变量配置方法一： export PATH\n```\nexport PATH=/home/uusama/mysql/bin:$PATH\n\n# 或者把PATH放在前面\nexport PATH=$PATH:/home/uusama/mysql/bin\n\n```\n\n注意事项：\n\n- 生效时间：立即生效\n- 生效期限：当前终端有效，窗口关闭后无效\n- 生效范围：仅对当前用户有效\n- 配置的环境变量中不要忘了加上原来的配置，即$PATH部分，避免覆盖原来配置\n\n2.Linux环境变量配置方法二：vim ~/.bashrc\n和Mac一样\n```\nvim ~/.bash_profile\n```\n# 在最后一行加上\n```\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n- 生效时间：使用相同的用户打开新的终端时生效，或者手动source ~/.bash_profile生效\n- 生效期限：永久有效\n- 生效范围：仅对当前用户有效\n- 如果没有~/.bash_profile文件，则可以编辑~/.profile文件或者新建一个\n> [# shell有哪些？Zsh和Bash的区别是什么？](https://www.jianshu.com/p/a891af6f87e0)\n","source":"_posts/🍎🍎-Mac-OS-配置环境变量.md","raw":"---\ntitle: \"🍎🍎-Mac-OS-配置环境变量\"\ndate: 2021-09-19\ntags: \n- mac小天地\n---\n### Mac端环境变量配置\nMac使用bash做为默认的shell\n\nMAC OS X环境配置的加载顺序\n```\n# 系统级别\n/etc/profile\n/etc/paths \n\n# 用户级别\n~/.zshrc\n```\n前两个是系统级别的环境变量，针对所有用户，后面四个带有~/用户级别的环境变量。\n-前两个环境配置在系统启动时候就会加载。\n- **~/.zshrc** 是zsh shell打开时候加载\n\nps: \n>老mac 是使用**bash** ，配置对应**.bash_profile**文件\n新版本mac默认使用zsh，需要再配置.zshrc（新建.zshrc）\n配置内容：\n```\nif [ -f ~/.bash_profile ]; then\nsource ~/.bash_profile\nfi\n```\n\n\n一、shell中可执行文件的两种执行方式\n\n（1）绝对路径\n\n比如，打开电脑上安装的python3，使用绝对路径方式打开为：\n```\n/usr/local/bin/python3\n```\n（2）使用PATH\n将python3的绝对路径添加到PATH中，直接输入可执行文件名称时：\nshell会根据PATH中提供的路径查找相应的可执行文件。\n\nPATH的全局属性是指将PATH导入系统配置文件/etc/profile中，PATH的局部属性是指将PATH导入在使用的shell的配置文件/etc/zprofile中，也可以在当前用户的主目录下新建自己的专属配置文件～/.zshrc。\n查看系统所有PATH：\n```\necho $PATH\n```\n输出结果如下：\n```\nusr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Frameworks/Mono.framework/Versions/Current/Commands::/Users/chen/.rvm/bin\n```\n如果要新增一个PATH，比如某个文件夹下的可执行文件,**crowbar**命令\n在.zshrc中新增：\n```\nexport PATH=\"/Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1:$PATH\" \n\n//解析 现在的PATH是  /Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1 + PATH\n```\n再次查看系统所有PATH：\n```\n/Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1:/usr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/Users/chen/github/emsdk:/Users/chen/github/emsdk/upstream/emscripten:/Users/chen/github/emsdk/node/14.18.2_64bit/bin:/usr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Frameworks/Mono.framework/Versions/Current/Commands::/Users/chen/.rvm/bin::/Users/chen/.rvm/bin\n```\n全局运行 **crowbar**\n```\n$ crowbar\n$ usage:crowbar filename%\n```\n成功！\n\n### Linux环境变量配置方法\n\nLinux默认bash\n\n1. Linux环境变量配置方法一： export PATH\n```\nexport PATH=/home/uusama/mysql/bin:$PATH\n\n# 或者把PATH放在前面\nexport PATH=$PATH:/home/uusama/mysql/bin\n\n```\n\n注意事项：\n\n- 生效时间：立即生效\n- 生效期限：当前终端有效，窗口关闭后无效\n- 生效范围：仅对当前用户有效\n- 配置的环境变量中不要忘了加上原来的配置，即$PATH部分，避免覆盖原来配置\n\n2.Linux环境变量配置方法二：vim ~/.bashrc\n和Mac一样\n```\nvim ~/.bash_profile\n```\n# 在最后一行加上\n```\nexport PATH=$PATH:/home/uusama/mysql/bin\n```\n\n注意事项：\n\n- 生效时间：使用相同的用户打开新的终端时生效，或者手动source ~/.bash_profile生效\n- 生效期限：永久有效\n- 生效范围：仅对当前用户有效\n- 如果没有~/.bash_profile文件，则可以编辑~/.profile文件或者新建一个\n> [# shell有哪些？Zsh和Bash的区别是什么？](https://www.jianshu.com/p/a891af6f87e0)\n","slug":"🍎🍎-Mac-OS-配置环境变量","published":1,"updated":"2024-05-16T07:39:11.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094o100422omvgb2hfarq","content":"<h3 id=\"Mac端环境变量配置\"><a href=\"#Mac端环境变量配置\" class=\"headerlink\" title=\"Mac端环境变量配置\"></a>Mac端环境变量配置</h3><p>Mac使用bash做为默认的shell</p>\n<p>MAC OS X环境配置的加载顺序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 系统级别</span><br><span class=\"line\">/etc/profile</span><br><span class=\"line\">/etc/paths </span><br><span class=\"line\"></span><br><span class=\"line\"># 用户级别</span><br><span class=\"line\">~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>前两个是系统级别的环境变量，针对所有用户，后面四个带有~&#x2F;用户级别的环境变量。<br>-前两个环境配置在系统启动时候就会加载。</p>\n<ul>\n<li><strong>~&#x2F;.zshrc</strong> 是zsh shell打开时候加载</li>\n</ul>\n<p>ps: </p>\n<blockquote>\n<p>老mac 是使用<strong>bash</strong> ，配置对应**.bash_profile**文件<br>新版本mac默认使用zsh，需要再配置.zshrc（新建.zshrc）<br>配置内容：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ -f ~/.bash_profile ]; then</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n\n<p>一、shell中可执行文件的两种执行方式</p>\n<p>（1）绝对路径</p>\n<p>比如，打开电脑上安装的python3，使用绝对路径方式打开为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/python3</span><br></pre></td></tr></table></figure>\n<p>（2）使用PATH<br>将python3的绝对路径添加到PATH中，直接输入可执行文件名称时：<br>shell会根据PATH中提供的路径查找相应的可执行文件。</p>\n<p>PATH的全局属性是指将PATH导入系统配置文件&#x2F;etc&#x2F;profile中，PATH的局部属性是指将PATH导入在使用的shell的配置文件&#x2F;etc&#x2F;zprofile中，也可以在当前用户的主目录下新建自己的专属配置文件～&#x2F;.zshrc。<br>查看系统所有PATH：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Frameworks/Mono.framework/Versions/Current/Commands::/Users/chen/.rvm/bin</span><br></pre></td></tr></table></figure>\n<p>如果要新增一个PATH，比如某个文件夹下的可执行文件,<strong>crowbar</strong>命令<br>在.zshrc中新增：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=&quot;/Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1:$PATH&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">//解析 现在的PATH是  /Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1 + PATH</span><br></pre></td></tr></table></figure>\n<p>再次查看系统所有PATH：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1:/usr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/Users/chen/github/emsdk:/Users/chen/github/emsdk/upstream/emscripten:/Users/chen/github/emsdk/node/14.18.2_64bit/bin:/usr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Frameworks/Mono.framework/Versions/Current/Commands::/Users/chen/.rvm/bin::/Users/chen/.rvm/bin</span><br></pre></td></tr></table></figure>\n<p>全局运行 <strong>crowbar</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ crowbar</span><br><span class=\"line\">$ usage:crowbar filename%</span><br></pre></td></tr></table></figure>\n<p>成功！</p>\n<h3 id=\"Linux环境变量配置方法\"><a href=\"#Linux环境变量配置方法\" class=\"headerlink\" title=\"Linux环境变量配置方法\"></a>Linux环境变量配置方法</h3><p>Linux默认bash</p>\n<ol>\n<li>Linux环境变量配置方法一： export PATH<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=/home/uusama/mysql/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者把PATH放在前面</span><br><span class=\"line\">export PATH=$PATH:/home/uusama/mysql/bin</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>注意事项：</p>\n<ul>\n<li>生效时间：立即生效</li>\n<li>生效期限：当前终端有效，窗口关闭后无效</li>\n<li>生效范围：仅对当前用户有效</li>\n<li>配置的环境变量中不要忘了加上原来的配置，即$PATH部分，避免覆盖原来配置</li>\n</ul>\n<p>2.Linux环境变量配置方法二：vim ~&#x2F;.bashrc<br>和Mac一样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h1 id=\"在最后一行加上\"><a href=\"#在最后一行加上\" class=\"headerlink\" title=\"在最后一行加上\"></a>在最后一行加上</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<ul>\n<li>生效时间：使用相同的用户打开新的终端时生效，或者手动source ~&#x2F;.bash_profile生效</li>\n<li>生效期限：永久有效</li>\n<li>生效范围：仅对当前用户有效</li>\n<li>如果没有<del>&#x2F;.bash_profile文件，则可以编辑</del>&#x2F;.profile文件或者新建一个<blockquote>\n<p><a href=\"https://www.jianshu.com/p/a891af6f87e0\"># shell有哪些？Zsh和Bash的区别是什么？</a></p>\n</blockquote>\n</li>\n</ul>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Mac端环境变量配置\"><a href=\"#Mac端环境变量配置\" class=\"headerlink\" title=\"Mac端环境变量配置\"></a>Mac端环境变量配置</h3><p>Mac使用bash做为默认的shell</p>\n<p>MAC OS X环境配置的加载顺序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 系统级别</span><br><span class=\"line\">/etc/profile</span><br><span class=\"line\">/etc/paths </span><br><span class=\"line\"></span><br><span class=\"line\"># 用户级别</span><br><span class=\"line\">~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>前两个是系统级别的环境变量，针对所有用户，后面四个带有~&#x2F;用户级别的环境变量。<br>-前两个环境配置在系统启动时候就会加载。</p>\n<ul>\n<li><strong>~&#x2F;.zshrc</strong> 是zsh shell打开时候加载</li>\n</ul>\n<p>ps: </p>\n<blockquote>\n<p>老mac 是使用<strong>bash</strong> ，配置对应**.bash_profile**文件<br>新版本mac默认使用zsh，需要再配置.zshrc（新建.zshrc）<br>配置内容：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ -f ~/.bash_profile ]; then</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n\n<p>一、shell中可执行文件的两种执行方式</p>\n<p>（1）绝对路径</p>\n<p>比如，打开电脑上安装的python3，使用绝对路径方式打开为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/python3</span><br></pre></td></tr></table></figure>\n<p>（2）使用PATH<br>将python3的绝对路径添加到PATH中，直接输入可执行文件名称时：<br>shell会根据PATH中提供的路径查找相应的可执行文件。</p>\n<p>PATH的全局属性是指将PATH导入系统配置文件&#x2F;etc&#x2F;profile中，PATH的局部属性是指将PATH导入在使用的shell的配置文件&#x2F;etc&#x2F;zprofile中，也可以在当前用户的主目录下新建自己的专属配置文件～&#x2F;.zshrc。<br>查看系统所有PATH：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Frameworks/Mono.framework/Versions/Current/Commands::/Users/chen/.rvm/bin</span><br></pre></td></tr></table></figure>\n<p>如果要新增一个PATH，比如某个文件夹下的可执行文件,<strong>crowbar</strong>命令<br>在.zshrc中新增：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=&quot;/Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1:$PATH&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">//解析 现在的PATH是  /Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1 + PATH</span><br></pre></td></tr></table></figure>\n<p>再次查看系统所有PATH：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/chen/github/Hexagon/参考代码的回归/crowbar_book_0_1:/usr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/Users/chen/github/emsdk:/Users/chen/github/emsdk/upstream/emscripten:/Users/chen/github/emsdk/node/14.18.2_64bit/bin:/usr/local/opt/llvm/bin:/usr/local/opt/ruby/bin:/Applications/CMake.app/Contents/bin/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Frameworks/Mono.framework/Versions/Current/Commands::/Users/chen/.rvm/bin::/Users/chen/.rvm/bin</span><br></pre></td></tr></table></figure>\n<p>全局运行 <strong>crowbar</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ crowbar</span><br><span class=\"line\">$ usage:crowbar filename%</span><br></pre></td></tr></table></figure>\n<p>成功！</p>\n<h3 id=\"Linux环境变量配置方法\"><a href=\"#Linux环境变量配置方法\" class=\"headerlink\" title=\"Linux环境变量配置方法\"></a>Linux环境变量配置方法</h3><p>Linux默认bash</p>\n<ol>\n<li>Linux环境变量配置方法一： export PATH<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=/home/uusama/mysql/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者把PATH放在前面</span><br><span class=\"line\">export PATH=$PATH:/home/uusama/mysql/bin</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>注意事项：</p>\n<ul>\n<li>生效时间：立即生效</li>\n<li>生效期限：当前终端有效，窗口关闭后无效</li>\n<li>生效范围：仅对当前用户有效</li>\n<li>配置的环境变量中不要忘了加上原来的配置，即$PATH部分，避免覆盖原来配置</li>\n</ul>\n<p>2.Linux环境变量配置方法二：vim ~&#x2F;.bashrc<br>和Mac一样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h1 id=\"在最后一行加上\"><a href=\"#在最后一行加上\" class=\"headerlink\" title=\"在最后一行加上\"></a>在最后一行加上</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/home/uusama/mysql/bin</span><br></pre></td></tr></table></figure>\n\n<p>注意事项：</p>\n<ul>\n<li>生效时间：使用相同的用户打开新的终端时生效，或者手动source ~&#x2F;.bash_profile生效</li>\n<li>生效期限：永久有效</li>\n<li>生效范围：仅对当前用户有效</li>\n<li>如果没有<del>&#x2F;.bash_profile文件，则可以编辑</del>&#x2F;.profile文件或者新建一个<blockquote>\n<p><a href=\"https://www.jianshu.com/p/a891af6f87e0\"># shell有哪些？Zsh和Bash的区别是什么？</a></p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"🍎🍎-Mac-端口和代理","date":"2021-04-09T16:00:00.000Z","_content":"### Mac关闭指定端口\n先执行如下命令\n```\nlsof -i:端口号\n```\n会有类似下面的结果：\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-c30f1e7e5dcc7cd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后执行： \n```\nkill -9 42624\n```\n结束进程就搞定了\n###  Mac 终端开启和关闭代理的方法\n假如你的代理机是你的本机（127.0.0.1），代理的端口为 7070，\n\n\n开启代理很简单，就是用 export 命令设置全局变量 http_proxy 和 https_proxy：\n```\nexport http_proxy=\"http://127.0.0.1:7070\"\nexport https_proxy=\"http://127.0.0.1:7070\"\n```\n关闭代理就是用 unset 命令把全局变量清空：\n\n$ `unset http_proxy`\n\n$ `unset ftp_proxy`\n\n$ `unset all_proxy`\n\n$ `unset https_proxy`\n\n$ `unset no_proxy`\n\n查看是否还存在代理\n```\nenv | grep -i proxy\n```\n> ps : 清空代理需要重新打开 terminal\n","source":"_posts/🍎🍎-Mac-端口和代理.md","raw":"---\ntitle: \"🍎🍎-Mac-端口和代理\"\ndate: 2021-04-10\ntags: \n- mac小天地\n---\n### Mac关闭指定端口\n先执行如下命令\n```\nlsof -i:端口号\n```\n会有类似下面的结果：\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-c30f1e7e5dcc7cd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后执行： \n```\nkill -9 42624\n```\n结束进程就搞定了\n###  Mac 终端开启和关闭代理的方法\n假如你的代理机是你的本机（127.0.0.1），代理的端口为 7070，\n\n\n开启代理很简单，就是用 export 命令设置全局变量 http_proxy 和 https_proxy：\n```\nexport http_proxy=\"http://127.0.0.1:7070\"\nexport https_proxy=\"http://127.0.0.1:7070\"\n```\n关闭代理就是用 unset 命令把全局变量清空：\n\n$ `unset http_proxy`\n\n$ `unset ftp_proxy`\n\n$ `unset all_proxy`\n\n$ `unset https_proxy`\n\n$ `unset no_proxy`\n\n查看是否还存在代理\n```\nenv | grep -i proxy\n```\n> ps : 清空代理需要重新打开 terminal\n","slug":"🍎🍎-Mac-端口和代理","published":1,"updated":"2024-05-16T07:39:11.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094o300442omv0j859moy","content":"<h3 id=\"Mac关闭指定端口\"><a href=\"#Mac关闭指定端口\" class=\"headerlink\" title=\"Mac关闭指定端口\"></a>Mac关闭指定端口</h3><p>先执行如下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:端口号</span><br></pre></td></tr></table></figure>\n<p>会有类似下面的结果：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c30f1e7e5dcc7cd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>然后执行： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -9 42624</span><br></pre></td></tr></table></figure>\n<p>结束进程就搞定了</p>\n<h3 id=\"Mac-终端开启和关闭代理的方法\"><a href=\"#Mac-终端开启和关闭代理的方法\" class=\"headerlink\" title=\"Mac 终端开启和关闭代理的方法\"></a>Mac 终端开启和关闭代理的方法</h3><p>假如你的代理机是你的本机（127.0.0.1），代理的端口为 7070，</p>\n<p>开启代理很简单，就是用 export 命令设置全局变量 http_proxy 和 https_proxy：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=&quot;http://127.0.0.1:7070&quot;</span><br><span class=\"line\">export https_proxy=&quot;http://127.0.0.1:7070&quot;</span><br></pre></td></tr></table></figure>\n<p>关闭代理就是用 unset 命令把全局变量清空：</p>\n<p>$ <code>unset http_proxy</code></p>\n<p>$ <code>unset ftp_proxy</code></p>\n<p>$ <code>unset all_proxy</code></p>\n<p>$ <code>unset https_proxy</code></p>\n<p>$ <code>unset no_proxy</code></p>\n<p>查看是否还存在代理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env | grep -i proxy</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ps : 清空代理需要重新打开 terminal</p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Mac关闭指定端口\"><a href=\"#Mac关闭指定端口\" class=\"headerlink\" title=\"Mac关闭指定端口\"></a>Mac关闭指定端口</h3><p>先执行如下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:端口号</span><br></pre></td></tr></table></figure>\n<p>会有类似下面的结果：<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c30f1e7e5dcc7cd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>然后执行： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -9 42624</span><br></pre></td></tr></table></figure>\n<p>结束进程就搞定了</p>\n<h3 id=\"Mac-终端开启和关闭代理的方法\"><a href=\"#Mac-终端开启和关闭代理的方法\" class=\"headerlink\" title=\"Mac 终端开启和关闭代理的方法\"></a>Mac 终端开启和关闭代理的方法</h3><p>假如你的代理机是你的本机（127.0.0.1），代理的端口为 7070，</p>\n<p>开启代理很简单，就是用 export 命令设置全局变量 http_proxy 和 https_proxy：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=&quot;http://127.0.0.1:7070&quot;</span><br><span class=\"line\">export https_proxy=&quot;http://127.0.0.1:7070&quot;</span><br></pre></td></tr></table></figure>\n<p>关闭代理就是用 unset 命令把全局变量清空：</p>\n<p>$ <code>unset http_proxy</code></p>\n<p>$ <code>unset ftp_proxy</code></p>\n<p>$ <code>unset all_proxy</code></p>\n<p>$ <code>unset https_proxy</code></p>\n<p>$ <code>unset no_proxy</code></p>\n<p>查看是否还存在代理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env | grep -i proxy</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ps : 清空代理需要重新打开 terminal</p>\n</blockquote>\n"},{"title":"🎅🎁为什么esbuild更快","date":"2021-12-25T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-eae9e99f804108a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 1.使用Go语言,编译成原生代码\n很多打包工具是用js写的，但是命令行工具对于JIT编译语言是在性能方面最拉垮。每次打包，js编译器都会把代码当作第一次运行，没有任何优化。当esbuild忙着解析你的js,node忙着解析你的打包工具的js。当node完成包代码解析，esbuild已经可能已经退出了，而你的打包工具甚至还没有开始。\n\n另外，Go被设计成并行的，但js不是。Go的线程之间共享内存，然而js在线程之间序列化数据。Go和js都有并行的垃圾收集器。但是在Go的堆在线程间是共享的，然而js每个线程都有独立的堆。[根据我的测试](https://github.com/evanw/esbuild/issues/111#issuecomment-719910381)，这似乎将 JavaScript 工作线程可能的并行量减少了一半，大概是因为你的 CPU 核心的一半正忙于为另一半收集垃圾。\n\n### 2.并行性被大量使用\nesbuild内部算法经过精心设计，以在可能的情况下使所有可用的 CPU 内核完全饱和。有三个解析阶段：解析，链接，生成代码。解析和生成代码是主要工作，并行性强(链接在很大程度上是一项固有的串行任务)。因为所有的线程共享内存，在导入相同的js库时候，功能可以在不同的点共享。现在很多电脑都是多核的，所有并行是一项很大的胜利。\n\n### 3.esbuild 中的一切都是从头开始编写的\n自己写代码而不是使用第三方库，有很多性能优势。您可以从一开始就考虑性能，确保所有的东西都使用了相同的数据结构，这样可以避免昂贵的转换。并且您可以在必要时进行广泛的架构更改，缺点当然是工作量很大。\n比如很多打包工具使用官方的TS编译器作为解析器。但是这是为TS编译器团队的目标服务的，他们没有将性能作为重中之重。他们的代码大量使用了巨型对象形状和不必要的动态属性访问(这两个都是众所周知的 JavaScript 减速带)。\n即使类型检查被禁用，TypeScript 解析器似乎仍然运行类型检查器。这些问题， esbuild 的自定义 TS 解析器都没有。\n### 4.内存高效利用\n理想情况下，编译器的输入长度主要为 O(n) 复杂度。因此，如果您正在处理大量数据，内存访问速度可能会严重影响性能。数据传输的越少（并且将数据转换成的不同表示形式也越少），编译器运行的越快(好像是废话)。\n\n比如，esbuild只会接触整个js的AST数三次\n1.第一次是词法，全局安装，声明变量\n2.第二次是构建变量，。。这一部分不会翻译，剩下的2023年再写。。\n\n### 5.内存数据紧凑\n可以在内存里紧凑的存储数据，这一点可以使用更少的内存，更适合CPU缓存。所有的对象字段都有类型，而且字段被紧凑的打包在一起。例如，几个布尔标志每个只占用一个字节。Go也有值语义，可以将一个对象直接嵌入到另一个对象中，这样它就“免费”而无需另一个分配。js没有这些特性，而且还有其他特点，比如JIT开销(比如，隐藏类槽)，低效的声明(比如非整数用指针分配在堆上）。\n\n这些因素中的每一个都只是略微显着的加速，但是放在一起就比今天常用的打包器快几个数量级。\n","source":"_posts/🎅🎁为什么esbuild更快.md","raw":"---\ntitle: \"🎅🎁为什么esbuild更快\"\ndate: 2021-12-26\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-eae9e99f804108a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 1.使用Go语言,编译成原生代码\n很多打包工具是用js写的，但是命令行工具对于JIT编译语言是在性能方面最拉垮。每次打包，js编译器都会把代码当作第一次运行，没有任何优化。当esbuild忙着解析你的js,node忙着解析你的打包工具的js。当node完成包代码解析，esbuild已经可能已经退出了，而你的打包工具甚至还没有开始。\n\n另外，Go被设计成并行的，但js不是。Go的线程之间共享内存，然而js在线程之间序列化数据。Go和js都有并行的垃圾收集器。但是在Go的堆在线程间是共享的，然而js每个线程都有独立的堆。[根据我的测试](https://github.com/evanw/esbuild/issues/111#issuecomment-719910381)，这似乎将 JavaScript 工作线程可能的并行量减少了一半，大概是因为你的 CPU 核心的一半正忙于为另一半收集垃圾。\n\n### 2.并行性被大量使用\nesbuild内部算法经过精心设计，以在可能的情况下使所有可用的 CPU 内核完全饱和。有三个解析阶段：解析，链接，生成代码。解析和生成代码是主要工作，并行性强(链接在很大程度上是一项固有的串行任务)。因为所有的线程共享内存，在导入相同的js库时候，功能可以在不同的点共享。现在很多电脑都是多核的，所有并行是一项很大的胜利。\n\n### 3.esbuild 中的一切都是从头开始编写的\n自己写代码而不是使用第三方库，有很多性能优势。您可以从一开始就考虑性能，确保所有的东西都使用了相同的数据结构，这样可以避免昂贵的转换。并且您可以在必要时进行广泛的架构更改，缺点当然是工作量很大。\n比如很多打包工具使用官方的TS编译器作为解析器。但是这是为TS编译器团队的目标服务的，他们没有将性能作为重中之重。他们的代码大量使用了巨型对象形状和不必要的动态属性访问(这两个都是众所周知的 JavaScript 减速带)。\n即使类型检查被禁用，TypeScript 解析器似乎仍然运行类型检查器。这些问题， esbuild 的自定义 TS 解析器都没有。\n### 4.内存高效利用\n理想情况下，编译器的输入长度主要为 O(n) 复杂度。因此，如果您正在处理大量数据，内存访问速度可能会严重影响性能。数据传输的越少（并且将数据转换成的不同表示形式也越少），编译器运行的越快(好像是废话)。\n\n比如，esbuild只会接触整个js的AST数三次\n1.第一次是词法，全局安装，声明变量\n2.第二次是构建变量，。。这一部分不会翻译，剩下的2023年再写。。\n\n### 5.内存数据紧凑\n可以在内存里紧凑的存储数据，这一点可以使用更少的内存，更适合CPU缓存。所有的对象字段都有类型，而且字段被紧凑的打包在一起。例如，几个布尔标志每个只占用一个字节。Go也有值语义，可以将一个对象直接嵌入到另一个对象中，这样它就“免费”而无需另一个分配。js没有这些特性，而且还有其他特点，比如JIT开销(比如，隐藏类槽)，低效的声明(比如非整数用指针分配在堆上）。\n\n这些因素中的每一个都只是略微显着的加速，但是放在一起就比今天常用的打包器快几个数量级。\n","slug":"🎅🎁为什么esbuild更快","published":1,"updated":"2024-05-16T07:39:11.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094o400472omvdwnh6wyn","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-eae9e99f804108a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"1-使用Go语言-编译成原生代码\"><a href=\"#1-使用Go语言-编译成原生代码\" class=\"headerlink\" title=\"1.使用Go语言,编译成原生代码\"></a>1.使用Go语言,编译成原生代码</h3><p>很多打包工具是用js写的，但是命令行工具对于JIT编译语言是在性能方面最拉垮。每次打包，js编译器都会把代码当作第一次运行，没有任何优化。当esbuild忙着解析你的js,node忙着解析你的打包工具的js。当node完成包代码解析，esbuild已经可能已经退出了，而你的打包工具甚至还没有开始。</p>\n<p>另外，Go被设计成并行的，但js不是。Go的线程之间共享内存，然而js在线程之间序列化数据。Go和js都有并行的垃圾收集器。但是在Go的堆在线程间是共享的，然而js每个线程都有独立的堆。<a href=\"https://github.com/evanw/esbuild/issues/111#issuecomment-719910381\">根据我的测试</a>，这似乎将 JavaScript 工作线程可能的并行量减少了一半，大概是因为你的 CPU 核心的一半正忙于为另一半收集垃圾。</p>\n<h3 id=\"2-并行性被大量使用\"><a href=\"#2-并行性被大量使用\" class=\"headerlink\" title=\"2.并行性被大量使用\"></a>2.并行性被大量使用</h3><p>esbuild内部算法经过精心设计，以在可能的情况下使所有可用的 CPU 内核完全饱和。有三个解析阶段：解析，链接，生成代码。解析和生成代码是主要工作，并行性强(链接在很大程度上是一项固有的串行任务)。因为所有的线程共享内存，在导入相同的js库时候，功能可以在不同的点共享。现在很多电脑都是多核的，所有并行是一项很大的胜利。</p>\n<h3 id=\"3-esbuild-中的一切都是从头开始编写的\"><a href=\"#3-esbuild-中的一切都是从头开始编写的\" class=\"headerlink\" title=\"3.esbuild 中的一切都是从头开始编写的\"></a>3.esbuild 中的一切都是从头开始编写的</h3><p>自己写代码而不是使用第三方库，有很多性能优势。您可以从一开始就考虑性能，确保所有的东西都使用了相同的数据结构，这样可以避免昂贵的转换。并且您可以在必要时进行广泛的架构更改，缺点当然是工作量很大。<br>比如很多打包工具使用官方的TS编译器作为解析器。但是这是为TS编译器团队的目标服务的，他们没有将性能作为重中之重。他们的代码大量使用了巨型对象形状和不必要的动态属性访问(这两个都是众所周知的 JavaScript 减速带)。<br>即使类型检查被禁用，TypeScript 解析器似乎仍然运行类型检查器。这些问题， esbuild 的自定义 TS 解析器都没有。</p>\n<h3 id=\"4-内存高效利用\"><a href=\"#4-内存高效利用\" class=\"headerlink\" title=\"4.内存高效利用\"></a>4.内存高效利用</h3><p>理想情况下，编译器的输入长度主要为 O(n) 复杂度。因此，如果您正在处理大量数据，内存访问速度可能会严重影响性能。数据传输的越少（并且将数据转换成的不同表示形式也越少），编译器运行的越快(好像是废话)。</p>\n<p>比如，esbuild只会接触整个js的AST数三次<br>1.第一次是词法，全局安装，声明变量<br>2.第二次是构建变量，。。这一部分不会翻译，剩下的2023年再写。。</p>\n<h3 id=\"5-内存数据紧凑\"><a href=\"#5-内存数据紧凑\" class=\"headerlink\" title=\"5.内存数据紧凑\"></a>5.内存数据紧凑</h3><p>可以在内存里紧凑的存储数据，这一点可以使用更少的内存，更适合CPU缓存。所有的对象字段都有类型，而且字段被紧凑的打包在一起。例如，几个布尔标志每个只占用一个字节。Go也有值语义，可以将一个对象直接嵌入到另一个对象中，这样它就“免费”而无需另一个分配。js没有这些特性，而且还有其他特点，比如JIT开销(比如，隐藏类槽)，低效的声明(比如非整数用指针分配在堆上）。</p>\n<p>这些因素中的每一个都只是略微显着的加速，但是放在一起就比今天常用的打包器快几个数量级。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-eae9e99f804108a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"1-使用Go语言-编译成原生代码\"><a href=\"#1-使用Go语言-编译成原生代码\" class=\"headerlink\" title=\"1.使用Go语言,编译成原生代码\"></a>1.使用Go语言,编译成原生代码</h3><p>很多打包工具是用js写的，但是命令行工具对于JIT编译语言是在性能方面最拉垮。每次打包，js编译器都会把代码当作第一次运行，没有任何优化。当esbuild忙着解析你的js,node忙着解析你的打包工具的js。当node完成包代码解析，esbuild已经可能已经退出了，而你的打包工具甚至还没有开始。</p>\n<p>另外，Go被设计成并行的，但js不是。Go的线程之间共享内存，然而js在线程之间序列化数据。Go和js都有并行的垃圾收集器。但是在Go的堆在线程间是共享的，然而js每个线程都有独立的堆。<a href=\"https://github.com/evanw/esbuild/issues/111#issuecomment-719910381\">根据我的测试</a>，这似乎将 JavaScript 工作线程可能的并行量减少了一半，大概是因为你的 CPU 核心的一半正忙于为另一半收集垃圾。</p>\n<h3 id=\"2-并行性被大量使用\"><a href=\"#2-并行性被大量使用\" class=\"headerlink\" title=\"2.并行性被大量使用\"></a>2.并行性被大量使用</h3><p>esbuild内部算法经过精心设计，以在可能的情况下使所有可用的 CPU 内核完全饱和。有三个解析阶段：解析，链接，生成代码。解析和生成代码是主要工作，并行性强(链接在很大程度上是一项固有的串行任务)。因为所有的线程共享内存，在导入相同的js库时候，功能可以在不同的点共享。现在很多电脑都是多核的，所有并行是一项很大的胜利。</p>\n<h3 id=\"3-esbuild-中的一切都是从头开始编写的\"><a href=\"#3-esbuild-中的一切都是从头开始编写的\" class=\"headerlink\" title=\"3.esbuild 中的一切都是从头开始编写的\"></a>3.esbuild 中的一切都是从头开始编写的</h3><p>自己写代码而不是使用第三方库，有很多性能优势。您可以从一开始就考虑性能，确保所有的东西都使用了相同的数据结构，这样可以避免昂贵的转换。并且您可以在必要时进行广泛的架构更改，缺点当然是工作量很大。<br>比如很多打包工具使用官方的TS编译器作为解析器。但是这是为TS编译器团队的目标服务的，他们没有将性能作为重中之重。他们的代码大量使用了巨型对象形状和不必要的动态属性访问(这两个都是众所周知的 JavaScript 减速带)。<br>即使类型检查被禁用，TypeScript 解析器似乎仍然运行类型检查器。这些问题， esbuild 的自定义 TS 解析器都没有。</p>\n<h3 id=\"4-内存高效利用\"><a href=\"#4-内存高效利用\" class=\"headerlink\" title=\"4.内存高效利用\"></a>4.内存高效利用</h3><p>理想情况下，编译器的输入长度主要为 O(n) 复杂度。因此，如果您正在处理大量数据，内存访问速度可能会严重影响性能。数据传输的越少（并且将数据转换成的不同表示形式也越少），编译器运行的越快(好像是废话)。</p>\n<p>比如，esbuild只会接触整个js的AST数三次<br>1.第一次是词法，全局安装，声明变量<br>2.第二次是构建变量，。。这一部分不会翻译，剩下的2023年再写。。</p>\n<h3 id=\"5-内存数据紧凑\"><a href=\"#5-内存数据紧凑\" class=\"headerlink\" title=\"5.内存数据紧凑\"></a>5.内存数据紧凑</h3><p>可以在内存里紧凑的存储数据，这一点可以使用更少的内存，更适合CPU缓存。所有的对象字段都有类型，而且字段被紧凑的打包在一起。例如，几个布尔标志每个只占用一个字节。Go也有值语义，可以将一个对象直接嵌入到另一个对象中，这样它就“免费”而无需另一个分配。js没有这些特性，而且还有其他特点，比如JIT开销(比如，隐藏类槽)，低效的声明(比如非整数用指针分配在堆上）。</p>\n<p>这些因素中的每一个都只是略微显着的加速，但是放在一起就比今天常用的打包器快几个数量级。</p>\n"},{"title":"🎅🏻🎅🏿-50个提高编码水平的方法","date":"2021-12-24T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-d0a43679b51fdc5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我已经做了30多年的程序员了，程序员是一个终身学习，练习和提高的职业，在我的职业生涯中，我发现了很多方法来提高编码水平\n## 提升程序员水平的50种方法\n 1.**写大量程序**，你写的每个程序不论大小，都会给你一些经验。练习可以提高你对编程概念的理解。\n\n2.**让编程变成你的爱好**。开发个人项目可以创造热情和激情。如果你喜欢这样做，学习就很容易了。\n\n3.**在Stack Overflow上找答案**。如果你有一个编程问题，很有可能会在[Stack Overflow](https://stackoverflow.com/)上找到答案。对答案保持批评态度，并把这个当作学习的机会。当你准备好的时候，也回答一下别人的问题。\n\n4.**读好书，完成里面的例子**。好的编程书有体系化的内容可以学习，  [Deitel books](https://deitel.com/)里面有很多例子和解释，如果你是个新手，可以看看我的书: [The Super Simple Programming Book](https://www.amazon.com/dp/1718198450)。\n\n5.**学会一种方法，忽略其他方法**，编程语言提供了不止一种方法去完成同一个任务，有几种方法可以将整型变量增加1。现在学习一种方法，然后你就可以学习其他编程概念了。\n\n6.**学习基础的编程概念**，当你学习编程的时候，基础很重要。学习数据类型，输入输出，选择，复用，等等。注重基础概念，这些将有利于学习其他语言。\n\n7.**找一个导师**，和有编程能力的人建立联系，从一个导师身上学到的远比你从网站和书上多的多。\n\n8.**参加编程赛事**，编程赛事是练习编程水平的有趣方法。推特有#100DaysOfCode.Code.org 有 [Hour of Code](https://code.org/).The [Advent of Code](https://adventofcode.com/)真的是一个很有趣的编程挑战在11月的前25日。线上有更大赛事。\n\n9.参加一个免费的学习课程，[Coursera](https://www.coursera.org/search?query=programming)有很多来自顶级大学的优秀计算机课程。在[Udemy](https://www.udemy.com/courses/search/?src=ukw&q=programming).上有很多相似课程。[MIT OpenCourseWare](https://ocw.mit.edu/search/ocwsearch.htm?q=programming)出版了部分计算机科学课程的教材。\n\n10.**使用code linters**，代码分析器为你的程序提供即时反馈。在线的w3c校验器可以校验你网页文档的合理性。[ESlint](https://eslint.org/)帮你找到修复js中的合理性。[Pylint](https://pylint.org/)可以校验Python 代码。Linters也可以在像vscode的IDE中当作插件使用，linters通过标记错误和建议性改变强迫你学习。\n\n11.**利用静态代码分析工具**。[SonarQube](https://www.sonarqube.org/developer-edition/)平台可以分析静态代码。可以帮你写出简洁，准确，安全的代码。\n\n12.**参与代码审查**，包括作者和审查者。不要害怕代码审查，拥抱他们。我们都犯错误，错误是学习的绝好机会。\n\n13.看油罐视频。上面有几乎所有多编程的教程，说明和课程。这些视频是学习编程的简单方法，仅仅通过看视频。比如，这里有一些关于[Node.js](https://www.youtube.com/results?search_query=Node.js)的视频课程。\n\n14.解决欧拉项目的问题。[Project Euler](https://projecteuler.net/)有很多可以用代码解决的数学和电脑科学的问题。该网站列出了解决每个问题的人数。\n\n15.参与谷歌代码大赛。[Google coding competitions](https://codingcompetitions.withgoogle.com/)对于练习很有用，而且你不需要正式参加比赛。 Code jam是年度，世界性的代码比赛。它列举了过去和现在的问题。也可以看看Google kick和哈希码比赛。\n\n16.使用IDE。集成开发环境，是可以帮你创造，编辑，debug程序的好工具。在你写代码的使用，IDES可以发现和高亮错误，给你正确的建议。IDE在你敲代码的时候给你集成性的代码参考。插件添加了额外的工具，如 linter 和查看器。现在最流行的IDE是 [Visual Studio Code](https://code.visualstudio.com/)。\n\n17.返回学校。如果你有条件，在当地的大学院或大学参与一个计算机课程，攻读计算机科学学士学位或认证，获得硕士学位将使您有资格在大学任教。\n\n18.考虑参与一个编码训练营，编码训练营提供特定编程技能的专门培训。这些技能通常需求量很大，参与训练营一定要小心，他们通常不一样，而且大多数都很贵。\n\n19.**写技术博客**。要学习一些东西，阅读它、听它和写它是有帮助的。在博客中写下您的日常编程经验将增强您的学习。让你有东西学更多的东西。两个流行的博客平台是[Dev Community](https://dev.to/)和 [Hashnode](https://hashnode.com/)，都是免费的博客平台，使您可以轻松地立即开始写博客。\n\n20.通过在线教程工作，有很多优秀的在线编程教程，有些是为了阅读。其他都是互动的。[W3Schools](https://www.w3schools.com/)简单，互动，快捷的在线平台。[Codecademy](https://www.codecademy.com/)有很多不同语言的优秀互动课程。\n\n21.参与编程论坛。阅读反馈博客。这些互动是非常好的学习机会。比如对java程序员来说，[JavaRanch](https://javaranch.com/)和[Java Programming Forums](https://www.javaprogrammingforums.com/)是非常流行的java在线社区。\n\n22.**编程教学**，教别人写代码，可以有效的提高你的编程知识，辅导大学或本地学生。为了去教别人，你必须备课，写例子，回答问题。这将迫使你理解编程，即使是志愿教授编程也有好处。\n\n23.搞一个属于你的站点，如果你喜欢web开发，学习怎么开发你自己的网站。包括域名注册，托管和维护。像这样的个人项目给了很多学习和编码的动力。\n\n24.**参与代码面试**。许多公司需要现场编码课程或带回家的作业作为面试过程的一部分，这些活动提供了非常好的学习机会和现实实践。你必须提前准备和学习。编码面试很有价值，即使你没有得到这份工作。\n\n25.**在开源项目中学习**。开源项目站点，比如[GitHub](https://github.com/)和[GitLab](https://about.gitlab.com/)提供了非常好的学习例子。其中许多软件项目在业界都很受欢迎，给这些项目做贡献提供了更多代码练习。\n\n26.**遵循编码标准、最佳实践和风格指南**。代码标准和最佳实践改进代码。可以让代码更易读，更容易维护，更准确，谷歌为很多编程语言发布了代码标准和[风格指南](https://google.github.io/styleguide/) 。 [PEP8 Online](http://pep8online.com/)检查 Python 代码并建议最佳实践和指南。\n\n27.**成为自由职业者**。把写代码当作服务。您可以在网上找到许多自由编程任务，即使一个好的练习机会也可以挣点钱。\n\n28.参与技术社区，找到一个你所在领域的技术社区。在[LinkedIn](https://www.linkedin.com/groups/), [Facebook](https://www.facebook.com/groups/search/groups_home/?q=programming), [Meetup](https://www.meetup.com/find/?keywords=programming&source=GROUPS)和其他站点有很多在线编程组。你可以和别人互动来分享你对技术的热忱。\n\n29.找一份工作。找一份编程方面的工作，任何编程工作。没有什么比行业经验和学习更胜一筹了。\n\n30.志愿写代码。每个行业都需要编程技术，很多行业没有能力雇佣程序员，有很多志愿编程的机会。在当地学校，俱乐部，组织有很多你可以提供帮助的编程任务。 [Code.org](https://code.org/volunteer)可以匹配到所在领域的志愿编程机会。\n\n31.写原生代码。是的。框架和库让写代码变得更简单，但是写原生代码可以学到很多东西。比如尝试用原生代码写js来代替jquery.使用纯数组代码java 数组类，写原生代码会迫使你考虑的更多，写更有效的方案。它还会让您领略许多有用的外部库的精华。\n\n32.不要重复造轮子。对于重要的编程，不要重复造轮子。对于特殊编程任务和逻辑，寻找已存在的方案。这些方案已经被使用被测试。比如[npm](https://www.npmjs.com/)是在线的node库。[PyPI](https://pypi.org/)托管外部Python库。选择编程库要挑剔一点，有些更好。\n\n33.参与编程会议。编程会议将各个级别的开发人员聚集在一起进行演示、演示和其他学习机会。[Grace Hopper Celebration](https://ghc.anitab.org/)是一个主要由女性参与的技术大会。\n[Google I/O](https://io.google/2021/?lng=en)是另一个开发者大会。还有很多编程会议。有些提供虚拟席位。如果不是，确保你在参加的时候，他们提供了合适的社交距离。\n\n34.参与专业组织，像[IEEE](https://www.ieee.org/)和[ACM](https://www.acm.org/))这样的专业组织提供合作机会、期刊、会议、小组和其他学习机会。这样的组织是收费的，但是学生有折扣。\n\n35.写一本书。对于编程书籍，主题无穷无尽。不论你现在编程水平如何，总有一本书适合你。像[Amazon Kindle Direct Publishing](https://kdp.amazon.com/en_US/)这样的组织让出书变的更容易。写书，会迫使你真正的学习相关资料，创造实例，测试你的程序。\n\n36.给机器人编程。有什么让编程进入你的生活更有趣呢。新手和专家可以搞一个机器人来完成编程任务。[Sphero BOLT](https://sphero.com/products/sphero-bolt)是具有传感器、运动和 LED 显示屏的可编程塑料球体。[LEGO MINDSTORMS](https://www.lego.com/en-us/themes/mindstorms/learntoprogram)另一个具有高级技能的编程机器人。\n一些机器人在 [Minecraft Education edition](https://education.minecraft.net/en-us/homepage), Java [Robocode](https://robocode.sourceforge.io/), and Python [turtle graphics](https://docs.python.org/3/library/turtle.html)等很有用。编程机器人让编程变得更有趣，因为它们可视化了您的程序输出。\n\n37.访问Code.org. [Code.org](https://code.org/)值得在这份名单上占有一席之地，该网站致力于学习、教学和推广计算机科学。有适合初学者的在线编码活动、编码统计、励志视频等。\n\n38.尝试Alice。[Alice](https://www.alice.org/)是一个计算机科学的3D教学工具。可以让学校电脑科学可视化，趣味化。\n\n39.学习使用git控制代码版本。虽然这和编程没有特别直接的联系，毫无疑问，您将使用 Git 来维护程序的版本。像GitHub, [Bitbucket](https://bitbucket.org/), and GitLab一类的在线git存储库都是很强大的软件协作工具，很多开发者使用GitHub托管代码。更多Git版本控制信息见[Git website](https://git-scm.com/)。\n\n40.拥抱实时沟通。这是另一个不是和编程有直接关系的话题。实时沟通工具在你写代码时，提供及时反馈和答案。[Slack](https://slack.com/)是一个非常流行的实时沟通的工具，可以提供持久的文本、语音和视频聊天。这个工具允许你，为不同的主题创造公共的和私有的频道，它可以让您将对话串连起来，以便更有条理。\n\n41.随时随地写代码。你的手机也是一台电脑，为什么不用呢， [QPython](https://play.google.com/store/apps/details?id=org.qpython.qpy3&hl=en_US&gl=US)是一个安卓手机的Python编译器，IOS上有[Python2IDE](https://apps.apple.com/us/app/python2ide/id984990674)，有了这样的App，你可以直接用你的手机写代码。\n\n42.**在没有帮助的条件下写代码**。接受编程任务并编写程序，不上网搜索，不通过IDE的帮助。看看你是否可以通过记忆编程。这种类型的编码练习将迫使您牢记重要的概念。这对于现场编码也是很好的练习。\n\n43.**重构代码**，学习怎么重构代码。即使程序为所有可能的输入产生正确的输出，仍有改进空间。比如，让你的程序更易维护，更易读，复杂度更低。\n\n44.**学习其它编程语言**。一旦你对基础编程有了一个好的基础，对给定编程语言的深刻理解，你就可以另辟蹊径了。学习其他语言可以提高你对编程语言的总体理解。了解不同的语言如何实现相同的编程概念或提供新功能会很有帮助。例如，Java 编程语言通过解决内存泄漏对 C++ 进行了改进。\n\n45.**为艺术而编程**。编程不仅仅是为了公司。编程可以创造艺术，通过随机行为、图形和处理，程序可以创建漂亮的输出。这将编程的热情提升到一个全新的水平。Python turtle graphics和 HTML Canvas 图形是用程序创建简单和复杂艺术的两种方法。\n\n46.有一个正确的态度。要谦虚，你不可能知道编码的所有。即使你这样认为，我保证有人比你知道的更多。编程是没有尽头的循环。承认你不不知道，你很快就知道了。\n\n47.利用公共 API。有很多公共的应用接口，你可以用在你的程序里。[Twitter](https://developer.twitter.com/en), [YouTube](https://developers.google.com/youtube/v3), 和 [Google Maps](https://developers.google.com/maps) 有一些你可以再次开发的API。你可以在你的App中利用这些接口来创造骄人的应用。\n\n48.用Soloway's Rainfall problem评估你的编程水平。 [Soloway's Rainfall problem](https://web.cs.wpi.edu/~kfisler/Pubs/icer14-rainfall/icer14.pdf)\n可以为计算机专业学生测试编程技能。如果你能晚上这些编程任务，你就对编程的基础有了一个很好的理解。如果没有，继续学习吧。\n\n49.从控制台输入和输出中学习。即使有有精美的网站和图形用户界面。然而，不要忽略基础程序所提供的教学。接受来自 stdin 的输入并将输出写入 stdout 的程序可能非常强大、复杂且功能齐全。这些程序有很多东西可以学。\n\n50.**学习汇编语言，理解计算机架构**。当一个程序执行时。它使用了计算机资源。理解计算机内存CPU和其它硬件怎么工作可以帮助你理解计算机是怎么工作的。汇编语言是非常底层的语言。其指令对应机器码指令。在C语言中简单的if-else可能需要复杂的汇编语句。理解汇编语言和计算机原理，有助于理解计算机和程序如何交互。教你写更有效率的代码，让你成为一个更好的程序员。\n\n不管你做什么，保持续练习编程。最重要的是，注意安全，保持社交距离，注意安全。\n\n> 翻译自 ：https://dev.to/realedwintorres/50-ways-you-can-improve-as-a-programmer-7g2\n","source":"_posts/🎅🏻🎅🏿-50个提高编码水平的方法.md","raw":"---\ntitle: \"🎅🏻🎅🏿-50个提高编码水平的方法\"\ndate: 2021-12-25\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-d0a43679b51fdc5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我已经做了30多年的程序员了，程序员是一个终身学习，练习和提高的职业，在我的职业生涯中，我发现了很多方法来提高编码水平\n## 提升程序员水平的50种方法\n 1.**写大量程序**，你写的每个程序不论大小，都会给你一些经验。练习可以提高你对编程概念的理解。\n\n2.**让编程变成你的爱好**。开发个人项目可以创造热情和激情。如果你喜欢这样做，学习就很容易了。\n\n3.**在Stack Overflow上找答案**。如果你有一个编程问题，很有可能会在[Stack Overflow](https://stackoverflow.com/)上找到答案。对答案保持批评态度，并把这个当作学习的机会。当你准备好的时候，也回答一下别人的问题。\n\n4.**读好书，完成里面的例子**。好的编程书有体系化的内容可以学习，  [Deitel books](https://deitel.com/)里面有很多例子和解释，如果你是个新手，可以看看我的书: [The Super Simple Programming Book](https://www.amazon.com/dp/1718198450)。\n\n5.**学会一种方法，忽略其他方法**，编程语言提供了不止一种方法去完成同一个任务，有几种方法可以将整型变量增加1。现在学习一种方法，然后你就可以学习其他编程概念了。\n\n6.**学习基础的编程概念**，当你学习编程的时候，基础很重要。学习数据类型，输入输出，选择，复用，等等。注重基础概念，这些将有利于学习其他语言。\n\n7.**找一个导师**，和有编程能力的人建立联系，从一个导师身上学到的远比你从网站和书上多的多。\n\n8.**参加编程赛事**，编程赛事是练习编程水平的有趣方法。推特有#100DaysOfCode.Code.org 有 [Hour of Code](https://code.org/).The [Advent of Code](https://adventofcode.com/)真的是一个很有趣的编程挑战在11月的前25日。线上有更大赛事。\n\n9.参加一个免费的学习课程，[Coursera](https://www.coursera.org/search?query=programming)有很多来自顶级大学的优秀计算机课程。在[Udemy](https://www.udemy.com/courses/search/?src=ukw&q=programming).上有很多相似课程。[MIT OpenCourseWare](https://ocw.mit.edu/search/ocwsearch.htm?q=programming)出版了部分计算机科学课程的教材。\n\n10.**使用code linters**，代码分析器为你的程序提供即时反馈。在线的w3c校验器可以校验你网页文档的合理性。[ESlint](https://eslint.org/)帮你找到修复js中的合理性。[Pylint](https://pylint.org/)可以校验Python 代码。Linters也可以在像vscode的IDE中当作插件使用，linters通过标记错误和建议性改变强迫你学习。\n\n11.**利用静态代码分析工具**。[SonarQube](https://www.sonarqube.org/developer-edition/)平台可以分析静态代码。可以帮你写出简洁，准确，安全的代码。\n\n12.**参与代码审查**，包括作者和审查者。不要害怕代码审查，拥抱他们。我们都犯错误，错误是学习的绝好机会。\n\n13.看油罐视频。上面有几乎所有多编程的教程，说明和课程。这些视频是学习编程的简单方法，仅仅通过看视频。比如，这里有一些关于[Node.js](https://www.youtube.com/results?search_query=Node.js)的视频课程。\n\n14.解决欧拉项目的问题。[Project Euler](https://projecteuler.net/)有很多可以用代码解决的数学和电脑科学的问题。该网站列出了解决每个问题的人数。\n\n15.参与谷歌代码大赛。[Google coding competitions](https://codingcompetitions.withgoogle.com/)对于练习很有用，而且你不需要正式参加比赛。 Code jam是年度，世界性的代码比赛。它列举了过去和现在的问题。也可以看看Google kick和哈希码比赛。\n\n16.使用IDE。集成开发环境，是可以帮你创造，编辑，debug程序的好工具。在你写代码的使用，IDES可以发现和高亮错误，给你正确的建议。IDE在你敲代码的时候给你集成性的代码参考。插件添加了额外的工具，如 linter 和查看器。现在最流行的IDE是 [Visual Studio Code](https://code.visualstudio.com/)。\n\n17.返回学校。如果你有条件，在当地的大学院或大学参与一个计算机课程，攻读计算机科学学士学位或认证，获得硕士学位将使您有资格在大学任教。\n\n18.考虑参与一个编码训练营，编码训练营提供特定编程技能的专门培训。这些技能通常需求量很大，参与训练营一定要小心，他们通常不一样，而且大多数都很贵。\n\n19.**写技术博客**。要学习一些东西，阅读它、听它和写它是有帮助的。在博客中写下您的日常编程经验将增强您的学习。让你有东西学更多的东西。两个流行的博客平台是[Dev Community](https://dev.to/)和 [Hashnode](https://hashnode.com/)，都是免费的博客平台，使您可以轻松地立即开始写博客。\n\n20.通过在线教程工作，有很多优秀的在线编程教程，有些是为了阅读。其他都是互动的。[W3Schools](https://www.w3schools.com/)简单，互动，快捷的在线平台。[Codecademy](https://www.codecademy.com/)有很多不同语言的优秀互动课程。\n\n21.参与编程论坛。阅读反馈博客。这些互动是非常好的学习机会。比如对java程序员来说，[JavaRanch](https://javaranch.com/)和[Java Programming Forums](https://www.javaprogrammingforums.com/)是非常流行的java在线社区。\n\n22.**编程教学**，教别人写代码，可以有效的提高你的编程知识，辅导大学或本地学生。为了去教别人，你必须备课，写例子，回答问题。这将迫使你理解编程，即使是志愿教授编程也有好处。\n\n23.搞一个属于你的站点，如果你喜欢web开发，学习怎么开发你自己的网站。包括域名注册，托管和维护。像这样的个人项目给了很多学习和编码的动力。\n\n24.**参与代码面试**。许多公司需要现场编码课程或带回家的作业作为面试过程的一部分，这些活动提供了非常好的学习机会和现实实践。你必须提前准备和学习。编码面试很有价值，即使你没有得到这份工作。\n\n25.**在开源项目中学习**。开源项目站点，比如[GitHub](https://github.com/)和[GitLab](https://about.gitlab.com/)提供了非常好的学习例子。其中许多软件项目在业界都很受欢迎，给这些项目做贡献提供了更多代码练习。\n\n26.**遵循编码标准、最佳实践和风格指南**。代码标准和最佳实践改进代码。可以让代码更易读，更容易维护，更准确，谷歌为很多编程语言发布了代码标准和[风格指南](https://google.github.io/styleguide/) 。 [PEP8 Online](http://pep8online.com/)检查 Python 代码并建议最佳实践和指南。\n\n27.**成为自由职业者**。把写代码当作服务。您可以在网上找到许多自由编程任务，即使一个好的练习机会也可以挣点钱。\n\n28.参与技术社区，找到一个你所在领域的技术社区。在[LinkedIn](https://www.linkedin.com/groups/), [Facebook](https://www.facebook.com/groups/search/groups_home/?q=programming), [Meetup](https://www.meetup.com/find/?keywords=programming&source=GROUPS)和其他站点有很多在线编程组。你可以和别人互动来分享你对技术的热忱。\n\n29.找一份工作。找一份编程方面的工作，任何编程工作。没有什么比行业经验和学习更胜一筹了。\n\n30.志愿写代码。每个行业都需要编程技术，很多行业没有能力雇佣程序员，有很多志愿编程的机会。在当地学校，俱乐部，组织有很多你可以提供帮助的编程任务。 [Code.org](https://code.org/volunteer)可以匹配到所在领域的志愿编程机会。\n\n31.写原生代码。是的。框架和库让写代码变得更简单，但是写原生代码可以学到很多东西。比如尝试用原生代码写js来代替jquery.使用纯数组代码java 数组类，写原生代码会迫使你考虑的更多，写更有效的方案。它还会让您领略许多有用的外部库的精华。\n\n32.不要重复造轮子。对于重要的编程，不要重复造轮子。对于特殊编程任务和逻辑，寻找已存在的方案。这些方案已经被使用被测试。比如[npm](https://www.npmjs.com/)是在线的node库。[PyPI](https://pypi.org/)托管外部Python库。选择编程库要挑剔一点，有些更好。\n\n33.参与编程会议。编程会议将各个级别的开发人员聚集在一起进行演示、演示和其他学习机会。[Grace Hopper Celebration](https://ghc.anitab.org/)是一个主要由女性参与的技术大会。\n[Google I/O](https://io.google/2021/?lng=en)是另一个开发者大会。还有很多编程会议。有些提供虚拟席位。如果不是，确保你在参加的时候，他们提供了合适的社交距离。\n\n34.参与专业组织，像[IEEE](https://www.ieee.org/)和[ACM](https://www.acm.org/))这样的专业组织提供合作机会、期刊、会议、小组和其他学习机会。这样的组织是收费的，但是学生有折扣。\n\n35.写一本书。对于编程书籍，主题无穷无尽。不论你现在编程水平如何，总有一本书适合你。像[Amazon Kindle Direct Publishing](https://kdp.amazon.com/en_US/)这样的组织让出书变的更容易。写书，会迫使你真正的学习相关资料，创造实例，测试你的程序。\n\n36.给机器人编程。有什么让编程进入你的生活更有趣呢。新手和专家可以搞一个机器人来完成编程任务。[Sphero BOLT](https://sphero.com/products/sphero-bolt)是具有传感器、运动和 LED 显示屏的可编程塑料球体。[LEGO MINDSTORMS](https://www.lego.com/en-us/themes/mindstorms/learntoprogram)另一个具有高级技能的编程机器人。\n一些机器人在 [Minecraft Education edition](https://education.minecraft.net/en-us/homepage), Java [Robocode](https://robocode.sourceforge.io/), and Python [turtle graphics](https://docs.python.org/3/library/turtle.html)等很有用。编程机器人让编程变得更有趣，因为它们可视化了您的程序输出。\n\n37.访问Code.org. [Code.org](https://code.org/)值得在这份名单上占有一席之地，该网站致力于学习、教学和推广计算机科学。有适合初学者的在线编码活动、编码统计、励志视频等。\n\n38.尝试Alice。[Alice](https://www.alice.org/)是一个计算机科学的3D教学工具。可以让学校电脑科学可视化，趣味化。\n\n39.学习使用git控制代码版本。虽然这和编程没有特别直接的联系，毫无疑问，您将使用 Git 来维护程序的版本。像GitHub, [Bitbucket](https://bitbucket.org/), and GitLab一类的在线git存储库都是很强大的软件协作工具，很多开发者使用GitHub托管代码。更多Git版本控制信息见[Git website](https://git-scm.com/)。\n\n40.拥抱实时沟通。这是另一个不是和编程有直接关系的话题。实时沟通工具在你写代码时，提供及时反馈和答案。[Slack](https://slack.com/)是一个非常流行的实时沟通的工具，可以提供持久的文本、语音和视频聊天。这个工具允许你，为不同的主题创造公共的和私有的频道，它可以让您将对话串连起来，以便更有条理。\n\n41.随时随地写代码。你的手机也是一台电脑，为什么不用呢， [QPython](https://play.google.com/store/apps/details?id=org.qpython.qpy3&hl=en_US&gl=US)是一个安卓手机的Python编译器，IOS上有[Python2IDE](https://apps.apple.com/us/app/python2ide/id984990674)，有了这样的App，你可以直接用你的手机写代码。\n\n42.**在没有帮助的条件下写代码**。接受编程任务并编写程序，不上网搜索，不通过IDE的帮助。看看你是否可以通过记忆编程。这种类型的编码练习将迫使您牢记重要的概念。这对于现场编码也是很好的练习。\n\n43.**重构代码**，学习怎么重构代码。即使程序为所有可能的输入产生正确的输出，仍有改进空间。比如，让你的程序更易维护，更易读，复杂度更低。\n\n44.**学习其它编程语言**。一旦你对基础编程有了一个好的基础，对给定编程语言的深刻理解，你就可以另辟蹊径了。学习其他语言可以提高你对编程语言的总体理解。了解不同的语言如何实现相同的编程概念或提供新功能会很有帮助。例如，Java 编程语言通过解决内存泄漏对 C++ 进行了改进。\n\n45.**为艺术而编程**。编程不仅仅是为了公司。编程可以创造艺术，通过随机行为、图形和处理，程序可以创建漂亮的输出。这将编程的热情提升到一个全新的水平。Python turtle graphics和 HTML Canvas 图形是用程序创建简单和复杂艺术的两种方法。\n\n46.有一个正确的态度。要谦虚，你不可能知道编码的所有。即使你这样认为，我保证有人比你知道的更多。编程是没有尽头的循环。承认你不不知道，你很快就知道了。\n\n47.利用公共 API。有很多公共的应用接口，你可以用在你的程序里。[Twitter](https://developer.twitter.com/en), [YouTube](https://developers.google.com/youtube/v3), 和 [Google Maps](https://developers.google.com/maps) 有一些你可以再次开发的API。你可以在你的App中利用这些接口来创造骄人的应用。\n\n48.用Soloway's Rainfall problem评估你的编程水平。 [Soloway's Rainfall problem](https://web.cs.wpi.edu/~kfisler/Pubs/icer14-rainfall/icer14.pdf)\n可以为计算机专业学生测试编程技能。如果你能晚上这些编程任务，你就对编程的基础有了一个很好的理解。如果没有，继续学习吧。\n\n49.从控制台输入和输出中学习。即使有有精美的网站和图形用户界面。然而，不要忽略基础程序所提供的教学。接受来自 stdin 的输入并将输出写入 stdout 的程序可能非常强大、复杂且功能齐全。这些程序有很多东西可以学。\n\n50.**学习汇编语言，理解计算机架构**。当一个程序执行时。它使用了计算机资源。理解计算机内存CPU和其它硬件怎么工作可以帮助你理解计算机是怎么工作的。汇编语言是非常底层的语言。其指令对应机器码指令。在C语言中简单的if-else可能需要复杂的汇编语句。理解汇编语言和计算机原理，有助于理解计算机和程序如何交互。教你写更有效率的代码，让你成为一个更好的程序员。\n\n不管你做什么，保持续练习编程。最重要的是，注意安全，保持社交距离，注意安全。\n\n> 翻译自 ：https://dev.to/realedwintorres/50-ways-you-can-improve-as-a-programmer-7g2\n","slug":"🎅🏻🎅🏿-50个提高编码水平的方法","published":1,"updated":"2024-05-16T07:39:11.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094o600492omv9446913w","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-d0a43679b51fdc5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>我已经做了30多年的程序员了，程序员是一个终身学习，练习和提高的职业，在我的职业生涯中，我发现了很多方法来提高编码水平</p>\n<div class=\"\"><h2 id=\"提升程序员水平的50种方法\"><a href=\"#提升程序员水平的50种方法\" class=\"headerlink\" title=\"提升程序员水平的50种方法\"></a>提升程序员水平的50种方法</h2><p> 1.<strong>写大量程序</strong>，你写的每个程序不论大小，都会给你一些经验。练习可以提高你对编程概念的理解。</p>\n<p>2.<strong>让编程变成你的爱好</strong>。开发个人项目可以创造热情和激情。如果你喜欢这样做，学习就很容易了。</p>\n<p>3.<strong>在Stack Overflow上找答案</strong>。如果你有一个编程问题，很有可能会在<a href=\"https://stackoverflow.com/\">Stack Overflow</a>上找到答案。对答案保持批评态度，并把这个当作学习的机会。当你准备好的时候，也回答一下别人的问题。</p>\n<p>4.<strong>读好书，完成里面的例子</strong>。好的编程书有体系化的内容可以学习，  <a href=\"https://deitel.com/\">Deitel books</a>里面有很多例子和解释，如果你是个新手，可以看看我的书: <a href=\"https://www.amazon.com/dp/1718198450\">The Super Simple Programming Book</a>。</p>\n<p>5.<strong>学会一种方法，忽略其他方法</strong>，编程语言提供了不止一种方法去完成同一个任务，有几种方法可以将整型变量增加1。现在学习一种方法，然后你就可以学习其他编程概念了。</p>\n<p>6.<strong>学习基础的编程概念</strong>，当你学习编程的时候，基础很重要。学习数据类型，输入输出，选择，复用，等等。注重基础概念，这些将有利于学习其他语言。</p>\n<p>7.<strong>找一个导师</strong>，和有编程能力的人建立联系，从一个导师身上学到的远比你从网站和书上多的多。</p>\n<p>8.<strong>参加编程赛事</strong>，编程赛事是练习编程水平的有趣方法。推特有#100DaysOfCode.Code.org 有 <a href=\"https://code.org/\">Hour of Code</a>.The <a href=\"https://adventofcode.com/\">Advent of Code</a>真的是一个很有趣的编程挑战在11月的前25日。线上有更大赛事。</p>\n<p>9.参加一个免费的学习课程，<a href=\"https://www.coursera.org/search?query=programming\">Coursera</a>有很多来自顶级大学的优秀计算机课程。在<a href=\"https://www.udemy.com/courses/search/?src=ukw&q=programming\">Udemy</a>.上有很多相似课程。<a href=\"https://ocw.mit.edu/search/ocwsearch.htm?q=programming\">MIT OpenCourseWare</a>出版了部分计算机科学课程的教材。</p>\n<p>10.<strong>使用code linters</strong>，代码分析器为你的程序提供即时反馈。在线的w3c校验器可以校验你网页文档的合理性。<a href=\"https://eslint.org/\">ESlint</a>帮你找到修复js中的合理性。<a href=\"https://pylint.org/\">Pylint</a>可以校验Python 代码。Linters也可以在像vscode的IDE中当作插件使用，linters通过标记错误和建议性改变强迫你学习。</p>\n<p>11.<strong>利用静态代码分析工具</strong>。<a href=\"https://www.sonarqube.org/developer-edition/\">SonarQube</a>平台可以分析静态代码。可以帮你写出简洁，准确，安全的代码。</p>\n<p>12.<strong>参与代码审查</strong>，包括作者和审查者。不要害怕代码审查，拥抱他们。我们都犯错误，错误是学习的绝好机会。</p>\n<p>13.看油罐视频。上面有几乎所有多编程的教程，说明和课程。这些视频是学习编程的简单方法，仅仅通过看视频。比如，这里有一些关于<a href=\"https://www.youtube.com/results?search_query=Node.js\">Node.js</a>的视频课程。</p>\n<p>14.解决欧拉项目的问题。<a href=\"https://projecteuler.net/\">Project Euler</a>有很多可以用代码解决的数学和电脑科学的问题。该网站列出了解决每个问题的人数。</p>\n<p>15.参与谷歌代码大赛。<a href=\"https://codingcompetitions.withgoogle.com/\">Google coding competitions</a>对于练习很有用，而且你不需要正式参加比赛。 Code jam是年度，世界性的代码比赛。它列举了过去和现在的问题。也可以看看Google kick和哈希码比赛。</p>\n<p>16.使用IDE。集成开发环境，是可以帮你创造，编辑，debug程序的好工具。在你写代码的使用，IDES可以发现和高亮错误，给你正确的建议。IDE在你敲代码的时候给你集成性的代码参考。插件添加了额外的工具，如 linter 和查看器。现在最流行的IDE是 <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>。</p>\n<p>17.返回学校。如果你有条件，在当地的大学院或大学参与一个计算机课程，攻读计算机科学学士学位或认证，获得硕士学位将使您有资格在大学任教。</p>\n<p>18.考虑参与一个编码训练营，编码训练营提供特定编程技能的专门培训。这些技能通常需求量很大，参与训练营一定要小心，他们通常不一样，而且大多数都很贵。</p>\n<p>19.<strong>写技术博客</strong>。要学习一些东西，阅读它、听它和写它是有帮助的。在博客中写下您的日常编程经验将增强您的学习。让你有东西学更多的东西。两个流行的博客平台是<a href=\"https://dev.to/\">Dev Community</a>和 <a href=\"https://hashnode.com/\">Hashnode</a>，都是免费的博客平台，使您可以轻松地立即开始写博客。</p>\n<p>20.通过在线教程工作，有很多优秀的在线编程教程，有些是为了阅读。其他都是互动的。<a href=\"https://www.w3schools.com/\">W3Schools</a>简单，互动，快捷的在线平台。<a href=\"https://www.codecademy.com/\">Codecademy</a>有很多不同语言的优秀互动课程。</p>\n<p>21.参与编程论坛。阅读反馈博客。这些互动是非常好的学习机会。比如对java程序员来说，<a href=\"https://javaranch.com/\">JavaRanch</a>和<a href=\"https://www.javaprogrammingforums.com/\">Java Programming Forums</a>是非常流行的java在线社区。</p>\n<p>22.<strong>编程教学</strong>，教别人写代码，可以有效的提高你的编程知识，辅导大学或本地学生。为了去教别人，你必须备课，写例子，回答问题。这将迫使你理解编程，即使是志愿教授编程也有好处。</p>\n<p>23.搞一个属于你的站点，如果你喜欢web开发，学习怎么开发你自己的网站。包括域名注册，托管和维护。像这样的个人项目给了很多学习和编码的动力。</p>\n<p>24.<strong>参与代码面试</strong>。许多公司需要现场编码课程或带回家的作业作为面试过程的一部分，这些活动提供了非常好的学习机会和现实实践。你必须提前准备和学习。编码面试很有价值，即使你没有得到这份工作。</p>\n<p>25.<strong>在开源项目中学习</strong>。开源项目站点，比如<a href=\"https://github.com/\">GitHub</a>和<a href=\"https://about.gitlab.com/\">GitLab</a>提供了非常好的学习例子。其中许多软件项目在业界都很受欢迎，给这些项目做贡献提供了更多代码练习。</p>\n<p>26.<strong>遵循编码标准、最佳实践和风格指南</strong>。代码标准和最佳实践改进代码。可以让代码更易读，更容易维护，更准确，谷歌为很多编程语言发布了代码标准和<a href=\"https://google.github.io/styleguide/\">风格指南</a> 。 <a href=\"http://pep8online.com/\">PEP8 Online</a>检查 Python 代码并建议最佳实践和指南。</p>\n<p>27.<strong>成为自由职业者</strong>。把写代码当作服务。您可以在网上找到许多自由编程任务，即使一个好的练习机会也可以挣点钱。</p>\n<p>28.参与技术社区，找到一个你所在领域的技术社区。在<a href=\"https://www.linkedin.com/groups/\">LinkedIn</a>, <a href=\"https://www.facebook.com/groups/search/groups_home/?q=programming\">Facebook</a>, <a href=\"https://www.meetup.com/find/?keywords=programming&source=GROUPS\">Meetup</a>和其他站点有很多在线编程组。你可以和别人互动来分享你对技术的热忱。</p>\n<p>29.找一份工作。找一份编程方面的工作，任何编程工作。没有什么比行业经验和学习更胜一筹了。</p>\n<p>30.志愿写代码。每个行业都需要编程技术，很多行业没有能力雇佣程序员，有很多志愿编程的机会。在当地学校，俱乐部，组织有很多你可以提供帮助的编程任务。 <a href=\"https://code.org/volunteer\">Code.org</a>可以匹配到所在领域的志愿编程机会。</p>\n<p>31.写原生代码。是的。框架和库让写代码变得更简单，但是写原生代码可以学到很多东西。比如尝试用原生代码写js来代替jquery.使用纯数组代码java 数组类，写原生代码会迫使你考虑的更多，写更有效的方案。它还会让您领略许多有用的外部库的精华。</p>\n<p>32.不要重复造轮子。对于重要的编程，不要重复造轮子。对于特殊编程任务和逻辑，寻找已存在的方案。这些方案已经被使用被测试。比如<a href=\"https://www.npmjs.com/\">npm</a>是在线的node库。<a href=\"https://pypi.org/\">PyPI</a>托管外部Python库。选择编程库要挑剔一点，有些更好。</p>\n<p>33.参与编程会议。编程会议将各个级别的开发人员聚集在一起进行演示、演示和其他学习机会。<a href=\"https://ghc.anitab.org/\">Grace Hopper Celebration</a>是一个主要由女性参与的技术大会。<br><a href=\"https://io.google/2021/?lng=en\">Google I&#x2F;O</a>是另一个开发者大会。还有很多编程会议。有些提供虚拟席位。如果不是，确保你在参加的时候，他们提供了合适的社交距离。</p>\n<p>34.参与专业组织，像<a href=\"https://www.ieee.org/\">IEEE</a>和<a href=\"https://www.acm.org/\">ACM</a>)这样的专业组织提供合作机会、期刊、会议、小组和其他学习机会。这样的组织是收费的，但是学生有折扣。</p>\n<p>35.写一本书。对于编程书籍，主题无穷无尽。不论你现在编程水平如何，总有一本书适合你。像<a href=\"https://kdp.amazon.com/en_US/\">Amazon Kindle Direct Publishing</a>这样的组织让出书变的更容易。写书，会迫使你真正的学习相关资料，创造实例，测试你的程序。</p>\n<p>36.给机器人编程。有什么让编程进入你的生活更有趣呢。新手和专家可以搞一个机器人来完成编程任务。<a href=\"https://sphero.com/products/sphero-bolt\">Sphero BOLT</a>是具有传感器、运动和 LED 显示屏的可编程塑料球体。<a href=\"https://www.lego.com/en-us/themes/mindstorms/learntoprogram\">LEGO MINDSTORMS</a>另一个具有高级技能的编程机器人。<br>一些机器人在 <a href=\"https://education.minecraft.net/en-us/homepage\">Minecraft Education edition</a>, Java <a href=\"https://robocode.sourceforge.io/\">Robocode</a>, and Python <a href=\"https://docs.python.org/3/library/turtle.html\">turtle graphics</a>等很有用。编程机器人让编程变得更有趣，因为它们可视化了您的程序输出。</p>\n<p>37.访问Code.org. <a href=\"https://code.org/\">Code.org</a>值得在这份名单上占有一席之地，该网站致力于学习、教学和推广计算机科学。有适合初学者的在线编码活动、编码统计、励志视频等。</p>\n<p>38.尝试Alice。<a href=\"https://www.alice.org/\">Alice</a>是一个计算机科学的3D教学工具。可以让学校电脑科学可视化，趣味化。</p>\n<p>39.学习使用git控制代码版本。虽然这和编程没有特别直接的联系，毫无疑问，您将使用 Git 来维护程序的版本。像GitHub, <a href=\"https://bitbucket.org/\">Bitbucket</a>, and GitLab一类的在线git存储库都是很强大的软件协作工具，很多开发者使用GitHub托管代码。更多Git版本控制信息见<a href=\"https://git-scm.com/\">Git website</a>。</p>\n<p>40.拥抱实时沟通。这是另一个不是和编程有直接关系的话题。实时沟通工具在你写代码时，提供及时反馈和答案。<a href=\"https://slack.com/\">Slack</a>是一个非常流行的实时沟通的工具，可以提供持久的文本、语音和视频聊天。这个工具允许你，为不同的主题创造公共的和私有的频道，它可以让您将对话串连起来，以便更有条理。</p>\n<p>41.随时随地写代码。你的手机也是一台电脑，为什么不用呢， <a href=\"https://play.google.com/store/apps/details?id=org.qpython.qpy3&hl=en_US&gl=US\">QPython</a>是一个安卓手机的Python编译器，IOS上有<a href=\"https://apps.apple.com/us/app/python2ide/id984990674\">Python2IDE</a>，有了这样的App，你可以直接用你的手机写代码。</p>\n<p>42.<strong>在没有帮助的条件下写代码</strong>。接受编程任务并编写程序，不上网搜索，不通过IDE的帮助。看看你是否可以通过记忆编程。这种类型的编码练习将迫使您牢记重要的概念。这对于现场编码也是很好的练习。</p>\n<p>43.<strong>重构代码</strong>，学习怎么重构代码。即使程序为所有可能的输入产生正确的输出，仍有改进空间。比如，让你的程序更易维护，更易读，复杂度更低。</p>\n<p>44.<strong>学习其它编程语言</strong>。一旦你对基础编程有了一个好的基础，对给定编程语言的深刻理解，你就可以另辟蹊径了。学习其他语言可以提高你对编程语言的总体理解。了解不同的语言如何实现相同的编程概念或提供新功能会很有帮助。例如，Java 编程语言通过解决内存泄漏对 C++ 进行了改进。</p>\n<p>45.<strong>为艺术而编程</strong>。编程不仅仅是为了公司。编程可以创造艺术，通过随机行为、图形和处理，程序可以创建漂亮的输出。这将编程的热情提升到一个全新的水平。Python turtle graphics和 HTML Canvas 图形是用程序创建简单和复杂艺术的两种方法。</p>\n<p>46.有一个正确的态度。要谦虚，你不可能知道编码的所有。即使你这样认为，我保证有人比你知道的更多。编程是没有尽头的循环。承认你不不知道，你很快就知道了。</p>\n<p>47.利用公共 API。有很多公共的应用接口，你可以用在你的程序里。<a href=\"https://developer.twitter.com/en\">Twitter</a>, <a href=\"https://developers.google.com/youtube/v3\">YouTube</a>, 和 <a href=\"https://developers.google.com/maps\">Google Maps</a> 有一些你可以再次开发的API。你可以在你的App中利用这些接口来创造骄人的应用。</p>\n<p>48.用Soloway’s Rainfall problem评估你的编程水平。 <a href=\"https://web.cs.wpi.edu/~kfisler/Pubs/icer14-rainfall/icer14.pdf\">Soloway’s Rainfall problem</a><br>可以为计算机专业学生测试编程技能。如果你能晚上这些编程任务，你就对编程的基础有了一个很好的理解。如果没有，继续学习吧。</p>\n<p>49.从控制台输入和输出中学习。即使有有精美的网站和图形用户界面。然而，不要忽略基础程序所提供的教学。接受来自 stdin 的输入并将输出写入 stdout 的程序可能非常强大、复杂且功能齐全。这些程序有很多东西可以学。</p>\n<p>50.<strong>学习汇编语言，理解计算机架构</strong>。当一个程序执行时。它使用了计算机资源。理解计算机内存CPU和其它硬件怎么工作可以帮助你理解计算机是怎么工作的。汇编语言是非常底层的语言。其指令对应机器码指令。在C语言中简单的if-else可能需要复杂的汇编语句。理解汇编语言和计算机原理，有助于理解计算机和程序如何交互。教你写更有效率的代码，让你成为一个更好的程序员。</p>\n<p>不管你做什么，保持续练习编程。最重要的是，注意安全，保持社交距离，注意安全。</p>\n<blockquote>\n<p>翻译自 ：<a href=\"https://dev.to/realedwintorres/50-ways-you-can-improve-as-a-programmer-7g2\">https://dev.to/realedwintorres/50-ways-you-can-improve-as-a-programmer-7g2</a></p>\n</blockquote>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-d0a43679b51fdc5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>我已经做了30多年的程序员了，程序员是一个终身学习，练习和提高的职业，在我的职业生涯中，我发现了很多方法来提高编码水平</p>\n<h2 id=\"提升程序员水平的50种方法\"><a href=\"#提升程序员水平的50种方法\" class=\"headerlink\" title=\"提升程序员水平的50种方法\"></a>提升程序员水平的50种方法</h2><p> 1.<strong>写大量程序</strong>，你写的每个程序不论大小，都会给你一些经验。练习可以提高你对编程概念的理解。</p>\n<p>2.<strong>让编程变成你的爱好</strong>。开发个人项目可以创造热情和激情。如果你喜欢这样做，学习就很容易了。</p>\n<p>3.<strong>在Stack Overflow上找答案</strong>。如果你有一个编程问题，很有可能会在<a href=\"https://stackoverflow.com/\">Stack Overflow</a>上找到答案。对答案保持批评态度，并把这个当作学习的机会。当你准备好的时候，也回答一下别人的问题。</p>\n<p>4.<strong>读好书，完成里面的例子</strong>。好的编程书有体系化的内容可以学习，  <a href=\"https://deitel.com/\">Deitel books</a>里面有很多例子和解释，如果你是个新手，可以看看我的书: <a href=\"https://www.amazon.com/dp/1718198450\">The Super Simple Programming Book</a>。</p>\n<p>5.<strong>学会一种方法，忽略其他方法</strong>，编程语言提供了不止一种方法去完成同一个任务，有几种方法可以将整型变量增加1。现在学习一种方法，然后你就可以学习其他编程概念了。</p>\n<p>6.<strong>学习基础的编程概念</strong>，当你学习编程的时候，基础很重要。学习数据类型，输入输出，选择，复用，等等。注重基础概念，这些将有利于学习其他语言。</p>\n<p>7.<strong>找一个导师</strong>，和有编程能力的人建立联系，从一个导师身上学到的远比你从网站和书上多的多。</p>\n<p>8.<strong>参加编程赛事</strong>，编程赛事是练习编程水平的有趣方法。推特有#100DaysOfCode.Code.org 有 <a href=\"https://code.org/\">Hour of Code</a>.The <a href=\"https://adventofcode.com/\">Advent of Code</a>真的是一个很有趣的编程挑战在11月的前25日。线上有更大赛事。</p>\n<p>9.参加一个免费的学习课程，<a href=\"https://www.coursera.org/search?query=programming\">Coursera</a>有很多来自顶级大学的优秀计算机课程。在<a href=\"https://www.udemy.com/courses/search/?src=ukw&q=programming\">Udemy</a>.上有很多相似课程。<a href=\"https://ocw.mit.edu/search/ocwsearch.htm?q=programming\">MIT OpenCourseWare</a>出版了部分计算机科学课程的教材。</p>\n<p>10.<strong>使用code linters</strong>，代码分析器为你的程序提供即时反馈。在线的w3c校验器可以校验你网页文档的合理性。<a href=\"https://eslint.org/\">ESlint</a>帮你找到修复js中的合理性。<a href=\"https://pylint.org/\">Pylint</a>可以校验Python 代码。Linters也可以在像vscode的IDE中当作插件使用，linters通过标记错误和建议性改变强迫你学习。</p>\n<p>11.<strong>利用静态代码分析工具</strong>。<a href=\"https://www.sonarqube.org/developer-edition/\">SonarQube</a>平台可以分析静态代码。可以帮你写出简洁，准确，安全的代码。</p>\n<p>12.<strong>参与代码审查</strong>，包括作者和审查者。不要害怕代码审查，拥抱他们。我们都犯错误，错误是学习的绝好机会。</p>\n<p>13.看油罐视频。上面有几乎所有多编程的教程，说明和课程。这些视频是学习编程的简单方法，仅仅通过看视频。比如，这里有一些关于<a href=\"https://www.youtube.com/results?search_query=Node.js\">Node.js</a>的视频课程。</p>\n<p>14.解决欧拉项目的问题。<a href=\"https://projecteuler.net/\">Project Euler</a>有很多可以用代码解决的数学和电脑科学的问题。该网站列出了解决每个问题的人数。</p>\n<p>15.参与谷歌代码大赛。<a href=\"https://codingcompetitions.withgoogle.com/\">Google coding competitions</a>对于练习很有用，而且你不需要正式参加比赛。 Code jam是年度，世界性的代码比赛。它列举了过去和现在的问题。也可以看看Google kick和哈希码比赛。</p>\n<p>16.使用IDE。集成开发环境，是可以帮你创造，编辑，debug程序的好工具。在你写代码的使用，IDES可以发现和高亮错误，给你正确的建议。IDE在你敲代码的时候给你集成性的代码参考。插件添加了额外的工具，如 linter 和查看器。现在最流行的IDE是 <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>。</p>\n<p>17.返回学校。如果你有条件，在当地的大学院或大学参与一个计算机课程，攻读计算机科学学士学位或认证，获得硕士学位将使您有资格在大学任教。</p>\n<p>18.考虑参与一个编码训练营，编码训练营提供特定编程技能的专门培训。这些技能通常需求量很大，参与训练营一定要小心，他们通常不一样，而且大多数都很贵。</p>\n<p>19.<strong>写技术博客</strong>。要学习一些东西，阅读它、听它和写它是有帮助的。在博客中写下您的日常编程经验将增强您的学习。让你有东西学更多的东西。两个流行的博客平台是<a href=\"https://dev.to/\">Dev Community</a>和 <a href=\"https://hashnode.com/\">Hashnode</a>，都是免费的博客平台，使您可以轻松地立即开始写博客。</p>\n<p>20.通过在线教程工作，有很多优秀的在线编程教程，有些是为了阅读。其他都是互动的。<a href=\"https://www.w3schools.com/\">W3Schools</a>简单，互动，快捷的在线平台。<a href=\"https://www.codecademy.com/\">Codecademy</a>有很多不同语言的优秀互动课程。</p>\n<p>21.参与编程论坛。阅读反馈博客。这些互动是非常好的学习机会。比如对java程序员来说，<a href=\"https://javaranch.com/\">JavaRanch</a>和<a href=\"https://www.javaprogrammingforums.com/\">Java Programming Forums</a>是非常流行的java在线社区。</p>\n<p>22.<strong>编程教学</strong>，教别人写代码，可以有效的提高你的编程知识，辅导大学或本地学生。为了去教别人，你必须备课，写例子，回答问题。这将迫使你理解编程，即使是志愿教授编程也有好处。</p>\n<p>23.搞一个属于你的站点，如果你喜欢web开发，学习怎么开发你自己的网站。包括域名注册，托管和维护。像这样的个人项目给了很多学习和编码的动力。</p>\n<p>24.<strong>参与代码面试</strong>。许多公司需要现场编码课程或带回家的作业作为面试过程的一部分，这些活动提供了非常好的学习机会和现实实践。你必须提前准备和学习。编码面试很有价值，即使你没有得到这份工作。</p>\n<p>25.<strong>在开源项目中学习</strong>。开源项目站点，比如<a href=\"https://github.com/\">GitHub</a>和<a href=\"https://about.gitlab.com/\">GitLab</a>提供了非常好的学习例子。其中许多软件项目在业界都很受欢迎，给这些项目做贡献提供了更多代码练习。</p>\n<p>26.<strong>遵循编码标准、最佳实践和风格指南</strong>。代码标准和最佳实践改进代码。可以让代码更易读，更容易维护，更准确，谷歌为很多编程语言发布了代码标准和<a href=\"https://google.github.io/styleguide/\">风格指南</a> 。 <a href=\"http://pep8online.com/\">PEP8 Online</a>检查 Python 代码并建议最佳实践和指南。</p>\n<p>27.<strong>成为自由职业者</strong>。把写代码当作服务。您可以在网上找到许多自由编程任务，即使一个好的练习机会也可以挣点钱。</p>\n<p>28.参与技术社区，找到一个你所在领域的技术社区。在<a href=\"https://www.linkedin.com/groups/\">LinkedIn</a>, <a href=\"https://www.facebook.com/groups/search/groups_home/?q=programming\">Facebook</a>, <a href=\"https://www.meetup.com/find/?keywords=programming&source=GROUPS\">Meetup</a>和其他站点有很多在线编程组。你可以和别人互动来分享你对技术的热忱。</p>\n<p>29.找一份工作。找一份编程方面的工作，任何编程工作。没有什么比行业经验和学习更胜一筹了。</p>\n<p>30.志愿写代码。每个行业都需要编程技术，很多行业没有能力雇佣程序员，有很多志愿编程的机会。在当地学校，俱乐部，组织有很多你可以提供帮助的编程任务。 <a href=\"https://code.org/volunteer\">Code.org</a>可以匹配到所在领域的志愿编程机会。</p>\n<p>31.写原生代码。是的。框架和库让写代码变得更简单，但是写原生代码可以学到很多东西。比如尝试用原生代码写js来代替jquery.使用纯数组代码java 数组类，写原生代码会迫使你考虑的更多，写更有效的方案。它还会让您领略许多有用的外部库的精华。</p>\n<p>32.不要重复造轮子。对于重要的编程，不要重复造轮子。对于特殊编程任务和逻辑，寻找已存在的方案。这些方案已经被使用被测试。比如<a href=\"https://www.npmjs.com/\">npm</a>是在线的node库。<a href=\"https://pypi.org/\">PyPI</a>托管外部Python库。选择编程库要挑剔一点，有些更好。</p>\n<p>33.参与编程会议。编程会议将各个级别的开发人员聚集在一起进行演示、演示和其他学习机会。<a href=\"https://ghc.anitab.org/\">Grace Hopper Celebration</a>是一个主要由女性参与的技术大会。<br><a href=\"https://io.google/2021/?lng=en\">Google I&#x2F;O</a>是另一个开发者大会。还有很多编程会议。有些提供虚拟席位。如果不是，确保你在参加的时候，他们提供了合适的社交距离。</p>\n<p>34.参与专业组织，像<a href=\"https://www.ieee.org/\">IEEE</a>和<a href=\"https://www.acm.org/\">ACM</a>)这样的专业组织提供合作机会、期刊、会议、小组和其他学习机会。这样的组织是收费的，但是学生有折扣。</p>\n<p>35.写一本书。对于编程书籍，主题无穷无尽。不论你现在编程水平如何，总有一本书适合你。像<a href=\"https://kdp.amazon.com/en_US/\">Amazon Kindle Direct Publishing</a>这样的组织让出书变的更容易。写书，会迫使你真正的学习相关资料，创造实例，测试你的程序。</p>\n<p>36.给机器人编程。有什么让编程进入你的生活更有趣呢。新手和专家可以搞一个机器人来完成编程任务。<a href=\"https://sphero.com/products/sphero-bolt\">Sphero BOLT</a>是具有传感器、运动和 LED 显示屏的可编程塑料球体。<a href=\"https://www.lego.com/en-us/themes/mindstorms/learntoprogram\">LEGO MINDSTORMS</a>另一个具有高级技能的编程机器人。<br>一些机器人在 <a href=\"https://education.minecraft.net/en-us/homepage\">Minecraft Education edition</a>, Java <a href=\"https://robocode.sourceforge.io/\">Robocode</a>, and Python <a href=\"https://docs.python.org/3/library/turtle.html\">turtle graphics</a>等很有用。编程机器人让编程变得更有趣，因为它们可视化了您的程序输出。</p>\n<p>37.访问Code.org. <a href=\"https://code.org/\">Code.org</a>值得在这份名单上占有一席之地，该网站致力于学习、教学和推广计算机科学。有适合初学者的在线编码活动、编码统计、励志视频等。</p>\n<p>38.尝试Alice。<a href=\"https://www.alice.org/\">Alice</a>是一个计算机科学的3D教学工具。可以让学校电脑科学可视化，趣味化。</p>\n<p>39.学习使用git控制代码版本。虽然这和编程没有特别直接的联系，毫无疑问，您将使用 Git 来维护程序的版本。像GitHub, <a href=\"https://bitbucket.org/\">Bitbucket</a>, and GitLab一类的在线git存储库都是很强大的软件协作工具，很多开发者使用GitHub托管代码。更多Git版本控制信息见<a href=\"https://git-scm.com/\">Git website</a>。</p>\n<p>40.拥抱实时沟通。这是另一个不是和编程有直接关系的话题。实时沟通工具在你写代码时，提供及时反馈和答案。<a href=\"https://slack.com/\">Slack</a>是一个非常流行的实时沟通的工具，可以提供持久的文本、语音和视频聊天。这个工具允许你，为不同的主题创造公共的和私有的频道，它可以让您将对话串连起来，以便更有条理。</p>\n<p>41.随时随地写代码。你的手机也是一台电脑，为什么不用呢， <a href=\"https://play.google.com/store/apps/details?id=org.qpython.qpy3&hl=en_US&gl=US\">QPython</a>是一个安卓手机的Python编译器，IOS上有<a href=\"https://apps.apple.com/us/app/python2ide/id984990674\">Python2IDE</a>，有了这样的App，你可以直接用你的手机写代码。</p>\n<p>42.<strong>在没有帮助的条件下写代码</strong>。接受编程任务并编写程序，不上网搜索，不通过IDE的帮助。看看你是否可以通过记忆编程。这种类型的编码练习将迫使您牢记重要的概念。这对于现场编码也是很好的练习。</p>\n<p>43.<strong>重构代码</strong>，学习怎么重构代码。即使程序为所有可能的输入产生正确的输出，仍有改进空间。比如，让你的程序更易维护，更易读，复杂度更低。</p>\n<p>44.<strong>学习其它编程语言</strong>。一旦你对基础编程有了一个好的基础，对给定编程语言的深刻理解，你就可以另辟蹊径了。学习其他语言可以提高你对编程语言的总体理解。了解不同的语言如何实现相同的编程概念或提供新功能会很有帮助。例如，Java 编程语言通过解决内存泄漏对 C++ 进行了改进。</p>\n<p>45.<strong>为艺术而编程</strong>。编程不仅仅是为了公司。编程可以创造艺术，通过随机行为、图形和处理，程序可以创建漂亮的输出。这将编程的热情提升到一个全新的水平。Python turtle graphics和 HTML Canvas 图形是用程序创建简单和复杂艺术的两种方法。</p>\n<p>46.有一个正确的态度。要谦虚，你不可能知道编码的所有。即使你这样认为，我保证有人比你知道的更多。编程是没有尽头的循环。承认你不不知道，你很快就知道了。</p>\n<p>47.利用公共 API。有很多公共的应用接口，你可以用在你的程序里。<a href=\"https://developer.twitter.com/en\">Twitter</a>, <a href=\"https://developers.google.com/youtube/v3\">YouTube</a>, 和 <a href=\"https://developers.google.com/maps\">Google Maps</a> 有一些你可以再次开发的API。你可以在你的App中利用这些接口来创造骄人的应用。</p>\n<p>48.用Soloway’s Rainfall problem评估你的编程水平。 <a href=\"https://web.cs.wpi.edu/~kfisler/Pubs/icer14-rainfall/icer14.pdf\">Soloway’s Rainfall problem</a><br>可以为计算机专业学生测试编程技能。如果你能晚上这些编程任务，你就对编程的基础有了一个很好的理解。如果没有，继续学习吧。</p>\n<p>49.从控制台输入和输出中学习。即使有有精美的网站和图形用户界面。然而，不要忽略基础程序所提供的教学。接受来自 stdin 的输入并将输出写入 stdout 的程序可能非常强大、复杂且功能齐全。这些程序有很多东西可以学。</p>\n<p>50.<strong>学习汇编语言，理解计算机架构</strong>。当一个程序执行时。它使用了计算机资源。理解计算机内存CPU和其它硬件怎么工作可以帮助你理解计算机是怎么工作的。汇编语言是非常底层的语言。其指令对应机器码指令。在C语言中简单的if-else可能需要复杂的汇编语句。理解汇编语言和计算机原理，有助于理解计算机和程序如何交互。教你写更有效率的代码，让你成为一个更好的程序员。</p>\n<p>不管你做什么，保持续练习编程。最重要的是，注意安全，保持社交距离，注意安全。</p>\n<blockquote>\n<p>翻译自 ：<a href=\"https://dev.to/realedwintorres/50-ways-you-can-improve-as-a-programmer-7g2\">https://dev.to/realedwintorres/50-ways-you-can-improve-as-a-programmer-7g2</a></p>\n</blockquote>\n"},{"title":"🎅📣你的github是空的吗","date":"2021-11-02T16:00:00.000Z","_content":"#  作为一个开发者，不经常对github提contributions并不意味着你写代码不咋滴，但是你失去了一个证明你是精神小伙的机会。\n#  为了改变这一点，以下有四个方面入手怎么给github做更多贡献\n## 1. Private repos\n搞一个私有库，每周至少在ReadMe.md中写句工作学习的总结，这样可以搞一个小册子 \n\n我没这样做，但是听别人这样弄了，这对100天代码练习和学习算法非常有用\n## 2. 经常 commit\n在你写代码的时候可以做些小提交，一个工作日3个小时最佳\n\n找到一些最终起作用的东西，提交\n\n一天结束了，提交一下今天干了啥\n\n写东西切代码可能会影响工作？先提交工作代码\n## 3. Issues\n给一些项目提Issues\n看看有哪些没开发的东西❓\n\n点击下 new Issues,完善细节\n\n保持任务的短小，想想他可以在一两个冲刺中实现吗\n\nweb开发每天处理issues。例如，用bootstrap 搞一个响应式导航栏\n## 4. 格局\n记住 github的图表并不能证明你的价值，但如果它完全是空的，会给人留下不好的印象️ \n\n当你的数据很火时，那么别人会把你看作是洞悉github和git概念的大佬.\n\n这至少说明你是个有能力专业人士，而不是需要别人带的菜鸟，最起码不是个懒人。\n\n主动把你学过的东西展示出来，尤其是自学的东西\n## 结论\n这份清单并没有说完，还有很多方法比如fork一个项目的分支，推送一个PR，review代码，等等。\n\n活跃在github上是一个展示专业知识的好方法，而且能学到你所做和不知道的东西\n\n面试官会也看这个东西，为什么不给人留个好印象呢，而且这也不费什么劲。\n\n我墙裂见你通过我上面的小步骤，好好搞一搞你的github,  然后再忙你的去。\n>翻译自 https://dev.to/techieeliot/is-your-github-empty-2gkh\n","source":"_posts/🎅📣你的github是空的吗.md","raw":"---\ntitle: \"🎅📣你的github是空的吗\"\ndate: 2021-11-03\ntags: \n- 开发日常\n---\n#  作为一个开发者，不经常对github提contributions并不意味着你写代码不咋滴，但是你失去了一个证明你是精神小伙的机会。\n#  为了改变这一点，以下有四个方面入手怎么给github做更多贡献\n## 1. Private repos\n搞一个私有库，每周至少在ReadMe.md中写句工作学习的总结，这样可以搞一个小册子 \n\n我没这样做，但是听别人这样弄了，这对100天代码练习和学习算法非常有用\n## 2. 经常 commit\n在你写代码的时候可以做些小提交，一个工作日3个小时最佳\n\n找到一些最终起作用的东西，提交\n\n一天结束了，提交一下今天干了啥\n\n写东西切代码可能会影响工作？先提交工作代码\n## 3. Issues\n给一些项目提Issues\n看看有哪些没开发的东西❓\n\n点击下 new Issues,完善细节\n\n保持任务的短小，想想他可以在一两个冲刺中实现吗\n\nweb开发每天处理issues。例如，用bootstrap 搞一个响应式导航栏\n## 4. 格局\n记住 github的图表并不能证明你的价值，但如果它完全是空的，会给人留下不好的印象️ \n\n当你的数据很火时，那么别人会把你看作是洞悉github和git概念的大佬.\n\n这至少说明你是个有能力专业人士，而不是需要别人带的菜鸟，最起码不是个懒人。\n\n主动把你学过的东西展示出来，尤其是自学的东西\n## 结论\n这份清单并没有说完，还有很多方法比如fork一个项目的分支，推送一个PR，review代码，等等。\n\n活跃在github上是一个展示专业知识的好方法，而且能学到你所做和不知道的东西\n\n面试官会也看这个东西，为什么不给人留个好印象呢，而且这也不费什么劲。\n\n我墙裂见你通过我上面的小步骤，好好搞一搞你的github,  然后再忙你的去。\n>翻译自 https://dev.to/techieeliot/is-your-github-empty-2gkh\n","slug":"🎅📣你的github是空的吗","published":1,"updated":"2024-05-16T07:39:11.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094o7004b2omv75stdla9","content":"<h1 id=\"作为一个开发者，不经常对github提contributions并不意味着你写代码不咋滴，但是你失去了一个证明你是精神小伙的机会。\"><a href=\"#作为一个开发者，不经常对github提contributions并不意味着你写代码不咋滴，但是你失去了一个证明你是精神小伙的机会。\" class=\"headerlink\" title=\"作为一个开发者，不经常对github提contributions并不意味着你写代码不咋滴，但是你失去了一个证明你是精神小伙的机会。\"></a>作为一个开发者，不经常对github提contributions并不意味着你写代码不咋滴，但是你失去了一个证明你是精神小伙的机会。</h1><h1 id=\"为了改变这一点，以下有四个方面入手怎么给github做更多贡献\"><a href=\"#为了改变这一点，以下有四个方面入手怎么给github做更多贡献\" class=\"headerlink\" title=\"为了改变这一点，以下有四个方面入手怎么给github做更多贡献\"></a>为了改变这一点，以下有四个方面入手怎么给github做更多贡献</h1><div class=\"\"><h2 id=\"1-Private-repos\"><a href=\"#1-Private-repos\" class=\"headerlink\" title=\"1. Private repos\"></a>1. Private repos</h2><p>搞一个私有库，每周至少在ReadMe.md中写句工作学习的总结，这样可以搞一个小册子 </p>\n<p>我没这样做，但是听别人这样弄了，这对100天代码练习和学习算法非常有用</p>\n</div><div class=\"\"><h2 id=\"2-经常-commit\"><a href=\"#2-经常-commit\" class=\"headerlink\" title=\"2. 经常 commit\"></a>2. 经常 commit</h2><p>在你写代码的时候可以做些小提交，一个工作日3个小时最佳</p>\n<p>找到一些最终起作用的东西，提交</p>\n<p>一天结束了，提交一下今天干了啥</p>\n<p>写东西切代码可能会影响工作？先提交工作代码</p>\n</div><div class=\"\"><h2 id=\"3-Issues\"><a href=\"#3-Issues\" class=\"headerlink\" title=\"3. Issues\"></a>3. Issues</h2><p>给一些项目提Issues<br>看看有哪些没开发的东西❓</p>\n<p>点击下 new Issues,完善细节</p>\n<p>保持任务的短小，想想他可以在一两个冲刺中实现吗</p>\n<p>web开发每天处理issues。例如，用bootstrap 搞一个响应式导航栏</p>\n</div><div class=\"\"><h2 id=\"4-格局\"><a href=\"#4-格局\" class=\"headerlink\" title=\"4. 格局\"></a>4. 格局</h2><p>记住 github的图表并不能证明你的价值，但如果它完全是空的，会给人留下不好的印象️ </p>\n<p>当你的数据很火时，那么别人会把你看作是洞悉github和git概念的大佬.</p>\n<p>这至少说明你是个有能力专业人士，而不是需要别人带的菜鸟，最起码不是个懒人。</p>\n<p>主动把你学过的东西展示出来，尤其是自学的东西</p>\n</div><div class=\"\"><h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>这份清单并没有说完，还有很多方法比如fork一个项目的分支，推送一个PR，review代码，等等。</p>\n<p>活跃在github上是一个展示专业知识的好方法，而且能学到你所做和不知道的东西</p>\n<p>面试官会也看这个东西，为什么不给人留个好印象呢，而且这也不费什么劲。</p>\n<p>我墙裂见你通过我上面的小步骤，好好搞一搞你的github,  然后再忙你的去。</p>\n<blockquote>\n<p>翻译自 <a href=\"https://dev.to/techieeliot/is-your-github-empty-2gkh\">https://dev.to/techieeliot/is-your-github-empty-2gkh</a></p>\n</blockquote>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"作为一个开发者，不经常对github提contributions并不意味着你写代码不咋滴，但是你失去了一个证明你是精神小伙的机会。\"><a href=\"#作为一个开发者，不经常对github提contributions并不意味着你写代码不咋滴，但是你失去了一个证明你是精神小伙的机会。\" class=\"headerlink\" title=\"作为一个开发者，不经常对github提contributions并不意味着你写代码不咋滴，但是你失去了一个证明你是精神小伙的机会。\"></a>作为一个开发者，不经常对github提contributions并不意味着你写代码不咋滴，但是你失去了一个证明你是精神小伙的机会。</h1><h1 id=\"为了改变这一点，以下有四个方面入手怎么给github做更多贡献\"><a href=\"#为了改变这一点，以下有四个方面入手怎么给github做更多贡献\" class=\"headerlink\" title=\"为了改变这一点，以下有四个方面入手怎么给github做更多贡献\"></a>为了改变这一点，以下有四个方面入手怎么给github做更多贡献</h1><h2 id=\"1-Private-repos\"><a href=\"#1-Private-repos\" class=\"headerlink\" title=\"1. Private repos\"></a>1. Private repos</h2><p>搞一个私有库，每周至少在ReadMe.md中写句工作学习的总结，这样可以搞一个小册子 </p>\n<p>我没这样做，但是听别人这样弄了，这对100天代码练习和学习算法非常有用</p>\n<h2 id=\"2-经常-commit\"><a href=\"#2-经常-commit\" class=\"headerlink\" title=\"2. 经常 commit\"></a>2. 经常 commit</h2><p>在你写代码的时候可以做些小提交，一个工作日3个小时最佳</p>\n<p>找到一些最终起作用的东西，提交</p>\n<p>一天结束了，提交一下今天干了啥</p>\n<p>写东西切代码可能会影响工作？先提交工作代码</p>\n<h2 id=\"3-Issues\"><a href=\"#3-Issues\" class=\"headerlink\" title=\"3. Issues\"></a>3. Issues</h2><p>给一些项目提Issues<br>看看有哪些没开发的东西❓</p>\n<p>点击下 new Issues,完善细节</p>\n<p>保持任务的短小，想想他可以在一两个冲刺中实现吗</p>\n<p>web开发每天处理issues。例如，用bootstrap 搞一个响应式导航栏</p>\n<h2 id=\"4-格局\"><a href=\"#4-格局\" class=\"headerlink\" title=\"4. 格局\"></a>4. 格局</h2><p>记住 github的图表并不能证明你的价值，但如果它完全是空的，会给人留下不好的印象️ </p>\n<p>当你的数据很火时，那么别人会把你看作是洞悉github和git概念的大佬.</p>\n<p>这至少说明你是个有能力专业人士，而不是需要别人带的菜鸟，最起码不是个懒人。</p>\n<p>主动把你学过的东西展示出来，尤其是自学的东西</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>这份清单并没有说完，还有很多方法比如fork一个项目的分支，推送一个PR，review代码，等等。</p>\n<p>活跃在github上是一个展示专业知识的好方法，而且能学到你所做和不知道的东西</p>\n<p>面试官会也看这个东西，为什么不给人留个好印象呢，而且这也不费什么劲。</p>\n<p>我墙裂见你通过我上面的小步骤，好好搞一搞你的github,  然后再忙你的去。</p>\n<blockquote>\n<p>翻译自 <a href=\"https://dev.to/techieeliot/is-your-github-empty-2gkh\">https://dev.to/techieeliot/is-your-github-empty-2gkh</a></p>\n</blockquote>\n"},{"title":"🎅🔥-Python-+-JavaScript-=-🔥🔥🔥","date":"2021-10-25T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-4f619d39eb0b8eff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n当涉及到 web开发时，javascript是无人能及的存在，但是有的时候我们需高要求的工作，比如解析一大堆数据，这样pyhton就是个更好的选择，但这仅仅是我们网站的一个功能而已，仅因为这个我们就需要转到python吗，也许不用。\n##### 如果我们可以大部分使用 Node JS, 在必要情况下使用python呢？\n碉堡了, 对吧，如有需要，我们可以使用`child process` 去运行一个python脚本\n```js\n\nconst spawn = require('child_process').spawn\napp.get(\"process_data\", (req, res) => {\n    spawn('python3', ['script.py'])\n})\n\n```\n```python\n# script.py\ndoSometing()\n```\n我们也可以传参\n```js\n\nconst spawn = require('child_process').spawn\napp.get(\"process_data\", (req, res) => {\n    const msg = \"Hello\"\n    spawn('python3', ['script.py', msg])\n})\n\n```\n在 python中我们必须通过 **import the sys** 才能接收数据\n```python\n\nimport sys, json\n\ndef main():\n    msg = sys.argv[1]\n    doSometing(msg)\n\nif __name__ == '__main__':\n    main()\n\n```\n我们也可以通过stream代替 生成python进程传参\n```js\n\nconst spawn = require('child_process').spawn,\nconst py = spawn('python3', ['script.py'])\nconst data = {\n    msg: \"Hello\"\n}\n\npy.stdin.write(JSON.stringify(data)) //we have to send data as a string, so we are using JSON.stringify\npy.stdin.end()\n\n```\n```python\nimport sys, json\n\ndef main():\n    lines = sys.stdin.readlines()\n    data = json.loads(lines)\n    doSometing(data['msg'])\n\nif __name__ == '__main__':\n    main()\n```\n\n最后通过python 回调函数把数据传到node\n```js\nconst spawn = require('child_process').spawn\nconst py = spawn('python3', ['cscript.py'])\n\npy.stdout.on('data', function(res){\n   let data = JSON.parse(res.toString())\n   console.log(data)\n})\n```\n```python\nimport sys\n\n# You will have your own implementation of get data. In this case lets assume it returns a dict/json\nres = getData()\nprint(json.dumps(data))\n\nsys.stdout.flush()\n```\n> 翻译自 https://dev.to/0shuvo0/python-javascript--1nd6\n","source":"_posts/🎅🔥-Python-+-JavaScript-=-🔥🔥🔥.md","raw":"---\ntitle: \"🎅🔥-Python-+-JavaScript-=-🔥🔥🔥\"\ndate: 2021-10-26\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-4f619d39eb0b8eff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n当涉及到 web开发时，javascript是无人能及的存在，但是有的时候我们需高要求的工作，比如解析一大堆数据，这样pyhton就是个更好的选择，但这仅仅是我们网站的一个功能而已，仅因为这个我们就需要转到python吗，也许不用。\n##### 如果我们可以大部分使用 Node JS, 在必要情况下使用python呢？\n碉堡了, 对吧，如有需要，我们可以使用`child process` 去运行一个python脚本\n```js\n\nconst spawn = require('child_process').spawn\napp.get(\"process_data\", (req, res) => {\n    spawn('python3', ['script.py'])\n})\n\n```\n```python\n# script.py\ndoSometing()\n```\n我们也可以传参\n```js\n\nconst spawn = require('child_process').spawn\napp.get(\"process_data\", (req, res) => {\n    const msg = \"Hello\"\n    spawn('python3', ['script.py', msg])\n})\n\n```\n在 python中我们必须通过 **import the sys** 才能接收数据\n```python\n\nimport sys, json\n\ndef main():\n    msg = sys.argv[1]\n    doSometing(msg)\n\nif __name__ == '__main__':\n    main()\n\n```\n我们也可以通过stream代替 生成python进程传参\n```js\n\nconst spawn = require('child_process').spawn,\nconst py = spawn('python3', ['script.py'])\nconst data = {\n    msg: \"Hello\"\n}\n\npy.stdin.write(JSON.stringify(data)) //we have to send data as a string, so we are using JSON.stringify\npy.stdin.end()\n\n```\n```python\nimport sys, json\n\ndef main():\n    lines = sys.stdin.readlines()\n    data = json.loads(lines)\n    doSometing(data['msg'])\n\nif __name__ == '__main__':\n    main()\n```\n\n最后通过python 回调函数把数据传到node\n```js\nconst spawn = require('child_process').spawn\nconst py = spawn('python3', ['cscript.py'])\n\npy.stdout.on('data', function(res){\n   let data = JSON.parse(res.toString())\n   console.log(data)\n})\n```\n```python\nimport sys\n\n# You will have your own implementation of get data. In this case lets assume it returns a dict/json\nres = getData()\nprint(json.dumps(data))\n\nsys.stdout.flush()\n```\n> 翻译自 https://dev.to/0shuvo0/python-javascript--1nd6\n","slug":"🎅🔥-Python-+-JavaScript-=-🔥🔥🔥","published":1,"updated":"2024-05-16T07:39:11.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094o8004e2omv8x6vhlm4","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4f619d39eb0b8eff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>当涉及到 web开发时，javascript是无人能及的存在，但是有的时候我们需高要求的工作，比如解析一大堆数据，这样pyhton就是个更好的选择，但这仅仅是我们网站的一个功能而已，仅因为这个我们就需要转到python吗，也许不用。</p>\n<h5 id=\"如果我们可以大部分使用-Node-JS-在必要情况下使用python呢？\"><a href=\"#如果我们可以大部分使用-Node-JS-在必要情况下使用python呢？\" class=\"headerlink\" title=\"如果我们可以大部分使用 Node JS, 在必要情况下使用python呢？\"></a>如果我们可以大部分使用 Node JS, 在必要情况下使用python呢？</h5><p>碉堡了, 对吧，如有需要，我们可以使用<code>child process</code> 去运行一个python脚本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>).<span class=\"property\">spawn</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;process_data&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;python3&#x27;</span>, [<span class=\"string\">&#x27;script.py&#x27;</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># script.py</span></span><br><span class=\"line\">doSometing()</span><br></pre></td></tr></table></figure>\n<p>我们也可以传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>).<span class=\"property\">spawn</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;process_data&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> msg = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">    <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;python3&#x27;</span>, [<span class=\"string\">&#x27;script.py&#x27;</span>, msg])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 python中我们必须通过 <strong>import the sys</strong> 才能接收数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    msg = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">    doSometing(msg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>我们也可以通过stream代替 生成python进程传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>).<span class=\"property\">spawn</span>,</span><br><span class=\"line\"><span class=\"keyword\">const</span> py = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;python3&#x27;</span>, [<span class=\"string\">&#x27;script.py&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">py.<span class=\"property\">stdin</span>.<span class=\"title function_\">write</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data)) <span class=\"comment\">//we have to send data as a string, so we are using JSON.stringify</span></span><br><span class=\"line\">py.<span class=\"property\">stdin</span>.<span class=\"title function_\">end</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys, json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    lines = sys.stdin.readlines()</span><br><span class=\"line\">    data = json.loads(lines)</span><br><span class=\"line\">    doSometing(data[<span class=\"string\">&#x27;msg&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>最后通过python 回调函数把数据传到node</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>).<span class=\"property\">spawn</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> py = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;python3&#x27;</span>, [<span class=\"string\">&#x27;cscript.py&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">py.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(res.<span class=\"title function_\">toString</span>())</span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You will have your own implementation of get data. In this case lets assume it returns a dict/json</span></span><br><span class=\"line\">res = getData()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(json.dumps(data))</span><br><span class=\"line\"></span><br><span class=\"line\">sys.stdout.flush()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>翻译自 <a href=\"https://dev.to/0shuvo0/python-javascript--1nd6\">https://dev.to/0shuvo0/python-javascript--1nd6</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4f619d39eb0b8eff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>当涉及到 web开发时，javascript是无人能及的存在，但是有的时候我们需高要求的工作，比如解析一大堆数据，这样pyhton就是个更好的选择，但这仅仅是我们网站的一个功能而已，仅因为这个我们就需要转到python吗，也许不用。</p>\n<h5 id=\"如果我们可以大部分使用-Node-JS-在必要情况下使用python呢？\"><a href=\"#如果我们可以大部分使用-Node-JS-在必要情况下使用python呢？\" class=\"headerlink\" title=\"如果我们可以大部分使用 Node JS, 在必要情况下使用python呢？\"></a>如果我们可以大部分使用 Node JS, 在必要情况下使用python呢？</h5><p>碉堡了, 对吧，如有需要，我们可以使用<code>child process</code> 去运行一个python脚本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>).<span class=\"property\">spawn</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;process_data&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;python3&#x27;</span>, [<span class=\"string\">&#x27;script.py&#x27;</span>])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># script.py</span></span><br><span class=\"line\">doSometing()</span><br></pre></td></tr></table></figure>\n<p>我们也可以传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>).<span class=\"property\">spawn</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;process_data&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> msg = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">    <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;python3&#x27;</span>, [<span class=\"string\">&#x27;script.py&#x27;</span>, msg])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 python中我们必须通过 <strong>import the sys</strong> 才能接收数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    msg = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">    doSometing(msg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>我们也可以通过stream代替 生成python进程传参</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>).<span class=\"property\">spawn</span>,</span><br><span class=\"line\"><span class=\"keyword\">const</span> py = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;python3&#x27;</span>, [<span class=\"string\">&#x27;script.py&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">py.<span class=\"property\">stdin</span>.<span class=\"title function_\">write</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data)) <span class=\"comment\">//we have to send data as a string, so we are using JSON.stringify</span></span><br><span class=\"line\">py.<span class=\"property\">stdin</span>.<span class=\"title function_\">end</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys, json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    lines = sys.stdin.readlines()</span><br><span class=\"line\">    data = json.loads(lines)</span><br><span class=\"line\">    doSometing(data[<span class=\"string\">&#x27;msg&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>最后通过python 回调函数把数据传到node</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>).<span class=\"property\">spawn</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> py = <span class=\"title function_\">spawn</span>(<span class=\"string\">&#x27;python3&#x27;</span>, [<span class=\"string\">&#x27;cscript.py&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">py.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(res.<span class=\"title function_\">toString</span>())</span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You will have your own implementation of get data. In this case lets assume it returns a dict/json</span></span><br><span class=\"line\">res = getData()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(json.dumps(data))</span><br><span class=\"line\"></span><br><span class=\"line\">sys.stdout.flush()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>翻译自 <a href=\"https://dev.to/0shuvo0/python-javascript--1nd6\">https://dev.to/0shuvo0/python-javascript--1nd6</a></p>\n</blockquote>\n"},{"title":"🎥-各个跨端技术原理归纳","date":"2021-11-01T16:00:00.000Z","_content":"\n### 原理归纳\n#### 1.react-native\n  - brige js => brige => native\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-10dbbf940db1a777.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 2.flutter \n  - flutter => skia => 原生\n#### 3. uni-app \n  - 小程序 ： 小程序 => 编译器 =>原生\n  - 原生 : webview weex => 原生\n#### 4.taro\n  - 小程序 : 小程序 => 编译器 =>原生\n  - 原生：  Rn => 原生\n### 各平台支持情况\n| 平台 \\ 跨段方案 | RN | flutter | uni-app| Taro|\n| --- | --- |--- | --- | --\n|微信小程序| ❌ | ❌| ✅| ✅|\n|web| ❌ | ✅| ✅ | ✅|\n|IOS| ✅| ✅| ✅ | ✅|\n|android| ✅ | ✅| ✅ | ✅|\n> [深入理解Flutter的图形图像绘制原理——图形库skia剖析](https://segmentfault.com/a/1190000038827450)\n","source":"_posts/🎥-各个跨端技术原理归纳.md","raw":"---\ntitle: \"🎥-各个跨端技术原理归纳\"\ndate: 2021-11-02\ntags: \n- 开发日常\n---\n\n### 原理归纳\n#### 1.react-native\n  - brige js => brige => native\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-10dbbf940db1a777.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 2.flutter \n  - flutter => skia => 原生\n#### 3. uni-app \n  - 小程序 ： 小程序 => 编译器 =>原生\n  - 原生 : webview weex => 原生\n#### 4.taro\n  - 小程序 : 小程序 => 编译器 =>原生\n  - 原生：  Rn => 原生\n### 各平台支持情况\n| 平台 \\ 跨段方案 | RN | flutter | uni-app| Taro|\n| --- | --- |--- | --- | --\n|微信小程序| ❌ | ❌| ✅| ✅|\n|web| ❌ | ✅| ✅ | ✅|\n|IOS| ✅| ✅| ✅ | ✅|\n|android| ✅ | ✅| ✅ | ✅|\n> [深入理解Flutter的图形图像绘制原理——图形库skia剖析](https://segmentfault.com/a/1190000038827450)\n","slug":"🎥-各个跨端技术原理归纳","published":1,"updated":"2024-05-16T07:39:11.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094oa004g2omv7u584jnq","content":"<h3 id=\"原理归纳\"><a href=\"#原理归纳\" class=\"headerlink\" title=\"原理归纳\"></a>原理归纳</h3><h4 id=\"1-react-native\"><a href=\"#1-react-native\" class=\"headerlink\" title=\"1.react-native\"></a>1.react-native</h4><ul>\n<li>brige js &#x3D;&gt; brige &#x3D;&gt; native<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-10dbbf940db1a777.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><h4 id=\"2-flutter\"><a href=\"#2-flutter\" class=\"headerlink\" title=\"2.flutter\"></a>2.flutter</h4></li>\n<li>flutter &#x3D;&gt; skia &#x3D;&gt; 原生<h4 id=\"3-uni-app\"><a href=\"#3-uni-app\" class=\"headerlink\" title=\"3. uni-app\"></a>3. uni-app</h4></li>\n<li>小程序 ： 小程序 &#x3D;&gt; 编译器 &#x3D;&gt;原生</li>\n<li>原生 : webview weex &#x3D;&gt; 原生<h4 id=\"4-taro\"><a href=\"#4-taro\" class=\"headerlink\" title=\"4.taro\"></a>4.taro</h4></li>\n<li>小程序 : 小程序 &#x3D;&gt; 编译器 &#x3D;&gt;原生</li>\n<li>原生：  Rn &#x3D;&gt; 原生<h3 id=\"各平台支持情况\"><a href=\"#各平台支持情况\" class=\"headerlink\" title=\"各平台支持情况\"></a>各平台支持情况</h3><table>\n<thead>\n<tr>\n<th>平台 \\ 跨段方案</th>\n<th>RN</th>\n<th>flutter</th>\n<th>uni-app</th>\n<th>Taro</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>微信小程序</td>\n<td>❌</td>\n<td>❌</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>web</td>\n<td>❌</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>IOS</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>android</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000038827450\">深入理解Flutter的图形图像绘制原理——图形库skia剖析</a></p>\n</blockquote>\n</li>\n</ul>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"原理归纳\"><a href=\"#原理归纳\" class=\"headerlink\" title=\"原理归纳\"></a>原理归纳</h3><h4 id=\"1-react-native\"><a href=\"#1-react-native\" class=\"headerlink\" title=\"1.react-native\"></a>1.react-native</h4><ul>\n<li>brige js &#x3D;&gt; brige &#x3D;&gt; native<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-10dbbf940db1a777.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><h4 id=\"2-flutter\"><a href=\"#2-flutter\" class=\"headerlink\" title=\"2.flutter\"></a>2.flutter</h4></li>\n<li>flutter &#x3D;&gt; skia &#x3D;&gt; 原生<h4 id=\"3-uni-app\"><a href=\"#3-uni-app\" class=\"headerlink\" title=\"3. uni-app\"></a>3. uni-app</h4></li>\n<li>小程序 ： 小程序 &#x3D;&gt; 编译器 &#x3D;&gt;原生</li>\n<li>原生 : webview weex &#x3D;&gt; 原生<h4 id=\"4-taro\"><a href=\"#4-taro\" class=\"headerlink\" title=\"4.taro\"></a>4.taro</h4></li>\n<li>小程序 : 小程序 &#x3D;&gt; 编译器 &#x3D;&gt;原生</li>\n<li>原生：  Rn &#x3D;&gt; 原生<h3 id=\"各平台支持情况\"><a href=\"#各平台支持情况\" class=\"headerlink\" title=\"各平台支持情况\"></a>各平台支持情况</h3><table>\n<thead>\n<tr>\n<th>平台 \\ 跨段方案</th>\n<th>RN</th>\n<th>flutter</th>\n<th>uni-app</th>\n<th>Taro</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>微信小程序</td>\n<td>❌</td>\n<td>❌</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>web</td>\n<td>❌</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>IOS</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>android</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000038827450\">深入理解Flutter的图形图像绘制原理——图形库skia剖析</a></p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"🎨🎨-git-Tips","date":"2021-02-01T16:00:00.000Z","_content":"### 忽略文件\n##### 对于未入库的文件\n\n`touch .gitignore`\n\n在文件中写入需要忽略的文件（如：*.diff  ……具体见链接），或者不遵循忽略原则的特例（文件前加“！”）\n\n（注：只对untracked files有效）\n\n\n##### 对于已入库的文件\n`git update-index --assume-unchanged    $path + $file`\n\n若以后不想忽略该文件的修改，则输入命令：\n`git update-index --no-assume-unchanged $path + $file  `\n### stash 单个文件\n`$ git stash push -m \"message\" file_path`\n","source":"_posts/🎨🎨-git-Tips.md","raw":"---\ntitle: \"🎨🎨-git-Tips\"\ndate: 2021-02-02\ntags: \n- 开发日常\n---\n### 忽略文件\n##### 对于未入库的文件\n\n`touch .gitignore`\n\n在文件中写入需要忽略的文件（如：*.diff  ……具体见链接），或者不遵循忽略原则的特例（文件前加“！”）\n\n（注：只对untracked files有效）\n\n\n##### 对于已入库的文件\n`git update-index --assume-unchanged    $path + $file`\n\n若以后不想忽略该文件的修改，则输入命令：\n`git update-index --no-assume-unchanged $path + $file  `\n### stash 单个文件\n`$ git stash push -m \"message\" file_path`\n","slug":"🎨🎨-git-Tips","published":1,"updated":"2024-05-16T07:39:11.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ob004i2omva32607c4","content":"<h3 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h3><h5 id=\"对于未入库的文件\"><a href=\"#对于未入库的文件\" class=\"headerlink\" title=\"对于未入库的文件\"></a>对于未入库的文件</h5><p><code>touch .gitignore</code></p>\n<p>在文件中写入需要忽略的文件（如：*.diff  ……具体见链接），或者不遵循忽略原则的特例（文件前加“！”）</p>\n<p>（注：只对untracked files有效）</p>\n<h5 id=\"对于已入库的文件\"><a href=\"#对于已入库的文件\" class=\"headerlink\" title=\"对于已入库的文件\"></a>对于已入库的文件</h5><p><code>git update-index --assume-unchanged    $path + $file</code></p>\n<p>若以后不想忽略该文件的修改，则输入命令：<br><code>git update-index --no-assume-unchanged $path + $file  </code></p>\n<h3 id=\"stash-单个文件\"><a href=\"#stash-单个文件\" class=\"headerlink\" title=\"stash 单个文件\"></a>stash 单个文件</h3><p><code>$ git stash push -m &quot;message&quot; file_path</code></p>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h3><h5 id=\"对于未入库的文件\"><a href=\"#对于未入库的文件\" class=\"headerlink\" title=\"对于未入库的文件\"></a>对于未入库的文件</h5><p><code>touch .gitignore</code></p>\n<p>在文件中写入需要忽略的文件（如：*.diff  ……具体见链接），或者不遵循忽略原则的特例（文件前加“！”）</p>\n<p>（注：只对untracked files有效）</p>\n<h5 id=\"对于已入库的文件\"><a href=\"#对于已入库的文件\" class=\"headerlink\" title=\"对于已入库的文件\"></a>对于已入库的文件</h5><p><code>git update-index --assume-unchanged    $path + $file</code></p>\n<p>若以后不想忽略该文件的修改，则输入命令：<br><code>git update-index --no-assume-unchanged $path + $file  </code></p>\n<h3 id=\"stash-单个文件\"><a href=\"#stash-单个文件\" class=\"headerlink\" title=\"stash 单个文件\"></a>stash 单个文件</h3><p><code>$ git stash push -m &quot;message&quot; file_path</code></p>\n"},{"title":"🎨🎨-git-reset-提交","date":"2021-12-24T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-8db8fbf9c8ec1e7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nps: `git reset -HEAD^ ` mac平台 需要写成 `git reset -HEAD\\^`\n> [https://www.jianshu.com/p/c2ec5f06cf1a](https://www.jianshu.com/p/c2ec5f06cf1a)\n","source":"_posts/🎨🎨-git-reset-提交.md","raw":"---\ntitle: \"🎨🎨-git-reset-提交\"\ndate: 2021-12-25\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-8db8fbf9c8ec1e7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nps: `git reset -HEAD^ ` mac平台 需要写成 `git reset -HEAD\\^`\n> [https://www.jianshu.com/p/c2ec5f06cf1a](https://www.jianshu.com/p/c2ec5f06cf1a)\n","slug":"🎨🎨-git-reset-提交","published":1,"updated":"2024-05-16T07:39:11.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094of004k2omv3uif6ypm","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8db8fbf9c8ec1e7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>ps: <code>git reset -HEAD^ </code> mac平台 需要写成 <code>git reset -HEAD\\^</code></p>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/c2ec5f06cf1a\">https://www.jianshu.com/p/c2ec5f06cf1a</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8db8fbf9c8ec1e7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>ps: <code>git reset -HEAD^ </code> mac平台 需要写成 <code>git reset -HEAD\\^</code></p>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/c2ec5f06cf1a\">https://www.jianshu.com/p/c2ec5f06cf1a</a></p>\n</blockquote>\n"},{"title":"🎨🎨-git-一些常用参数设置","date":"2021-09-18T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-f01c769cc05d07ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## -u\n```\n[-u | --set-upstream]\ngit push -u origin main \ngit push ---set-upstream origin main\n```\n设置默认推送分支\n\n## origin\n```\ngit remote add origin http:xxxxx\n```\norigin 是提交远程的命名 也可以自己命名比如 ppp o\n\n## --help\n比如git push\n```\ngit push --help\n```\n\n## git  全局配置修改\n第一种 vi\n```\nvi ~/.gitconfig\n```\n第二种\n\n```\ngit config --global --edit\n```\n","source":"_posts/🎨🎨-git-一些常用参数设置.md","raw":"---\ntitle: \"🎨🎨-git-一些常用参数设置\"\ndate: 2021-09-19\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-f01c769cc05d07ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## -u\n```\n[-u | --set-upstream]\ngit push -u origin main \ngit push ---set-upstream origin main\n```\n设置默认推送分支\n\n## origin\n```\ngit remote add origin http:xxxxx\n```\norigin 是提交远程的命名 也可以自己命名比如 ppp o\n\n## --help\n比如git push\n```\ngit push --help\n```\n\n## git  全局配置修改\n第一种 vi\n```\nvi ~/.gitconfig\n```\n第二种\n\n```\ngit config --global --edit\n```\n","slug":"🎨🎨-git-一些常用参数设置","published":1,"updated":"2024-05-16T07:39:11.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094og004m2omvdyoqhyo8","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f01c769cc05d07ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<div class=\"\"><h2 id=\"u\"><a href=\"#u\" class=\"headerlink\" title=\"-u\"></a>-u</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[-u | --set-upstream]</span><br><span class=\"line\">git push -u origin main </span><br><span class=\"line\">git push ---set-upstream origin main</span><br></pre></td></tr></table></figure>\n<p>设置默认推送分支</p>\n</div><div class=\"\"><h2 id=\"origin\"><a href=\"#origin\" class=\"headerlink\" title=\"origin\"></a>origin</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin http:xxxxx</span><br></pre></td></tr></table></figure>\n<p>origin 是提交远程的命名 也可以自己命名比如 ppp o</p>\n</div><div class=\"\"><h2 id=\"–help\"><a href=\"#–help\" class=\"headerlink\" title=\"–help\"></a>–help</h2><p>比如git push</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --help</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"git-全局配置修改\"><a href=\"#git-全局配置修改\" class=\"headerlink\" title=\"git  全局配置修改\"></a>git  全局配置修改</h2><p>第一种 vi</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.gitconfig</span><br></pre></td></tr></table></figure>\n<p>第二种</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --edit</span><br></pre></td></tr></table></figure>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f01c769cc05d07ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h2 id=\"u\"><a href=\"#u\" class=\"headerlink\" title=\"-u\"></a>-u</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[-u | --set-upstream]</span><br><span class=\"line\">git push -u origin main </span><br><span class=\"line\">git push ---set-upstream origin main</span><br></pre></td></tr></table></figure>\n<p>设置默认推送分支</p>\n<h2 id=\"origin\"><a href=\"#origin\" class=\"headerlink\" title=\"origin\"></a>origin</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin http:xxxxx</span><br></pre></td></tr></table></figure>\n<p>origin 是提交远程的命名 也可以自己命名比如 ppp o</p>\n<h2 id=\"–help\"><a href=\"#–help\" class=\"headerlink\" title=\"–help\"></a>–help</h2><p>比如git push</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --help</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-全局配置修改\"><a href=\"#git-全局配置修改\" class=\"headerlink\" title=\"git  全局配置修改\"></a>git  全局配置修改</h2><p>第一种 vi</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.gitconfig</span><br></pre></td></tr></table></figure>\n<p>第二种</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --edit</span><br></pre></td></tr></table></figure>\n"},{"title":"🎨🎨-git-设置文件大小写敏感","date":"2021-01-14T16:00:00.000Z","_content":"### 方法一\n\n命令设置Git大小写敏感：\n```\ngit config core.ignorecase false\n```\n### 方法二\n\n找到项目的 .git 文件夹（window默认是隐藏的，设置显示隐藏的项目即可出现） 下的 config 文件打开，将\n\nignorecase = true 设置成 ignorecase = false\n\ngit文件大小写敏感导致的问题，在有些mac上，文件大小写是不敏感的。\n\n### 比如两个同学，小a的电脑大小写不敏感，小b的电脑大小写敏感。\n1.小a 提交了一个 文件 Out.vue, 路径/admin/out.vue\n\n2.小b拉pull 代码，结果路径找不到文件。\n\n3.小b找小a,让小a把Out.vue 改成 out.vue\n\n4.小a 本地git 大小写不敏感，修改文件，发现git add 发现没有任何修改\n\n5.设置git 大小写敏感，代码问题解决。\n\n6.为了避免类似问题再次发生，小a需要把电脑设置为大小写敏感\n> 设置mac 系统为大小写敏感(https://www.jianshu.com/p/24fd2a0ae493)  \n","source":"_posts/🎨🎨-git-设置文件大小写敏感.md","raw":"---\ntitle: \"🎨🎨-git-设置文件大小写敏感\"\ndate: 2021-01-15\ntags: \n- 开发日常\n---\n### 方法一\n\n命令设置Git大小写敏感：\n```\ngit config core.ignorecase false\n```\n### 方法二\n\n找到项目的 .git 文件夹（window默认是隐藏的，设置显示隐藏的项目即可出现） 下的 config 文件打开，将\n\nignorecase = true 设置成 ignorecase = false\n\ngit文件大小写敏感导致的问题，在有些mac上，文件大小写是不敏感的。\n\n### 比如两个同学，小a的电脑大小写不敏感，小b的电脑大小写敏感。\n1.小a 提交了一个 文件 Out.vue, 路径/admin/out.vue\n\n2.小b拉pull 代码，结果路径找不到文件。\n\n3.小b找小a,让小a把Out.vue 改成 out.vue\n\n4.小a 本地git 大小写不敏感，修改文件，发现git add 发现没有任何修改\n\n5.设置git 大小写敏感，代码问题解决。\n\n6.为了避免类似问题再次发生，小a需要把电脑设置为大小写敏感\n> 设置mac 系统为大小写敏感(https://www.jianshu.com/p/24fd2a0ae493)  \n","slug":"🎨🎨-git-设置文件大小写敏感","published":1,"updated":"2024-05-16T07:39:11.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094og004o2omv5ukqe3xe","content":"<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>命令设置Git大小写敏感：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.ignorecase false</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>找到项目的 .git 文件夹（window默认是隐藏的，设置显示隐藏的项目即可出现） 下的 config 文件打开，将</p>\n<p>ignorecase &#x3D; true 设置成 ignorecase &#x3D; false</p>\n<p>git文件大小写敏感导致的问题，在有些mac上，文件大小写是不敏感的。</p>\n<h3 id=\"比如两个同学，小a的电脑大小写不敏感，小b的电脑大小写敏感。\"><a href=\"#比如两个同学，小a的电脑大小写不敏感，小b的电脑大小写敏感。\" class=\"headerlink\" title=\"比如两个同学，小a的电脑大小写不敏感，小b的电脑大小写敏感。\"></a>比如两个同学，小a的电脑大小写不敏感，小b的电脑大小写敏感。</h3><p>1.小a 提交了一个 文件 Out.vue, 路径&#x2F;admin&#x2F;out.vue</p>\n<p>2.小b拉pull 代码，结果路径找不到文件。</p>\n<p>3.小b找小a,让小a把Out.vue 改成 out.vue</p>\n<p>4.小a 本地git 大小写不敏感，修改文件，发现git add 发现没有任何修改</p>\n<p>5.设置git 大小写敏感，代码问题解决。</p>\n<p>6.为了避免类似问题再次发生，小a需要把电脑设置为大小写敏感</p>\n<blockquote>\n<p>设置mac 系统为大小写敏感(<a href=\"https://www.jianshu.com/p/24fd2a0ae493\">https://www.jianshu.com/p/24fd2a0ae493</a>)  </p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>命令设置Git大小写敏感：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.ignorecase false</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>找到项目的 .git 文件夹（window默认是隐藏的，设置显示隐藏的项目即可出现） 下的 config 文件打开，将</p>\n<p>ignorecase &#x3D; true 设置成 ignorecase &#x3D; false</p>\n<p>git文件大小写敏感导致的问题，在有些mac上，文件大小写是不敏感的。</p>\n<h3 id=\"比如两个同学，小a的电脑大小写不敏感，小b的电脑大小写敏感。\"><a href=\"#比如两个同学，小a的电脑大小写不敏感，小b的电脑大小写敏感。\" class=\"headerlink\" title=\"比如两个同学，小a的电脑大小写不敏感，小b的电脑大小写敏感。\"></a>比如两个同学，小a的电脑大小写不敏感，小b的电脑大小写敏感。</h3><p>1.小a 提交了一个 文件 Out.vue, 路径&#x2F;admin&#x2F;out.vue</p>\n<p>2.小b拉pull 代码，结果路径找不到文件。</p>\n<p>3.小b找小a,让小a把Out.vue 改成 out.vue</p>\n<p>4.小a 本地git 大小写不敏感，修改文件，发现git add 发现没有任何修改</p>\n<p>5.设置git 大小写敏感，代码问题解决。</p>\n<p>6.为了避免类似问题再次发生，小a需要把电脑设置为大小写敏感</p>\n<blockquote>\n<p>设置mac 系统为大小写敏感(<a href=\"https://www.jianshu.com/p/24fd2a0ae493\">https://www.jianshu.com/p/24fd2a0ae493</a>)  </p>\n</blockquote>\n"},{"title":"🎨🎨git-The-project-you-were-looking-for-could-not-be-found-解","date":"2022-05-15T16:00:00.000Z","_content":"#### 问题描述：\n使用git clone项目，出现The project you were looking for could not be found\n\n#### 原因：\ngit自动保存了用户名密码，当前项目的用户名密码与之前的发生冲突。\n很有可能是github设置了用户名和密码，当你在别的平台使用git时用户名就不一样了，发生错误\n\n#### 解决方案：\n（1)一次性\n```sh\ngit clone http://mygitusername@git.coding.net/name/project.git\n```\n（2）永久\n\n`windows:`\n\n清除本地git账户，重新输入用户名与密码。\n```\ngit config --system --unset  credential.helper\n```\n之后再进行git操作时，弹出用户名密码窗口，输入即可。\n\n` mac:`\n```sh\ngit config --global credential.username <mygitusername>\n```\n> [Git密码（登录凭证）的保存和重置 Mac](https://blog.csdn.net/lynnjinglei/article/details/119025494)\n","source":"_posts/🎨🎨git-The-project-you-were-looking-for-could-not-be-found-解.md","raw":"---\ntitle: \"🎨🎨git-The-project-you-were-looking-for-could-not-be-found-解\"\ndate: 2022-05-16\ntags: \n- 开发日常\n---\n#### 问题描述：\n使用git clone项目，出现The project you were looking for could not be found\n\n#### 原因：\ngit自动保存了用户名密码，当前项目的用户名密码与之前的发生冲突。\n很有可能是github设置了用户名和密码，当你在别的平台使用git时用户名就不一样了，发生错误\n\n#### 解决方案：\n（1)一次性\n```sh\ngit clone http://mygitusername@git.coding.net/name/project.git\n```\n（2）永久\n\n`windows:`\n\n清除本地git账户，重新输入用户名与密码。\n```\ngit config --system --unset  credential.helper\n```\n之后再进行git操作时，弹出用户名密码窗口，输入即可。\n\n` mac:`\n```sh\ngit config --global credential.username <mygitusername>\n```\n> [Git密码（登录凭证）的保存和重置 Mac](https://blog.csdn.net/lynnjinglei/article/details/119025494)\n","slug":"🎨🎨git-The-project-you-were-looking-for-could-not-be-found-解","published":1,"updated":"2024-05-16T07:39:11.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094oh004q2omv4e3z4flh","content":"<h4 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h4><p>使用git clone项目，出现The project you were looking for could not be found</p>\n<h4 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h4><p>git自动保存了用户名密码，当前项目的用户名密码与之前的发生冲突。<br>很有可能是github设置了用户名和密码，当你在别的平台使用git时用户名就不一样了，发生错误</p>\n<h4 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h4><p>（1)一次性</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> http://mygitusername@git.coding.net/name/project.git</span><br></pre></td></tr></table></figure>\n<p>（2）永久</p>\n<p><code>windows:</code></p>\n<p>清除本地git账户，重新输入用户名与密码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system --unset  credential.helper</span><br></pre></td></tr></table></figure>\n<p>之后再进行git操作时，弹出用户名密码窗口，输入即可。</p>\n<p><code> mac:</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global credential.username &lt;mygitusername&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/lynnjinglei/article/details/119025494\">Git密码（登录凭证）的保存和重置 Mac</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h4><p>使用git clone项目，出现The project you were looking for could not be found</p>\n<h4 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h4><p>git自动保存了用户名密码，当前项目的用户名密码与之前的发生冲突。<br>很有可能是github设置了用户名和密码，当你在别的平台使用git时用户名就不一样了，发生错误</p>\n<h4 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h4><p>（1)一次性</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> http://mygitusername@git.coding.net/name/project.git</span><br></pre></td></tr></table></figure>\n<p>（2）永久</p>\n<p><code>windows:</code></p>\n<p>清除本地git账户，重新输入用户名与密码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --system --unset  credential.helper</span><br></pre></td></tr></table></figure>\n<p>之后再进行git操作时，弹出用户名密码窗口，输入即可。</p>\n<p><code> mac:</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global credential.username &lt;mygitusername&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/lynnjinglei/article/details/119025494\">Git密码（登录凭证）的保存和重置 Mac</a></p>\n</blockquote>\n"},{"title":"🐓🥚-HBuilderX-uni-app--h5端构建发布实践","date":"2022-05-24T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-70ff76495d238fa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 背景：\nuni-app h5端，需要打包成文件上传到服务器，由于系统隔离原因，代码平台无法使用自身的构建工具，只能自己写一个了。\n#### 流程图\n![](https://upload-images.jianshu.io/upload_images/15312191-8d4ac2ee148efcff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 架构图\n![](https://upload-images.jianshu.io/upload_images/15312191-17055b2ddcac3aae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nuni-app提供了两套机制，HBuilderX，GUI方式和vue-cli，团队选择了GUI。\n可视化的方式比较简单，HBuilderX内置相关环境，开箱即用，无需配置nodejs。\n#### 客户端\n##### 项目文件夹\n![](https://upload-images.jianshu.io/upload_images/15312191-7aad0f22a2120352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n##### HBuilderX本地静态资源构建\nHBuilderX可以在界面构建也可以使用命令行构建方式:\n\n`$ cli publish --platform h5 --project <projectName>`\n\n打包文件夹地址 \n`/unpackage/dist/build/h5/`\n\n##### 压缩静态文件\n安装 compressing\n```\n$ npm i  compressing -s\n```\n使用compressing对静态文件压缩，生成h5.zip\n`compressDir.js`\n```js\nvar compressing = require(\"compressing\");\nlet fs = require(\"fs\");\n\nconst options = {\n  targetPath: \"/unpackage/dist/build/h5/\",\n  outPut: \"/unpackage/dist/build/h5.zip\",\n};\n\nlet pathout = process.cwd() + options.targetPath;\nlet outPath = process.cwd() + \"/\" + options.outPut;\n\ncompressing.zip\n  .compressDir(pathout, outPath)\n  .then(() => {\n    console.log(\"compress h5 folder done...\");\n  })\n  .catch((err) => {\n    console.error(\"unzip\");\n  });\n\n```\n\n##### 上传到服务器\n\n##### 上传静态资源h5.zip\n安装 needle\n```\n$ npm i needle -S\n```\n服务端,needle上传到服务器\n`needle.js`\n```js\nconst needle = require(\"needle\");\nconst fs = require(\"fs\");\nvar colors = require(\"colors\");\n\ncolors.setTheme({\n  custom: [\"white\", \"bgGreen\"],\n  error: [\"white\", \"bgBlue\"],\n});\nlet pwd = process.cwd();\nconst buffer = fs.readFileSync(pwd + \"/unpackage/dist/build/h5.zip\");\n\n// 服务器地址两个\nlet url = [\n  \"http://xxx/file/uploading\",\n  \"http://xxx/file/uploading\",\n];\nconst data = {\n  file: {\n    buffer: buffer,\n    filename: \"mypackage.zip\",\n    content_type: \"application/octet-stream\",\n  },\n};\n\n// the callback is optional, and needle returns a `readableStream` object\n// that triggers a 'done' event when the request/response process is complete.\nurl.forEach((item) => {\n  const site = item.replace(\"/file/uploading\", \"\");\n  console.log(`service ${site} uploading...`.error);\n\n  needle.post(item, data, { multipart: true }, function (err, resp, body) {\n    err && console.error(err);\n    console.log(`service ${site} upload done...`.custom);\n  });\n});\n```\n#### 服务端\n在服务器上部署node服务传输文件\n`app.js`，在linux上，1000端口起一个服务，接受的时候打上时间标签，便于回滚。\n```js\nconst express = require('express');\nconst compressing = require(\"compressing\");\nconst app = express();\nconst multiparty = require('multiparty');\nconst fs = require('fs');\nconst { timestampToFile } = require(\"./until\");\n\nconst path = require('path');\nconst rootPath = path.resolve(__dirname, './public');\n\n\n/* 上传接口 */\napp.post('/file/uploading', (req, res, next) => {\n  /* 生成multiparty对象，并配置上传目标路径 */\n  const form = new multiparty.Form();\n  /* 设置编辑 */\n  form.encoding = 'utf-8';\n  // 设置文件存储路劲\n  form.uploadDir = rootPath;\n  // 设置文件大小限制\n\n  // form.maxFields = 1000;   //设置所有文件的大小总和//上传后处理\n  form.parse(req, (err, fields, files) => {\n  \n      const inputFile = files.file[0];\n      const uploadedPath = inputFile.path;\n    // nginx 静态资源指向目录\n    const dstPath = uploadDirPath + \"/\" + \"h5-\" + timestampToFile() + \".zip\";\n      // 重命名为真实文件名\n      fs.rename(uploadedPath, dstPath, (err) => {\n        if (err) {\n          console.log('rename error:' + err);\n        } else {\n          console.log('rename ok');\n        }\n      });\n    }\n    res.writeHead(200, { 'content-type': 'text/plain;charset=utf-8' });\n    res.write('200');\n    res.end();\n  });\n});\napp.listen(1000);\n\n```\n\n#### 一键发布\n最后命令放在package.json中\n\n```js\n \"scripts\": {\n    //发布\n    \"pub:prod\": \"cli publish --platform h5 --project xxx && npm run compress && npm run uploadToService\",\n    \"compress\": \"node ./upload-script/compressDir.js\",\n    \"uploadToService\": \"node ./upload-script/needle.js \"  \n    // 回滚\n    \"backTrace\": \"node ./upload-script/backTrace.js \n  },\n```\n```\n$ npm run pub:prod\n```\n#### 版本回滚\nnode-ssh可以远程登录服务器，并进行文件操作，把上传的zip复制到nginx静态目录里，替换到当前的。\n```\n$ npm i  node-ssh -S\n```\n`traceBack.js`\n```\nconst { NodeSSH } = require(\"node-ssh\");\nconst arg = process.argv.splice(2)\nconst ssh = new NodeSSH();\nconst outPath = \"/usr/local/nginx/node-upload/public/list\";\nssh\n  .connect({\n    host: \"xxx.xxx\",\n    username: \"root\",\n    password: \"xxxxxxx\",\n  })\n\n  .then(function () {\n    // 列进所有部署包\n    if (`${arg}` === \"ls\") {\n        ssh.execCommand(`ls`, { cwd: `${outPath}` }).then(function (result) {\n          if (result.stderr) {\n            console.error(result.stderr);\n            return;\n          }\n          console.log(result.stdout);\n        });\n        return;\n    }\n     // 复制文件到 nginx 静态目录下\n    ssh\n      .execCommand(`cp ${arg} /usr/local/nginx/html`, {\n        cwd: `${outPath}`,\n      })\n      .then(function (result) {\n        if (result.stderr) {\n          console.error(result.stderr);\n          return;\n        }\n      });\n  // 解压相关zip\n    ssh\n      .execCommand(`unzip -o ${arg}`, {\n        cwd: `/usr/local/nginx/html`,\n      })\n      .then(function (result) {\n        if (result.stderr) {\n          console.error(result.stderr);\n          return;\n        }\n        console.log(result.stdout);\n      });\n  });\n\n```\n列举所有可用版本\n\n`$ npm backTrace ls`\n![](https://upload-images.jianshu.io/upload_images/15312191-9db314848696a4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n使用你要回滚的版本\n`$  npm backTrace h5-2022-5-25-17:49:43.zip`\n\n[ 项目代码地址](https://github.com/qiudaoermu/-github-publine.git)\n","source":"_posts/🐓🥚-HBuilderX-uni-app--h5端构建发布实践.md","raw":"---\ntitle: \"🐓🥚-HBuilderX-uni-app--h5端构建发布实践\"\ndate: 2022-05-25\ntags: \n- 实践堂\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-70ff76495d238fa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 背景：\nuni-app h5端，需要打包成文件上传到服务器，由于系统隔离原因，代码平台无法使用自身的构建工具，只能自己写一个了。\n#### 流程图\n![](https://upload-images.jianshu.io/upload_images/15312191-8d4ac2ee148efcff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 架构图\n![](https://upload-images.jianshu.io/upload_images/15312191-17055b2ddcac3aae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nuni-app提供了两套机制，HBuilderX，GUI方式和vue-cli，团队选择了GUI。\n可视化的方式比较简单，HBuilderX内置相关环境，开箱即用，无需配置nodejs。\n#### 客户端\n##### 项目文件夹\n![](https://upload-images.jianshu.io/upload_images/15312191-7aad0f22a2120352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n##### HBuilderX本地静态资源构建\nHBuilderX可以在界面构建也可以使用命令行构建方式:\n\n`$ cli publish --platform h5 --project <projectName>`\n\n打包文件夹地址 \n`/unpackage/dist/build/h5/`\n\n##### 压缩静态文件\n安装 compressing\n```\n$ npm i  compressing -s\n```\n使用compressing对静态文件压缩，生成h5.zip\n`compressDir.js`\n```js\nvar compressing = require(\"compressing\");\nlet fs = require(\"fs\");\n\nconst options = {\n  targetPath: \"/unpackage/dist/build/h5/\",\n  outPut: \"/unpackage/dist/build/h5.zip\",\n};\n\nlet pathout = process.cwd() + options.targetPath;\nlet outPath = process.cwd() + \"/\" + options.outPut;\n\ncompressing.zip\n  .compressDir(pathout, outPath)\n  .then(() => {\n    console.log(\"compress h5 folder done...\");\n  })\n  .catch((err) => {\n    console.error(\"unzip\");\n  });\n\n```\n\n##### 上传到服务器\n\n##### 上传静态资源h5.zip\n安装 needle\n```\n$ npm i needle -S\n```\n服务端,needle上传到服务器\n`needle.js`\n```js\nconst needle = require(\"needle\");\nconst fs = require(\"fs\");\nvar colors = require(\"colors\");\n\ncolors.setTheme({\n  custom: [\"white\", \"bgGreen\"],\n  error: [\"white\", \"bgBlue\"],\n});\nlet pwd = process.cwd();\nconst buffer = fs.readFileSync(pwd + \"/unpackage/dist/build/h5.zip\");\n\n// 服务器地址两个\nlet url = [\n  \"http://xxx/file/uploading\",\n  \"http://xxx/file/uploading\",\n];\nconst data = {\n  file: {\n    buffer: buffer,\n    filename: \"mypackage.zip\",\n    content_type: \"application/octet-stream\",\n  },\n};\n\n// the callback is optional, and needle returns a `readableStream` object\n// that triggers a 'done' event when the request/response process is complete.\nurl.forEach((item) => {\n  const site = item.replace(\"/file/uploading\", \"\");\n  console.log(`service ${site} uploading...`.error);\n\n  needle.post(item, data, { multipart: true }, function (err, resp, body) {\n    err && console.error(err);\n    console.log(`service ${site} upload done...`.custom);\n  });\n});\n```\n#### 服务端\n在服务器上部署node服务传输文件\n`app.js`，在linux上，1000端口起一个服务，接受的时候打上时间标签，便于回滚。\n```js\nconst express = require('express');\nconst compressing = require(\"compressing\");\nconst app = express();\nconst multiparty = require('multiparty');\nconst fs = require('fs');\nconst { timestampToFile } = require(\"./until\");\n\nconst path = require('path');\nconst rootPath = path.resolve(__dirname, './public');\n\n\n/* 上传接口 */\napp.post('/file/uploading', (req, res, next) => {\n  /* 生成multiparty对象，并配置上传目标路径 */\n  const form = new multiparty.Form();\n  /* 设置编辑 */\n  form.encoding = 'utf-8';\n  // 设置文件存储路劲\n  form.uploadDir = rootPath;\n  // 设置文件大小限制\n\n  // form.maxFields = 1000;   //设置所有文件的大小总和//上传后处理\n  form.parse(req, (err, fields, files) => {\n  \n      const inputFile = files.file[0];\n      const uploadedPath = inputFile.path;\n    // nginx 静态资源指向目录\n    const dstPath = uploadDirPath + \"/\" + \"h5-\" + timestampToFile() + \".zip\";\n      // 重命名为真实文件名\n      fs.rename(uploadedPath, dstPath, (err) => {\n        if (err) {\n          console.log('rename error:' + err);\n        } else {\n          console.log('rename ok');\n        }\n      });\n    }\n    res.writeHead(200, { 'content-type': 'text/plain;charset=utf-8' });\n    res.write('200');\n    res.end();\n  });\n});\napp.listen(1000);\n\n```\n\n#### 一键发布\n最后命令放在package.json中\n\n```js\n \"scripts\": {\n    //发布\n    \"pub:prod\": \"cli publish --platform h5 --project xxx && npm run compress && npm run uploadToService\",\n    \"compress\": \"node ./upload-script/compressDir.js\",\n    \"uploadToService\": \"node ./upload-script/needle.js \"  \n    // 回滚\n    \"backTrace\": \"node ./upload-script/backTrace.js \n  },\n```\n```\n$ npm run pub:prod\n```\n#### 版本回滚\nnode-ssh可以远程登录服务器，并进行文件操作，把上传的zip复制到nginx静态目录里，替换到当前的。\n```\n$ npm i  node-ssh -S\n```\n`traceBack.js`\n```\nconst { NodeSSH } = require(\"node-ssh\");\nconst arg = process.argv.splice(2)\nconst ssh = new NodeSSH();\nconst outPath = \"/usr/local/nginx/node-upload/public/list\";\nssh\n  .connect({\n    host: \"xxx.xxx\",\n    username: \"root\",\n    password: \"xxxxxxx\",\n  })\n\n  .then(function () {\n    // 列进所有部署包\n    if (`${arg}` === \"ls\") {\n        ssh.execCommand(`ls`, { cwd: `${outPath}` }).then(function (result) {\n          if (result.stderr) {\n            console.error(result.stderr);\n            return;\n          }\n          console.log(result.stdout);\n        });\n        return;\n    }\n     // 复制文件到 nginx 静态目录下\n    ssh\n      .execCommand(`cp ${arg} /usr/local/nginx/html`, {\n        cwd: `${outPath}`,\n      })\n      .then(function (result) {\n        if (result.stderr) {\n          console.error(result.stderr);\n          return;\n        }\n      });\n  // 解压相关zip\n    ssh\n      .execCommand(`unzip -o ${arg}`, {\n        cwd: `/usr/local/nginx/html`,\n      })\n      .then(function (result) {\n        if (result.stderr) {\n          console.error(result.stderr);\n          return;\n        }\n        console.log(result.stdout);\n      });\n  });\n\n```\n列举所有可用版本\n\n`$ npm backTrace ls`\n![](https://upload-images.jianshu.io/upload_images/15312191-9db314848696a4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n使用你要回滚的版本\n`$  npm backTrace h5-2022-5-25-17:49:43.zip`\n\n[ 项目代码地址](https://github.com/qiudaoermu/-github-publine.git)\n","slug":"🐓🥚-HBuilderX-uni-app--h5端构建发布实践","published":1,"updated":"2024-05-16T07:39:11.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094oi004s2omvfvc32m01","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-70ff76495d238fa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h4><p>uni-app h5端，需要打包成文件上传到服务器，由于系统隔离原因，代码平台无法使用自身的构建工具，只能自己写一个了。</p>\n<h4 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8d4ac2ee148efcff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-17055b2ddcac3aae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>uni-app提供了两套机制，HBuilderX，GUI方式和vue-cli，团队选择了GUI。<br>可视化的方式比较简单，HBuilderX内置相关环境，开箱即用，无需配置nodejs。</p>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><h5 id=\"项目文件夹\"><a href=\"#项目文件夹\" class=\"headerlink\" title=\"项目文件夹\"></a>项目文件夹</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7aad0f22a2120352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"HBuilderX本地静态资源构建\"><a href=\"#HBuilderX本地静态资源构建\" class=\"headerlink\" title=\"HBuilderX本地静态资源构建\"></a>HBuilderX本地静态资源构建</h5><p>HBuilderX可以在界面构建也可以使用命令行构建方式:</p>\n<p><code>$ cli publish --platform h5 --project &lt;projectName&gt;</code></p>\n<p>打包文件夹地址<br><code>/unpackage/dist/build/h5/</code></p>\n<h5 id=\"压缩静态文件\"><a href=\"#压缩静态文件\" class=\"headerlink\" title=\"压缩静态文件\"></a>压缩静态文件</h5><p>安装 compressing</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i  compressing -s</span><br></pre></td></tr></table></figure>\n<p>使用compressing对静态文件压缩，生成h5.zip<br><code>compressDir.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> compressing = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;compressing&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">targetPath</span>: <span class=\"string\">&quot;/unpackage/dist/build/h5/&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">outPut</span>: <span class=\"string\">&quot;/unpackage/dist/build/h5.zip&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> pathout = process.<span class=\"title function_\">cwd</span>() + options.<span class=\"property\">targetPath</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> outPath = process.<span class=\"title function_\">cwd</span>() + <span class=\"string\">&quot;/&quot;</span> + options.<span class=\"property\">outPut</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">compressing.<span class=\"property\">zip</span></span><br><span class=\"line\">  .<span class=\"title function_\">compressDir</span>(pathout, outPath)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;compress h5 folder done...&quot;</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;unzip&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上传到服务器\"><a href=\"#上传到服务器\" class=\"headerlink\" title=\"上传到服务器\"></a>上传到服务器</h5><h5 id=\"上传静态资源h5-zip\"><a href=\"#上传静态资源h5-zip\" class=\"headerlink\" title=\"上传静态资源h5.zip\"></a>上传静态资源h5.zip</h5><p>安装 needle</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i needle -S</span><br></pre></td></tr></table></figure>\n<p>服务端,needle上传到服务器<br><code>needle.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> needle = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;needle&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> colors = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;colors&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">colors.<span class=\"title function_\">setTheme</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">custom</span>: [<span class=\"string\">&quot;white&quot;</span>, <span class=\"string\">&quot;bgGreen&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">error</span>: [<span class=\"string\">&quot;white&quot;</span>, <span class=\"string\">&quot;bgBlue&quot;</span>],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> pwd = process.<span class=\"title function_\">cwd</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> buffer = fs.<span class=\"title function_\">readFileSync</span>(pwd + <span class=\"string\">&quot;/unpackage/dist/build/h5.zip&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务器地址两个</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = [</span><br><span class=\"line\">  <span class=\"string\">&quot;http://xxx/file/uploading&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;http://xxx/file/uploading&quot;</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  <span class=\"attr\">file</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">buffer</span>: buffer,</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;mypackage.zip&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">content_type</span>: <span class=\"string\">&quot;application/octet-stream&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the callback is optional, and needle returns a `readableStream` object</span></span><br><span class=\"line\"><span class=\"comment\">// that triggers a &#x27;done&#x27; event when the request/response process is complete.</span></span><br><span class=\"line\">url.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> site = item.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;/file/uploading&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`service <span class=\"subst\">$&#123;site&#125;</span> uploading...`</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  needle.<span class=\"title function_\">post</span>(item, data, &#123; <span class=\"attr\">multipart</span>: <span class=\"literal\">true</span> &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">err, resp, body</span>) &#123;</span><br><span class=\"line\">    err &amp;&amp; <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`service <span class=\"subst\">$&#123;site&#125;</span> upload done...`</span>.<span class=\"property\">custom</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><p>在服务器上部署node服务传输文件<br><code>app.js</code>，在linux上，1000端口起一个服务，接受的时候打上时间标签，便于回滚。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compressing = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;compressing&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> multiparty = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;multiparty&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; timestampToFile &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./until&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootPath = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./public&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 上传接口 */</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/file/uploading&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 生成multiparty对象，并配置上传目标路径 */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> form = <span class=\"keyword\">new</span> multiparty.<span class=\"title class_\">Form</span>();</span><br><span class=\"line\">  <span class=\"comment\">/* 设置编辑 */</span></span><br><span class=\"line\">  form.<span class=\"property\">encoding</span> = <span class=\"string\">&#x27;utf-8&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 设置文件存储路劲</span></span><br><span class=\"line\">  form.<span class=\"property\">uploadDir</span> = rootPath;</span><br><span class=\"line\">  <span class=\"comment\">// 设置文件大小限制</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// form.maxFields = 1000;   //设置所有文件的大小总和//上传后处理</span></span><br><span class=\"line\">  form.<span class=\"title function_\">parse</span>(req, <span class=\"function\">(<span class=\"params\">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"keyword\">const</span> inputFile = files.<span class=\"property\">file</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> uploadedPath = inputFile.<span class=\"property\">path</span>;</span><br><span class=\"line\">    <span class=\"comment\">// nginx 静态资源指向目录</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> dstPath = uploadDirPath + <span class=\"string\">&quot;/&quot;</span> + <span class=\"string\">&quot;h5-&quot;</span> + <span class=\"title function_\">timestampToFile</span>() + <span class=\"string\">&quot;.zip&quot;</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 重命名为真实文件名</span></span><br><span class=\"line\">      fs.<span class=\"title function_\">rename</span>(uploadedPath, dstPath, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;rename error:&#x27;</span> + err);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;rename ok&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123; <span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;text/plain;charset=utf-8&#x27;</span> &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;200&#x27;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一键发布\"><a href=\"#一键发布\" class=\"headerlink\" title=\"一键发布\"></a>一键发布</h4><p>最后命令放在package.json中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"comment\">//发布</span></span><br><span class=\"line\">   <span class=\"string\">&quot;pub:prod&quot;</span>: <span class=\"string\">&quot;cli publish --platform h5 --project xxx &amp;&amp; npm run compress &amp;&amp; npm run uploadToService&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;compress&quot;</span>: <span class=\"string\">&quot;node ./upload-script/compressDir.js&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;uploadToService&quot;</span>: <span class=\"string\">&quot;node ./upload-script/needle.js &quot;</span>  </span><br><span class=\"line\">   <span class=\"comment\">// 回滚</span></span><br><span class=\"line\">   <span class=\"string\">&quot;backTrace&quot;</span>: <span class=\"string\">&quot;node ./upload-script/backTrace.js </span></span><br><span class=\"line\"><span class=\"string\"> &#125;,</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run pub:prod</span><br></pre></td></tr></table></figure>\n<h4 id=\"版本回滚\"><a href=\"#版本回滚\" class=\"headerlink\" title=\"版本回滚\"></a>版本回滚</h4><p>node-ssh可以远程登录服务器，并进行文件操作，把上传的zip复制到nginx静态目录里，替换到当前的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i  node-ssh -S</span><br></pre></td></tr></table></figure>\n<p><code>traceBack.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; NodeSSH &#125; = require(&quot;node-ssh&quot;);</span><br><span class=\"line\">const arg = process.argv.splice(2)</span><br><span class=\"line\">const ssh = new NodeSSH();</span><br><span class=\"line\">const outPath = &quot;/usr/local/nginx/node-upload/public/list&quot;;</span><br><span class=\"line\">ssh</span><br><span class=\"line\">  .connect(&#123;</span><br><span class=\"line\">    host: &quot;xxx.xxx&quot;,</span><br><span class=\"line\">    username: &quot;root&quot;,</span><br><span class=\"line\">    password: &quot;xxxxxxx&quot;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  .then(function () &#123;</span><br><span class=\"line\">    // 列进所有部署包</span><br><span class=\"line\">    if (`$&#123;arg&#125;` === &quot;ls&quot;) &#123;</span><br><span class=\"line\">        ssh.execCommand(`ls`, &#123; cwd: `$&#123;outPath&#125;` &#125;).then(function (result) &#123;</span><br><span class=\"line\">          if (result.stderr) &#123;</span><br><span class=\"line\">            console.error(result.stderr);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          console.log(result.stdout);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     // 复制文件到 nginx 静态目录下</span><br><span class=\"line\">    ssh</span><br><span class=\"line\">      .execCommand(`cp $&#123;arg&#125; /usr/local/nginx/html`, &#123;</span><br><span class=\"line\">        cwd: `$&#123;outPath&#125;`,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(function (result) &#123;</span><br><span class=\"line\">        if (result.stderr) &#123;</span><br><span class=\"line\">          console.error(result.stderr);</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  // 解压相关zip</span><br><span class=\"line\">    ssh</span><br><span class=\"line\">      .execCommand(`unzip -o $&#123;arg&#125;`, &#123;</span><br><span class=\"line\">        cwd: `/usr/local/nginx/html`,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(function (result) &#123;</span><br><span class=\"line\">        if (result.stderr) &#123;</span><br><span class=\"line\">          console.error(result.stderr);</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(result.stdout);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>列举所有可用版本</p>\n<p><code>$ npm backTrace ls</code><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9db314848696a4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>使用你要回滚的版本<br><code>$  npm backTrace h5-2022-5-25-17:49:43.zip</code></p>\n<p><a href=\"https://github.com/qiudaoermu/-github-publine.git\"> 项目代码地址</a></p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-70ff76495d238fa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h4><p>uni-app h5端，需要打包成文件上传到服务器，由于系统隔离原因，代码平台无法使用自身的构建工具，只能自己写一个了。</p>\n<h4 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8d4ac2ee148efcff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-17055b2ddcac3aae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>uni-app提供了两套机制，HBuilderX，GUI方式和vue-cli，团队选择了GUI。<br>可视化的方式比较简单，HBuilderX内置相关环境，开箱即用，无需配置nodejs。</p>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><h5 id=\"项目文件夹\"><a href=\"#项目文件夹\" class=\"headerlink\" title=\"项目文件夹\"></a>项目文件夹</h5><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7aad0f22a2120352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"HBuilderX本地静态资源构建\"><a href=\"#HBuilderX本地静态资源构建\" class=\"headerlink\" title=\"HBuilderX本地静态资源构建\"></a>HBuilderX本地静态资源构建</h5><p>HBuilderX可以在界面构建也可以使用命令行构建方式:</p>\n<p><code>$ cli publish --platform h5 --project &lt;projectName&gt;</code></p>\n<p>打包文件夹地址<br><code>/unpackage/dist/build/h5/</code></p>\n<h5 id=\"压缩静态文件\"><a href=\"#压缩静态文件\" class=\"headerlink\" title=\"压缩静态文件\"></a>压缩静态文件</h5><p>安装 compressing</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i  compressing -s</span><br></pre></td></tr></table></figure>\n<p>使用compressing对静态文件压缩，生成h5.zip<br><code>compressDir.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> compressing = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;compressing&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">targetPath</span>: <span class=\"string\">&quot;/unpackage/dist/build/h5/&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">outPut</span>: <span class=\"string\">&quot;/unpackage/dist/build/h5.zip&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> pathout = process.<span class=\"title function_\">cwd</span>() + options.<span class=\"property\">targetPath</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> outPath = process.<span class=\"title function_\">cwd</span>() + <span class=\"string\">&quot;/&quot;</span> + options.<span class=\"property\">outPut</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">compressing.<span class=\"property\">zip</span></span><br><span class=\"line\">  .<span class=\"title function_\">compressDir</span>(pathout, outPath)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;compress h5 folder done...&quot;</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;unzip&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上传到服务器\"><a href=\"#上传到服务器\" class=\"headerlink\" title=\"上传到服务器\"></a>上传到服务器</h5><h5 id=\"上传静态资源h5-zip\"><a href=\"#上传静态资源h5-zip\" class=\"headerlink\" title=\"上传静态资源h5.zip\"></a>上传静态资源h5.zip</h5><p>安装 needle</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i needle -S</span><br></pre></td></tr></table></figure>\n<p>服务端,needle上传到服务器<br><code>needle.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> needle = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;needle&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> colors = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;colors&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">colors.<span class=\"title function_\">setTheme</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">custom</span>: [<span class=\"string\">&quot;white&quot;</span>, <span class=\"string\">&quot;bgGreen&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">error</span>: [<span class=\"string\">&quot;white&quot;</span>, <span class=\"string\">&quot;bgBlue&quot;</span>],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> pwd = process.<span class=\"title function_\">cwd</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> buffer = fs.<span class=\"title function_\">readFileSync</span>(pwd + <span class=\"string\">&quot;/unpackage/dist/build/h5.zip&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务器地址两个</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = [</span><br><span class=\"line\">  <span class=\"string\">&quot;http://xxx/file/uploading&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;http://xxx/file/uploading&quot;</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  <span class=\"attr\">file</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">buffer</span>: buffer,</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;mypackage.zip&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">content_type</span>: <span class=\"string\">&quot;application/octet-stream&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the callback is optional, and needle returns a `readableStream` object</span></span><br><span class=\"line\"><span class=\"comment\">// that triggers a &#x27;done&#x27; event when the request/response process is complete.</span></span><br><span class=\"line\">url.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> site = item.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;/file/uploading&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`service <span class=\"subst\">$&#123;site&#125;</span> uploading...`</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  needle.<span class=\"title function_\">post</span>(item, data, &#123; <span class=\"attr\">multipart</span>: <span class=\"literal\">true</span> &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">err, resp, body</span>) &#123;</span><br><span class=\"line\">    err &amp;&amp; <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`service <span class=\"subst\">$&#123;site&#125;</span> upload done...`</span>.<span class=\"property\">custom</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><p>在服务器上部署node服务传输文件<br><code>app.js</code>，在linux上，1000端口起一个服务，接受的时候打上时间标签，便于回滚。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compressing = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;compressing&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> multiparty = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;multiparty&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; timestampToFile &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./until&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootPath = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./public&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 上传接口 */</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/file/uploading&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 生成multiparty对象，并配置上传目标路径 */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> form = <span class=\"keyword\">new</span> multiparty.<span class=\"title class_\">Form</span>();</span><br><span class=\"line\">  <span class=\"comment\">/* 设置编辑 */</span></span><br><span class=\"line\">  form.<span class=\"property\">encoding</span> = <span class=\"string\">&#x27;utf-8&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 设置文件存储路劲</span></span><br><span class=\"line\">  form.<span class=\"property\">uploadDir</span> = rootPath;</span><br><span class=\"line\">  <span class=\"comment\">// 设置文件大小限制</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// form.maxFields = 1000;   //设置所有文件的大小总和//上传后处理</span></span><br><span class=\"line\">  form.<span class=\"title function_\">parse</span>(req, <span class=\"function\">(<span class=\"params\">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"keyword\">const</span> inputFile = files.<span class=\"property\">file</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> uploadedPath = inputFile.<span class=\"property\">path</span>;</span><br><span class=\"line\">    <span class=\"comment\">// nginx 静态资源指向目录</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> dstPath = uploadDirPath + <span class=\"string\">&quot;/&quot;</span> + <span class=\"string\">&quot;h5-&quot;</span> + <span class=\"title function_\">timestampToFile</span>() + <span class=\"string\">&quot;.zip&quot;</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 重命名为真实文件名</span></span><br><span class=\"line\">      fs.<span class=\"title function_\">rename</span>(uploadedPath, dstPath, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;rename error:&#x27;</span> + err);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;rename ok&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123; <span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;text/plain;charset=utf-8&#x27;</span> &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;200&#x27;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一键发布\"><a href=\"#一键发布\" class=\"headerlink\" title=\"一键发布\"></a>一键发布</h4><p>最后命令放在package.json中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"comment\">//发布</span></span><br><span class=\"line\">   <span class=\"string\">&quot;pub:prod&quot;</span>: <span class=\"string\">&quot;cli publish --platform h5 --project xxx &amp;&amp; npm run compress &amp;&amp; npm run uploadToService&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;compress&quot;</span>: <span class=\"string\">&quot;node ./upload-script/compressDir.js&quot;</span>,</span><br><span class=\"line\">   <span class=\"string\">&quot;uploadToService&quot;</span>: <span class=\"string\">&quot;node ./upload-script/needle.js &quot;</span>  </span><br><span class=\"line\">   <span class=\"comment\">// 回滚</span></span><br><span class=\"line\">   <span class=\"string\">&quot;backTrace&quot;</span>: <span class=\"string\">&quot;node ./upload-script/backTrace.js </span></span><br><span class=\"line\"><span class=\"string\"> &#125;,</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run pub:prod</span><br></pre></td></tr></table></figure>\n<h4 id=\"版本回滚\"><a href=\"#版本回滚\" class=\"headerlink\" title=\"版本回滚\"></a>版本回滚</h4><p>node-ssh可以远程登录服务器，并进行文件操作，把上传的zip复制到nginx静态目录里，替换到当前的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i  node-ssh -S</span><br></pre></td></tr></table></figure>\n<p><code>traceBack.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; NodeSSH &#125; = require(&quot;node-ssh&quot;);</span><br><span class=\"line\">const arg = process.argv.splice(2)</span><br><span class=\"line\">const ssh = new NodeSSH();</span><br><span class=\"line\">const outPath = &quot;/usr/local/nginx/node-upload/public/list&quot;;</span><br><span class=\"line\">ssh</span><br><span class=\"line\">  .connect(&#123;</span><br><span class=\"line\">    host: &quot;xxx.xxx&quot;,</span><br><span class=\"line\">    username: &quot;root&quot;,</span><br><span class=\"line\">    password: &quot;xxxxxxx&quot;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  .then(function () &#123;</span><br><span class=\"line\">    // 列进所有部署包</span><br><span class=\"line\">    if (`$&#123;arg&#125;` === &quot;ls&quot;) &#123;</span><br><span class=\"line\">        ssh.execCommand(`ls`, &#123; cwd: `$&#123;outPath&#125;` &#125;).then(function (result) &#123;</span><br><span class=\"line\">          if (result.stderr) &#123;</span><br><span class=\"line\">            console.error(result.stderr);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          console.log(result.stdout);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     // 复制文件到 nginx 静态目录下</span><br><span class=\"line\">    ssh</span><br><span class=\"line\">      .execCommand(`cp $&#123;arg&#125; /usr/local/nginx/html`, &#123;</span><br><span class=\"line\">        cwd: `$&#123;outPath&#125;`,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(function (result) &#123;</span><br><span class=\"line\">        if (result.stderr) &#123;</span><br><span class=\"line\">          console.error(result.stderr);</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  // 解压相关zip</span><br><span class=\"line\">    ssh</span><br><span class=\"line\">      .execCommand(`unzip -o $&#123;arg&#125;`, &#123;</span><br><span class=\"line\">        cwd: `/usr/local/nginx/html`,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(function (result) &#123;</span><br><span class=\"line\">        if (result.stderr) &#123;</span><br><span class=\"line\">          console.error(result.stderr);</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(result.stdout);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>列举所有可用版本</p>\n<p><code>$ npm backTrace ls</code><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9db314848696a4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>使用你要回滚的版本<br><code>$  npm backTrace h5-2022-5-25-17:49:43.zip</code></p>\n<p><a href=\"https://github.com/qiudaoermu/-github-publine.git\"> 项目代码地址</a></p>\n"},{"title":"🐓🥚-如何写一个脚手架工具","date":"2021-09-10T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-95b4a2d210e8cf21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 前言\n用过构建工具的亲们知道，通常通过全局安装一个 xxx-cli 的 npm 包，就能在命令行用命令进行构建。那么这个 npm 包如何变成一个可执行的命令呢？\n\n\n### npm cli 运行原理\n\n\n1.当全局安装 npm 包的时候，npm 会把 package.json 中 bin 配置的 command-name 添加到系统 *$PATH*中去。\n\n拿 macOS 举例，npm 会在 /usr/local/bin 下创建一个以 keep 为名字的软链接，指向全局安装下来的 \n/usr/local/lib/node_modules/my-cli 包下面的 js：keep。（/usr/local/bin 是在 $PATH 中的）\n\n**如果全局安装keep-cli：**\n\n**/usr/local/bin 目录**\n\n![](https://upload-images.jianshu.io/upload_images/15312191-3c94e5717f0489c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**/usr/local/lib/node_modules 目录**\n![](https://upload-images.jianshu.io/upload_images/15312191-330c359092014f3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n2.在命令行键入 keep 相当于执行了文本文件 keep。\n\n3.在执行的时候碰到第一行 #!/usr/bin/env node，这是一个 shebang 行。这行告诉系统使用 node 去执行当前文件。（shebang 只有在Unix-like平台才有）\n\n4.执行 js 文件。这里有一个问题：#! 并不是一个符合 js 语法的语句，理论上直接执行是会有 syntax error 的。但是 node 对 shebang 行做了例外处理，所以用 node 执行带 shebang 行的 js 文件是没有问题的。\n### npm cli 开发步骤\n使用 npm init 初始化一个项目目录 keep-cli，在 package.json 中添加或者编辑 bin 字段。\n```\n{\n  \"name\": \"keep-cli\",\n  ...,\n  \"bin\": {\n    \"keep\": \"bin/keep\",\n    \"keep-create\": \"bin/keep-create\",\n    \"keep-list\": \"bin/keep-list\"\n  },\n  ...\n}\n```\n\n\n\n#### 使用 `commander` 输入命令\n代码开发。必须在 keep文件的第一行写这行命令 #!/usr/bin/env node，譬如：\n\n```js\n\n#!/usr/bin/env node\nconst program = require('commander');\n\n// 定义四个指令\nprogram\n  .version(require(\"../package\").version)\n  .usage(\"<command> [options]\")\n  .command(\"list\", \"list all the templates\")\n  .command(\"create\", \"generate a new project from a template\");\n\nprogram.parse(process.argv);\n\n```\n同理在文件夹新增两个文件\n![](https://upload-images.jianshu.io/upload_images/15312191-57140c996d996352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n#### 使用 `inquirer`控制台做询问选择\n\n![](https://upload-images.jianshu.io/upload_images/15312191-8a602ddf2c881666.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n根据不同的选择下载不同的模板。\n![](https://upload-images.jianshu.io/upload_images/15312191-715560d00aea4855.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n完成。。。。。\n","source":"_posts/🐓🥚-如何写一个脚手架工具.md","raw":"---\ntitle: \"🐓🥚-如何写一个脚手架工具\"\ndate: 2021-09-11\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-95b4a2d210e8cf21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 前言\n用过构建工具的亲们知道，通常通过全局安装一个 xxx-cli 的 npm 包，就能在命令行用命令进行构建。那么这个 npm 包如何变成一个可执行的命令呢？\n\n\n### npm cli 运行原理\n\n\n1.当全局安装 npm 包的时候，npm 会把 package.json 中 bin 配置的 command-name 添加到系统 *$PATH*中去。\n\n拿 macOS 举例，npm 会在 /usr/local/bin 下创建一个以 keep 为名字的软链接，指向全局安装下来的 \n/usr/local/lib/node_modules/my-cli 包下面的 js：keep。（/usr/local/bin 是在 $PATH 中的）\n\n**如果全局安装keep-cli：**\n\n**/usr/local/bin 目录**\n\n![](https://upload-images.jianshu.io/upload_images/15312191-3c94e5717f0489c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**/usr/local/lib/node_modules 目录**\n![](https://upload-images.jianshu.io/upload_images/15312191-330c359092014f3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n2.在命令行键入 keep 相当于执行了文本文件 keep。\n\n3.在执行的时候碰到第一行 #!/usr/bin/env node，这是一个 shebang 行。这行告诉系统使用 node 去执行当前文件。（shebang 只有在Unix-like平台才有）\n\n4.执行 js 文件。这里有一个问题：#! 并不是一个符合 js 语法的语句，理论上直接执行是会有 syntax error 的。但是 node 对 shebang 行做了例外处理，所以用 node 执行带 shebang 行的 js 文件是没有问题的。\n### npm cli 开发步骤\n使用 npm init 初始化一个项目目录 keep-cli，在 package.json 中添加或者编辑 bin 字段。\n```\n{\n  \"name\": \"keep-cli\",\n  ...,\n  \"bin\": {\n    \"keep\": \"bin/keep\",\n    \"keep-create\": \"bin/keep-create\",\n    \"keep-list\": \"bin/keep-list\"\n  },\n  ...\n}\n```\n\n\n\n#### 使用 `commander` 输入命令\n代码开发。必须在 keep文件的第一行写这行命令 #!/usr/bin/env node，譬如：\n\n```js\n\n#!/usr/bin/env node\nconst program = require('commander');\n\n// 定义四个指令\nprogram\n  .version(require(\"../package\").version)\n  .usage(\"<command> [options]\")\n  .command(\"list\", \"list all the templates\")\n  .command(\"create\", \"generate a new project from a template\");\n\nprogram.parse(process.argv);\n\n```\n同理在文件夹新增两个文件\n![](https://upload-images.jianshu.io/upload_images/15312191-57140c996d996352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n#### 使用 `inquirer`控制台做询问选择\n\n![](https://upload-images.jianshu.io/upload_images/15312191-8a602ddf2c881666.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n根据不同的选择下载不同的模板。\n![](https://upload-images.jianshu.io/upload_images/15312191-715560d00aea4855.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n完成。。。。。\n","slug":"🐓🥚-如何写一个脚手架工具","published":1,"updated":"2024-05-16T07:39:11.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094oj004u2omvgx163bjm","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-95b4a2d210e8cf21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>用过构建工具的亲们知道，通常通过全局安装一个 xxx-cli 的 npm 包，就能在命令行用命令进行构建。那么这个 npm 包如何变成一个可执行的命令呢？</p>\n<h3 id=\"npm-cli-运行原理\"><a href=\"#npm-cli-运行原理\" class=\"headerlink\" title=\"npm cli 运行原理\"></a>npm cli 运行原理</h3><p>1.当全局安装 npm 包的时候，npm 会把 package.json 中 bin 配置的 command-name 添加到系统 <em>$PATH</em>中去。</p>\n<p>拿 macOS 举例，npm 会在 &#x2F;usr&#x2F;local&#x2F;bin 下创建一个以 keep 为名字的软链接，指向全局安装下来的<br>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;my-cli 包下面的 js：keep。（&#x2F;usr&#x2F;local&#x2F;bin 是在 $PATH 中的）</p>\n<p><strong>如果全局安装keep-cli：</strong></p>\n<p><strong>&#x2F;usr&#x2F;local&#x2F;bin 目录</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3c94e5717f0489c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules 目录</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-330c359092014f3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>2.在命令行键入 keep 相当于执行了文本文件 keep。</p>\n<p>3.在执行的时候碰到第一行 #!&#x2F;usr&#x2F;bin&#x2F;env node，这是一个 shebang 行。这行告诉系统使用 node 去执行当前文件。（shebang 只有在Unix-like平台才有）</p>\n<p>4.执行 js 文件。这里有一个问题：#! 并不是一个符合 js 语法的语句，理论上直接执行是会有 syntax error 的。但是 node 对 shebang 行做了例外处理，所以用 node 执行带 shebang 行的 js 文件是没有问题的。</p>\n<h3 id=\"npm-cli-开发步骤\"><a href=\"#npm-cli-开发步骤\" class=\"headerlink\" title=\"npm cli 开发步骤\"></a>npm cli 开发步骤</h3><p>使用 npm init 初始化一个项目目录 keep-cli，在 package.json 中添加或者编辑 bin 字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;keep-cli&quot;,</span><br><span class=\"line\">  ...,</span><br><span class=\"line\">  &quot;bin&quot;: &#123;</span><br><span class=\"line\">    &quot;keep&quot;: &quot;bin/keep&quot;,</span><br><span class=\"line\">    &quot;keep-create&quot;: &quot;bin/keep-create&quot;,</span><br><span class=\"line\">    &quot;keep-list&quot;: &quot;bin/keep-list&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"使用-commander-输入命令\"><a href=\"#使用-commander-输入命令\" class=\"headerlink\" title=\"使用 commander 输入命令\"></a>使用 <code>commander</code> 输入命令</h4><p>代码开发。必须在 keep文件的第一行写这行命令 #!&#x2F;usr&#x2F;bin&#x2F;env node，譬如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#!<span class=\"regexp\">/usr/</span>bin/env node</span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义四个指令</span></span><br><span class=\"line\">program</span><br><span class=\"line\">  .<span class=\"title function_\">version</span>(<span class=\"built_in\">require</span>(<span class=\"string\">&quot;../package&quot;</span>).<span class=\"property\">version</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">usage</span>(<span class=\"string\">&quot;&lt;command&gt; [options]&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">command</span>(<span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;list all the templates&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">command</span>(<span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;generate a new project from a template&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">program.<span class=\"title function_\">parse</span>(process.<span class=\"property\">argv</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>同理在文件夹新增两个文件<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-57140c996d996352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"使用-inquirer控制台做询问选择\"><a href=\"#使用-inquirer控制台做询问选择\" class=\"headerlink\" title=\"使用 inquirer控制台做询问选择\"></a>使用 <code>inquirer</code>控制台做询问选择</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8a602ddf2c881666.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>根据不同的选择下载不同的模板。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-715560d00aea4855.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>完成。。。。。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-95b4a2d210e8cf21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>用过构建工具的亲们知道，通常通过全局安装一个 xxx-cli 的 npm 包，就能在命令行用命令进行构建。那么这个 npm 包如何变成一个可执行的命令呢？</p>\n<h3 id=\"npm-cli-运行原理\"><a href=\"#npm-cli-运行原理\" class=\"headerlink\" title=\"npm cli 运行原理\"></a>npm cli 运行原理</h3><p>1.当全局安装 npm 包的时候，npm 会把 package.json 中 bin 配置的 command-name 添加到系统 <em>$PATH</em>中去。</p>\n<p>拿 macOS 举例，npm 会在 &#x2F;usr&#x2F;local&#x2F;bin 下创建一个以 keep 为名字的软链接，指向全局安装下来的<br>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;my-cli 包下面的 js：keep。（&#x2F;usr&#x2F;local&#x2F;bin 是在 $PATH 中的）</p>\n<p><strong>如果全局安装keep-cli：</strong></p>\n<p><strong>&#x2F;usr&#x2F;local&#x2F;bin 目录</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3c94e5717f0489c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules 目录</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-330c359092014f3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>2.在命令行键入 keep 相当于执行了文本文件 keep。</p>\n<p>3.在执行的时候碰到第一行 #!&#x2F;usr&#x2F;bin&#x2F;env node，这是一个 shebang 行。这行告诉系统使用 node 去执行当前文件。（shebang 只有在Unix-like平台才有）</p>\n<p>4.执行 js 文件。这里有一个问题：#! 并不是一个符合 js 语法的语句，理论上直接执行是会有 syntax error 的。但是 node 对 shebang 行做了例外处理，所以用 node 执行带 shebang 行的 js 文件是没有问题的。</p>\n<h3 id=\"npm-cli-开发步骤\"><a href=\"#npm-cli-开发步骤\" class=\"headerlink\" title=\"npm cli 开发步骤\"></a>npm cli 开发步骤</h3><p>使用 npm init 初始化一个项目目录 keep-cli，在 package.json 中添加或者编辑 bin 字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;keep-cli&quot;,</span><br><span class=\"line\">  ...,</span><br><span class=\"line\">  &quot;bin&quot;: &#123;</span><br><span class=\"line\">    &quot;keep&quot;: &quot;bin/keep&quot;,</span><br><span class=\"line\">    &quot;keep-create&quot;: &quot;bin/keep-create&quot;,</span><br><span class=\"line\">    &quot;keep-list&quot;: &quot;bin/keep-list&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"使用-commander-输入命令\"><a href=\"#使用-commander-输入命令\" class=\"headerlink\" title=\"使用 commander 输入命令\"></a>使用 <code>commander</code> 输入命令</h4><p>代码开发。必须在 keep文件的第一行写这行命令 #!&#x2F;usr&#x2F;bin&#x2F;env node，譬如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#!<span class=\"regexp\">/usr/</span>bin/env node</span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;commander&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义四个指令</span></span><br><span class=\"line\">program</span><br><span class=\"line\">  .<span class=\"title function_\">version</span>(<span class=\"built_in\">require</span>(<span class=\"string\">&quot;../package&quot;</span>).<span class=\"property\">version</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">usage</span>(<span class=\"string\">&quot;&lt;command&gt; [options]&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">command</span>(<span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;list all the templates&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">command</span>(<span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;generate a new project from a template&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">program.<span class=\"title function_\">parse</span>(process.<span class=\"property\">argv</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>同理在文件夹新增两个文件<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-57140c996d996352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"使用-inquirer控制台做询问选择\"><a href=\"#使用-inquirer控制台做询问选择\" class=\"headerlink\" title=\"使用 inquirer控制台做询问选择\"></a>使用 <code>inquirer</code>控制台做询问选择</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8a602ddf2c881666.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>根据不同的选择下载不同的模板。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-715560d00aea4855.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>完成。。。。。</p>\n"},{"title":"🐓🥚docker打包node-js服务","date":"2022-05-14T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-03e1c7414cd9ad88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 背景：\n把node.js服务放在linux上，每次都要搞一堆配置。\n### 解决方法： \n使用docker打包\n有当前node 项目，向前端展示某个文件下的文件\n![](https://upload-images.jianshu.io/upload_images/15312191-956c3d0469a168fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\napp.js 展示文件列表的小软件\n```js\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\napp.use(express.static('public'));\n\nconst path = require('path');\nlet rootPath = path.resolve(__dirname, './public');\n\napp.get('/', (req, res) => {\n  res.sendFile(`${__dirname}/index.html`);\n});\n\n\napp.get('/file/getList',(req,res,next) => {\n  var readDir = fs.readdirSync(rootPath);\n  console.log(readDir);\n  res.send({\n    code: 200,\n    data: readDir\n  })\n})\n\napp.use(express.static('public'))\n  .listen(3000);\n\n```\n\n#### 安装dokcer:\n##### mac \n`$ brew install --cask --appdir=/Applications docker`\n##### linux\nDocker的自动化安装\nDocker官方和国内daocloud都提供了一键安装的脚本，使得Docker的安装更加便捷。\n官方的一键安装方式：\n```\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n```\n国内 daocloud一键安装命令：\n```\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n#### 设置镜像\n阿里云有免费镜像，可以申请；\n```\nsudo mkdir -p /etc/docker // 创建文件夹\n// tee 创建文件并输入内容\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://dxrbo5kv.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n#### 创建 Dockerfile 文件:\n`touch Dockerfile`\n\n```\nFROM node:8-alpine \n\n# Create app directory\nWORKDIR /app\n\nCOPY package.json app.js index.html ./\nCOPY public ./public\n\n#  Install app dependencies\nRUN npm install\n\nCMD [\"npm\", \"start\"]\n```\n#### 构建docker镜像\n`docker build  . -t chenxiaobei/node-alpine`  \n\ndocker的镜像会运行在容器上 --name [容器名], 不写默认镜像名\n\nps: 镜像名/前是docker hub你的用户名\n#### 查看docker内文件是否完整\n`docker run -it --entrypoint sh chenxiaobei/node-alpine`\n\n#### 运行docker镜像\n` docker run -p 3000:3000 -d chenxiaobei/node-alpine`\n\n#### 发布镜像(也可以发布到阿里云私有镜像)\n`docker push chenxiaobei/node-alpine`\n在https://hub.docker.com/上查看\n![](https://upload-images.jianshu.io/upload_images/15312191-4279ab9c9914f4cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### linux安装docker\n`curl -sSL https://get.daocloud.io/docker | sh`\n#### linux启动docker\n`systemctl start docker`\n#### 服务器拉取镜像\n`docker pull chenxiaobei/node-alpine`\n#### 服务器运行镜像\n\n`docker run -d it   -p 3000:3000  chenxiaobei/node-alpine`\n#### 查看容器\n```\ndocker ps -a\n```\n#### 进入docker容器\n```\ndokcer exec -it [容器ID/容器name] bash\n```\n\n#### docker 文件映射\n\n在创建Docker容器时，想要与本地路径进行映射共享文件，使用`docker run -v`指令，例如我需要将本地的的`/root/code`路径映射到容器内的`/data/code`路径，使用如下指令，冒号前为宿主机路径，冒号后为容器路径，其中xxx为镜像完整路径\n```shell\ndocker run -it -v /root/code:/data/code -d -p 3000:3000  chenxiaobei/node-alpine\n```\n\n> [Requires: container-selinux >= 2.9 报错](https://blog.csdn.net/qq_43058911/article/details/105839136)\n","source":"_posts/🐓🥚docker打包node-js服务.md","raw":"---\ntitle: \"🐓🥚docker打包node-js服务\"\ndate: 2022-05-15\ntags: \n- 实践堂\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-03e1c7414cd9ad88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 背景：\n把node.js服务放在linux上，每次都要搞一堆配置。\n### 解决方法： \n使用docker打包\n有当前node 项目，向前端展示某个文件下的文件\n![](https://upload-images.jianshu.io/upload_images/15312191-956c3d0469a168fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\napp.js 展示文件列表的小软件\n```js\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\napp.use(express.static('public'));\n\nconst path = require('path');\nlet rootPath = path.resolve(__dirname, './public');\n\napp.get('/', (req, res) => {\n  res.sendFile(`${__dirname}/index.html`);\n});\n\n\napp.get('/file/getList',(req,res,next) => {\n  var readDir = fs.readdirSync(rootPath);\n  console.log(readDir);\n  res.send({\n    code: 200,\n    data: readDir\n  })\n})\n\napp.use(express.static('public'))\n  .listen(3000);\n\n```\n\n#### 安装dokcer:\n##### mac \n`$ brew install --cask --appdir=/Applications docker`\n##### linux\nDocker的自动化安装\nDocker官方和国内daocloud都提供了一键安装的脚本，使得Docker的安装更加便捷。\n官方的一键安装方式：\n```\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n```\n国内 daocloud一键安装命令：\n```\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n#### 设置镜像\n阿里云有免费镜像，可以申请；\n```\nsudo mkdir -p /etc/docker // 创建文件夹\n// tee 创建文件并输入内容\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://dxrbo5kv.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n#### 创建 Dockerfile 文件:\n`touch Dockerfile`\n\n```\nFROM node:8-alpine \n\n# Create app directory\nWORKDIR /app\n\nCOPY package.json app.js index.html ./\nCOPY public ./public\n\n#  Install app dependencies\nRUN npm install\n\nCMD [\"npm\", \"start\"]\n```\n#### 构建docker镜像\n`docker build  . -t chenxiaobei/node-alpine`  \n\ndocker的镜像会运行在容器上 --name [容器名], 不写默认镜像名\n\nps: 镜像名/前是docker hub你的用户名\n#### 查看docker内文件是否完整\n`docker run -it --entrypoint sh chenxiaobei/node-alpine`\n\n#### 运行docker镜像\n` docker run -p 3000:3000 -d chenxiaobei/node-alpine`\n\n#### 发布镜像(也可以发布到阿里云私有镜像)\n`docker push chenxiaobei/node-alpine`\n在https://hub.docker.com/上查看\n![](https://upload-images.jianshu.io/upload_images/15312191-4279ab9c9914f4cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### linux安装docker\n`curl -sSL https://get.daocloud.io/docker | sh`\n#### linux启动docker\n`systemctl start docker`\n#### 服务器拉取镜像\n`docker pull chenxiaobei/node-alpine`\n#### 服务器运行镜像\n\n`docker run -d it   -p 3000:3000  chenxiaobei/node-alpine`\n#### 查看容器\n```\ndocker ps -a\n```\n#### 进入docker容器\n```\ndokcer exec -it [容器ID/容器name] bash\n```\n\n#### docker 文件映射\n\n在创建Docker容器时，想要与本地路径进行映射共享文件，使用`docker run -v`指令，例如我需要将本地的的`/root/code`路径映射到容器内的`/data/code`路径，使用如下指令，冒号前为宿主机路径，冒号后为容器路径，其中xxx为镜像完整路径\n```shell\ndocker run -it -v /root/code:/data/code -d -p 3000:3000  chenxiaobei/node-alpine\n```\n\n> [Requires: container-selinux >= 2.9 报错](https://blog.csdn.net/qq_43058911/article/details/105839136)\n","slug":"🐓🥚docker打包node-js服务","published":1,"updated":"2024-05-16T07:39:11.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ok004x2omvgmv55nlp","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-03e1c7414cd9ad88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h3><p>把node.js服务放在linux上，每次都要搞一堆配置。</p>\n<h3 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3><p>使用docker打包<br>有当前node 项目，向前端展示某个文件下的文件<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-956c3d0469a168fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>app.js 展示文件列表的小软件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;public&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> rootPath = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./public&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">sendFile</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/index.html`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/file/getList&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res,next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> readDir = fs.<span class=\"title function_\">readdirSync</span>(rootPath);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(readDir);</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: readDir</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;public&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装dokcer\"><a href=\"#安装dokcer\" class=\"headerlink\" title=\"安装dokcer:\"></a>安装dokcer:</h4><h5 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h5><p><code>$ brew install --cask --appdir=/Applications docker</code></p>\n<h5 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h5><p>Docker的自动化安装<br>Docker官方和国内daocloud都提供了一键安装的脚本，使得Docker的安装更加便捷。<br>官方的一键安装方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>\n<p>国内 daocloud一键安装命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置镜像\"><a href=\"#设置镜像\" class=\"headerlink\" title=\"设置镜像\"></a>设置镜像</h4><p>阿里云有免费镜像，可以申请；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker // 创建文件夹</span><br><span class=\"line\">// tee 创建文件并输入内容</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://dxrbo5kv.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建-Dockerfile-文件\"><a href=\"#创建-Dockerfile-文件\" class=\"headerlink\" title=\"创建 Dockerfile 文件:\"></a>创建 Dockerfile 文件:</h4><p><code>touch Dockerfile</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:8-alpine </span><br><span class=\"line\"></span><br><span class=\"line\"># Create app directory</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\">COPY package.json app.js index.html ./</span><br><span class=\"line\">COPY public ./public</span><br><span class=\"line\"></span><br><span class=\"line\">#  Install app dependencies</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"构建docker镜像\"><a href=\"#构建docker镜像\" class=\"headerlink\" title=\"构建docker镜像\"></a>构建docker镜像</h4><p><code>docker build  . -t chenxiaobei/node-alpine</code>  </p>\n<p>docker的镜像会运行在容器上 –name [容器名], 不写默认镜像名</p>\n<p>ps: 镜像名&#x2F;前是docker hub你的用户名</p>\n<h4 id=\"查看docker内文件是否完整\"><a href=\"#查看docker内文件是否完整\" class=\"headerlink\" title=\"查看docker内文件是否完整\"></a>查看docker内文件是否完整</h4><p><code>docker run -it --entrypoint sh chenxiaobei/node-alpine</code></p>\n<h4 id=\"运行docker镜像\"><a href=\"#运行docker镜像\" class=\"headerlink\" title=\"运行docker镜像\"></a>运行docker镜像</h4><p><code> docker run -p 3000:3000 -d chenxiaobei/node-alpine</code></p>\n<h4 id=\"发布镜像-也可以发布到阿里云私有镜像\"><a href=\"#发布镜像-也可以发布到阿里云私有镜像\" class=\"headerlink\" title=\"发布镜像(也可以发布到阿里云私有镜像)\"></a>发布镜像(也可以发布到阿里云私有镜像)</h4><p><code>docker push chenxiaobei/node-alpine</code><br>在<a href=\"https://hub.docker.com/%E4%B8%8A%E6%9F%A5%E7%9C%8B\">https://hub.docker.com/上查看</a><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4279ab9c9914f4cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"linux安装docker\"><a href=\"#linux安装docker\" class=\"headerlink\" title=\"linux安装docker\"></a>linux安装docker</h4><p><code>curl -sSL https://get.daocloud.io/docker | sh</code></p>\n<h4 id=\"linux启动docker\"><a href=\"#linux启动docker\" class=\"headerlink\" title=\"linux启动docker\"></a>linux启动docker</h4><p><code>systemctl start docker</code></p>\n<h4 id=\"服务器拉取镜像\"><a href=\"#服务器拉取镜像\" class=\"headerlink\" title=\"服务器拉取镜像\"></a>服务器拉取镜像</h4><p><code>docker pull chenxiaobei/node-alpine</code></p>\n<h4 id=\"服务器运行镜像\"><a href=\"#服务器运行镜像\" class=\"headerlink\" title=\"服务器运行镜像\"></a>服务器运行镜像</h4><p><code>docker run -d it   -p 3000:3000  chenxiaobei/node-alpine</code></p>\n<h4 id=\"查看容器\"><a href=\"#查看容器\" class=\"headerlink\" title=\"查看容器\"></a>查看容器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<h4 id=\"进入docker容器\"><a href=\"#进入docker容器\" class=\"headerlink\" title=\"进入docker容器\"></a>进入docker容器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer exec -it [容器ID/容器name] bash</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"docker-文件映射\"><a href=\"#docker-文件映射\" class=\"headerlink\" title=\"docker 文件映射\"></a>docker 文件映射</h4><p>在创建Docker容器时，想要与本地路径进行映射共享文件，使用<code>docker run -v</code>指令，例如我需要将本地的的<code>/root/code</code>路径映射到容器内的<code>/data/code</code>路径，使用如下指令，冒号前为宿主机路径，冒号后为容器路径，其中xxx为镜像完整路径</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v /root/code:/data/code -d -p 3000:3000  chenxiaobei/node-alpine</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_43058911/article/details/105839136\">Requires: container-selinux &gt;&#x3D; 2.9 报错</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-03e1c7414cd9ad88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h3><p>把node.js服务放在linux上，每次都要搞一堆配置。</p>\n<h3 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3><p>使用docker打包<br>有当前node 项目，向前端展示某个文件下的文件<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-956c3d0469a168fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>app.js 展示文件列表的小软件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;public&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> rootPath = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./public&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">sendFile</span>(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/index.html`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/file/getList&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res,next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> readDir = fs.<span class=\"title function_\">readdirSync</span>(rootPath);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(readDir);</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: readDir</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(express.<span class=\"title function_\">static</span>(<span class=\"string\">&#x27;public&#x27;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装dokcer\"><a href=\"#安装dokcer\" class=\"headerlink\" title=\"安装dokcer:\"></a>安装dokcer:</h4><h5 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h5><p><code>$ brew install --cask --appdir=/Applications docker</code></p>\n<h5 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h5><p>Docker的自动化安装<br>Docker官方和国内daocloud都提供了一键安装的脚本，使得Docker的安装更加便捷。<br>官方的一键安装方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>\n<p>国内 daocloud一键安装命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置镜像\"><a href=\"#设置镜像\" class=\"headerlink\" title=\"设置镜像\"></a>设置镜像</h4><p>阿里云有免费镜像，可以申请；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker // 创建文件夹</span><br><span class=\"line\">// tee 创建文件并输入内容</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://dxrbo5kv.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建-Dockerfile-文件\"><a href=\"#创建-Dockerfile-文件\" class=\"headerlink\" title=\"创建 Dockerfile 文件:\"></a>创建 Dockerfile 文件:</h4><p><code>touch Dockerfile</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:8-alpine </span><br><span class=\"line\"></span><br><span class=\"line\"># Create app directory</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\">COPY package.json app.js index.html ./</span><br><span class=\"line\">COPY public ./public</span><br><span class=\"line\"></span><br><span class=\"line\">#  Install app dependencies</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"构建docker镜像\"><a href=\"#构建docker镜像\" class=\"headerlink\" title=\"构建docker镜像\"></a>构建docker镜像</h4><p><code>docker build  . -t chenxiaobei/node-alpine</code>  </p>\n<p>docker的镜像会运行在容器上 –name [容器名], 不写默认镜像名</p>\n<p>ps: 镜像名&#x2F;前是docker hub你的用户名</p>\n<h4 id=\"查看docker内文件是否完整\"><a href=\"#查看docker内文件是否完整\" class=\"headerlink\" title=\"查看docker内文件是否完整\"></a>查看docker内文件是否完整</h4><p><code>docker run -it --entrypoint sh chenxiaobei/node-alpine</code></p>\n<h4 id=\"运行docker镜像\"><a href=\"#运行docker镜像\" class=\"headerlink\" title=\"运行docker镜像\"></a>运行docker镜像</h4><p><code> docker run -p 3000:3000 -d chenxiaobei/node-alpine</code></p>\n<h4 id=\"发布镜像-也可以发布到阿里云私有镜像\"><a href=\"#发布镜像-也可以发布到阿里云私有镜像\" class=\"headerlink\" title=\"发布镜像(也可以发布到阿里云私有镜像)\"></a>发布镜像(也可以发布到阿里云私有镜像)</h4><p><code>docker push chenxiaobei/node-alpine</code><br>在<a href=\"https://hub.docker.com/%E4%B8%8A%E6%9F%A5%E7%9C%8B\">https://hub.docker.com/上查看</a><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4279ab9c9914f4cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"linux安装docker\"><a href=\"#linux安装docker\" class=\"headerlink\" title=\"linux安装docker\"></a>linux安装docker</h4><p><code>curl -sSL https://get.daocloud.io/docker | sh</code></p>\n<h4 id=\"linux启动docker\"><a href=\"#linux启动docker\" class=\"headerlink\" title=\"linux启动docker\"></a>linux启动docker</h4><p><code>systemctl start docker</code></p>\n<h4 id=\"服务器拉取镜像\"><a href=\"#服务器拉取镜像\" class=\"headerlink\" title=\"服务器拉取镜像\"></a>服务器拉取镜像</h4><p><code>docker pull chenxiaobei/node-alpine</code></p>\n<h4 id=\"服务器运行镜像\"><a href=\"#服务器运行镜像\" class=\"headerlink\" title=\"服务器运行镜像\"></a>服务器运行镜像</h4><p><code>docker run -d it   -p 3000:3000  chenxiaobei/node-alpine</code></p>\n<h4 id=\"查看容器\"><a href=\"#查看容器\" class=\"headerlink\" title=\"查看容器\"></a>查看容器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<h4 id=\"进入docker容器\"><a href=\"#进入docker容器\" class=\"headerlink\" title=\"进入docker容器\"></a>进入docker容器</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dokcer exec -it [容器ID/容器name] bash</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"docker-文件映射\"><a href=\"#docker-文件映射\" class=\"headerlink\" title=\"docker 文件映射\"></a>docker 文件映射</h4><p>在创建Docker容器时，想要与本地路径进行映射共享文件，使用<code>docker run -v</code>指令，例如我需要将本地的的<code>/root/code</code>路径映射到容器内的<code>/data/code</code>路径，使用如下指令，冒号前为宿主机路径，冒号后为容器路径，其中xxx为镜像完整路径</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v /root/code:/data/code -d -p 3000:3000  chenxiaobei/node-alpine</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_43058911/article/details/105839136\">Requires: container-selinux &gt;&#x3D; 2.9 报错</a></p>\n</blockquote>\n"},{"title":"🐓🥚npm-link-Hot-Module-Replacement-方案","date":"2022-08-01T16:00:00.000Z","_content":"假如你在开发一个vue第三方包，假定命名package，我们使用npm link方式，这样可以，在主要项目project引用时，**package**可以独立快速开发，不和**project**耦合。\n\n### npm link\n1.进入package执行\n```\nnpm link\n```\n2.进入project 中执行\n```\nnpm link package\n```\n这样就可以愉快的开发了。\n\n### 问题：npm link 无法使用热更新。\n由于npm link利用的是操作系统的 **ln -s source target** 软连接，无法热更新，这就没搞头了了，没有热更新我还 link毛线呢。没关系，大胆发挥创新能力，我们可以利用**yalc**和**webpack plugin**搞事情。\n### 方案：webpack hook\nyalc 和 npm link 差不多，但是不会创立软连接，而是把文件映射到node_modules，和主项目共用npm包。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-05a389b031eeae91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n实现link包更新功能主要利用**yalc push**特性。如果不熟悉yalc可以先看看这个工具的文档。\n\n\n安装\n```\nnpm install yalc\n```\n\n进入package根目录，执行\n```\nyale publish\n```\n\n进入project根目录，执行\n```\nyale add package\nnpm i\n```\n\n现在重新进入package根目录\n安装webpack插件 `yalc-watch-webpack-plugin`，这个插件的作用就是利用webpack hook:**watchRun**，在更新时调用`yalc push`\n```js\nnpm i yalc-watch-webpack-plugin\n```\n在vue.config 配置下这个插件\n```\n // vue.config.js\nconst yalcpushwatchplugin = require('yalcpushwatchplugin');\nmodule.exports = {\n  ...\n  configureWebpack: {\n    plugins: [\n      new yalcpushwatchplugin({\n        watchPushAction: true,\n        linkName: \"logicflow-vue\",\n      }),\n    ],\n  },\n};\n```\n\n启动你的package项目\n\n```\nnpm start\n```\n\n这样当你修改package文件后，就会自动执行，**yalc push**, project的依赖link也会自动更新。\n除了上面的方案，\n也可以利用 **nodemon** 文件监控功能，监听 package 的改动，在 package目录下执行 **npm run watch**；不过相对于webpack tap钩子性能相对差。\n```\n\"scripts\": {\n    \"watch\": \"nodemon --ignore dist/ --ignore node_modules/ --watch src/ -C -e ts,tsx,less --debug -x 'npx rollup -c rollup.config.js --silent && yalc push'\",\n },\n```\n","source":"_posts/🐓🥚npm-link-Hot-Module-Replacement-方案.md","raw":"---\ntitle: \"🐓🥚npm-link-Hot-Module-Replacement-方案\"\ndate: 2022-08-02\ntags: \n- 实践堂\n---\n假如你在开发一个vue第三方包，假定命名package，我们使用npm link方式，这样可以，在主要项目project引用时，**package**可以独立快速开发，不和**project**耦合。\n\n### npm link\n1.进入package执行\n```\nnpm link\n```\n2.进入project 中执行\n```\nnpm link package\n```\n这样就可以愉快的开发了。\n\n### 问题：npm link 无法使用热更新。\n由于npm link利用的是操作系统的 **ln -s source target** 软连接，无法热更新，这就没搞头了了，没有热更新我还 link毛线呢。没关系，大胆发挥创新能力，我们可以利用**yalc**和**webpack plugin**搞事情。\n### 方案：webpack hook\nyalc 和 npm link 差不多，但是不会创立软连接，而是把文件映射到node_modules，和主项目共用npm包。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-05a389b031eeae91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n实现link包更新功能主要利用**yalc push**特性。如果不熟悉yalc可以先看看这个工具的文档。\n\n\n安装\n```\nnpm install yalc\n```\n\n进入package根目录，执行\n```\nyale publish\n```\n\n进入project根目录，执行\n```\nyale add package\nnpm i\n```\n\n现在重新进入package根目录\n安装webpack插件 `yalc-watch-webpack-plugin`，这个插件的作用就是利用webpack hook:**watchRun**，在更新时调用`yalc push`\n```js\nnpm i yalc-watch-webpack-plugin\n```\n在vue.config 配置下这个插件\n```\n // vue.config.js\nconst yalcpushwatchplugin = require('yalcpushwatchplugin');\nmodule.exports = {\n  ...\n  configureWebpack: {\n    plugins: [\n      new yalcpushwatchplugin({\n        watchPushAction: true,\n        linkName: \"logicflow-vue\",\n      }),\n    ],\n  },\n};\n```\n\n启动你的package项目\n\n```\nnpm start\n```\n\n这样当你修改package文件后，就会自动执行，**yalc push**, project的依赖link也会自动更新。\n除了上面的方案，\n也可以利用 **nodemon** 文件监控功能，监听 package 的改动，在 package目录下执行 **npm run watch**；不过相对于webpack tap钩子性能相对差。\n```\n\"scripts\": {\n    \"watch\": \"nodemon --ignore dist/ --ignore node_modules/ --watch src/ -C -e ts,tsx,less --debug -x 'npx rollup -c rollup.config.js --silent && yalc push'\",\n },\n```\n","slug":"🐓🥚npm-link-Hot-Module-Replacement-方案","published":1,"updated":"2024-05-16T07:39:11.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ol004z2omv3q9katx3","content":"<p>假如你在开发一个vue第三方包，假定命名package，我们使用npm link方式，这样可以，在主要项目project引用时，<strong>package</strong>可以独立快速开发，不和<strong>project</strong>耦合。</p>\n<h3 id=\"npm-link\"><a href=\"#npm-link\" class=\"headerlink\" title=\"npm link\"></a>npm link</h3><p>1.进入package执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link</span><br></pre></td></tr></table></figure>\n<p>2.进入project 中执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link package</span><br></pre></td></tr></table></figure>\n<p>这样就可以愉快的开发了。</p>\n<h3 id=\"问题：npm-link-无法使用热更新。\"><a href=\"#问题：npm-link-无法使用热更新。\" class=\"headerlink\" title=\"问题：npm link 无法使用热更新。\"></a>问题：npm link 无法使用热更新。</h3><p>由于npm link利用的是操作系统的 <strong>ln -s source target</strong> 软连接，无法热更新，这就没搞头了了，没有热更新我还 link毛线呢。没关系，大胆发挥创新能力，我们可以利用<strong>yalc</strong>和<strong>webpack plugin</strong>搞事情。</p>\n<h3 id=\"方案：webpack-hook\"><a href=\"#方案：webpack-hook\" class=\"headerlink\" title=\"方案：webpack hook\"></a>方案：webpack hook</h3><p>yalc 和 npm link 差不多，但是不会创立软连接，而是把文件映射到node_modules，和主项目共用npm包。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-05a389b031eeae91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>实现link包更新功能主要利用<strong>yalc push</strong>特性。如果不熟悉yalc可以先看看这个工具的文档。</p>\n<p>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install yalc</span><br></pre></td></tr></table></figure>\n\n<p>进入package根目录，执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yale publish</span><br></pre></td></tr></table></figure>\n\n<p>进入project根目录，执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yale add package</span><br><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n\n<p>现在重新进入package根目录<br>安装webpack插件 <code>yalc-watch-webpack-plugin</code>，这个插件的作用就是利用webpack hook:<strong>watchRun</strong>，在更新时调用<code>yalc push</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i yalc-watch-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>在vue.config 配置下这个插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // vue.config.js</span><br><span class=\"line\">const yalcpushwatchplugin = require(&#x27;yalcpushwatchplugin&#x27;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new yalcpushwatchplugin(&#123;</span><br><span class=\"line\">        watchPushAction: true,</span><br><span class=\"line\">        linkName: &quot;logicflow-vue&quot;,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>启动你的package项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<p>这样当你修改package文件后，就会自动执行，<strong>yalc push</strong>, project的依赖link也会自动更新。<br>除了上面的方案，<br>也可以利用 <strong>nodemon</strong> 文件监控功能，监听 package 的改动，在 package目录下执行 <strong>npm run watch</strong>；不过相对于webpack tap钩子性能相对差。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;watch&quot;: &quot;nodemon --ignore dist/ --ignore node_modules/ --watch src/ -C -e ts,tsx,less --debug -x &#x27;npx rollup -c rollup.config.js --silent &amp;&amp; yalc push&#x27;&quot;,</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>假如你在开发一个vue第三方包，假定命名package，我们使用npm link方式，这样可以，在主要项目project引用时，<strong>package</strong>可以独立快速开发，不和<strong>project</strong>耦合。</p>\n<h3 id=\"npm-link\"><a href=\"#npm-link\" class=\"headerlink\" title=\"npm link\"></a>npm link</h3><p>1.进入package执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link</span><br></pre></td></tr></table></figure>\n<p>2.进入project 中执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link package</span><br></pre></td></tr></table></figure>\n<p>这样就可以愉快的开发了。</p>\n<h3 id=\"问题：npm-link-无法使用热更新。\"><a href=\"#问题：npm-link-无法使用热更新。\" class=\"headerlink\" title=\"问题：npm link 无法使用热更新。\"></a>问题：npm link 无法使用热更新。</h3><p>由于npm link利用的是操作系统的 <strong>ln -s source target</strong> 软连接，无法热更新，这就没搞头了了，没有热更新我还 link毛线呢。没关系，大胆发挥创新能力，我们可以利用<strong>yalc</strong>和<strong>webpack plugin</strong>搞事情。</p>\n<h3 id=\"方案：webpack-hook\"><a href=\"#方案：webpack-hook\" class=\"headerlink\" title=\"方案：webpack hook\"></a>方案：webpack hook</h3><p>yalc 和 npm link 差不多，但是不会创立软连接，而是把文件映射到node_modules，和主项目共用npm包。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-05a389b031eeae91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>实现link包更新功能主要利用<strong>yalc push</strong>特性。如果不熟悉yalc可以先看看这个工具的文档。</p>\n<p>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install yalc</span><br></pre></td></tr></table></figure>\n\n<p>进入package根目录，执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yale publish</span><br></pre></td></tr></table></figure>\n\n<p>进入project根目录，执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yale add package</span><br><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n\n<p>现在重新进入package根目录<br>安装webpack插件 <code>yalc-watch-webpack-plugin</code>，这个插件的作用就是利用webpack hook:<strong>watchRun</strong>，在更新时调用<code>yalc push</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i yalc-watch-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>在vue.config 配置下这个插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // vue.config.js</span><br><span class=\"line\">const yalcpushwatchplugin = require(&#x27;yalcpushwatchplugin&#x27;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  configureWebpack: &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new yalcpushwatchplugin(&#123;</span><br><span class=\"line\">        watchPushAction: true,</span><br><span class=\"line\">        linkName: &quot;logicflow-vue&quot;,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>启动你的package项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<p>这样当你修改package文件后，就会自动执行，<strong>yalc push</strong>, project的依赖link也会自动更新。<br>除了上面的方案，<br>也可以利用 <strong>nodemon</strong> 文件监控功能，监听 package 的改动，在 package目录下执行 <strong>npm run watch</strong>；不过相对于webpack tap钩子性能相对差。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;watch&quot;: &quot;nodemon --ignore dist/ --ignore node_modules/ --watch src/ -C -e ts,tsx,less --debug -x &#x27;npx rollup -c rollup.config.js --silent &amp;&amp; yalc push&#x27;&quot;,</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n"},{"title":"🐓🥚webSocket-socket-js","date":"2022-07-03T16:00:00.000Z","_content":"websocket 解决了服务端主动向客户端，传递消息的问题。\n为方便使用，下面封装了主要方法\n#### 封装：\n```js\nclass Wsocket {\n  constructor(url) {\n    this.ws = new WebSocket(`ws://${process.env.VUE_APP_SOCKET_URL}/${url}`);\n    // this.onSendMessage()\n    this._onCatchErr();\n    this._onClose();\n  }\n  onSendMessage(params = \"\") {\n    if (this.ws.readyState === 1) {\n      this.ws.send(params);\n    } else {\n      this.ws.addEventListener(\"open\", (e) => {\n        console.log(this.ws.readyState);\n        this.ws.send(params);\n      });\n    }\n  }\n  _onCatchErr() {\n    this.ws.addEventListener(\"error\", function(event) {\n      console.error(\"Error from server \", event.data);\n    });\n  }\n  // 被动监听\n  _onClose() {\n    this.ws.addEventListener(\"close\", (e) => {\n      console.log(\n        \"websocket 断开: \" + e.code + \" \" + e.reason + \" \" + e.wasClean\n      );\n      console.log(\"Ws has closed\");\n    });\n  }\n  // 主动关闭\n  close() {\n    this.ws.close();\n  }\n}\n\n\nexport default Wsocket;\n\n```\n\n#### 使用：\n\n```js\nthis.client = new Wsocket('socket/pushMessage')\n// 发送信息\nthis.client.senMessage('message')\n// 接受消息\nthis.client.ws.addEventListener('message', (event) => {\n  // console.log(event.data)\n})\n// 断开连接\nthis.client.close()\n```\n> [websocket API](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket)\n","source":"_posts/🐓🥚webSocket-socket-js.md","raw":"---\ntitle: \"🐓🥚webSocket-socket-js\"\ndate: 2022-07-04\ntags: \n- 实践堂\n---\nwebsocket 解决了服务端主动向客户端，传递消息的问题。\n为方便使用，下面封装了主要方法\n#### 封装：\n```js\nclass Wsocket {\n  constructor(url) {\n    this.ws = new WebSocket(`ws://${process.env.VUE_APP_SOCKET_URL}/${url}`);\n    // this.onSendMessage()\n    this._onCatchErr();\n    this._onClose();\n  }\n  onSendMessage(params = \"\") {\n    if (this.ws.readyState === 1) {\n      this.ws.send(params);\n    } else {\n      this.ws.addEventListener(\"open\", (e) => {\n        console.log(this.ws.readyState);\n        this.ws.send(params);\n      });\n    }\n  }\n  _onCatchErr() {\n    this.ws.addEventListener(\"error\", function(event) {\n      console.error(\"Error from server \", event.data);\n    });\n  }\n  // 被动监听\n  _onClose() {\n    this.ws.addEventListener(\"close\", (e) => {\n      console.log(\n        \"websocket 断开: \" + e.code + \" \" + e.reason + \" \" + e.wasClean\n      );\n      console.log(\"Ws has closed\");\n    });\n  }\n  // 主动关闭\n  close() {\n    this.ws.close();\n  }\n}\n\n\nexport default Wsocket;\n\n```\n\n#### 使用：\n\n```js\nthis.client = new Wsocket('socket/pushMessage')\n// 发送信息\nthis.client.senMessage('message')\n// 接受消息\nthis.client.ws.addEventListener('message', (event) => {\n  // console.log(event.data)\n})\n// 断开连接\nthis.client.close()\n```\n> [websocket API](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket)\n","slug":"🐓🥚webSocket-socket-js","published":1,"updated":"2024-05-16T07:39:11.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094on00512omvhju5b6kw","content":"<p>websocket 解决了服务端主动向客户端，传递消息的问题。<br>为方便使用，下面封装了主要方法</p>\n<h4 id=\"封装：\"><a href=\"#封装：\" class=\"headerlink\" title=\"封装：\"></a>封装：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Wsocket</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">`ws://<span class=\"subst\">$&#123;process.env.VUE_APP_SOCKET_URL&#125;</span>/<span class=\"subst\">$&#123;url&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// this.onSendMessage()</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_onCatchErr</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_onClose</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">onSendMessage</span>(<span class=\"params\">params = <span class=\"string\">&quot;&quot;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"property\">readyState</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">send</span>(params);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;open&quot;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"property\">readyState</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">send</span>(params);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">_onCatchErr</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;error&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error from server &quot;</span>, event.<span class=\"property\">data</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 被动监听</span></span><br><span class=\"line\">  <span class=\"title function_\">_onClose</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;close&quot;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;websocket 断开: &quot;</span> + e.<span class=\"property\">code</span> + <span class=\"string\">&quot; &quot;</span> + e.<span class=\"property\">reason</span> + <span class=\"string\">&quot; &quot;</span> + e.<span class=\"property\">wasClean</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Ws has closed&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 主动关闭</span></span><br><span class=\"line\">  <span class=\"title function_\">close</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Wsocket</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">client</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Wsocket</span>(<span class=\"string\">&#x27;socket/pushMessage&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 发送信息</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">client</span>.<span class=\"title function_\">senMessage</span>(<span class=\"string\">&#x27;message&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 接受消息</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">client</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(event.data)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 断开连接</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">client</span>.<span class=\"title function_\">close</span>()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\">websocket API</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p>websocket 解决了服务端主动向客户端，传递消息的问题。<br>为方便使用，下面封装了主要方法</p>\n<h4 id=\"封装：\"><a href=\"#封装：\" class=\"headerlink\" title=\"封装：\"></a>封装：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Wsocket</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">`ws://<span class=\"subst\">$&#123;process.env.VUE_APP_SOCKET_URL&#125;</span>/<span class=\"subst\">$&#123;url&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// this.onSendMessage()</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_onCatchErr</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">_onClose</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">onSendMessage</span>(<span class=\"params\">params = <span class=\"string\">&quot;&quot;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"property\">readyState</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">send</span>(params);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;open&quot;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"property\">readyState</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">send</span>(params);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">_onCatchErr</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;error&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error from server &quot;</span>, event.<span class=\"property\">data</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 被动监听</span></span><br><span class=\"line\">  <span class=\"title function_\">_onClose</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;close&quot;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;websocket 断开: &quot;</span> + e.<span class=\"property\">code</span> + <span class=\"string\">&quot; &quot;</span> + e.<span class=\"property\">reason</span> + <span class=\"string\">&quot; &quot;</span> + e.<span class=\"property\">wasClean</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Ws has closed&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 主动关闭</span></span><br><span class=\"line\">  <span class=\"title function_\">close</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Wsocket</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">client</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Wsocket</span>(<span class=\"string\">&#x27;socket/pushMessage&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 发送信息</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">client</span>.<span class=\"title function_\">senMessage</span>(<span class=\"string\">&#x27;message&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 接受消息</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">client</span>.<span class=\"property\">ws</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(event.data)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 断开连接</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">client</span>.<span class=\"title function_\">close</span>()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\">websocket API</a></p>\n</blockquote>\n"},{"title":"🐓🥚一键同步简书的文章到-GitHub-Pages","date":"2022-06-03T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-780274cb6f0ef886.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n简书的文章写完后，想同步到github的博客，这样你的博客有可能送到北极也说不定呢🥳🥳。\n\n首先你要有一个github Page，现在有ruby和node.js版的，我用的这个[模版](https://github.com/Huxpro/huxpro.github.io)，jekyll，免费快速搭建博客模版，你也可以选择其它的。\n#### 1.创建github Page\n\n##### 1.1 新增仓库 **userName.github.io**，让后就可以打开这个https://userName.github.io\n\n##### 1.2 下载仓库代码 **https://github.com/Huxpro/huxpro.github.io**到你的仓库\n\n#### 2.利用脚本下载简书文章\n\n下载userName.github.io仓库代码，在项目根目录中建立如下文件夹\n![](https://upload-images.jianshu.io/upload_images/15312191-cd7b966ad6e65360.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n新建 setUp.js,这里只展示主要代码，详细信息可查看[github仓库](https://github.com/qiudaoermu/qiudaoermu.github.io.git)\n\n#####   2.1下载简书文章\n\n简书有一键下载功能，\n![](https://upload-images.jianshu.io/upload_images/15312191-5a27fb2fd4e2739f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接口：`https://www.jianshu.com/backup/download`\n我写了一个脚本，可以直接下载到本地\n```diff\n(async () => {\n await download(\n  config.downloadUrl, // 下载连接 https://www.jianshu.com/backup/download\n  config.downloadPath,  // 下载后的文件路径\n{\n    headers: {\n      Cookie: config.cookie, // 你的简书cookie，很好找的\n    },\n  });\n})()\n```\n\n##### 2.2 解压下载文章压缩包\n\n删除上次解压的文件夹，找到最新的压缩文件，加压到**output**文件夹\n\n```\nunCompress() {\n    this.deleteUnrarDir();\n    const inputRarPath = this.newestRar();\n    exec(\n      `unar  ${inputRarPath}  -o ${this.unRarPath}`,\n      (err, stdout, stderr) => {\n        if (err) {\n          console.log(err);\n          return;\n        }\n        // 简书文章分为不同累不，解压到不同文件夹\n        let childDirs = fs.readdirSync(this.unCompressPath());\n        childDirs.forEach((item) => {\n          file.addTags(this.unCompressPath() + \"/\" + item + \"/\");\n        });\n        if (stderr) console.error(`stderr: ${stderr}`);\n      }\n    );\n  }\n```\n##### 2.3 为文章打Tag\n\njekyll要根据文件头的Tag，生成文章信息，标题，日期，文章分类。格式如下\n\n```\n---\n  layout: post\n  tilte: \"2018-12-08-🦕🦕---React-如何阻止事件冒泡？.md\"\n  date: 2018-12-08-\n  tags: \n    - 开发日常\n---\n\n```\n\noutput里的文章打Tag后，复制到_post(默认文件夹)里，文章头如果没有日期，自动加上\n\n```js\n  addTags(unarTagPath) {\n    // unarTagPath ...output\n\n\n    fs.readdir(unarTagPath, \"utf8\", (err, fileList) => {\n      if (err) throw err;\n      fileList.forEach((excludeDatePrexFile) => {\n        // 获取文件后缀名\n        const filePath = unarTagPath + excludeDatePrexFile;\n        const postContent = this.readFile(\n          filePath,\n          excludeDatePrexFile,\n          this.prex\n        );\n        this.addTagsOnHeader(filePath, postContent);\n\n        this.renameFileByAddDatePrexInUnarTagPath(\n          unarTagPath,\n          this.prex,\n          excludeDatePrexFile\n        );\n      });\n    });\n  }\n```\n\n\n#### 3.提交到github\n\ngithub会自动构建你发布的文章\n\n\n\n#### 遇到的问题，集中在：\n1.了解http协议 （request，response）\n2.如何处理不同场景下的响应体 （response， body）\n3.响应头中的 content-type 与响应数据对应的关系\n4.简书markdown，解析和jekyll不太一样，可能会样式错乱\n\n\n","source":"_posts/🐓🥚一键同步简书的文章到-GitHub-Pages.md","raw":"---\ntitle: \"🐓🥚一键同步简书的文章到-GitHub-Pages\"\ndate: 2022-06-04\ntags: \n- 实践堂\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-780274cb6f0ef886.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n简书的文章写完后，想同步到github的博客，这样你的博客有可能送到北极也说不定呢🥳🥳。\n\n首先你要有一个github Page，现在有ruby和node.js版的，我用的这个[模版](https://github.com/Huxpro/huxpro.github.io)，jekyll，免费快速搭建博客模版，你也可以选择其它的。\n#### 1.创建github Page\n\n##### 1.1 新增仓库 **userName.github.io**，让后就可以打开这个https://userName.github.io\n\n##### 1.2 下载仓库代码 **https://github.com/Huxpro/huxpro.github.io**到你的仓库\n\n#### 2.利用脚本下载简书文章\n\n下载userName.github.io仓库代码，在项目根目录中建立如下文件夹\n![](https://upload-images.jianshu.io/upload_images/15312191-cd7b966ad6e65360.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n新建 setUp.js,这里只展示主要代码，详细信息可查看[github仓库](https://github.com/qiudaoermu/qiudaoermu.github.io.git)\n\n#####   2.1下载简书文章\n\n简书有一键下载功能，\n![](https://upload-images.jianshu.io/upload_images/15312191-5a27fb2fd4e2739f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接口：`https://www.jianshu.com/backup/download`\n我写了一个脚本，可以直接下载到本地\n```diff\n(async () => {\n await download(\n  config.downloadUrl, // 下载连接 https://www.jianshu.com/backup/download\n  config.downloadPath,  // 下载后的文件路径\n{\n    headers: {\n      Cookie: config.cookie, // 你的简书cookie，很好找的\n    },\n  });\n})()\n```\n\n##### 2.2 解压下载文章压缩包\n\n删除上次解压的文件夹，找到最新的压缩文件，加压到**output**文件夹\n\n```\nunCompress() {\n    this.deleteUnrarDir();\n    const inputRarPath = this.newestRar();\n    exec(\n      `unar  ${inputRarPath}  -o ${this.unRarPath}`,\n      (err, stdout, stderr) => {\n        if (err) {\n          console.log(err);\n          return;\n        }\n        // 简书文章分为不同累不，解压到不同文件夹\n        let childDirs = fs.readdirSync(this.unCompressPath());\n        childDirs.forEach((item) => {\n          file.addTags(this.unCompressPath() + \"/\" + item + \"/\");\n        });\n        if (stderr) console.error(`stderr: ${stderr}`);\n      }\n    );\n  }\n```\n##### 2.3 为文章打Tag\n\njekyll要根据文件头的Tag，生成文章信息，标题，日期，文章分类。格式如下\n\n```\n---\n  layout: post\n  tilte: \"2018-12-08-🦕🦕---React-如何阻止事件冒泡？.md\"\n  date: 2018-12-08-\n  tags: \n    - 开发日常\n---\n\n```\n\noutput里的文章打Tag后，复制到_post(默认文件夹)里，文章头如果没有日期，自动加上\n\n```js\n  addTags(unarTagPath) {\n    // unarTagPath ...output\n\n\n    fs.readdir(unarTagPath, \"utf8\", (err, fileList) => {\n      if (err) throw err;\n      fileList.forEach((excludeDatePrexFile) => {\n        // 获取文件后缀名\n        const filePath = unarTagPath + excludeDatePrexFile;\n        const postContent = this.readFile(\n          filePath,\n          excludeDatePrexFile,\n          this.prex\n        );\n        this.addTagsOnHeader(filePath, postContent);\n\n        this.renameFileByAddDatePrexInUnarTagPath(\n          unarTagPath,\n          this.prex,\n          excludeDatePrexFile\n        );\n      });\n    });\n  }\n```\n\n\n#### 3.提交到github\n\ngithub会自动构建你发布的文章\n\n\n\n#### 遇到的问题，集中在：\n1.了解http协议 （request，response）\n2.如何处理不同场景下的响应体 （response， body）\n3.响应头中的 content-type 与响应数据对应的关系\n4.简书markdown，解析和jekyll不太一样，可能会样式错乱\n\n\n","slug":"🐓🥚一键同步简书的文章到-GitHub-Pages","published":1,"updated":"2024-05-16T07:39:11.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094oq00542omvgqyohai4","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-780274cb6f0ef886.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>简书的文章写完后，想同步到github的博客，这样你的博客有可能送到北极也说不定呢🥳🥳。</p>\n<p>首先你要有一个github Page，现在有ruby和node.js版的，我用的这个<a href=\"https://github.com/Huxpro/huxpro.github.io\">模版</a>，jekyll，免费快速搭建博客模版，你也可以选择其它的。</p>\n<h4 id=\"1-创建github-Page\"><a href=\"#1-创建github-Page\" class=\"headerlink\" title=\"1.创建github Page\"></a>1.创建github Page</h4><h5 id=\"1-1-新增仓库-userName-github-io，让后就可以打开这个https-userName-github-io\"><a href=\"#1-1-新增仓库-userName-github-io，让后就可以打开这个https-userName-github-io\" class=\"headerlink\" title=\"1.1 新增仓库 userName.github.io，让后就可以打开这个https://userName.github.io\"></a>1.1 新增仓库 <strong>userName.github.io</strong>，让后就可以打开这个<a href=\"https://username.github.io/\">https://userName.github.io</a></h5><h5 id=\"1-2-下载仓库代码-https-github-com-Huxpro-huxpro-github-io到你的仓库\"><a href=\"#1-2-下载仓库代码-https-github-com-Huxpro-huxpro-github-io到你的仓库\" class=\"headerlink\" title=\"1.2 下载仓库代码 https://github.com/Huxpro/huxpro.github.io到你的仓库\"></a>1.2 下载仓库代码 <strong><a href=\"https://github.com/Huxpro/huxpro.github.io\">https://github.com/Huxpro/huxpro.github.io</a></strong>到你的仓库</h5><h4 id=\"2-利用脚本下载简书文章\"><a href=\"#2-利用脚本下载简书文章\" class=\"headerlink\" title=\"2.利用脚本下载简书文章\"></a>2.利用脚本下载简书文章</h4><p>下载userName.github.io仓库代码，在项目根目录中建立如下文件夹<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-cd7b966ad6e65360.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>新建 setUp.js,这里只展示主要代码，详细信息可查看<a href=\"https://github.com/qiudaoermu/qiudaoermu.github.io.git\">github仓库</a></p>\n<h5 id=\"2-1下载简书文章\"><a href=\"#2-1下载简书文章\" class=\"headerlink\" title=\"2.1下载简书文章\"></a>2.1下载简书文章</h5><p>简书有一键下载功能，<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5a27fb2fd4e2739f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>接口：<code>https://www.jianshu.com/backup/download</code><br>我写了一个脚本，可以直接下载到本地</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(async () =&gt; &#123;</span><br><span class=\"line\"> await download(</span><br><span class=\"line\">  config.downloadUrl, // 下载连接 https://www.jianshu.com/backup/download</span><br><span class=\"line\">  config.downloadPath,  // 下载后的文件路径</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      Cookie: config.cookie, // 你的简书cookie，很好找的</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-解压下载文章压缩包\"><a href=\"#2-2-解压下载文章压缩包\" class=\"headerlink\" title=\"2.2 解压下载文章压缩包\"></a>2.2 解压下载文章压缩包</h5><p>删除上次解压的文件夹，找到最新的压缩文件，加压到<strong>output</strong>文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unCompress() &#123;</span><br><span class=\"line\">    this.deleteUnrarDir();</span><br><span class=\"line\">    const inputRarPath = this.newestRar();</span><br><span class=\"line\">    exec(</span><br><span class=\"line\">      `unar  $&#123;inputRarPath&#125;  -o $&#123;this.unRarPath&#125;`,</span><br><span class=\"line\">      (err, stdout, stderr) =&gt; &#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">          console.log(err);</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 简书文章分为不同累不，解压到不同文件夹</span><br><span class=\"line\">        let childDirs = fs.readdirSync(this.unCompressPath());</span><br><span class=\"line\">        childDirs.forEach((item) =&gt; &#123;</span><br><span class=\"line\">          file.addTags(this.unCompressPath() + &quot;/&quot; + item + &quot;/&quot;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        if (stderr) console.error(`stderr: $&#123;stderr&#125;`);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-3-为文章打Tag\"><a href=\"#2-3-为文章打Tag\" class=\"headerlink\" title=\"2.3 为文章打Tag\"></a>2.3 为文章打Tag</h5><p>jekyll要根据文件头的Tag，生成文章信息，标题，日期，文章分类。格式如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">  layout: post</span><br><span class=\"line\">  tilte: &quot;2018-12-08-🦕🦕---React-如何阻止事件冒泡？.md&quot;</span><br><span class=\"line\">  date: 2018-12-08-</span><br><span class=\"line\">  tags: </span><br><span class=\"line\">    - 开发日常</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>output里的文章打Tag后，复制到_post(默认文件夹)里，文章头如果没有日期，自动加上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">addTags</span>(<span class=\"params\">unarTagPath</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// unarTagPath ...output</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  fs.<span class=\"title function_\">readdir</span>(unarTagPath, <span class=\"string\">&quot;utf8&quot;</span>, <span class=\"function\">(<span class=\"params\">err, fileList</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    fileList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">excludeDatePrexFile</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取文件后缀名</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> filePath = unarTagPath + excludeDatePrexFile;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> postContent = <span class=\"variable language_\">this</span>.<span class=\"title function_\">readFile</span>(</span><br><span class=\"line\">        filePath,</span><br><span class=\"line\">        excludeDatePrexFile,</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">prex</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">addTagsOnHeader</span>(filePath, postContent);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">renameFileByAddDatePrexInUnarTagPath</span>(</span><br><span class=\"line\">        unarTagPath,</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">prex</span>,</span><br><span class=\"line\">        excludeDatePrexFile</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-提交到github\"><a href=\"#3-提交到github\" class=\"headerlink\" title=\"3.提交到github\"></a>3.提交到github</h4><p>github会自动构建你发布的文章</p>\n<h4 id=\"遇到的问题，集中在：\"><a href=\"#遇到的问题，集中在：\" class=\"headerlink\" title=\"遇到的问题，集中在：\"></a>遇到的问题，集中在：</h4><p>1.了解http协议 （request，response）<br>2.如何处理不同场景下的响应体 （response， body）<br>3.响应头中的 content-type 与响应数据对应的关系<br>4.简书markdown，解析和jekyll不太一样，可能会样式错乱</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-780274cb6f0ef886.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>简书的文章写完后，想同步到github的博客，这样你的博客有可能送到北极也说不定呢🥳🥳。</p>\n<p>首先你要有一个github Page，现在有ruby和node.js版的，我用的这个<a href=\"https://github.com/Huxpro/huxpro.github.io\">模版</a>，jekyll，免费快速搭建博客模版，你也可以选择其它的。</p>\n<h4 id=\"1-创建github-Page\"><a href=\"#1-创建github-Page\" class=\"headerlink\" title=\"1.创建github Page\"></a>1.创建github Page</h4><h5 id=\"1-1-新增仓库-userName-github-io，让后就可以打开这个https-userName-github-io\"><a href=\"#1-1-新增仓库-userName-github-io，让后就可以打开这个https-userName-github-io\" class=\"headerlink\" title=\"1.1 新增仓库 userName.github.io，让后就可以打开这个https://userName.github.io\"></a>1.1 新增仓库 <strong>userName.github.io</strong>，让后就可以打开这个<a href=\"https://username.github.io/\">https://userName.github.io</a></h5><h5 id=\"1-2-下载仓库代码-https-github-com-Huxpro-huxpro-github-io到你的仓库\"><a href=\"#1-2-下载仓库代码-https-github-com-Huxpro-huxpro-github-io到你的仓库\" class=\"headerlink\" title=\"1.2 下载仓库代码 https://github.com/Huxpro/huxpro.github.io到你的仓库\"></a>1.2 下载仓库代码 <strong><a href=\"https://github.com/Huxpro/huxpro.github.io\">https://github.com/Huxpro/huxpro.github.io</a></strong>到你的仓库</h5><h4 id=\"2-利用脚本下载简书文章\"><a href=\"#2-利用脚本下载简书文章\" class=\"headerlink\" title=\"2.利用脚本下载简书文章\"></a>2.利用脚本下载简书文章</h4><p>下载userName.github.io仓库代码，在项目根目录中建立如下文件夹<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-cd7b966ad6e65360.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>新建 setUp.js,这里只展示主要代码，详细信息可查看<a href=\"https://github.com/qiudaoermu/qiudaoermu.github.io.git\">github仓库</a></p>\n<h5 id=\"2-1下载简书文章\"><a href=\"#2-1下载简书文章\" class=\"headerlink\" title=\"2.1下载简书文章\"></a>2.1下载简书文章</h5><p>简书有一键下载功能，<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5a27fb2fd4e2739f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>接口：<code>https://www.jianshu.com/backup/download</code><br>我写了一个脚本，可以直接下载到本地</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(async () =&gt; &#123;</span><br><span class=\"line\"> await download(</span><br><span class=\"line\">  config.downloadUrl, // 下载连接 https://www.jianshu.com/backup/download</span><br><span class=\"line\">  config.downloadPath,  // 下载后的文件路径</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      Cookie: config.cookie, // 你的简书cookie，很好找的</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-解压下载文章压缩包\"><a href=\"#2-2-解压下载文章压缩包\" class=\"headerlink\" title=\"2.2 解压下载文章压缩包\"></a>2.2 解压下载文章压缩包</h5><p>删除上次解压的文件夹，找到最新的压缩文件，加压到<strong>output</strong>文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unCompress() &#123;</span><br><span class=\"line\">    this.deleteUnrarDir();</span><br><span class=\"line\">    const inputRarPath = this.newestRar();</span><br><span class=\"line\">    exec(</span><br><span class=\"line\">      `unar  $&#123;inputRarPath&#125;  -o $&#123;this.unRarPath&#125;`,</span><br><span class=\"line\">      (err, stdout, stderr) =&gt; &#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">          console.log(err);</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 简书文章分为不同累不，解压到不同文件夹</span><br><span class=\"line\">        let childDirs = fs.readdirSync(this.unCompressPath());</span><br><span class=\"line\">        childDirs.forEach((item) =&gt; &#123;</span><br><span class=\"line\">          file.addTags(this.unCompressPath() + &quot;/&quot; + item + &quot;/&quot;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        if (stderr) console.error(`stderr: $&#123;stderr&#125;`);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-3-为文章打Tag\"><a href=\"#2-3-为文章打Tag\" class=\"headerlink\" title=\"2.3 为文章打Tag\"></a>2.3 为文章打Tag</h5><p>jekyll要根据文件头的Tag，生成文章信息，标题，日期，文章分类。格式如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">  layout: post</span><br><span class=\"line\">  tilte: &quot;2018-12-08-🦕🦕---React-如何阻止事件冒泡？.md&quot;</span><br><span class=\"line\">  date: 2018-12-08-</span><br><span class=\"line\">  tags: </span><br><span class=\"line\">    - 开发日常</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>output里的文章打Tag后，复制到_post(默认文件夹)里，文章头如果没有日期，自动加上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">addTags</span>(<span class=\"params\">unarTagPath</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// unarTagPath ...output</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  fs.<span class=\"title function_\">readdir</span>(unarTagPath, <span class=\"string\">&quot;utf8&quot;</span>, <span class=\"function\">(<span class=\"params\">err, fileList</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    fileList.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">excludeDatePrexFile</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取文件后缀名</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> filePath = unarTagPath + excludeDatePrexFile;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> postContent = <span class=\"variable language_\">this</span>.<span class=\"title function_\">readFile</span>(</span><br><span class=\"line\">        filePath,</span><br><span class=\"line\">        excludeDatePrexFile,</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">prex</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">addTagsOnHeader</span>(filePath, postContent);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">renameFileByAddDatePrexInUnarTagPath</span>(</span><br><span class=\"line\">        unarTagPath,</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">prex</span>,</span><br><span class=\"line\">        excludeDatePrexFile</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"3-提交到github\"><a href=\"#3-提交到github\" class=\"headerlink\" title=\"3.提交到github\"></a>3.提交到github</h4><p>github会自动构建你发布的文章</p>\n<h4 id=\"遇到的问题，集中在：\"><a href=\"#遇到的问题，集中在：\" class=\"headerlink\" title=\"遇到的问题，集中在：\"></a>遇到的问题，集中在：</h4><p>1.了解http协议 （request，response）<br>2.如何处理不同场景下的响应体 （response， body）<br>3.响应头中的 content-type 与响应数据对应的关系<br>4.简书markdown，解析和jekyll不太一样，可能会样式错乱</p>\n"},{"title":"🐛-An-error-occurred-while-installing-http_parser-rb-(0-6-0)","date":"2021-10-25T16:00:00.000Z","_content":"### 问题\n $ `bundle install`\n\n```\nAn error occurred while installing http_parser.rb (0.6.0), and Bundler cannot continue.\n\nIn Gemfile:\n  jekyll was resolved to 4.2.1, which depends on\n    em-websocket was resolved to 0.5.2, which depends on\n      http_parser.rb\n\n```\n打开错误日志\n```\n\"pkg-config --exists openssl\" \n package configuration for openssl is not found\n```\n \n### 原因：没有正确设置PATH导致的问题\n\n**mac 使用默认的ruby 版本，要更新最新版本 ruby 并且覆盖**\n### 解决方法:\n$ `brew install ruby`\n\n$ `brew link --overwrite ruby`\n\n```\nIf you need to have ruby first in your PATH run:\necho 'export PATH=\"/usr/local/opt/ruby/bin:$PATH\"' >> ~/.zshrc\n\nFor compilers to find ruby you may need to set:\nexport LDFLAGS=\"-L/usr/local/opt/ruby/lib\"\nexport CPPFLAGS=\"-I/usr/local/opt/ruby/include\"\n\nFor pkg-config to find ruby you may need to set:\n  export PKG_CONFIG_PATH=\"/usr/local/opt/ruby/lib/pkgconfig\"\n```\n\n在 .zshrc 加入 'export PATH=\"/usr/local/opt/ruby/bin:$PATH\"'\n\n$ `source ~/.zshrc`\n","source":"_posts/🐛-An-error-occurred-while-installing-http_parser-rb-(0-6-0).md","raw":"---\ntitle: \"🐛-An-error-occurred-while-installing-http_parser-rb-(0-6-0)\"\ndate: 2021-10-26\ntags: \n- 开发日常\n---\n### 问题\n $ `bundle install`\n\n```\nAn error occurred while installing http_parser.rb (0.6.0), and Bundler cannot continue.\n\nIn Gemfile:\n  jekyll was resolved to 4.2.1, which depends on\n    em-websocket was resolved to 0.5.2, which depends on\n      http_parser.rb\n\n```\n打开错误日志\n```\n\"pkg-config --exists openssl\" \n package configuration for openssl is not found\n```\n \n### 原因：没有正确设置PATH导致的问题\n\n**mac 使用默认的ruby 版本，要更新最新版本 ruby 并且覆盖**\n### 解决方法:\n$ `brew install ruby`\n\n$ `brew link --overwrite ruby`\n\n```\nIf you need to have ruby first in your PATH run:\necho 'export PATH=\"/usr/local/opt/ruby/bin:$PATH\"' >> ~/.zshrc\n\nFor compilers to find ruby you may need to set:\nexport LDFLAGS=\"-L/usr/local/opt/ruby/lib\"\nexport CPPFLAGS=\"-I/usr/local/opt/ruby/include\"\n\nFor pkg-config to find ruby you may need to set:\n  export PKG_CONFIG_PATH=\"/usr/local/opt/ruby/lib/pkgconfig\"\n```\n\n在 .zshrc 加入 'export PATH=\"/usr/local/opt/ruby/bin:$PATH\"'\n\n$ `source ~/.zshrc`\n","slug":"🐛-An-error-occurred-while-installing-http_parser-rb-(0-6-0)","published":1,"updated":"2024-05-16T07:39:11.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094or00562omv1oq0dv88","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p> $ <code>bundle install</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">An error occurred while installing http_parser.rb (0.6.0), and Bundler cannot continue.</span><br><span class=\"line\"></span><br><span class=\"line\">In Gemfile:</span><br><span class=\"line\">  jekyll was resolved to 4.2.1, which depends on</span><br><span class=\"line\">    em-websocket was resolved to 0.5.2, which depends on</span><br><span class=\"line\">      http_parser.rb</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>打开错误日志</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;pkg-config --exists openssl&quot; </span><br><span class=\"line\"> package configuration for openssl is not found</span><br></pre></td></tr></table></figure>\n<h3 id=\"原因：没有正确设置PATH导致的问题\"><a href=\"#原因：没有正确设置PATH导致的问题\" class=\"headerlink\" title=\"原因：没有正确设置PATH导致的问题\"></a>原因：没有正确设置PATH导致的问题</h3><p><strong>mac 使用默认的ruby 版本，要更新最新版本 ruby 并且覆盖</strong></p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法:\"></a>解决方法:</h3><p>$ <code>brew install ruby</code></p>\n<p>$ <code>brew link --overwrite ruby</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If you need to have ruby first in your PATH run:</span><br><span class=\"line\">echo &#x27;export PATH=&quot;/usr/local/opt/ruby/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\">For compilers to find ruby you may need to set:</span><br><span class=\"line\">export LDFLAGS=&quot;-L/usr/local/opt/ruby/lib&quot;</span><br><span class=\"line\">export CPPFLAGS=&quot;-I/usr/local/opt/ruby/include&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">For pkg-config to find ruby you may need to set:</span><br><span class=\"line\">  export PKG_CONFIG_PATH=&quot;/usr/local/opt/ruby/lib/pkgconfig&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在 .zshrc 加入 ‘export PATH&#x3D;”&#x2F;usr&#x2F;local&#x2F;opt&#x2F;ruby&#x2F;bin:$PATH”‘</p>\n<p>$ <code>source ~/.zshrc</code></p>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p> $ <code>bundle install</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">An error occurred while installing http_parser.rb (0.6.0), and Bundler cannot continue.</span><br><span class=\"line\"></span><br><span class=\"line\">In Gemfile:</span><br><span class=\"line\">  jekyll was resolved to 4.2.1, which depends on</span><br><span class=\"line\">    em-websocket was resolved to 0.5.2, which depends on</span><br><span class=\"line\">      http_parser.rb</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>打开错误日志</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;pkg-config --exists openssl&quot; </span><br><span class=\"line\"> package configuration for openssl is not found</span><br></pre></td></tr></table></figure>\n<h3 id=\"原因：没有正确设置PATH导致的问题\"><a href=\"#原因：没有正确设置PATH导致的问题\" class=\"headerlink\" title=\"原因：没有正确设置PATH导致的问题\"></a>原因：没有正确设置PATH导致的问题</h3><p><strong>mac 使用默认的ruby 版本，要更新最新版本 ruby 并且覆盖</strong></p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法:\"></a>解决方法:</h3><p>$ <code>brew install ruby</code></p>\n<p>$ <code>brew link --overwrite ruby</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If you need to have ruby first in your PATH run:</span><br><span class=\"line\">echo &#x27;export PATH=&quot;/usr/local/opt/ruby/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\">For compilers to find ruby you may need to set:</span><br><span class=\"line\">export LDFLAGS=&quot;-L/usr/local/opt/ruby/lib&quot;</span><br><span class=\"line\">export CPPFLAGS=&quot;-I/usr/local/opt/ruby/include&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">For pkg-config to find ruby you may need to set:</span><br><span class=\"line\">  export PKG_CONFIG_PATH=&quot;/usr/local/opt/ruby/lib/pkgconfig&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在 .zshrc 加入 ‘export PATH&#x3D;”&#x2F;usr&#x2F;local&#x2F;opt&#x2F;ruby&#x2F;bin:$PATH”‘</p>\n<p>$ <code>source ~/.zshrc</code></p>\n"},{"title":"👨🍳🐓-如何炖好一碗鸡汤","date":"2021-12-24T16:00:00.000Z","_content":"\n![](https://upload-images.jianshu.io/upload_images/15312191-55832858d14bfa2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**鸡汤具有补气，鸡肉本身也是优秀蛋白质。**\n\n1.不要整只炖，一定要切块，洗干净\n\n2.用水焯一下，去除浮沫\n\n3.热锅滑油，让鸡肉表面紧实\n\n4.一定要用砂锅\n\n5.老母鸡最佳\n\n6.小茴香和白豆蔻记得放\n\n7.先大火后小火，放盐后再中火\n\n8.表明有黄油，汤汁清澈最佳\n","source":"_posts/👨🍳🐓-如何炖好一碗鸡汤.md","raw":"---\ntitle: \"👨🍳🐓-如何炖好一碗鸡汤\"\ndate: 2021-12-25\ntags: \n- 美食记录\n---\n\n![](https://upload-images.jianshu.io/upload_images/15312191-55832858d14bfa2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**鸡汤具有补气，鸡肉本身也是优秀蛋白质。**\n\n1.不要整只炖，一定要切块，洗干净\n\n2.用水焯一下，去除浮沫\n\n3.热锅滑油，让鸡肉表面紧实\n\n4.一定要用砂锅\n\n5.老母鸡最佳\n\n6.小茴香和白豆蔻记得放\n\n7.先大火后小火，放盐后再中火\n\n8.表明有黄油，汤汁清澈最佳\n","slug":"👨🍳🐓-如何炖好一碗鸡汤","published":1,"updated":"2024-05-16T07:39:11.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094os00582omv2zph2ry4","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-55832858d14bfa2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>鸡汤具有补气，鸡肉本身也是优秀蛋白质。</strong></p>\n<p>1.不要整只炖，一定要切块，洗干净</p>\n<p>2.用水焯一下，去除浮沫</p>\n<p>3.热锅滑油，让鸡肉表面紧实</p>\n<p>4.一定要用砂锅</p>\n<p>5.老母鸡最佳</p>\n<p>6.小茴香和白豆蔻记得放</p>\n<p>7.先大火后小火，放盐后再中火</p>\n<p>8.表明有黄油，汤汁清澈最佳</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-55832858d14bfa2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>鸡汤具有补气，鸡肉本身也是优秀蛋白质。</strong></p>\n<p>1.不要整只炖，一定要切块，洗干净</p>\n<p>2.用水焯一下，去除浮沫</p>\n<p>3.热锅滑油，让鸡肉表面紧实</p>\n<p>4.一定要用砂锅</p>\n<p>5.老母鸡最佳</p>\n<p>6.小茴香和白豆蔻记得放</p>\n<p>7.先大火后小火，放盐后再中火</p>\n<p>8.表明有黄油，汤汁清澈最佳</p>\n"},{"title":"💻--M1芯片为什么这么快","date":"2021-08-22T16:00:00.000Z","_content":"1.采用ARM架构，采用了新的指令集\n\n2.CPU，GPU，共用内存，减少总线带来的数据传输延迟\n\n3.采用5nm技术，更多的二极管，更强大的运算量\n","source":"_posts/💻--M1芯片为什么这么快.md","raw":"---\ntitle: \"💻--M1芯片为什么这么快\"\ndate: 2021-08-23\ntags: \n- 计算机基础小窥\n---\n1.采用ARM架构，采用了新的指令集\n\n2.CPU，GPU，共用内存，减少总线带来的数据传输延迟\n\n3.采用5nm技术，更多的二极管，更强大的运算量\n","slug":"💻--M1芯片为什么这么快","published":1,"updated":"2024-05-16T07:39:11.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ot005a2omv7bhm7are","content":"<p>1.采用ARM架构，采用了新的指令集</p>\n<p>2.CPU，GPU，共用内存，减少总线带来的数据传输延迟</p>\n<p>3.采用5nm技术，更多的二极管，更强大的运算量</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>1.采用ARM架构，采用了新的指令集</p>\n<p>2.CPU，GPU，共用内存，减少总线带来的数据传输延迟</p>\n<p>3.采用5nm技术，更多的二极管，更强大的运算量</p>\n"},{"title":"💻-cpu体系结构","date":"2021-08-07T16:00:00.000Z","_content":"###### 1.按照架构区分，现在主流的CPU 分为ARM，X86两种。\n\n| 架构 | 指令集  | 功耗  | 主要应用领域\n|--- |  ----  | ----  | ---- |\n|ARM   | 精简  | 高| 服务器，台式电脑，笔记本\n|X86   | 复杂  | 低| 手机，新版mac 电脑，各种嵌入式设备\n\n###### 2.cpu物理组成\n1.寄存器\n2.控制器\n3.运算器\n4.计数器\n5.总线\n##### 3.芯片是怎么制造出来的\n一.沙子提纯\n二.光刻机光刻\n   ###### 3.1.芯片分类\n按照功能分类\n这种分类方式是也是大家最常见的，比如GPU，CPU，FPGA，DSP，ASIC，SOC等等，都是按照这个分类方式分类的\n###### 4.单核和多核有什么具体区别\n###### 5.cpu运行与计算机数据结构\n指针，数组，栈结构，链表，数组，队列，二叉树都是以内存为基础的\n###### 6.不同CPU为什么在需要不同操作系统\n不同CPU架构指令集不同，在不同的机器上。\n操作系统会把把高级语言，或者汇编语言编译成对应的机器码\n","source":"_posts/💻-cpu体系结构.md","raw":"---\ntitle: \"💻-cpu体系结构\"\ndate: 2021-08-08\ntags: \n- 计算机基础小窥\n---\n###### 1.按照架构区分，现在主流的CPU 分为ARM，X86两种。\n\n| 架构 | 指令集  | 功耗  | 主要应用领域\n|--- |  ----  | ----  | ---- |\n|ARM   | 精简  | 高| 服务器，台式电脑，笔记本\n|X86   | 复杂  | 低| 手机，新版mac 电脑，各种嵌入式设备\n\n###### 2.cpu物理组成\n1.寄存器\n2.控制器\n3.运算器\n4.计数器\n5.总线\n##### 3.芯片是怎么制造出来的\n一.沙子提纯\n二.光刻机光刻\n   ###### 3.1.芯片分类\n按照功能分类\n这种分类方式是也是大家最常见的，比如GPU，CPU，FPGA，DSP，ASIC，SOC等等，都是按照这个分类方式分类的\n###### 4.单核和多核有什么具体区别\n###### 5.cpu运行与计算机数据结构\n指针，数组，栈结构，链表，数组，队列，二叉树都是以内存为基础的\n###### 6.不同CPU为什么在需要不同操作系统\n不同CPU架构指令集不同，在不同的机器上。\n操作系统会把把高级语言，或者汇编语言编译成对应的机器码\n","slug":"💻-cpu体系结构","published":1,"updated":"2024-05-16T07:39:11.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ou005d2omvh3f51dlp","content":"<h6 id=\"1-按照架构区分，现在主流的CPU-分为ARM，X86两种。\"><a href=\"#1-按照架构区分，现在主流的CPU-分为ARM，X86两种。\" class=\"headerlink\" title=\"1.按照架构区分，现在主流的CPU 分为ARM，X86两种。\"></a>1.按照架构区分，现在主流的CPU 分为ARM，X86两种。</h6><table>\n<thead>\n<tr>\n<th>架构</th>\n<th>指令集</th>\n<th>功耗</th>\n<th>主要应用领域</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ARM</td>\n<td>精简</td>\n<td>高</td>\n<td>服务器，台式电脑，笔记本</td>\n</tr>\n<tr>\n<td>X86</td>\n<td>复杂</td>\n<td>低</td>\n<td>手机，新版mac 电脑，各种嵌入式设备</td>\n</tr>\n</tbody></table>\n<h6 id=\"2-cpu物理组成\"><a href=\"#2-cpu物理组成\" class=\"headerlink\" title=\"2.cpu物理组成\"></a>2.cpu物理组成</h6><p>1.寄存器<br>2.控制器<br>3.运算器<br>4.计数器<br>5.总线</p>\n<h5 id=\"3-芯片是怎么制造出来的\"><a href=\"#3-芯片是怎么制造出来的\" class=\"headerlink\" title=\"3.芯片是怎么制造出来的\"></a>3.芯片是怎么制造出来的</h5><p>一.沙子提纯<br>二.光刻机光刻</p>\n<h6 id=\"3-1-芯片分类\"><a href=\"#3-1-芯片分类\" class=\"headerlink\" title=\"3.1.芯片分类\"></a>3.1.芯片分类</h6><p>按照功能分类<br>这种分类方式是也是大家最常见的，比如GPU，CPU，FPGA，DSP，ASIC，SOC等等，都是按照这个分类方式分类的</p>\n<h6 id=\"4-单核和多核有什么具体区别\"><a href=\"#4-单核和多核有什么具体区别\" class=\"headerlink\" title=\"4.单核和多核有什么具体区别\"></a>4.单核和多核有什么具体区别</h6><h6 id=\"5-cpu运行与计算机数据结构\"><a href=\"#5-cpu运行与计算机数据结构\" class=\"headerlink\" title=\"5.cpu运行与计算机数据结构\"></a>5.cpu运行与计算机数据结构</h6><p>指针，数组，栈结构，链表，数组，队列，二叉树都是以内存为基础的</p>\n<h6 id=\"6-不同CPU为什么在需要不同操作系统\"><a href=\"#6-不同CPU为什么在需要不同操作系统\" class=\"headerlink\" title=\"6.不同CPU为什么在需要不同操作系统\"></a>6.不同CPU为什么在需要不同操作系统</h6><p>不同CPU架构指令集不同，在不同的机器上。<br>操作系统会把把高级语言，或者汇编语言编译成对应的机器码</p>\n\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"1-按照架构区分，现在主流的CPU-分为ARM，X86两种。\"><a href=\"#1-按照架构区分，现在主流的CPU-分为ARM，X86两种。\" class=\"headerlink\" title=\"1.按照架构区分，现在主流的CPU 分为ARM，X86两种。\"></a>1.按照架构区分，现在主流的CPU 分为ARM，X86两种。</h6><table>\n<thead>\n<tr>\n<th>架构</th>\n<th>指令集</th>\n<th>功耗</th>\n<th>主要应用领域</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ARM</td>\n<td>精简</td>\n<td>高</td>\n<td>服务器，台式电脑，笔记本</td>\n</tr>\n<tr>\n<td>X86</td>\n<td>复杂</td>\n<td>低</td>\n<td>手机，新版mac 电脑，各种嵌入式设备</td>\n</tr>\n</tbody></table>\n<h6 id=\"2-cpu物理组成\"><a href=\"#2-cpu物理组成\" class=\"headerlink\" title=\"2.cpu物理组成\"></a>2.cpu物理组成</h6><p>1.寄存器<br>2.控制器<br>3.运算器<br>4.计数器<br>5.总线</p>\n<h5 id=\"3-芯片是怎么制造出来的\"><a href=\"#3-芯片是怎么制造出来的\" class=\"headerlink\" title=\"3.芯片是怎么制造出来的\"></a>3.芯片是怎么制造出来的</h5><p>一.沙子提纯<br>二.光刻机光刻</p>\n<h6 id=\"3-1-芯片分类\"><a href=\"#3-1-芯片分类\" class=\"headerlink\" title=\"3.1.芯片分类\"></a>3.1.芯片分类</h6><p>按照功能分类<br>这种分类方式是也是大家最常见的，比如GPU，CPU，FPGA，DSP，ASIC，SOC等等，都是按照这个分类方式分类的</p>\n<h6 id=\"4-单核和多核有什么具体区别\"><a href=\"#4-单核和多核有什么具体区别\" class=\"headerlink\" title=\"4.单核和多核有什么具体区别\"></a>4.单核和多核有什么具体区别</h6><h6 id=\"5-cpu运行与计算机数据结构\"><a href=\"#5-cpu运行与计算机数据结构\" class=\"headerlink\" title=\"5.cpu运行与计算机数据结构\"></a>5.cpu运行与计算机数据结构</h6><p>指针，数组，栈结构，链表，数组，队列，二叉树都是以内存为基础的</p>\n<h6 id=\"6-不同CPU为什么在需要不同操作系统\"><a href=\"#6-不同CPU为什么在需要不同操作系统\" class=\"headerlink\" title=\"6.不同CPU为什么在需要不同操作系统\"></a>6.不同CPU为什么在需要不同操作系统</h6><p>不同CPU架构指令集不同，在不同的机器上。<br>操作系统会把把高级语言，或者汇编语言编译成对应的机器码</p>\n"},{"title":"💻-操作系统-api应用","date":"2021-08-07T16:00:00.000Z","_content":"1.录屏  直播原理调用录屏api\n\n2.调用时间 API\n\n3.地理定位\n\n4.网络抓包\n","source":"_posts/💻-操作系统-api应用.md","raw":"---\ntitle: \"💻-操作系统-api应用\"\ndate: 2021-08-08\ntags: \n- 计算机基础小窥\n---\n1.录屏  直播原理调用录屏api\n\n2.调用时间 API\n\n3.地理定位\n\n4.网络抓包\n","slug":"💻-操作系统-api应用","published":1,"updated":"2024-05-16T07:39:11.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ov005f2omvfiwg3keh","content":"<p>1.录屏  直播原理调用录屏api</p>\n<p>2.调用时间 API</p>\n<p>3.地理定位</p>\n<p>4.网络抓包</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>1.录屏  直播原理调用录屏api</p>\n<p>2.调用时间 API</p>\n<p>3.地理定位</p>\n<p>4.网络抓包</p>\n"},{"title":"💻-计算机是怎么显示图像的","date":"2021-01-05T16:00:00.000Z","_content":"###### 1.计算机显示\n我们每天都会盯着屏幕看，不论是电脑还是手机，那么电脑显示的原理是什么，图片视频是怎么显示在屏幕上面的呢？\n\n其实计算机屏幕是由像素构成的，颜色是由计算机内部的颜色系统控制，像素由二进制表情不同的颜色，然后通过显示器三色枪打出的颜色混合而成，三色枪，分为红、绿、蓝(RGB) ,涉及到屏幕硬件知识。\n\n不同图片使用的二进制位数\n![](https://upload-images.jianshu.io/upload_images/15312191-631bee1e687c43ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###### 2.计算机色彩体系\n颜色空间：RGB，CMY，HSV，HSL，Lab，\n按照通用的RBG标准，如下图所示\n![](https://upload-images.jianshu.io/upload_images/15312191-5aa037b449031b10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nrbg有6位16进制表示，16 = 2^4, 4 * 6 = 24,所以，rgb有 2 ^ 24 = 16777216种可能，总共显示16777216种颜色\n取值范围：0~16777215, 就是3个byte\n###### 3.电脑屏幕上有多少像素\n以mac 电脑为例 分辨率为2560 * 1600  = 4096000像素。\n![](https://upload-images.jianshu.io/upload_images/15312191-84a8019e5578793d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n24位，就是每个像素3个byte, 4096000像素 * 3 = 12288000byte = 11.7M;\n###### 4.大型游戏与显卡\n\n大型游戏，需要更多的灯光，材质渲染，尤其是3D游戏，需要更多显存和高频GPU参与渲染计算，计算机不只有CPU还有GPU\n","source":"_posts/💻-计算机是怎么显示图像的.md","raw":"---\ntitle: \"💻-计算机是怎么显示图像的\"\ndate: 2021-01-06\ntags: \n- 计算机基础小窥\n---\n###### 1.计算机显示\n我们每天都会盯着屏幕看，不论是电脑还是手机，那么电脑显示的原理是什么，图片视频是怎么显示在屏幕上面的呢？\n\n其实计算机屏幕是由像素构成的，颜色是由计算机内部的颜色系统控制，像素由二进制表情不同的颜色，然后通过显示器三色枪打出的颜色混合而成，三色枪，分为红、绿、蓝(RGB) ,涉及到屏幕硬件知识。\n\n不同图片使用的二进制位数\n![](https://upload-images.jianshu.io/upload_images/15312191-631bee1e687c43ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###### 2.计算机色彩体系\n颜色空间：RGB，CMY，HSV，HSL，Lab，\n按照通用的RBG标准，如下图所示\n![](https://upload-images.jianshu.io/upload_images/15312191-5aa037b449031b10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nrbg有6位16进制表示，16 = 2^4, 4 * 6 = 24,所以，rgb有 2 ^ 24 = 16777216种可能，总共显示16777216种颜色\n取值范围：0~16777215, 就是3个byte\n###### 3.电脑屏幕上有多少像素\n以mac 电脑为例 分辨率为2560 * 1600  = 4096000像素。\n![](https://upload-images.jianshu.io/upload_images/15312191-84a8019e5578793d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n24位，就是每个像素3个byte, 4096000像素 * 3 = 12288000byte = 11.7M;\n###### 4.大型游戏与显卡\n\n大型游戏，需要更多的灯光，材质渲染，尤其是3D游戏，需要更多显存和高频GPU参与渲染计算，计算机不只有CPU还有GPU\n","slug":"💻-计算机是怎么显示图像的","published":1,"updated":"2024-05-16T07:39:11.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ow005h2omv0ldt8htu","content":"<h6 id=\"1-计算机显示\"><a href=\"#1-计算机显示\" class=\"headerlink\" title=\"1.计算机显示\"></a>1.计算机显示</h6><p>我们每天都会盯着屏幕看，不论是电脑还是手机，那么电脑显示的原理是什么，图片视频是怎么显示在屏幕上面的呢？</p>\n<p>其实计算机屏幕是由像素构成的，颜色是由计算机内部的颜色系统控制，像素由二进制表情不同的颜色，然后通过显示器三色枪打出的颜色混合而成，三色枪，分为红、绿、蓝(RGB) ,涉及到屏幕硬件知识。</p>\n<p>不同图片使用的二进制位数<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-631bee1e687c43ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h6 id=\"2-计算机色彩体系\"><a href=\"#2-计算机色彩体系\" class=\"headerlink\" title=\"2.计算机色彩体系\"></a>2.计算机色彩体系</h6><p>颜色空间：RGB，CMY，HSV，HSL，Lab，<br>按照通用的RBG标准，如下图所示<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5aa037b449031b10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>rbg有6位16进制表示，16 &#x3D; 2^4, 4 * 6 &#x3D; 24,所以，rgb有 2 ^ 24 &#x3D; 16777216种可能，总共显示16777216种颜色<br>取值范围：0~16777215, 就是3个byte</p>\n<h6 id=\"3-电脑屏幕上有多少像素\"><a href=\"#3-电脑屏幕上有多少像素\" class=\"headerlink\" title=\"3.电脑屏幕上有多少像素\"></a>3.电脑屏幕上有多少像素</h6><p>以mac 电脑为例 分辨率为2560 * 1600  &#x3D; 4096000像素。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-84a8019e5578793d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>24位，就是每个像素3个byte, 4096000像素 * 3 &#x3D; 12288000byte &#x3D; 11.7M;</p>\n<h6 id=\"4-大型游戏与显卡\"><a href=\"#4-大型游戏与显卡\" class=\"headerlink\" title=\"4.大型游戏与显卡\"></a>4.大型游戏与显卡</h6><p>大型游戏，需要更多的灯光，材质渲染，尤其是3D游戏，需要更多显存和高频GPU参与渲染计算，计算机不只有CPU还有GPU</p>\n\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"1-计算机显示\"><a href=\"#1-计算机显示\" class=\"headerlink\" title=\"1.计算机显示\"></a>1.计算机显示</h6><p>我们每天都会盯着屏幕看，不论是电脑还是手机，那么电脑显示的原理是什么，图片视频是怎么显示在屏幕上面的呢？</p>\n<p>其实计算机屏幕是由像素构成的，颜色是由计算机内部的颜色系统控制，像素由二进制表情不同的颜色，然后通过显示器三色枪打出的颜色混合而成，三色枪，分为红、绿、蓝(RGB) ,涉及到屏幕硬件知识。</p>\n<p>不同图片使用的二进制位数<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-631bee1e687c43ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h6 id=\"2-计算机色彩体系\"><a href=\"#2-计算机色彩体系\" class=\"headerlink\" title=\"2.计算机色彩体系\"></a>2.计算机色彩体系</h6><p>颜色空间：RGB，CMY，HSV，HSL，Lab，<br>按照通用的RBG标准，如下图所示<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5aa037b449031b10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>rbg有6位16进制表示，16 &#x3D; 2^4, 4 * 6 &#x3D; 24,所以，rgb有 2 ^ 24 &#x3D; 16777216种可能，总共显示16777216种颜色<br>取值范围：0~16777215, 就是3个byte</p>\n<h6 id=\"3-电脑屏幕上有多少像素\"><a href=\"#3-电脑屏幕上有多少像素\" class=\"headerlink\" title=\"3.电脑屏幕上有多少像素\"></a>3.电脑屏幕上有多少像素</h6><p>以mac 电脑为例 分辨率为2560 * 1600  &#x3D; 4096000像素。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-84a8019e5578793d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br>24位，就是每个像素3个byte, 4096000像素 * 3 &#x3D; 12288000byte &#x3D; 11.7M;</p>\n<h6 id=\"4-大型游戏与显卡\"><a href=\"#4-大型游戏与显卡\" class=\"headerlink\" title=\"4.大型游戏与显卡\"></a>4.大型游戏与显卡</h6><p>大型游戏，需要更多的灯光，材质渲染，尤其是3D游戏，需要更多显存和高频GPU参与渲染计算，计算机不只有CPU还有GPU</p>\n"},{"title":"💻 ASCII码与Unicode","date":"2021-01-04T16:00:00.000Z","_content":"在计算机系统中，ASCII是一个经常出现的术语。\n这是一个信息表示的问题，需要从字节说起\n##### 1.什么是字节？\n字节(byte)是计算机存储基本单位\n1byte = 8 bit, 二进制数系统中，每个0或1就是一个位（bit）。\n字符是最基本单位，1byte = 8bit。\n比如一个文件是3byte,那么 其中是 3个，8位二进制，\n比如ABC，就是，0110 0001，0110 0010，0110 0011\nbit 中文名称是位，音译“比特”，是用以描bai述电脑数据量的最小单位。\n\n　　\n　　\n##### 2.为什么 1byte = 8 bit ？\n \n\nASCII码\n![](https://upload-images.jianshu.io/upload_images/15312191-ab49482a8bcfbe76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-3fbc59972a75f3e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最初计算机是美国人发明的，美国人觉得128个字符够用了。\nASCII表中一共 128个字符  128 == 2^7 \n128 二进制表示， 1111111，\n0 二级制表示 0000000 需要7位。\n\n原始的ASCII编码是7位的，所以有2^7=128个字符（包括一zhi些不可显示字符）。但是电脑里1Byte=8bit，有8位。早期的电脑不太可靠，数据经常出错，所以这1Byte的8位中最高为就用来做数据校验，一般是奇偶校验。\n但是后来的电脑变得可靠了，校验的意义就没有那么大了，因此有了一个扩展ASCII字符集。扩展ASCII字符集包含2^8=256个字符，编码是8位的。扩展ASCII字符集中的前128个字符与原来的ASCII字符集相同（就是原来的ASCII字符集的7位编码前面加一个0），而后面128个字符高位都是1。\n\n随着计算机的发展和深入，7位的字符有时已不够用，为此国际标准化组织又制定了ISO2022标准，它在保持ISO646兼容的基础上，规定了扩充ASCII字符集为8位代码，可表示256个字符.。\n\nps(C/C++的标准中，从来没有规定1byte等于8bit 。它只规定了：sizeof(char) = 1，除此之外，还有一项相关的规定就是：sizeof(char) <= sizeof(short) <= sizeof(int) <= sizeof(long) <= sizeof(long long)。 但是现实中，1byte确实绝大部分都是8bit的。其源头是tcp/ip协议中，有这样的规定。 所以，除非你做的系统不准备支持tcp/ip协议，否则，依循它的协议，使用1byte=8bit是最简单的)\n##### 3.其它语言怎么用二进制表示\n随着计算机的流行，许多国家需要将自己的文字加入到计算机中，但是ASCII已经满了，于是出现了新的标准，**Unicode**，采用16进制表示编码，转换为二进制最多为21位。\n\n\n| 汉字 |  16 进制   | 二进制  | \n|--- |  ----  | ----  |\n|一| 4e00  | 100111000000000|\n\n\nUnicode的缺点：，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。于是出现了\n**UTF**(UTF是“Unicode Transformation Format”的缩写)\nUTF对应编码\n\n| Unicode编码(十六进制) |  UTF-8 字节流(二进制)   |\n|--- |  ----  | \n|000000-00007F| 0xxxxxxx |\n|000080-0007FF|110xxxxx 10xxxxxx|\n|000800-00FFFF|1110xxxx 10xxxxxx 10xxxxxx||\n\nUTF-8的特点是对不同范围的字符使用不同长度的编码。对于0x00-0x7F之间的字符，UTF-8编码与[ASCII编码](https://baike.baidu.com/item/ASCII%E7%BC%96%E7%A0%81)完全相同。UTF-8编码的最大长度是4个字节。从上表可以看出，4字节模板有21个x，即可以容纳21位二进制数字。Unicode的最大码位0x10FFFF也只有21位。\n\n例1：“汉”字的Unicode编码是0x6C49。0x6C49在0x0800-0xFFFF之间，使用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将0x6C49写成二进制是：0110 1100 0100 1001， 用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。\n\n例2：Unicode编码0x20C30在0x010000-0x10FFFF之间，使用4字节模板：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。将0x20C30写成21位二进制数字（不足21位就在前面补0）：0 0010 0000 1100 0011 0000，用这个比特流依次代替模板中的x，得到：11110000 10100000 10110000 10110000，即F0 A0 B0 B0。\n\n##### 4.为什么一个汉字用多个字节表示\n\n这是因为，在UTF-8中，为了节约空间，也为了兼容ASCII编码系统，将Unicode中原本用2个字节表示的字符表示成1~4个字节（具体转换规则在这里不赘述了），其中大多数汉字部分（比如“汉”）在UTF-8中为3字节，但是在中国大陆地区，GBK编码依然很常用，在GBK中，除ASCII字符外，都是一个字符占两个字节。所以，一个汉字占多少字节还是具体取决于编码\n","source":"_posts/💻 ASCII码与Unicode.md","raw":"---\ntitle: \"💻 ASCII码与Unicode\"\ndate: 2021-01-05\ntags: \n- 计算机基础小窥\n---\n在计算机系统中，ASCII是一个经常出现的术语。\n这是一个信息表示的问题，需要从字节说起\n##### 1.什么是字节？\n字节(byte)是计算机存储基本单位\n1byte = 8 bit, 二进制数系统中，每个0或1就是一个位（bit）。\n字符是最基本单位，1byte = 8bit。\n比如一个文件是3byte,那么 其中是 3个，8位二进制，\n比如ABC，就是，0110 0001，0110 0010，0110 0011\nbit 中文名称是位，音译“比特”，是用以描bai述电脑数据量的最小单位。\n\n　　\n　　\n##### 2.为什么 1byte = 8 bit ？\n \n\nASCII码\n![](https://upload-images.jianshu.io/upload_images/15312191-ab49482a8bcfbe76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-3fbc59972a75f3e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最初计算机是美国人发明的，美国人觉得128个字符够用了。\nASCII表中一共 128个字符  128 == 2^7 \n128 二进制表示， 1111111，\n0 二级制表示 0000000 需要7位。\n\n原始的ASCII编码是7位的，所以有2^7=128个字符（包括一zhi些不可显示字符）。但是电脑里1Byte=8bit，有8位。早期的电脑不太可靠，数据经常出错，所以这1Byte的8位中最高为就用来做数据校验，一般是奇偶校验。\n但是后来的电脑变得可靠了，校验的意义就没有那么大了，因此有了一个扩展ASCII字符集。扩展ASCII字符集包含2^8=256个字符，编码是8位的。扩展ASCII字符集中的前128个字符与原来的ASCII字符集相同（就是原来的ASCII字符集的7位编码前面加一个0），而后面128个字符高位都是1。\n\n随着计算机的发展和深入，7位的字符有时已不够用，为此国际标准化组织又制定了ISO2022标准，它在保持ISO646兼容的基础上，规定了扩充ASCII字符集为8位代码，可表示256个字符.。\n\nps(C/C++的标准中，从来没有规定1byte等于8bit 。它只规定了：sizeof(char) = 1，除此之外，还有一项相关的规定就是：sizeof(char) <= sizeof(short) <= sizeof(int) <= sizeof(long) <= sizeof(long long)。 但是现实中，1byte确实绝大部分都是8bit的。其源头是tcp/ip协议中，有这样的规定。 所以，除非你做的系统不准备支持tcp/ip协议，否则，依循它的协议，使用1byte=8bit是最简单的)\n##### 3.其它语言怎么用二进制表示\n随着计算机的流行，许多国家需要将自己的文字加入到计算机中，但是ASCII已经满了，于是出现了新的标准，**Unicode**，采用16进制表示编码，转换为二进制最多为21位。\n\n\n| 汉字 |  16 进制   | 二进制  | \n|--- |  ----  | ----  |\n|一| 4e00  | 100111000000000|\n\n\nUnicode的缺点：，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。于是出现了\n**UTF**(UTF是“Unicode Transformation Format”的缩写)\nUTF对应编码\n\n| Unicode编码(十六进制) |  UTF-8 字节流(二进制)   |\n|--- |  ----  | \n|000000-00007F| 0xxxxxxx |\n|000080-0007FF|110xxxxx 10xxxxxx|\n|000800-00FFFF|1110xxxx 10xxxxxx 10xxxxxx||\n\nUTF-8的特点是对不同范围的字符使用不同长度的编码。对于0x00-0x7F之间的字符，UTF-8编码与[ASCII编码](https://baike.baidu.com/item/ASCII%E7%BC%96%E7%A0%81)完全相同。UTF-8编码的最大长度是4个字节。从上表可以看出，4字节模板有21个x，即可以容纳21位二进制数字。Unicode的最大码位0x10FFFF也只有21位。\n\n例1：“汉”字的Unicode编码是0x6C49。0x6C49在0x0800-0xFFFF之间，使用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将0x6C49写成二进制是：0110 1100 0100 1001， 用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。\n\n例2：Unicode编码0x20C30在0x010000-0x10FFFF之间，使用4字节模板：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。将0x20C30写成21位二进制数字（不足21位就在前面补0）：0 0010 0000 1100 0011 0000，用这个比特流依次代替模板中的x，得到：11110000 10100000 10110000 10110000，即F0 A0 B0 B0。\n\n##### 4.为什么一个汉字用多个字节表示\n\n这是因为，在UTF-8中，为了节约空间，也为了兼容ASCII编码系统，将Unicode中原本用2个字节表示的字符表示成1~4个字节（具体转换规则在这里不赘述了），其中大多数汉字部分（比如“汉”）在UTF-8中为3字节，但是在中国大陆地区，GBK编码依然很常用，在GBK中，除ASCII字符外，都是一个字符占两个字节。所以，一个汉字占多少字节还是具体取决于编码\n","slug":"💻 ASCII码与Unicode","published":1,"updated":"2024-05-16T07:39:11.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094oy005k2omv9ixp3974","content":"<p>在计算机系统中，ASCII是一个经常出现的术语。<br>这是一个信息表示的问题，需要从字节说起</p>\n<h5 id=\"1-什么是字节？\"><a href=\"#1-什么是字节？\" class=\"headerlink\" title=\"1.什么是字节？\"></a>1.什么是字节？</h5><p>字节(byte)是计算机存储基本单位<br>1byte &#x3D; 8 bit, 二进制数系统中，每个0或1就是一个位（bit）。<br>字符是最基本单位，1byte &#x3D; 8bit。<br>比如一个文件是3byte,那么 其中是 3个，8位二进制，<br>比如ABC，就是，0110 0001，0110 0010，0110 0011<br>bit 中文名称是位，音译“比特”，是用以描bai述电脑数据量的最小单位。</p>\n<p>　　\n　　</p>\n<h5 id=\"2-为什么-1byte-x3D-8-bit-？\"><a href=\"#2-为什么-1byte-x3D-8-bit-？\" class=\"headerlink\" title=\"2.为什么 1byte &#x3D; 8 bit ？\"></a>2.为什么 1byte &#x3D; 8 bit ？</h5><p>ASCII码<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-ab49482a8bcfbe76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3fbc59972a75f3e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>最初计算机是美国人发明的，美国人觉得128个字符够用了。<br>ASCII表中一共 128个字符  128 &#x3D;&#x3D; 2^7<br>128 二进制表示， 1111111，<br>0 二级制表示 0000000 需要7位。</p>\n<p>原始的ASCII编码是7位的，所以有2^7&#x3D;128个字符（包括一zhi些不可显示字符）。但是电脑里1Byte&#x3D;8bit，有8位。早期的电脑不太可靠，数据经常出错，所以这1Byte的8位中最高为就用来做数据校验，一般是奇偶校验。<br>但是后来的电脑变得可靠了，校验的意义就没有那么大了，因此有了一个扩展ASCII字符集。扩展ASCII字符集包含2^8&#x3D;256个字符，编码是8位的。扩展ASCII字符集中的前128个字符与原来的ASCII字符集相同（就是原来的ASCII字符集的7位编码前面加一个0），而后面128个字符高位都是1。</p>\n<p>随着计算机的发展和深入，7位的字符有时已不够用，为此国际标准化组织又制定了ISO2022标准，它在保持ISO646兼容的基础上，规定了扩充ASCII字符集为8位代码，可表示256个字符.。</p>\n<p>ps(C&#x2F;C++的标准中，从来没有规定1byte等于8bit 。它只规定了：sizeof(char) &#x3D; 1，除此之外，还有一项相关的规定就是：sizeof(char) &lt;&#x3D; sizeof(short) &lt;&#x3D; sizeof(int) &lt;&#x3D; sizeof(long) &lt;&#x3D; sizeof(long long)。 但是现实中，1byte确实绝大部分都是8bit的。其源头是tcp&#x2F;ip协议中，有这样的规定。 所以，除非你做的系统不准备支持tcp&#x2F;ip协议，否则，依循它的协议，使用1byte&#x3D;8bit是最简单的)</p>\n<h5 id=\"3-其它语言怎么用二进制表示\"><a href=\"#3-其它语言怎么用二进制表示\" class=\"headerlink\" title=\"3.其它语言怎么用二进制表示\"></a>3.其它语言怎么用二进制表示</h5><p>随着计算机的流行，许多国家需要将自己的文字加入到计算机中，但是ASCII已经满了，于是出现了新的标准，<strong>Unicode</strong>，采用16进制表示编码，转换为二进制最多为21位。</p>\n<table>\n<thead>\n<tr>\n<th>汉字</th>\n<th>16 进制</th>\n<th>二进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一</td>\n<td>4e00</td>\n<td>100111000000000</td>\n</tr>\n</tbody></table>\n<p>Unicode的缺点：，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。于是出现了<br><strong>UTF</strong>(UTF是“Unicode Transformation Format”的缩写)<br>UTF对应编码</p>\n<table>\n<thead>\n<tr>\n<th>Unicode编码(十六进制)</th>\n<th>UTF-8 字节流(二进制)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>000000-00007F</td>\n<td>0xxxxxxx</td>\n</tr>\n<tr>\n<td>000080-0007FF</td>\n<td>110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>000800-00FFFF</td>\n<td>1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody></table>\n<p>UTF-8的特点是对不同范围的字符使用不同长度的编码。对于0x00-0x7F之间的字符，UTF-8编码与<a href=\"https://baike.baidu.com/item/ASCII%E7%BC%96%E7%A0%81\">ASCII编码</a>完全相同。UTF-8编码的最大长度是4个字节。从上表可以看出，4字节模板有21个x，即可以容纳21位二进制数字。Unicode的最大码位0x10FFFF也只有21位。</p>\n<p>例1：“汉”字的Unicode编码是0x6C49。0x6C49在0x0800-0xFFFF之间，使用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将0x6C49写成二进制是：0110 1100 0100 1001， 用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。</p>\n<p>例2：Unicode编码0x20C30在0x010000-0x10FFFF之间，使用4字节模板：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。将0x20C30写成21位二进制数字（不足21位就在前面补0）：0 0010 0000 1100 0011 0000，用这个比特流依次代替模板中的x，得到：11110000 10100000 10110000 10110000，即F0 A0 B0 B0。</p>\n<h5 id=\"4-为什么一个汉字用多个字节表示\"><a href=\"#4-为什么一个汉字用多个字节表示\" class=\"headerlink\" title=\"4.为什么一个汉字用多个字节表示\"></a>4.为什么一个汉字用多个字节表示</h5><p>这是因为，在UTF-8中，为了节约空间，也为了兼容ASCII编码系统，将Unicode中原本用2个字节表示的字符表示成1~4个字节（具体转换规则在这里不赘述了），其中大多数汉字部分（比如“汉”）在UTF-8中为3字节，但是在中国大陆地区，GBK编码依然很常用，在GBK中，除ASCII字符外，都是一个字符占两个字节。所以，一个汉字占多少字节还是具体取决于编码</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>在计算机系统中，ASCII是一个经常出现的术语。<br>这是一个信息表示的问题，需要从字节说起</p>\n<h5 id=\"1-什么是字节？\"><a href=\"#1-什么是字节？\" class=\"headerlink\" title=\"1.什么是字节？\"></a>1.什么是字节？</h5><p>字节(byte)是计算机存储基本单位<br>1byte &#x3D; 8 bit, 二进制数系统中，每个0或1就是一个位（bit）。<br>字符是最基本单位，1byte &#x3D; 8bit。<br>比如一个文件是3byte,那么 其中是 3个，8位二进制，<br>比如ABC，就是，0110 0001，0110 0010，0110 0011<br>bit 中文名称是位，音译“比特”，是用以描bai述电脑数据量的最小单位。</p>\n<p>　　\n　　</p>\n<h5 id=\"2-为什么-1byte-x3D-8-bit-？\"><a href=\"#2-为什么-1byte-x3D-8-bit-？\" class=\"headerlink\" title=\"2.为什么 1byte &#x3D; 8 bit ？\"></a>2.为什么 1byte &#x3D; 8 bit ？</h5><p>ASCII码<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-ab49482a8bcfbe76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3fbc59972a75f3e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>最初计算机是美国人发明的，美国人觉得128个字符够用了。<br>ASCII表中一共 128个字符  128 &#x3D;&#x3D; 2^7<br>128 二进制表示， 1111111，<br>0 二级制表示 0000000 需要7位。</p>\n<p>原始的ASCII编码是7位的，所以有2^7&#x3D;128个字符（包括一zhi些不可显示字符）。但是电脑里1Byte&#x3D;8bit，有8位。早期的电脑不太可靠，数据经常出错，所以这1Byte的8位中最高为就用来做数据校验，一般是奇偶校验。<br>但是后来的电脑变得可靠了，校验的意义就没有那么大了，因此有了一个扩展ASCII字符集。扩展ASCII字符集包含2^8&#x3D;256个字符，编码是8位的。扩展ASCII字符集中的前128个字符与原来的ASCII字符集相同（就是原来的ASCII字符集的7位编码前面加一个0），而后面128个字符高位都是1。</p>\n<p>随着计算机的发展和深入，7位的字符有时已不够用，为此国际标准化组织又制定了ISO2022标准，它在保持ISO646兼容的基础上，规定了扩充ASCII字符集为8位代码，可表示256个字符.。</p>\n<p>ps(C&#x2F;C++的标准中，从来没有规定1byte等于8bit 。它只规定了：sizeof(char) &#x3D; 1，除此之外，还有一项相关的规定就是：sizeof(char) &lt;&#x3D; sizeof(short) &lt;&#x3D; sizeof(int) &lt;&#x3D; sizeof(long) &lt;&#x3D; sizeof(long long)。 但是现实中，1byte确实绝大部分都是8bit的。其源头是tcp&#x2F;ip协议中，有这样的规定。 所以，除非你做的系统不准备支持tcp&#x2F;ip协议，否则，依循它的协议，使用1byte&#x3D;8bit是最简单的)</p>\n<h5 id=\"3-其它语言怎么用二进制表示\"><a href=\"#3-其它语言怎么用二进制表示\" class=\"headerlink\" title=\"3.其它语言怎么用二进制表示\"></a>3.其它语言怎么用二进制表示</h5><p>随着计算机的流行，许多国家需要将自己的文字加入到计算机中，但是ASCII已经满了，于是出现了新的标准，<strong>Unicode</strong>，采用16进制表示编码，转换为二进制最多为21位。</p>\n<table>\n<thead>\n<tr>\n<th>汉字</th>\n<th>16 进制</th>\n<th>二进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一</td>\n<td>4e00</td>\n<td>100111000000000</td>\n</tr>\n</tbody></table>\n<p>Unicode的缺点：，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。于是出现了<br><strong>UTF</strong>(UTF是“Unicode Transformation Format”的缩写)<br>UTF对应编码</p>\n<table>\n<thead>\n<tr>\n<th>Unicode编码(十六进制)</th>\n<th>UTF-8 字节流(二进制)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>000000-00007F</td>\n<td>0xxxxxxx</td>\n</tr>\n<tr>\n<td>000080-0007FF</td>\n<td>110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>000800-00FFFF</td>\n<td>1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody></table>\n<p>UTF-8的特点是对不同范围的字符使用不同长度的编码。对于0x00-0x7F之间的字符，UTF-8编码与<a href=\"https://baike.baidu.com/item/ASCII%E7%BC%96%E7%A0%81\">ASCII编码</a>完全相同。UTF-8编码的最大长度是4个字节。从上表可以看出，4字节模板有21个x，即可以容纳21位二进制数字。Unicode的最大码位0x10FFFF也只有21位。</p>\n<p>例1：“汉”字的Unicode编码是0x6C49。0x6C49在0x0800-0xFFFF之间，使用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将0x6C49写成二进制是：0110 1100 0100 1001， 用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。</p>\n<p>例2：Unicode编码0x20C30在0x010000-0x10FFFF之间，使用4字节模板：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。将0x20C30写成21位二进制数字（不足21位就在前面补0）：0 0010 0000 1100 0011 0000，用这个比特流依次代替模板中的x，得到：11110000 10100000 10110000 10110000，即F0 A0 B0 B0。</p>\n<h5 id=\"4-为什么一个汉字用多个字节表示\"><a href=\"#4-为什么一个汉字用多个字节表示\" class=\"headerlink\" title=\"4.为什么一个汉字用多个字节表示\"></a>4.为什么一个汉字用多个字节表示</h5><p>这是因为，在UTF-8中，为了节约空间，也为了兼容ASCII编码系统，将Unicode中原本用2个字节表示的字符表示成1~4个字节（具体转换规则在这里不赘述了），其中大多数汉字部分（比如“汉”）在UTF-8中为3字节，但是在中国大陆地区，GBK编码依然很常用，在GBK中，除ASCII字符外，都是一个字符占两个字节。所以，一个汉字占多少字节还是具体取决于编码</p>\n"},{"title":"🌦🌦-空值合并操作符--有哪些坑","date":"2021-07-18T16:00:00.000Z","_content":"##### 空值合并操作符（??）\n　只有当左侧为null和undefined和空时，才会返回右侧的数,否则返回左侧的\n    重点: 0 除外\n　\n```js\nlet a = \"\"\nlet result = a ?? \"target\"\nconsole.log(result) // ''\n```\n\n```js\n判断数组长度慎用\nlet a = []\nlet result = a.length === 0 ?? \"target\"\nconsole.log(result)  true\n```\n\n```js\nlet number = 0;\nlet result = number ?? 1\nconsole.log(result) // 0\n```\n","source":"_posts/🌦🌦-空值合并操作符--有哪些坑.md","raw":"---\ntitle: \"🌦🌦-空值合并操作符--有哪些坑\"\ndate: 2021-07-19\ntags: \n- 开发日常\n---\n##### 空值合并操作符（??）\n　只有当左侧为null和undefined和空时，才会返回右侧的数,否则返回左侧的\n    重点: 0 除外\n　\n```js\nlet a = \"\"\nlet result = a ?? \"target\"\nconsole.log(result) // ''\n```\n\n```js\n判断数组长度慎用\nlet a = []\nlet result = a.length === 0 ?? \"target\"\nconsole.log(result)  true\n```\n\n```js\nlet number = 0;\nlet result = number ?? 1\nconsole.log(result) // 0\n```\n","slug":"🌦🌦-空值合并操作符--有哪些坑","published":1,"updated":"2024-05-16T07:39:11.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094oy005l2omvb4rv78gd","content":"<h5 id=\"空值合并操作符（-）\"><a href=\"#空值合并操作符（-）\" class=\"headerlink\" title=\"空值合并操作符（??）\"></a>空值合并操作符（??）</h5><p>　只有当左侧为null和undefined和空时，才会返回右侧的数,否则返回左侧的<br>    重点: 0 除外\n　</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = a ?? <span class=\"string\">&quot;target&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">判断数组长度慎用</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = a.<span class=\"property\">length</span> === <span class=\"number\">0</span> ?? <span class=\"string\">&quot;target&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result)  <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = number ?? <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"空值合并操作符（-）\"><a href=\"#空值合并操作符（-）\" class=\"headerlink\" title=\"空值合并操作符（??）\"></a>空值合并操作符（??）</h5><p>　只有当左侧为null和undefined和空时，才会返回右侧的数,否则返回左侧的<br>    重点: 0 除外\n　</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = a ?? <span class=\"string\">&quot;target&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">判断数组长度慎用</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = a.<span class=\"property\">length</span> === <span class=\"number\">0</span> ?? <span class=\"string\">&quot;target&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result)  <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = number ?? <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n"},{"title":"📁📁-CentOS-7-firewall-cmd开放端口时出现bad-port-(most-likely-missin","date":"2021-02-02T16:00:00.000Z","_content":"使用firewall-cmd命令打开端口时遇到了\"bad port (most likely missing protocol), correct syntax is portid[-portid]/protocol\"这个问题。\n\n百度了下没解决方案，又看了一遍错误提示和输入的命令后被自己蠢哭了\n\n废话不多说，问题的原因是命令中add-port参数值的正确格式为[端口号/协议]，而当前执行的命令中只写了端口号，没有指定协议\n\n正确的命令为: firewall-cmd --zone=public --add-port=8020/tcp --permanent\n\n当然之后别忘记 firewall-cmd --reload 重启防火墙\n\n","source":"_posts/📁📁-CentOS-7-firewall-cmd开放端口时出现bad-port-(most-likely-missin.md","raw":"---\ntitle: \"📁📁-CentOS-7-firewall-cmd开放端口时出现bad-port-(most-likely-missin\"\ndate: 2021-02-03\ntags: \n- 开发日常\n---\n使用firewall-cmd命令打开端口时遇到了\"bad port (most likely missing protocol), correct syntax is portid[-portid]/protocol\"这个问题。\n\n百度了下没解决方案，又看了一遍错误提示和输入的命令后被自己蠢哭了\n\n废话不多说，问题的原因是命令中add-port参数值的正确格式为[端口号/协议]，而当前执行的命令中只写了端口号，没有指定协议\n\n正确的命令为: firewall-cmd --zone=public --add-port=8020/tcp --permanent\n\n当然之后别忘记 firewall-cmd --reload 重启防火墙\n\n","slug":"📁📁-CentOS-7-firewall-cmd开放端口时出现bad-port-(most-likely-missin","published":1,"updated":"2024-05-16T07:39:11.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094p0005o2omv18qccqzw","content":"<p>使用firewall-cmd命令打开端口时遇到了”bad port (most likely missing protocol), correct syntax is portid[-portid]&#x2F;protocol”这个问题。</p>\n<p>百度了下没解决方案，又看了一遍错误提示和输入的命令后被自己蠢哭了</p>\n<p>废话不多说，问题的原因是命令中add-port参数值的正确格式为[端口号&#x2F;协议]，而当前执行的命令中只写了端口号，没有指定协议</p>\n<p>正确的命令为: firewall-cmd –zone&#x3D;public –add-port&#x3D;8020&#x2F;tcp –permanent</p>\n<p>当然之后别忘记 firewall-cmd –reload 重启防火墙</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>使用firewall-cmd命令打开端口时遇到了”bad port (most likely missing protocol), correct syntax is portid[-portid]&#x2F;protocol”这个问题。</p>\n<p>百度了下没解决方案，又看了一遍错误提示和输入的命令后被自己蠢哭了</p>\n<p>废话不多说，问题的原因是命令中add-port参数值的正确格式为[端口号&#x2F;协议]，而当前执行的命令中只写了端口号，没有指定协议</p>\n<p>正确的命令为: firewall-cmd –zone&#x3D;public –add-port&#x3D;8020&#x2F;tcp –permanent</p>\n<p>当然之后别忘记 firewall-cmd –reload 重启防火墙</p>\n"},{"title":"📁📁-rsync更改chmod-权限","date":"2022-10-24T16:00:00.000Z","_content":"最近碰到一个问题，scp 文件上传到服务器没有权限。\n\n### scp，rsync\n\nscp 没有权限参数，使用另一个工具 ```rsync```,可以在上传中配置文件权限。\n\n#### 复杂写法\n\n```\nrsync --perms --chmod=u+rwx ./testfile ./testfile2\nrsync --perms --chmod=g+rwx ./testfile ./testfile2\nrsync --perms --chmod=o+rwx ./testfile ./testfile2\n```\n\n.e. add (+) permissions for user (u), group (g) or other (o) respectively.\nAlso (a)=all is successful:\n\n#### 简单写法\n```\nsudo rsync --perms --chmod=a+rwx ./testfile ./testfile2\n```\nor\n```\nsudo rsync --perms --chmod=ugo+rwx ./testfile ./testfile2\n```\n### 文件权限表\n\n![](https://upload-images.jianshu.io/upload_images/15312191-5b64bf967c87d52e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 最高权限\n```\nchmod -R 777 dictionary/file\n```\n","source":"_posts/📁📁-rsync更改chmod-权限.md","raw":"---\ntitle: \"📁📁-rsync更改chmod-权限\"\ndate: 2022-10-25\ntags: \n- 开发日常\n---\n最近碰到一个问题，scp 文件上传到服务器没有权限。\n\n### scp，rsync\n\nscp 没有权限参数，使用另一个工具 ```rsync```,可以在上传中配置文件权限。\n\n#### 复杂写法\n\n```\nrsync --perms --chmod=u+rwx ./testfile ./testfile2\nrsync --perms --chmod=g+rwx ./testfile ./testfile2\nrsync --perms --chmod=o+rwx ./testfile ./testfile2\n```\n\n.e. add (+) permissions for user (u), group (g) or other (o) respectively.\nAlso (a)=all is successful:\n\n#### 简单写法\n```\nsudo rsync --perms --chmod=a+rwx ./testfile ./testfile2\n```\nor\n```\nsudo rsync --perms --chmod=ugo+rwx ./testfile ./testfile2\n```\n### 文件权限表\n\n![](https://upload-images.jianshu.io/upload_images/15312191-5b64bf967c87d52e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 最高权限\n```\nchmod -R 777 dictionary/file\n```\n","slug":"📁📁-rsync更改chmod-权限","published":1,"updated":"2024-05-16T07:39:11.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094p1005q2omvh48ddeqr","content":"<p>最近碰到一个问题，scp 文件上传到服务器没有权限。</p>\n<h3 id=\"scp，rsync\"><a href=\"#scp，rsync\" class=\"headerlink\" title=\"scp，rsync\"></a>scp，rsync</h3><p>scp 没有权限参数，使用另一个工具 <code>rsync</code>,可以在上传中配置文件权限。</p>\n<h4 id=\"复杂写法\"><a href=\"#复杂写法\" class=\"headerlink\" title=\"复杂写法\"></a>复杂写法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync --perms --chmod=u+rwx ./testfile ./testfile2</span><br><span class=\"line\">rsync --perms --chmod=g+rwx ./testfile ./testfile2</span><br><span class=\"line\">rsync --perms --chmod=o+rwx ./testfile ./testfile2</span><br></pre></td></tr></table></figure>\n\n<p>.e. add (+) permissions for user (u), group (g) or other (o) respectively.<br>Also (a)&#x3D;all is successful:</p>\n<h4 id=\"简单写法\"><a href=\"#简单写法\" class=\"headerlink\" title=\"简单写法\"></a>简单写法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rsync --perms --chmod=a+rwx ./testfile ./testfile2</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rsync --perms --chmod=ugo+rwx ./testfile ./testfile2</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件权限表\"><a href=\"#文件权限表\" class=\"headerlink\" title=\"文件权限表\"></a>文件权限表</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5b64bf967c87d52e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"最高权限\"><a href=\"#最高权限\" class=\"headerlink\" title=\"最高权限\"></a>最高权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R 777 dictionary/file</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>最近碰到一个问题，scp 文件上传到服务器没有权限。</p>\n<h3 id=\"scp，rsync\"><a href=\"#scp，rsync\" class=\"headerlink\" title=\"scp，rsync\"></a>scp，rsync</h3><p>scp 没有权限参数，使用另一个工具 <code>rsync</code>,可以在上传中配置文件权限。</p>\n<h4 id=\"复杂写法\"><a href=\"#复杂写法\" class=\"headerlink\" title=\"复杂写法\"></a>复杂写法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync --perms --chmod=u+rwx ./testfile ./testfile2</span><br><span class=\"line\">rsync --perms --chmod=g+rwx ./testfile ./testfile2</span><br><span class=\"line\">rsync --perms --chmod=o+rwx ./testfile ./testfile2</span><br></pre></td></tr></table></figure>\n\n<p>.e. add (+) permissions for user (u), group (g) or other (o) respectively.<br>Also (a)&#x3D;all is successful:</p>\n<h4 id=\"简单写法\"><a href=\"#简单写法\" class=\"headerlink\" title=\"简单写法\"></a>简单写法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rsync --perms --chmod=a+rwx ./testfile ./testfile2</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rsync --perms --chmod=ugo+rwx ./testfile ./testfile2</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件权限表\"><a href=\"#文件权限表\" class=\"headerlink\" title=\"文件权限表\"></a>文件权限表</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5b64bf967c87d52e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"最高权限\"><a href=\"#最高权限\" class=\"headerlink\" title=\"最高权限\"></a>最高权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R 777 dictionary/file</span><br></pre></td></tr></table></figure>\n"},{"title":"📁📁-操作系统文件大小写的区别","date":"2021-08-01T16:00:00.000Z","_content":"mac 文件，不区分大小写 \nA.js  === a.js true\n\n导致的问题是本地 引用不区分没问题 部署出现错误\n基本无解，只能尽量注意\n\nlinux 区分大小写 \nA.js === a.js false\n","source":"_posts/📁📁-操作系统文件大小写的区别.md","raw":"---\ntitle: \"📁📁-操作系统文件大小写的区别\"\ndate: 2021-08-02\ntags: \n- 开发日常\n---\nmac 文件，不区分大小写 \nA.js  === a.js true\n\n导致的问题是本地 引用不区分没问题 部署出现错误\n基本无解，只能尽量注意\n\nlinux 区分大小写 \nA.js === a.js false\n","slug":"📁📁-操作系统文件大小写的区别","published":1,"updated":"2024-05-16T07:39:11.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094p2005t2omv6zsa05oi","content":"<p>mac 文件，不区分大小写<br>A.js  &#x3D;&#x3D;&#x3D; a.js true</p>\n<p>导致的问题是本地 引用不区分没问题 部署出现错误<br>基本无解，只能尽量注意</p>\n<p>linux 区分大小写<br>A.js &#x3D;&#x3D;&#x3D; a.js false</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p>mac 文件，不区分大小写<br>A.js  &#x3D;&#x3D;&#x3D; a.js true</p>\n<p>导致的问题是本地 引用不区分没问题 部署出现错误<br>基本无解，只能尽量注意</p>\n<p>linux 区分大小写<br>A.js &#x3D;&#x3D;&#x3D; a.js false</p>\n"},{"title":"📁📁linux文件操作常用命令","date":"2021-10-15T16:00:00.000Z","_content":"##### 文件夹重命名 mv，mv相当于剪切操作\nmv命令既可以重命名，又可以移动文件或文件夹。\n例子：将目录name重命名为naming\n```\nmv /path/filename /targetPath/filename\n```\n##### 复制\n\n```\ncopy /path/filename /targetPath/filename\n```\n\n##### 创建文件夹\n```\nmkdir group\n```\n\n###### 删除文件夹\n\n删除文件夹 group\n\n```\nrm -rf group\n```\n\n###### 删除文件夹所有文件和文件夹\n\n```\nrm -rf *\n```\n\n##### Linux查找文件、文件夹\n查找目录：find /（查找范围） -name '查找关键字' -type d\n查找文件：find /（查找范围） -name 查找关键字 -print\n例1：查找tomcat7文件夹所在的位置\n\n```\nfind / -name 'tomcat7' -type d \n```\n\n例2：查找server.xml文件的位置\n```\nfind / -name 'server.xml' -print\n```\n\n##### 上传本地文件到服务器\n```\nscp /path/filename.zip username@servername:/path   \n```\n\n##### 上传文件夹\n```\nscp -r /path/folder username@servername:/path   \n```\n","source":"_posts/📁📁linux文件操作常用命令.md","raw":"---\ntitle: \"📁📁linux文件操作常用命令\"\ndate: 2021-10-16\ntags: \n- 开发日常\n---\n##### 文件夹重命名 mv，mv相当于剪切操作\nmv命令既可以重命名，又可以移动文件或文件夹。\n例子：将目录name重命名为naming\n```\nmv /path/filename /targetPath/filename\n```\n##### 复制\n\n```\ncopy /path/filename /targetPath/filename\n```\n\n##### 创建文件夹\n```\nmkdir group\n```\n\n###### 删除文件夹\n\n删除文件夹 group\n\n```\nrm -rf group\n```\n\n###### 删除文件夹所有文件和文件夹\n\n```\nrm -rf *\n```\n\n##### Linux查找文件、文件夹\n查找目录：find /（查找范围） -name '查找关键字' -type d\n查找文件：find /（查找范围） -name 查找关键字 -print\n例1：查找tomcat7文件夹所在的位置\n\n```\nfind / -name 'tomcat7' -type d \n```\n\n例2：查找server.xml文件的位置\n```\nfind / -name 'server.xml' -print\n```\n\n##### 上传本地文件到服务器\n```\nscp /path/filename.zip username@servername:/path   \n```\n\n##### 上传文件夹\n```\nscp -r /path/folder username@servername:/path   \n```\n","slug":"📁📁linux文件操作常用命令","published":1,"updated":"2024-05-16T07:39:11.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094p3005v2omv224mfibd","content":"<h5 id=\"文件夹重命名-mv，mv相当于剪切操作\"><a href=\"#文件夹重命名-mv，mv相当于剪切操作\" class=\"headerlink\" title=\"文件夹重命名 mv，mv相当于剪切操作\"></a>文件夹重命名 mv，mv相当于剪切操作</h5><p>mv命令既可以重命名，又可以移动文件或文件夹。<br>例子：将目录name重命名为naming</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /path/filename /targetPath/filename</span><br></pre></td></tr></table></figure>\n<h5 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy /path/filename /targetPath/filename</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建文件夹\"><a href=\"#创建文件夹\" class=\"headerlink\" title=\"创建文件夹\"></a>创建文件夹</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir group</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除文件夹\"><a href=\"#删除文件夹\" class=\"headerlink\" title=\"删除文件夹\"></a>删除文件夹</h6><p>删除文件夹 group</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf group</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除文件夹所有文件和文件夹\"><a href=\"#删除文件夹所有文件和文件夹\" class=\"headerlink\" title=\"删除文件夹所有文件和文件夹\"></a>删除文件夹所有文件和文件夹</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf *</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Linux查找文件、文件夹\"><a href=\"#Linux查找文件、文件夹\" class=\"headerlink\" title=\"Linux查找文件、文件夹\"></a>Linux查找文件、文件夹</h5><p>查找目录：find &#x2F;（查找范围） -name ‘查找关键字’ -type d<br>查找文件：find &#x2F;（查找范围） -name 查找关键字 -print<br>例1：查找tomcat7文件夹所在的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name &#x27;tomcat7&#x27; -type d </span><br></pre></td></tr></table></figure>\n\n<p>例2：查找server.xml文件的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name &#x27;server.xml&#x27; -print</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上传本地文件到服务器\"><a href=\"#上传本地文件到服务器\" class=\"headerlink\" title=\"上传本地文件到服务器\"></a>上传本地文件到服务器</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /path/filename.zip username@servername:/path   </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上传文件夹\"><a href=\"#上传文件夹\" class=\"headerlink\" title=\"上传文件夹\"></a>上传文件夹</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /path/folder username@servername:/path   </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"文件夹重命名-mv，mv相当于剪切操作\"><a href=\"#文件夹重命名-mv，mv相当于剪切操作\" class=\"headerlink\" title=\"文件夹重命名 mv，mv相当于剪切操作\"></a>文件夹重命名 mv，mv相当于剪切操作</h5><p>mv命令既可以重命名，又可以移动文件或文件夹。<br>例子：将目录name重命名为naming</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /path/filename /targetPath/filename</span><br></pre></td></tr></table></figure>\n<h5 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy /path/filename /targetPath/filename</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建文件夹\"><a href=\"#创建文件夹\" class=\"headerlink\" title=\"创建文件夹\"></a>创建文件夹</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir group</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除文件夹\"><a href=\"#删除文件夹\" class=\"headerlink\" title=\"删除文件夹\"></a>删除文件夹</h6><p>删除文件夹 group</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf group</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除文件夹所有文件和文件夹\"><a href=\"#删除文件夹所有文件和文件夹\" class=\"headerlink\" title=\"删除文件夹所有文件和文件夹\"></a>删除文件夹所有文件和文件夹</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf *</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Linux查找文件、文件夹\"><a href=\"#Linux查找文件、文件夹\" class=\"headerlink\" title=\"Linux查找文件、文件夹\"></a>Linux查找文件、文件夹</h5><p>查找目录：find &#x2F;（查找范围） -name ‘查找关键字’ -type d<br>查找文件：find &#x2F;（查找范围） -name 查找关键字 -print<br>例1：查找tomcat7文件夹所在的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name &#x27;tomcat7&#x27; -type d </span><br></pre></td></tr></table></figure>\n\n<p>例2：查找server.xml文件的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name &#x27;server.xml&#x27; -print</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上传本地文件到服务器\"><a href=\"#上传本地文件到服务器\" class=\"headerlink\" title=\"上传本地文件到服务器\"></a>上传本地文件到服务器</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /path/filename.zip username@servername:/path   </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上传文件夹\"><a href=\"#上传文件夹\" class=\"headerlink\" title=\"上传文件夹\"></a>上传文件夹</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /path/folder username@servername:/path   </span><br></pre></td></tr></table></figure>\n"},{"title":"📁📁关闭linux系统端口","date":"2022-01-10T16:00:00.000Z","_content":"## 通过进程名\n1、先查看进程pid\n`ps -ef | grep 进程名`\n\n2、通过pid查看占用端口\n`netstat -nap | grep 进程pid`\n\n3.杀掉进程\n`kill -9 PID`\n\n## lsof : 通过端口号\nlsof(list open files)是一个列出当前系统打开文件的工具。\n\n1、查询8080端口是否被占用，并可以查看pid/程序名\n\n`lsof -i tcp:8080`\n\n2、查看详细信息\n`ps -ef | grep PID`\n\n3、终止该进程\n\n`kill -9 PID`\n\n","source":"_posts/📁📁关闭linux系统端口.md","raw":"---\ntitle: \"📁📁关闭linux系统端口\"\ndate: 2022-01-11\ntags: \n- 开发日常\n---\n## 通过进程名\n1、先查看进程pid\n`ps -ef | grep 进程名`\n\n2、通过pid查看占用端口\n`netstat -nap | grep 进程pid`\n\n3.杀掉进程\n`kill -9 PID`\n\n## lsof : 通过端口号\nlsof(list open files)是一个列出当前系统打开文件的工具。\n\n1、查询8080端口是否被占用，并可以查看pid/程序名\n\n`lsof -i tcp:8080`\n\n2、查看详细信息\n`ps -ef | grep PID`\n\n3、终止该进程\n\n`kill -9 PID`\n\n","slug":"📁📁关闭linux系统端口","published":1,"updated":"2024-05-16T07:39:11.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094p5005y2omv0gq24bt2","content":"<div class=\"\"><h2 id=\"通过进程名\"><a href=\"#通过进程名\" class=\"headerlink\" title=\"通过进程名\"></a>通过进程名</h2><p>1、先查看进程pid<br><code>ps -ef | grep 进程名</code></p>\n<p>2、通过pid查看占用端口<br><code>netstat -nap | grep 进程pid</code></p>\n<p>3.杀掉进程<br><code>kill -9 PID</code></p>\n</div><div class=\"\"><h2 id=\"lsof-通过端口号\"><a href=\"#lsof-通过端口号\" class=\"headerlink\" title=\"lsof : 通过端口号\"></a>lsof : 通过端口号</h2><p>lsof(list open files)是一个列出当前系统打开文件的工具。</p>\n<p>1、查询8080端口是否被占用，并可以查看pid&#x2F;程序名</p>\n<p><code>lsof -i tcp:8080</code></p>\n<p>2、查看详细信息<br><code>ps -ef | grep PID</code></p>\n<p>3、终止该进程</p>\n<p><code>kill -9 PID</code></p>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"通过进程名\"><a href=\"#通过进程名\" class=\"headerlink\" title=\"通过进程名\"></a>通过进程名</h2><p>1、先查看进程pid<br><code>ps -ef | grep 进程名</code></p>\n<p>2、通过pid查看占用端口<br><code>netstat -nap | grep 进程pid</code></p>\n<p>3.杀掉进程<br><code>kill -9 PID</code></p>\n<h2 id=\"lsof-通过端口号\"><a href=\"#lsof-通过端口号\" class=\"headerlink\" title=\"lsof : 通过端口号\"></a>lsof : 通过端口号</h2><p>lsof(list open files)是一个列出当前系统打开文件的工具。</p>\n<p>1、查询8080端口是否被占用，并可以查看pid&#x2F;程序名</p>\n<p><code>lsof -i tcp:8080</code></p>\n<p>2、查看详细信息<br><code>ps -ef | grep PID</code></p>\n<p>3、终止该进程</p>\n<p><code>kill -9 PID</code></p>\n"},{"title":"📣-前端常用命名","date":"2021-11-02T16:00:00.000Z","_content":"## 背景\n\n在编码的过程中变量命名是一个容易忽略，又容易犯头疼的问题。例如在复杂的页面布局中 Class 的命名，同样一个结构在不同的上下文要表达的意思不一样，是采用通用命名呢？还是采用更具有描述性的业务相关词汇？但是呢还需要考虑到样式的复用、是否会冲突、被覆盖、组合命名的长度是否太长等问题。\n\n在实际工作中，每个人都有自己命名风格和惯用词汇，有的喜欢使用英文简写、有的喜欢使用中英文结合、有的喜欢给变量加数据类型前缀、有的喜欢乱造词汇、有的甚至单词都拼写不正确。在看别人代码的过程中你是否像我一样无语，但也只能截图指出并吐槽二下，有些时候对方并不买单，改正。\n\n每次到换工作的时候就更新博客，7 月下旬的高温天气就适合在家里码字，这次选择这个话题的原因是目前在网上还没有相关的文章来系统全面的论述有前端关代码变量命名的资料。Java 有《码出高效 - 阿里巴巴 Java 开发手册 终级版》，而前端这方面目前还是一个空白，虽然有很多代码规范，但是很少有人愿意在这方面去花心思，更多的是研究框架的源码、数据结构与算法和尝试新的技术，本人由于大脑开发有限、没有能力去啃这些骨头，只好捡一些很少有人去碰触的简单不费脑的知识点来考究一二，希望也能为前端的生态做出一点小贡献。\n\n# 命名规则\n\n目前流行的经典命名规则有：**驼峰命名法、匈牙利命名法、下划线命名法、\\*\\***帕斯卡命名法\\*\\*\n\n相关命名的具体规则请另行查阅。前端主要涉及到驼峰命名法，React 组件会用到**帕斯卡命名法。**\n\n然后是变量命名规则：\n\n- 变量名首字母必须为字母(a-z A-Z)，下划线(\\_)，或者美元符号($)开始\n- 变量名只能是字母(a-z A-Z)，数字(0-9)，下划线(\\_)的组合，并且之间不能包含空格，数字不能放在变量名首位。\n- 变量名不能使用编程语言的保留字。比如在 javascript 中不能使用 true, false, while, case, break 保留字等等。\n\n# 命名风格\n\n这里给出一些在开发过程中约定成俗的通用规则，涉及 JavaScript, Typescript, 框架组件, 样式及目录。在文章中将使用*【强制】来*表示必须严格遵守，*【推荐】*来表示建议*，【参考】*来给出多种命名方式的一种。\n\n**1. 【强制】在 JavaScript 中使用驼峰命名法来表示变量，不能以下划线或美元符号作为开始和结束。**\n\n```\n// 反例\n_name\n__name\nname_\n$name\nname$\n```\n\n> 补充：由于受框架和第三方库及语言限制，不可能完全避免。例如：在 RxJs 中通常命名流的时候是以 `变量名 + $` 的形式，在 Class 中定义私有变量时通常以 `_ + 变量名` 的方式来表示，在 Vue 中内部实例方法全部以 `$` 开始，在 AngularJs 中内部方法以 `$$` 开始，而 lodash 直接使用 `_` 作为其别名。\n\n**2.** 【**强制】在代码中严禁使用拼音与中英文混合的方式，更不允许直接使用中文的方式。除了一些国际通用的中文名称，要视为英文外，其它禁止使用。**\n\n```\n// 正例\ntaobao\ntmall\nshanghai\ncoupons\n```\n\n```\n// 反例\nyhq [优惠券]\n```\n\n**3. 【强制】类名使用大写驼峰命名法来表示，Typescript 中枚举值使用大写驼峰命名法表示。**\n\n```\n// 正例\nclass User {}\nenum Color {Red = 1, Green, Blue}\n```\n\n```\n\nclass user {}\n```\n\n**4. 【强制】常量名全部大写，单词间使用下划线隔开，力求表达完整清楚，不要嫌名字长。**\n// 正例\n\n```\nGOOGLE_MAP_TOKEN\n```\n\n// 反例\n\n```\nTOKEN\n```\n\n**5. 【建议】Typescript 中抽象类使用 `Abstract` 或 `Base` 开头；异常类使用 `Exception` 结尾。**\n\n```\nabstract class BaseDepartment {}\n```\n\n**6. 【建议】在 TypeScript 中，类型使用 `Type` 作后缀，接口使用 `I` 作为前缀。**\n\n```\ntype PropsType = {}\ninterface ILoginProps {}\n```\n\n**7. 【建议】 采用有意义的命名，在项目中坚持使用一种变量命名方式。不要 `usr` 与 `user` 混用**\n\n// 正例\n\n```\nusers\ngetUserByUid()\n```\n\n// 反例\n\n```\nregisterUsr()\ncopyUserInfo()\n```\n\n**8. 【建议】方法名必须准确表达该方法的行为，在多数情况下以动词开头**\n\n// 正例\n\n```\nfetchCoupons()\nupdateToken()\ncreateAccount()\ngenerateUniqueId()\n```\n\n// 反例\n\n```\ngetData()\n```\n\n**9.【建议】可以使用单词简写，但是只局限于常用词汇，注意不同词汇的简写有可能冲突**\n    // 正例\n\n```\nsetProps() [props -> property]\nselectCouponsDlg() [dlg -> dialog]\nreadPkg() [pkg -> package]\npreviewTpl [tpl -> template]\n```\n\n// 反例\n\n```\nvehicleDesc [desc -> description]\nvehicleDesc [desc -> descending]\nvehicleAesc [aesc -> aescending]\nfetchUsr() [usr -> user]\n```\n\n**10. 【建议】在 Vue 和 Angular 中，模板语法中所有组件名使用中线命名法，在 React 中使用大写驼峰命名法来表示**\n\n```\n// Vue\n<el-button type=\"text\" @click=\"toDetail\">详情</el-button>\n<custom-component a-prop=\"prop\" />\n\n// Angular\n<nz-sider [nzWidth]=\"200\" style=\"background:#fff\"></nz-sider>\n\n// React\n<SelectPicture data={this.images} />\n\n```\n\n**11. 【推荐】统一使用中线命名法来命名目录。**\n\n```\n|-- page-header |  |-- PageHeader.vue\n```\n\n**12. 【参考】在 Vue 模板语法中组件属性使用连字符命名法，在 Vue 中使用 JSX 则属性使用驼峰命名法，并且文件文以”.jsx”为文件类型。**\n\n```\n<Thumbnail\n  withHeadPicture={true}\n  data={this.selectedImages[0]}\n  withDetail={this.enabledDetail}\n/>\n```\n\n**13. 【强制】在服务名上使用 `Service` 后缀**\n\n```\nclass UserService {}\n```\n\n**14. 【建议】在 Vue 中组件文件名采用大写驼峰命名方式，React 同样如此，在 Angular 中以使用点和横杠来分隔文件名，并且符号名后面追加约定的类型后缀。**\n\n```\n// Vue\nUser.vue\n\n// Angular\napp.component.ts\nhero-list.component.ts\nvalidation.directive.ts\napp.module.ts\nuser-profile.service.ts\n\n// React\nUser.jsx\n```\n\n**15. 【参考】在 React 中使用目录名称作为组件名，在目录内容直接使用*index*作为入口，在 Vue 中不可以，在 Angular 中可以将*index*作为模块的入口，当然也可以直接作为组件的入口，但这样和其整个命名风格有所背离。**\n\n```\n// Vue\n|-- user-info |  |-- UserInfo.vue\n\n// Angular |-- user-info |  |-- user-info.component.ts |  |-- index.ts\n\n// React |-- user-info |  |-- index.jsx\n```\n\n**16. 【建议】在工程中文档使用全大写命名**\n\n```\nREADME.md\nCONTRIBUTORS.md\nCHANGELOG.md\n```\n\n**17. 【建议】在 Vue 中指令命名使用 `filter` 作为结束。所有引用命名使用 `ref` 作为后缀**\n\n```\nformatCouponsFilter\ninputRef\nselectRef\n```\n\n**18. 【强制】测试文件以 `.spec` 或者 `.test` 作为命名的一部分。**\n\n```\nselectPicture.spec.js\npageHeader.test.js\n```\n\n**19. 【建议】复数化变量名称，而不是命名中包含集合类型名称。**\n\n```\n// 正例\nhosts\nusers\nvalidUsers\nhostText\nhostJson\nportNumber\n```\n\n```\n// 反例\nhostList\nuserList\nhostStr\nintPort\n```\n\n**20. 【建议】在 `for` 循环中使用 `i, j, k` 来作为索引，使用 `n` 表示数量/次数/限制，使用 `e` 表示异常, 使用 `evt` 表示事件对象, 使用 `cb` 表示回调函数**。\n\n```\nfor (let i = 0; i < 10; i++) {\n  for (let j = 0; j < 10; j++) {\n    for (let k = 0; k < 10; k++) {\n      // do something\n    }\n  }\n}\n```\n\n**21. 【强制】在解构时使用 `const` 来声明。**\n\n```\nconst [ foo, bar ] = { foo: 1, bar: 2 }\n```\n\n**22. 【建议】在样式中 Class 命名可以使用一些常用简写来减少长度。**\n\n```\nhd -> head\nhdr -> header\nft -> foot\nftr -> footer\npg -> page\nbtn -> button\ntxt -> text\nel -> element\nopt -> option\nbd -> border\ncl -> clearfix\np -> padding\nm -> margin\nl -> left\nr -> right\nt -> top\nb -> bottom\nx -> horizontal\ny -> vertical\npx -> padding-left, padding-right\npy -> padding-top, padding-bottom\npl -> padding-left\nm -> margin\ndlg -> dialog\nsel -> select\nimg -> image\nlbl -> label\nchk -> checkbox\ntpl -> template\ntbl -> table\nhoz -> horizontal\nvert -> vertical\nref -> reference\nwiz -> wizard\noh -> overflow: hidden\n```\n\n> 补充：有些简写不能单独使用，终须组合才能使用，例如: `p`, `m`, `x`, `y`等单个词汇。\n\n**23. 【建议】在命名时采用 BEM 的方式，并适当变化，具体参见后续文章。**\n\n```\n.page-header__main\n.dialog__content\n.gallery-list--wrap\n.thumbnail-image--info\n.action__btn-group\n```\n\n**24. 【建议】样式 Class 命名使用中线连接，ID 命名采用下划线连接。Class 可以同时采用中线和下划线，但要遵循一定的规则。**\n\n```\n.thumbnail-item-image\n#page_header\n```\n\n**25. 【参考】样式 Class 采用组合方式，通过外层 Class 名来限制作用范围。**\n\n```\n// 正例\n<div class=\"page-header\">\n  <div class=\"page-header__wrap common\"></div>\n  <div class=\"page-header__wrap tab\"></div>\n</div>\n\n// 反例\n<div class=\"page-header\">\n  <div class=\"page-header__wrap page-header--common\"></div>\n  <div class=\"page-header__wrap page-header--tab\"></div>\n</div>\n```\n\n> 补充：这种方式的目的在于减少长度，通过 \"主体 + 分类名词\" 的方式，可以解释为 “带分类的主体”，但是有一个问题是全局样式要注意不要使用通用的词汇来定义样式，比如 `title`, `action`, `header`, `footer`, `left`, `right`等，不然会引起样式覆盖。\n\navaScript 作为前端开发从业人员必须掌握的 3 大基础知识中最重要的一环，也是平是接触时间最长、写得最多的。在开发过程中必然会遇到命名的问题，你会词穷、纠结、惆怅吗？本文的出现相信能够解决大部分烦恼，让你轻松写出符合规范、易读、简短的代码。\n\n本文将通过大量的实例来试图自圆其说，形成一套系统化、实用的变量命名理化体系。通过按 JavaScript 的数据类型分类着手、细到一个函数的参数命名，并提供众多可选方案，并尽量给出其适用范围和利弊。\n\n> 需要注意的是由于个人写作水平、和知识有限，很多方面叙述上有些生硬，在分类上也没有什么特别的依据，文章也没有人审稿，所以有什么纰漏还请留言告知。由于写作仓促，内容可能不全，后续会随着工作和学习的深入而不断地调整和更新。\n\n# 布尔值(Boolean)命名\n\nBoolean 值是两种逻辑状态的变量，它包含两个值：**真**和**假**。在 JavaScript 中对应 `true` 和 `false`，在实践中通常使用数字`1`表示真值，`0`来表示假值。\n\n虽然 Boolean 的状态只有两种但是在命名时可以进一步分类，这里给出几种场景：\n\n## 场景一：表示可见性、进行中的状态\n\n**解释**：**可见性**在通常指页面中的元素、组件是否显示（或者组件挂载到 DOM 上，但并不可见）。**进行中**主要是说明某种状态是处于持续进行中。\n\n推荐命名方式为 `is + 动词（现在进行时）/形容词`，同时这种方式也可以直接不写 `is`，但是为了更好的作区分，建议还是加上。\n\n```\n{\n  isShow: '是否显示',\n  isVisible: '是否可见',\n  isLoading: '是否处于加载中',\n  isConnecting: '是否处于连接中',\n  isValidating: '正在验证中',\n  isRunning: '正在运行中',\n  isListening: '正在监听中'\n}\n```\n\n> **注意**： 在 Java 中使用这种方式是有一定副作用的，为什么请移步：[为什么阿里巴巴禁止开发人员使用 “isSuccess” 作为变量名？](https://link.segmentfault.com/?enc=8r%2BGGCeC9VWmfQ%2BVLEFhwg%3D%3D.05DmwxjFVBpEhcTgoDetMN8i3JOhj6QhBxIW%2FJ8tUPqcX8rQBo9XhQPaZlhW1A08)\n\n## 场景二：属性状态类\n\n**解释**：通常用来描述实体（例如：HTML 标签、组件、对象）的功能属性，而且定法比较固定。\n\n```\n{\n  disabled: '是否禁用',\n  editable: '是否可编辑',\n  clearable: '是否可清除',\n  readonly: '只读',\n  expandable: '是否可展开',\n  checked: '是否选中',\n  enumberable: '是否可枚举',\n  iterable: '是否可迭代',\n  clickable: '是否可点击',\n  draggable: '是否可拖拽'\n}\n```\n\n## 场景三：配置类、选项类\n\n**解释**：主要是指组件功能的开启与关闭，功能属性的配置。\n\n这是一种比较常见的情景，目前命名方式也有很多种，但是归纳起来也不多。推荐使用 `withXx` 来表示组件在基本功能形态外的其它功能，比如组件的基础功能到高级功能的开启；使用 `enableXx` 来表示组件某些功能的开启；使用 `allowXx` 来表示功能属性的配置；使用 `noXx` 用于建议功能使用者这个不建议开启。\n\n```\n{\n  withTab: '是否带选项卡',\n  withoutTab: '不带选项卡',\n  enableFilter: '开启过滤',\n  allownCustomScale: '允许自定义缩放',\n  shouldClear: '是否清除',\n  canSelectItem: '是否能选中元素',\n  noColon: '不显示label后面的冒号',\n  checkJs: '检查Js',\n  emitBOM: 'Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.'\n}\n```\n\n> **注意**：如果嫌分类太多，可以只使用其中一种方式，比如在 Typescript 中使用了 `allownXx` 和 `noXx`。\n\n除了上面这些带有特定的前置介词、动词方式外还有一些在语义上带有疑问性质的组合通常也是作为 Boolean 命名的一种参考。\n\n```\n{\n  virtualScroll: '是否启用虚拟滚动模式',\n  unlinkPanels: '在范围选择器里取消两个日期面板之间的联动',\n  validateEvent: '输入时是否触发表单的校验'\n}\n```\n\n# 函数命名\n\n函数在不同的上下文中的叫法也不一样，在对象中称为方法，在类中有构造函数、在异步处理时有回调函数，还有立即执行函数、箭头函数、柯里函数等。\n\n函数命名的方式常常是和业务逻辑耦合在一起的，但是在命名规则上也有一些常见的模式可以遵循。\n\n## 场景一：事件处理\n\n事件处理函数是前端平时用到最多的，包括浏览器原生事件、异步事件和组件自定义事件。在写法上最常见的两种命名分别为 `onXx`、`onXxClick`和`handleXx`、`handleXxChange`。\n\n这里如何在二者之间选择，可以从二方面来归类。一是，原生事件采用 `onXx`，而自定义事件使用 `handleXx`。二是，事件主动监听采用 `onXx`，被动处理使用 `handleXx`。\n\n从实践及三大主流框架的文档关于事件部分的内容来看，推荐使用 `handleXx` 这种方式，而在表单提交的时候通常采用 `onSubmit` 函数。\n\n其实，在实际项目中很少严格这样来命名事件处理函数，因为这种方式有一定的局限性，比如点击按钮打开一个对话框，使用 `handleOpenDlg` 和 `onOpenDlg` 都没有直接写 `openDlg` 方便，如果页面有多个不同功能的对话框采用这种方式会显得变量名过长，而 handle 和 on 就显得没有必要了，比如 `hanldeOpenCommentDlg` 就没有 `openCommentDlg` 直白。\n\n下面列出了一些约定成俗的适用例子：\n\n```\n{\n  onSubmit: '提交表单',\n  handleSizeChange: '处理分页页数改变',\n  handlePageChange: '处理分页每页大小改变',\n  onKeydown: '按下键'\n}\n```\n\n## 场景二：异步处理\n\n这里主要是指在写数据层服务、状态管理中的 Action 命名，以及 Ajax 回调的命名规则。\n\n```\n{\n  getUsers: '获取用户列表',\n  fetchToken: '取得Token',\n  deleteUser: '删除用户',\n  removeTag: '移除标签',\n  updateUsrInfo: '更新用户信息',\n  addUsr: '添加用户',\n  createAccount: '创建账户'\n}\n```\n\n命名主要围绕数据的增删查找来划分，获取数据通常是 `getXx` 和 `fetchXx`，在作者看来两者在使用上的区分在于 `getXx` 的数据来源不一定直接取自异步的原始数据，可能是加工处理后的，而 `fetchXx` 是直接拿的原始数据。当然在实际项目中并没有区分，看个人喜好。\n\n`deleteXx` 主要用于数据删除，而 `removeXx` 在语义上是移除数据，通常情况数据是还存在的，只是没有显示或数据假删除。`updateXx` 是指数据更新操作，`addXx` 是在已有列表数据中添加新的子项、而`createXx` 主要是创建新的实例，比如新建一个账户。\n\n## 场景三： 跳转路由\n\n在实际开发过种中，比如在使用 react-router/vue-router 时，在模板或者 JSX 中可以直接在标签中写上目标地址，但有些时候跳转的目标地址是经过判断或者组合后的，并且通过事件触发跳转的，这个时候就需要一个函数来处理，那么在函数命名的时候可以考虑使用\n\n```\n{\n  toTplDetail: '跳转到模板详情页面',\n  navigateToHome: '导航到首页',\n  jumpHome: '跳转首页',\n  goHome: '跳转首页',\n  redirectToLogin: '重定向到登录页',\n  switchTab: '切换Tab选项卡',\n  backHome: '回到主页'\n}\n```\n\n推荐使用 `toXx` 和 `goXx` 这两种方式，如果不是在当前页面打开/跳转页面，可以使用 `toBlankTplDetail` 或者 `goBlankHome` 这种方式来进一步语义化。如果前端页面是位于 Webview 中，也可以考虑采用 `toNativeShare` 这种方式来命名。\n\n## 场景四：框架相关特定方法\n\n这里主要是针对前端 3 大主流流行框架，有一些命名是带有特定标识符的，还有就是一些生命周期的命名方式。\n\n```\n{\n  formatTimeFilter: '在AngularJs和Vue中，通常用于过滤器命名',\n  storeCtrl: '用于AngularJs定义控制器方法',\n  formatPipe: '用于Angular中，标识管道方法',\n  $emit: 'Vue中的实例方法',\n  $$formatters: 'AngularJs中的内置方法',\n  beforeCreate: 'Vue的生命周期命名',\n  componentWillMount: 'React生命周期命名',\n  componentDidMount: 'React生命周期命名',\n  afterContentInit: 'Anuglar生命周期命名',\n  afterViewChecked: 'Angula生命周期命名',\n  httpProvider: 'AngularJs服务',\n  userFactory: '工厂函数',\n  useCallback: 'React钩子函数'\n}\n```\n\n## 场景五：数据的加工\n\n这类场景在处理列表的时候经常会碰到，比如排序、过滤、添加额外的字段、根据 ID 和索引获取特定数据等。\n\n### 情形一：根据特定属性获取属性\n\n这里可以参考 DOM 方法的命名，比如：`getElememtById()`、`getElementsByTagName()`、`getElementsByClassName()` 和 `getElementsByName()`，然后提炼出一个比较实用的模板：`getXxByYy()`。其中 `Xx` 可以是：`element`, `item`, `option`, `data`, `selection`, `list`, `options` 以及一些特定上下文的名字，比如：`user(s)`, `menu(s)` 等。`Yy` 相对来说比较固定，经常用到的就是 `id`, `index`, `key`, `value`, `selected`, `actived` 等。\n\n除了使用 `get`，还可以使用 `query` 和 `fetch`，但是需要注意和上面提到的异步数据处理作一个区分。\n\n```\n{\n  getItemById: '根据ID获取数据元素',\n  getItemsBySelected: '根据传入的已选列表ID来获取列表全部数据',\n  queryUserByUid: '根据UID查询用户'\n}\n```\n\n注意：在 `getItemsBySelected` 这种情形下直接写成 `getItemsSelected` 更好，但只适用于 `Yy` 为形容词的场景\n\n### 情形二：格式化数据\n\n这里的格式化操作包括排序、调整数据结构、过滤数据、添加属性。命名通常使用 `formatXx`, `convertXx`, `inverseXx`, `toggleXx`, `parseXx`, `flatXx`, 也可以结合数组的一些操作方法来命名，比如 `sliceXx`, `substrXx`, `spliceXx`, `sortXx`, `joinXx` 等来命名。\n\n```\n{\n  formatDate: '格式化日期',\n  convertCurrency: '转换货币单位',\n  inverseList: '反转数据列表',\n  toggleAllSelected: '切换所有已选择数据状态',\n  parseXml: '解析XML数据',\n  flatSelect: '展开选择数据',\n  sortByDesc: '按降序排序'\n}\n```\n\n# 数组命名\n\n数组的命名推荐使用复数形式来命名，还有就是名词和具有列表意思的单词组合。常见的词汇有 `options`, `list`, `maps`, `nodes`, `entities`, `collection` 等。\n\n```\n{\n  users: '用户列表',\n  userList: '用户列表',\n  tabOptions: '选项卡选项',\n  stateMaps: '状态映射表',\n  selectedNodes: '选中的节点',\n  btnGroup: '按钮组',\n  userEntities: '用户实体'\n}\n```\n\n# 选项元素、下拉元素命名\n\n主要针对的是在下拉选择框、选项卡元素、Radio、Checkbox 等数据源每个选项数据的命名。常见的词汇有：`title`, `name`, `key`, `label`, `field`, `value`, `id`, `children`, `index`, `nodes` 等。\n\n基中 `title/name/key/label/field` 作为选项显示名, `value/id` 用于唯一标识选项，`children/nodes` 用于包含子节点内容。如果选项元素的语义很明确的情况下也可以直接使用特定单词来代替提到的这些泛指的词汇，例如菜单列表就可以使用 `menu` 来作为显示名。\n\n// 最常见组合\n\n```\n{\n  title: '标题',\n  value: 'ID值'\n}\n\n// 组合二\n{\n  label: '标签名',\n  value: 'ID值'\n}\n\n// 组合三\n{\n  name: '元素名',\n  id: 'ID值'\n}\n\n// 组合四\n{\n  field: '字段',\n  value: '标识',\n  index: '索引'\n}\n```\n\n# 当前选项、激活项命名\n\n适用列表的选中项、菜单选中项、步骤操作的当前进行步骤、页面路由当前路由等的命名。\n\n```\n{\n  activeTab: '当前选中选项卡',\n  currentPage: '当前页',\n  selectedData: '当前选项中数据',\n}\n```\n\n# 临时数据、比对数据命名\n\n针对在代码中有时会使用一些临时的变量来存储数据、保存数据快照的场景下的命名。\n\n```\n{\n  swapData: '临时交换数据',\n  tempData: '临时数据',\n  dataSnapshot: '数据快照'\n}\n```\n\n# 数据循环语句中变量命名\n\n在使用 `for` 循环时，多层嵌套请依次使用 `i/j/k`，超过 3 层可以使用 `x/y/z`，`m/n` 来命名。使用 `forEach`, `map`, `filter` 等方法时，每一个元素命名可以根据不同语境下的特殊名字来命名，比如遍历 `menus`，那么每个元素可以命名为 `menu`，不然则使用上下文无关的词汇，比如：`item`, `option`, `data`, `key`, `object` 等。至于索引通常使用 `index`，如果多层可以使用 `index + 数字` 的形式，也可以直接使用 `i/j/k` 来作为索引，甚至还可以使用 `subIndex/grandIndex` 这种方式来命名。\n\n对于在使用 `for` 循环时数组长度如果需要单独命名的话，可以使用 `xxlength/xxLens`，或者 `xxCount`。\n\n在循环的过程中通常还会统计某个条件下数据匹配的次数、重复元素数量、记录中间结果等情况。这里推荐使用 `count` 表示次数，`skipped` 表示跳过的数量，`result` 表示结果。\n\n```\n// for 循环\nfor (let i = 0; i < 10; i++) {\n  for (let j = 0; j < 10; j++) {\n    for (let k = 0; k < 10; k++) {\n      // do something\n    }\n  }\n}\n\nfor (let i = 0, lens = this.options.length; i < lens; i++) {\n  // do something\n}\n\n// forEach\nusers.forEach((item, index) => {\n  // do something\n})\n\nmenus.forEach((menu, index) => {\n  if (menu.children) {\n    menu.children.forEach((subMenu, subIndex) => {\n      if (subMenu.children) {\n        subMenu.children.forEach((grandMenu, grandIndex) => {\n          // 一个不常用的示例\n        })\n      }\n    })\n  }\n})\n```\n\n# 方法参数命名\n\n方法的参数名称和数量在不同的方法中各不相同，但是还是有一些固定的模式可以参考，比如在 Vue 中监听属性变化的新值和旧值；`reduce` 方法的上一个值，当前值；回调函数的命名、剩余参数的命名等。\n\n## 情形一：新值、旧值\n\n常见于 Vue 中`watch` 对像中的属性监听回调函数，推荐使用\n\n```\n{\n  oldVal: '旧值',\n  newVal: '新值'\n}\n```\n\n## 情形二：上一个值、下一个值和当前值\n\n这种情形见于路由的钩子方法，`Object.assign` 数据拷贝的参数。\n\n```\n// 组合一\n{\n  from: '从...',\n  to: '到...'\n}\n\n// 组合二\n{\n  prev: '上一个...',\n  next: '下一个...',\n  cur: '当前'\n}\n\n// 组合三\n{\n  source: '源',\n  target: '目标'\n}\n\n// 组合四\n{\n  start: '开始',\n  end: '结束'\n}\n```\n\n## 情形三：异步数据返回\n\n用于 Promise 的`then`方法参数，`await` 的返回的 Promise 等。可选择的词汇有：`res`, `data`, `json`, `entity`，推荐使用 `res`。\n\n```\ndemoPromise.then(res => {\n  // do something\n})\n```\n\n## 情形四：其它情况\n\n一些使用不多，但是在编程时约定成俗的命名方式。例如 `ch` 表示单个字符，`str` 表示字符串, `n` 代表次数, `reg` 表示正则, `expr` 表示表达式, `lens` 表示数组长度, `count` 表示数量, `p` 表示数据的精度, `q` 表示查询(query), `src` 表示数据源(source), `no` 表示数字(number), `rate` 表示比率, `status` 表示状态, `bool` 表示布尔值, `arr` 表示数组值, `obj` 表示对象值, `x` 和 `y` 表示坐标两轴, `func` 表示函数, `ua`表示 User Agent, `size` 表示大小, `unit` 表示单位, `hoz` 表示水平方向, `vert` 表示垂直方向, `radix` 表示基数，根\n\n```\n// 传入单个字符\nfunction upper(ch) {}\n\n// 数量重复\nfunction repeat(str, n)\n\n// 正则\n'abab'.replace(reg, 'bb')\n```\n\n# 事件命名\n\n这里根据 DOM、nodejs 和一些框架和 UI 组件的事件进行归纳\n\n## **DOM 事件**\n\n这里列举 DOM 中常见的事件命名\n\n```\n{\n  load: '已完成加载',\n  unload: '资源正在被卸载',\n  beforeunload: '资源即将被卸载',\n  error: '失败时',\n  abort: '中止时',\n  focus: '元素获得焦点',\n  blur: '元素失去焦点',\n  cut: '已经剪贴选中的文本内容并且复制到了剪贴板',\n  copy: '已经把选中的文本内容复制到了剪贴板',\n  paste: '从剪贴板复制的文本内容被粘贴',\n  resize: '元素重置大小',\n  scroll: '滚动事件',\n  reset: '重置',\n  submit: '表单提交',\n  online: '在线',\n  offline: '离线',\n  open: '打开',\n  close: '关闭',\n  connect: '连接',\n  start: '开始',\n  end: '结束',\n  print: '打印',\n  afterprint: '打印机关闭时触发',\n  click: '点击',\n  dblclick: '双击',\n  change: '变动',\n  select: '文本被选中被选中',\n  keydown/keypress/keyup: '按键事件',\n  mousemove/mousedown/mouseup/mouseleave/mouseout: '鼠标事件',\n  touch: '轻按',\n  contextmenu: '右键点击 (右键菜单显示前)',\n  wheel: '滚轮向任意方向滚动',\n  pointer: '指针事件',\n  drag/dragstart/dragend/dragenter/dragover/dragleave: '拖放事件',\n  drop: '元素在有效释放目标区上释放',\n  play: '播放',\n  pause: '暂停',\n  suspend: '挂起',\n  complete: '完成',\n  seek: '搜索',\n  install: '安装',\n  progress: '进行',\n  broadcast: '广播',\n  input: '输入',\n  message: '消息',\n  valid: '有效',\n  zoom: '放大',\n  rotate: '旋转',\n  scale: '缩放',\n  upgrade: '更新',\n  ready: '准备好',\n  active: '激活'\n}\n```\n\n## **自定义事件**\n\n在封装组件时提供的事件名除了参考 DOM 事件外，在命名上也可以参考 Github Api 采用 `动词过去时 + Event` 的方式, Visual Studio Code Api 的 `on +\n\n```\n{\n  assignedEvent: '分配事件',\n  closedEvent: '关闭事件',\n  labeledEvent: '标签事件',\n  lockedEvent: '锁事件',\n  deployedEvent: '部署事件'\n}\n```\n\n此外，很多命名方式可以根据场景使用 `元素 + click` 、`元素 + change` 、`select + 范围`等方式灵活运用\n\n```\n{\n  selectAll: '选择所有',\n  cellClick: '当某个单元格被点击时会触发该事件',\n  sortChange: '当表格的排序条件发生变化的时候会触发该事件'\n}\n```\n\n# 状态管理命名\n\n如果在项目中用到了状态管理(redux/vuex/ngrx)，下面给出一些 ActionType，Mutation, Action 的命名参考。\n\n```\n// Redux 的 actionType\nLOAD_SUCCESS\nLOAD_FAIL\nTOGGLE_SHOW_HISTORY\nON_PLAY\nON_LOAD_START\nFETCH_SONGS_REQUEST\nRECEIVE_PRODUCTS\n\n// ngrx\nconst SET_CURRENT_USER = '[User] Set current';\nconst ADD_THREAD = '[Thread] Add';\nconst UPDATE_TRIP_SUCCESS = 'Update [Trip] Success';\n```\n\n# 其它命名\n\n```\n// 日期、时间\n// --------------------------------------------------------\nsentAt: '发送时间'\naddAt: '添加时间'\nupdateAt: '更新时间'\nstartDate: '开始日期'\nendDate: '结束日期'\nstartTime: '开时时间'\nendTime: '结束时间'\n```\n\n本文主要为广大前端开发人员提供一个英文词汇参考，便于记忆和查阅。文中内容按照特定的方式进行分类便于读者关注感兴趣的部分。\n\n文中的单词并没有给出其词性，很多词性的变化需要读者具备一定的英语语法知识，以便在特定情况下灵活运用。\n\n# 数字\n\n数字部分包含英文的数字表示、数字运算符、数字单位\n\ninfinite: 无限的\n\n## 英文数字\n\n```\nzero: 零\none: 一\ntwo: 二\nthree: 三\nfour: 四\nfive: 五\nsix: 六\nseven: 七\neight: 八\nnine: 九\nten: 十\neleven: 十一\ntwelve: 十二\nthirteen: 十三\nfourteen: 十四\nfifteen: 十五\nsixteen: 十六\nseventeen: 十七\neighteen: 十八\nnineteen: 十九\ntwenty: 二十\nthirty: 三十\nforty: 四十\nfifty: 五十\neighty: 八十\nninety: 九十\nhundred: 百\nthousand: 千\nmillion: 百万\nbillion: 十亿\n```\n\n## 计数单位\n\n```\npixel: 像素\npercent: 百分比\n```\n\n// 中文数字\n\n```\nten: 十\nhundred: 百\nthousand: 千\nten thousand: 万\nbillion: 亿\ntrillion: 兆\n```\n\n// 存储容量\n\n```\nbyte: 字节 B\nkilobyte: 千字节 KB\nmegabyte 兆字节 MB\ngigabyte 吉字节 GB\ntrillionbyte 太字节 TB\n```\n\n## 进制\n\n```\ndecimal: 十进制\nhex: 十六进制\nbinary: 二进制\noctal: 八进制\n```\n\n## 运算符\n\n```\nadd: 加\nsubtract: 减\nmultiply: 乘\ndivide: 除\nand: 与\nor: 或\nnot: 非\nintersection: 交集\ncompose: 并集\n```\n\n# 键盘符号\n\n```\npunctuator: 标点符号\nidentifier: 标识符\n\n// Unique graphic character allocations\n// 独特的图形字符分配\n// --------------------------------------------------------\nexclamation mark: ! 感叹号\nquotation mark: \" 双引号\npercent sign: % 百分号\nampersand: & and符号\napostrophe: ' 撇号\nellipse/apostrophe: …… 省略号\nleft parenthesis: ( 左括号\nright parenthesis: ) 右括号\nasterisk: * 星号\nplus sign: + 加号\ncomma: , 逗号\nslight-pause mark: 、 顿号\nhyphen-minus: - 连字符(-) 或者 减号(-)\nfull stop: . 句号\nmiddle dot: ・ 中间点\ninterpunct: · 间隔号\nhyphenation point: · 连字点\nsolidus: / 斜线\ncolon: : 冒号\nsemicolon: ; 分号\nless-than sign: < 小于符号\nequals sign: = 等于符号\ngreater-than sign: > 大于符号\nquestion mark: ? 问号\nlow line: _ 下划线\ndigital 0: 0 数字 0\nlatin capital letter A:  A 大写拉丁字母\nlatin small letter A: A 小写拉丁字母\n\n// Alternative graphic character allocations\n// 可选的图形字符分配\n// --------------------------------------------------------\nnumber sign: # 数字符号\npound sign: £ 英镑符号\ndollar sign: $ 美元符号\ncurrency sign:  货币符\n\n// IRV(International Reference Version) graphic character allocations\n// IRV图形字符分配\n// --------------------------------------------------------\nnumber sign: # 数字符号\ndollar sign: $ 美元符号\ncommercial at: @\nleft square bracket: [ 左方括号\nreverse solidus:  反斜线\nright square bracket: ] 右方括号\ncircumflex accent: ^ 抑扬音符号\ngrave accent: ` 沉音符\nleft curly bracket: { 左花括号\nvertical line: | 垂直线\nright curly bracked: } 右花括号\ntilde: ~ 波浪符\n```\n\n> 说明：由于[标点符号](https://link.segmentfault.com/?enc=YykBjtgFkx%2F2EOzGtHbG%2BQ%3D%3D.MnCoapm6qUK6g38kx76BRxEjFDEbCyZewPa9ca8lcskAjsFjoNiosJToubJxgK%2BB1I5%2FtKAff6DYIvoOo%2B%2FcAbIkswGkxu3W3qvnJYZoOf0%3D)中英文语言环境同一个符号也不同叫法别名，因此上面列举的词汇只能说涉及到了部分，并没有把所有 Dialect(方言) 包含进来。\n>\n> 注：`·` 符号在不同的上下文中有不同的叫法，比如“间隔号”、“中间点”、“项目符号”、“连子点”等，虽然肉眼看起来没有什么大的区别，但是在计算机中的 Unicode 编码是不一样的，更多参见[间隔符](https://link.segmentfault.com/?enc=STENo%2BrzOkZyEp%2FAgKZwYw%3D%3D.5GeyGZArq33ewuH8l%2BA9Tqgk0fxRV1%2B63cCElzq24xvnNpZkpYmovtUNhk%2FjQQ55h0bw%2B5ynrGnSibAp3IjdMA%3D%3D)\n\n# 时间、日期\n\n下面虽然列举了很多时间相关的词汇，但是在实际前端开发过程中用到的就年、月、日和时、分、秒、毫秒。\n\n```\ntime: 时间\ndate: 日期\nworkday: 工作日\nweekend: 周末\nseason: 季节\nanniversary: 周年\ncentury: 世纪；百年\nquarter: 一刻钟\nholiday: 节日；假日\nmorning: 上午\nnoon/midday: 中午\nafternoon: 下午\nnight: 晚上\nmidnight: 半夜\nyesterday: 昨天\ntoday: 今天\ntomorrow: 明天\nclock: 时钟\nnow: 现在；如今；立刻\nnowadays: 现今；时下\npresent: 现在（的）\nformer: 从前的；前任的\nbefore: 在...之前\nafter: 在...之后\nfuture: 将来\npermanent: 永久的；不变的\nperiod: 周期；期间；一段时间\nduring: 在...的期间；在...期间的某个时候\nterm: 学期；期限\nearly: 早期的，提早；在初期\nahead: 在前的；领先的；提前的\nlater: 后来；稍后；随后\nstart/begin: 开始\nend: 结束\npause: 暂停\nsuspend: 推迟；使暂停\ntimeout: 超时；暂时休息；工间休息\ninterval: 间隔\novertime: 超时的；加班的，加班时间\n```\n\n## 时间\n\n```\nyear: 年\nmonth: 月\nday: 日\nweek: 周\nhour: 小时\nminute: 分\nseconds: 秒\nmillisecond: 毫秒\n```\n\n## 星期\n\n```\nMonday: 星期一\nTuesday: 星期二\nWednesday: 星期三\nThursday: 星期四\nFriday: 星期五\nSaturday: 星期六\nSunday: 星期日\n```\n\n## 月份\n\n```\nJanuary: 一月\nFebruary: 二月\nMarch: 三月\nApril: 四月\nMay: 五月\nJune: 六月\nJuly: 七月\nAugust: 八月\nSeptember: 九月\nOctober: 十月\nNovember: 十一月\nDecember: 十二月\n```\n\n## 季节\n\n```\nspring: 春季\nsummer: 夏季\nautumn: 秋季\nwinter: 冬季\n```\n\n# 地理位置\n\n```\nmap: 地图\nlocation: 地理位置\nplace: 地方\nearth: 地球\nprovince: 省\ncity: 市\ndistrict: 区\narea: 区域、范围\nregion: 地区、范围、部位\naddress: 地址\nedges: 边界\nboundary: 边界；范围；分界线\ncoordinate: 坐标\neast: 东\nsouth: 南\nwest: 西\nnorth: 北\n```\n\n# 方位\n\n```\ndirection: 方向\nposition: 位置\ntop: 上\nright: 右\nbottom: 下\nleft: 左\nopposite: 对面的\ncenter: 中间（水平）\nmiddle: 中间（垂直）\n```\n\n# 排版\n\n```\nabstract: 摘要\nannex: 附录\nsuffix: 后缀；词尾\nprefix: 前缀\ntitl: 标题\nsummary: 总结；概要\nspecifications: 规范\nheadline: 大标题；内容提要；栏外标题\npreface: 前言；引语；序言\nchapter: 章；篇；回\nsection: 章节；部分\nabbreviation: 缩写；缩写词\n\nfont: 字体\ncolor: 颜色\nheading: 标题\nalign: 对齐\nalign left/align center/align right: 左对齐/居中对齐/右对齐\nalign top/align middle/align bottom: 顶对齐/垂直居中/底部对齐\ntext: 文本\nzoom: 放大\nsize: 大小\nopacity: 透明度\nposition: 位置\nrotation: 旋转\nfill: 填充\nshadow: 阴影\nblur: 模糊\nfilter: 滤镜\nradius: 圆角\nunite: 合并\nsubtract: 差集\nintersect: 交集\nexclude: 排除\njoin: 合并\ninsert image: 插入图片\ncode: 插入代码\nhighlight: 高亮\nstrikethrough: 删除线\nunderscore: 下划线\nitalic: 斜体\nbold: 粗体\nhorizontal line: 水平分隔线\nattach file: 附加文件\nchecklist: 清单列表\nbullet: 项目符号\nindention: 缩进\n```\n\n# 形状\n\n```\nfigure: 图形\nstroke: 描边\nfill: 填充\nborder: 边框\nline: 线\nrectangle: 矩形\nellipse: 椭圆\nsphere: 球\ntriangle: 三角形\nsector: 扇形\nannulus: 圆环\ntrapezium: 梯形\npolygon: 多边形\narch: 弓形\ncircle: 圆、循环、周期\nstar: 星形、评分\ncylinder: 圆柱\ncircle cone: 圆锥\nlove: 爱心\n```\n\n# 语法\n\n```\ngrammar: 语法\nsyntax: 句法\nmorphology: 词法\nstructure: 结构\nsentence: 句子\nclause: 从句\nphrase: 词组\nword: 单词\nadjective: 形容词\nverb: 动词\nnoun: 名词\nabstract noun: 抽象名词\npronouns: 代词\ndeterminer: 限定词\nconjunction: 连词\ninterjection: 感叹词\nadverb: 副词\npreposition: 介词；前置词\nderivative: 派生词\nnumeral: 数词\nauxiliary: 助动词\ntense: 时态\npassive: 被动语态\ngerund: 动名词\nantonym: 反义词\narticle: 冠词\nantecedent: 先行词\nregular/irregular verbs: 规则╱不规则动词\ntransitive/intransitive verbs: 及物╱不及物动词\nsubject: 主语\nobject: 宾语\npredicate: 谓语；表语\nadverbial: 状语\ncomplement: 补语\nappositive: 同位语\nadjunct: 修饰语\naffix: 词缀\nacronym: 首字母缩略词\nabbreviation: 缩写词\n```\n\n# 常用颜色\n\n```\npink: 粉红\nviolet: 紫罗兰\nmagenta: 洋红(玫瑰红)\npurple: 紫色\nblue: 纯蓝\nazure: 蔚蓝色\ncyan: 青色\ngreen: 纯绿\nlime: 闪光绿\nivory: 象牙色\nyellow: 纯黄\nolive: 橄榄\ngold: 金色\norange: 橙色\nsnow: 雪白色\nred: 纯红\nbrown: 棕色\nwhite: 纯白\nsliver: 银灰色\ngray: 灰色\nblack: 纯黑\n```\n\n# JavaScript 语言相关\n\n```\ntype: 数据类型\nprimitive type: 原始类型\nobject: 对象\narray: 数组\nstring: 字符串\nboolean: 布尔值\nsymbol: 符号\nundefined: 未定义\nnull: 空\nfunction: 函数\narray function: 箭头函数\ncurried function: 柯里函数\ncallback: 回调函数\nclass: 类\nmodule: 模块\nimport: 导入\nexport: 导出\nconstructor: 构造函数\nprototype: 原型\nreference: 引用\nclosure: 闭包\ndestructure: 解构\nvariable: 变量\nproperty: 属性\nattribute: 特性\niterator: 迭代器\ngenerator: 生成器\nyield: 产出\nobservable: 可观赛的\nhosit: 提升\noperator: 运算符\nequal: 相等\nstatement: 语句\nblock: 块\ncomment: 注释\nwhitespace: 空格\nevent: 事件\nlistener: 监听器\naccessor: 访问器\ndecorator: 装饰器\nproxy: 代理\nreflect: 反射\npromise: 承诺\ntest: 测试\nfetch: 拿；取\ndescriptor: 描述符号\nsync: 同步\nasync: 异步\nawait: 等候\nfind: 查找\nevery: 所有\nsome: 部分\nforeach: 为每一个\nmap: 遍历\nfilter: 过滤\npad: 填充\nindex: 索引\ndata: 数据\nslice: 把...分成部分\nsplice: 拼接，接合\nreduce: 归纳\npush: 推\npull: 拉\npop: 弹出\nsplit: 分离\njoin: 连接\nflatten: 变平\nreplace: 替换\nsearch: 搜索\nscope: 作用域\ntimeout: 超时\ninterval: 间隔\nvalue: 值\ndefine: 定义\nmath: 数学\nsum: 求和\nconfigurable: 可配置\nenumerable: 可枚举\nwritable: 可写\nlocal: 局部的\nglobal: 全局的\nnot: 非\nor: 或\nxor: 异或\nand: 且\nregexp: 正则表达式\nmatch: 匹配\npattern: 模式\ngreed: 贪婪\ncolor: 颜色\nrest: 剩余\nassign: 赋值\ntag: 标签\nbuffer: 缓冲区\nsuper: 极好的\nextend: 扩展\nreadonly: 只读\noverride: 重写\ndynamic: 动态的；多态\ndefault: 默认的\nimplement: 实现；执行\nstrict: 严格的\ndeprecate: 不推荐；反对\ntab: 制表符\nspace: 空格\nindentation: 缩进\npublic: 公共的\nprivate: 私有的\nnamespace: 命名空间\nmember: 成员\nmethod: 方法\nparameter/argument: 参数\ninstance: 实例\nternary: 三目运算\nliterary: 字面量\ntemplate: 模板\ncharacter: 字符\nmarkup: 标记\nsyntax: 语法\nequality: 相等\nconditional statements: 条件判断语句\ntrue: 是\nfalse: 否\ntype-checker: 类型检查\ncompile-time: 编译时\nlexical scope: 词法作用域\nstatic scope: 静态作用域\nloop: 循环\nnotation: 符号\noperand: 操作数；运算对象\nordinary object: 普通对象\nstandard object: 标准对象\nbuilt-in object: 内置对象\nexotic object: 外来对象\nlast-in/first-out manner: 后进先出的方式\nreserved word: 保留单词\nsignature: 签名\nenumerable: 可枚举的\niterable: 可迭代的\n```\n\n# 常用简写\n\n简写后面用 ”\\*“ 号标注的为推荐使用简写，可以放心大胆在项目中使用。\n\n```\nhd -> head\nhdr -> header\nbd -> body\nft -> foot\nftr -> footer\ntbl -> table\nel -> element **\ncnt -> content\ncmp -> component\nbtn -> button **\nsel -> select *\nopt -> option *\nchk -> checkbox\nlbl -> label\nwiz -> wizard *\nbg -> background **\ncur -> current **\nprev -> previous **\nidx -> index\nlen -> length **\npg -> page\nvm -> view page\nrepo -> repository *\norg -> organization *\nref -> reference *\nres -> response **\nreq -> request **\nmsg -> message **\nstr -> string **\nch -> chracter *\nlbl -> label\nimg -> image **\nbuf -> buffer *\nusr -> user\nargs -> arguments *\nno -> number\nerr -> error *\ntmp/temp -> temporary **\nrst -> result\nbdr -> border\nfn/func -> function **\nnav -> navigator *\nval -> value\nparams -> parameter *\ndev -> development *\nprod -> product *\nutil -> utility *\nhoc -> high order component *\ncb -> callback *\nlib -> library *\nprop(s) -> property(ies) *\nattr(s) -> attribute(s) *\narr -> array *\nconf -> config *\ndlg -> dialog\ne/ev/evt -> event **\npkg -> package *\ntpl -> template *\naddr -> address\ndesc -> descending\naesc -> aescending\nexpr -> expression **\nsrc -> source **\nhoz -> horizontal\nvert -> vertical\nabbr -> abbreviate\nenv -> envirnment **\nsec -> seconds *\nms -> millisecond **\nbool -> boolean *\ndbl -> double\n```\n\n# 常用词汇及其变体\n\n```\nactive -> inactive -> deactive\nload -> preload -> unload\ncoming -> incoming\nwith -> without\nsync -> async\nallowed -> unallowed\ngoing -> ingoing -> ongoing\nonline -> offline\nvisible -> invisible\nfinite -> infinite\nable -> enabled -> unable -> disabled\nlogin -> logout\nsingin -> signout\ncheck -> uncheck\nselect -> unselect\ninlet -> outlet\nregular -> irregular\nimplicit -> explicit\nimport -> export\nmicro -> macro\n```\n\n# 专用名词缩写\n\n```\nGUI -> Graphical User Interface 图形用户界面\nOEM -> Original Equipment manufacturer 原始设备制造商\nCMS -> Content Manager System 内容管理系统\nPWA -> Progressive Web App 渐近式Web应用\nSDK -> Software Development Kit 软件开发工具包\nIDE -> Integrated Development Envirnment 集成开发环境\nSOA -> Service-Oriented Architecture 面向服务架构\nORM -> Object Relation Mapping 对象关系映射\nMVC -> Model View Controller\nOOP -> Object Oriented programing 面向对象编程\nBEM -> Block Element Modifier 块-元素-修饰符\nBFC -> Block Format Context\nSKU -> Stock Keeping Unit 库存单位\nAJAX -> Asynchronous JavaScript and\nHOC -> High Order Component 高阶组件\nI18N -> Internationalization 国际化\nGUID -> Globally Unique Identifier 全球唯一标识符\n```\n\n# UI 组件相关\n\n参考 Element、Antd、Bootstrap 和 Material Design\n\n// 通用\n\n```\nHead: 标题\nLabel: 标签\nButton: 按钮\nIcon: 图标\nLink: 文字链接\nInput: 输入框\nCheckbox: 筛选框\nRadio: 单选框\nSelect: 下拉选择框\nSwitch: 开关\nUpload: 文件上传\nForm: 表单\nRadio: 音频\nVideo: 视频\nCanvas: 画布\n```\n\n// 布局\n\n```\nLayout: 布局\nGrid: 网格；栅格\nContainer: 布局容器\n```\n\n// 导航\n\n```\nAffix: 固钉\nBreadcrumb: 面包屑\nDropdown: 下拉菜单\nMenu: 导航菜单\nPagination: 分页\nPageHeader: 页头\nSteps: 步骤条\nNavMenu: 导航菜单\nMinimap: 小地图\n```\n\n// 数据录入\n\n```\nAutoComplete: 自动完成\nCascader: 级联选择框\nDatePicker: 日期选择框\nTimePicker: 时间选择框\nDateRangePicker: 日期区间选择框\nColorPicker: 颜色选择框\nInputNumber: 数字输入框\nMentions: 提及\nRate: 评分\nSlider: 滑动输入条；滑块\nTreeSelect: 树选择器\nTransfer: 穿梭框\nWizard: 向导\n```\n\n// 数据展示\n\n```\nAvatar: 头像\nBadge: 徽标数\nComment: 评论\nCollapse: 折叠面板\nCarousel: 走马灯；轮播\nCard: 卡片\nPanel: 面板\nCalender: 日历\nDescriptions: 描述列表\nEmpty: 空状态\nList: 列表\nPopover: 气泡卡片\nStatistic: 统计数值\nTree: 树形控件\nTooltip: 文字提示\nTimeline: 时间轴\nTag: 标签\nTabs: 标签页\nInfiniteScroll: 无限滚动\nChips: 芯片\nDialog: 对话框\n```\n\n// 反馈\n\n```\nAlert: 警告提示\nDrawer: 抽屉\nModal: 对话框\nMessage: 全局提示\nMessageBox: 弹框\nNotification: 通知提醒框\nProgress: 进度条\nPopconfirm: 气泡确认框\nResult: 结果\nSpin: 加载中\nSkeleton: 骨架屏\n```\n\n// 其它\n\n```\nAnchor: 锚点\nBackTop: 回到顶部\nDivider: 分隔线\nConfigProvider: 全局化配置\n```\n\n// Button 尺寸\n\n```\n// --------------------------------------------------------\nmini: 微型的；袖珍的\ntiny: 微小的；很少的\nmicro: 极小的；基本的；微小的；微观的\nsmall: 小\nmedium: 中等\nlarge: 大\nfixed: 固定宽度的\n```\n\n// Button 外观\n\n```\n// --------------------------------------------------------\ndefault: 默认的\nplain: 朴素的\nprimary: 主要的\ninfo: 信息的\nwarning: 警告的\nerror: 错误的\ndanger: 危险的\ngray: 灰色的\nlink: 带链接的\noutline: 带轮廓的\ndashed: 带虚线的\nround: 带圆角的\ncircle: 圆形的\nghost: 幽灵的\n```\n\n// 表单控件验证状态\n\n```\n// --------------------------------------------------------\nvalid: 有效的\ninvalid: 无效的\npending: 验证中\nrequired: 必填的\ndirty: 脏的\npristine: 干净的\n```\n\n# 代码常用词汇\n\n下面列出开发过种中经常使用的动词、名词、介词、形容词。这些词汇通常可以相互组合在特定上下文中适当变动可以覆盖工作中的绝大多数场景。\n\n// 动词\n\n```\non: 监听、正在进行中\nget: 取\nset: 设置\nfetch: 获取\nfind: 查找\nadd: 添加\ncreate: 创建\nremove: 移除\ndelete: 删除\nupdate: 更新\nupgrade: 升级\ndowngrade: 使降级\nsync: 同步\ntoggle: 切换\npull: 拉\npush: 推\nshow: 显示\nhide: 隐藏\nresolve: 解析；分解\nparse: 解析\nlock: 锁定\nlink: 连接\nmerge: 合并\nclose: 关闭\nclone: 克隆\nclear: 清除\nformat: 格式化\nconvert: 转变\ncancel: 取消\naccept: 承认；同意\ncheck: 检查，核对\nconcat: 合并数组、字符串\njoin: 合并\nsplit: 分开\nspread: 展开\nsearch: 搜索\nsort: 排序\nassign: 分配，指定\nhandle: 处理\ntrigger: 触发\nlogin: 登入\nlogout: 登出\nregister: 注册\nsign: 签名\nthrow: 抛出\nload: 加载\npreload: 加载\ncopy: 复制\npaste: 粘贴\nconnect: 连接\nchange: 改变\nselect: 选择\nvalidate: 验证\nsubmit: 表单提交\ncommit: 提交\nmatch: 匹配\nscroll: 滚动\nwrite: 写\nread: 读\nenable: 启用\ndisable: 禁用\nlimit: 限制\nbootstrap: 启动\ninit: 初始化\ninstall: 加载\nupload: 上传\ninject: 注入\nprovide: 提供\nexit: 退出\naccess: 访问\nflush: 刷新/使暴露\nrefresh: 刷新\nrelease: 发布\npreview: 预览；试映\npublish: 出版；发行\nnavigate: 导航；浏览\nredirect: 重定向\nback: 返回\nswitch: 切换\nlaunch: 加载\nbrowse/visit: 浏览\nappend: 追加\ninsert: 插入\nswap: 交换\nmap: 遍历\nextract: 提取；选取\nprovide: 提供\ninject: 注入\nobserve: 观察\nrender: 渲染\ndebug: 调试\nalign: 对齐\npopup: 弹出\ntransfer: 转让、迁移\nattach: 附加\nbuild: 构建\ndiagnose: 诊断，断定\nignore: 忽略\ndeploy: 部署；展开\nsend/sent: 送；寄出\ndefer: 推迟\ndelegate: 委托\ndestroy: 销毁\ndispatch: 派发；分派\ntrace: 追踪\n```\n\n// 名词\n\n```\navatar: 头像\nbrand: 品牌\nrecord: 记录\nissue: 问题\nproject: 项目\nrepo(repository): 仓库；知识库\necosystem: 生态系统\nassets: 资产\nresource: 资源\ntoolkit: 工具包、工具箱\nworkbench: 工作台\nitem: 项目；条款\noption: 选项\nfield: 字段\ntype: 类型\nstatus: 状态\nproperty: 属性\nattribute: 特性\nparameter/argument: 参数\nlength: 长度\nsize: 尺寸\nshape: 形状\nlabel: 标签\nvalue: 值\nview: 视图\npage: 页面\nenv(envirnment): 环境\ncontext: 上下文\ncount: 总数；计数\namount: 数量；数额\nsum: 合计；金额\nnum(number): 号码\ntotal: 总数\nmoney: 钱；货币\nfilter: 过滤器\npipe: 管道\nstream: 流\nbuffer: 缓冲器\ncomment: 评论\nref(reference): 引用\nres(response): 响应\nreq(request): 请求\nentity: 实体\nevent: 事件\nsetup 设置\nprefix 前缀\nsuffix 后缀\nwizard 小部件\nmodel 模型\nflag 标志\nfactory 工厂\nservice 服务\nconstant: 常量\nvar(iable): 变量\ncollection: 集合\narray: 数组\nraw: 原始值\nplatform 平台\ncapital: 大写字母\nuppercase/lowercase: 大/小写\nletter: 字母\nentrance: 入口\npath: 路径\nroute: 路由\nrouter: 路由器\nconfig: 配置\nmiddleware: 中间件\nsuccess: 成功\nerror: 错误\nfail(ure): 失败\nfrontend: 前端\nbackend: 后端\nlocal: 本地\nsever: 服务器\nproduction: 线上；产品\nborder: 边框\noutline: 轮廓\nprecision: 精度\nseparator: 分隔符\nmask: 遮罩\nmetadata: 元数据\nlocation: 位置\nsandbox: 沙箱\nscope: 作用域\nqueue: 队列\nheap: 堆\nnotice: 通知\nbubble: 气泡\nhooks: 钩子\ncell: 单元格\nrow: 行\ncolumn: 列\ngroup: 组\ncursor: 游标\npattern: 模式\nabstract: 抽象\ncompose: 复合；并集\ncallback: 回调函数\npriority: 优先级\ngrade/rank/hierarchy 等级、层级\ntable,chart, graph, diagram: 表格，图表，曲线图，图表\nsystem: 系统、体系\nguards: 保障、守卫\nsegment/fragment: 片段、碎片\nshaking: 抖动\nmix: 混淆\ndependence: 依赖\ninjection: 注入\nmarkup: 标记\nemail: 电子邮件\nversion: 版本\ndetail: 详情\nstub: 存根\nscore: 成绩\nbreakpoint: 断点\nrecord: 记录\npointer: 指针\nthumbnail: 缩略图\ngallery: 画廊\nviewport: 视口\nstrategy: 策略\noutlet: 出口\ninlet: 入口\ngist: 主旨；要点；依据\nlicence: 许可证\ncopyright: 版权\norder: 命令\ninput: 输入\noutput: 输出\neffect: 影响；效果；作用\nposition: 位置\ncorner: 角落\nanimation: 动画\ndot: 点\npalette: 调色板；颜料\nalbum: 相册\nphoto: 照片\nhost: 主机\nsession: 会话\ncookie: 饼干；小甜点\ndomain: 域名\ncertificates: 证书\ncoercion: 强制\npayload: 载物\nthread: 线程\nprocess: 进程\ntimestamp: 时间缀\nconflicts: 冲突\nterminal: 终端\nportrait: 肖像\nauxiliary: 附属物\nbackup: 备份\nbitmap: 位图\nbreakpoint: 断点\nconcurrency: 并发\nlock: 锁\ndigest: 摘要\nexception: 异常\ngenericity: 泛型\nhandle: 句柄\nmacro: 宏\nmanifest: 清单\nmodifier: 修饰字；修饰符\noverride: 覆写\noverload: 重载\nprocedure: 过程\nprotocol: 协议\nrecursion: 递归\nmarquee: 跑马灯\n\n// 形容词\nnative: 原生的\nhybrid: 混合的\nbasic: 基础的\ncomplex: 复杂的\nempty: 空的\nonline: 在线的\noffline: 离线的\npublic: 公共的\nprivate: 私有的\nstatic: 静态的\ndynamic: 动态的\nshared: 共享的\nsafe: 安全的\nrelative: 相对的\nabsolute: 绝对的\noriginal: 原始的\ninfinite: 无限的\npartial: 局部的\nascending: 按升序\ndescending: 按降序\nprimary: 原始的，第一的\nsecondary: 第二的\ntertiary: 第三的\ndeprecated: 弃用的\nconcrete: 具体的\nabstract: 抽象的\nexplicit: 显示的；明确的\nimplicit: 含蓄的；暗示的\nmutable: 可变的\n```\n\n# 业务常用词汇\n\n# 电商\n\n```\ncoupons: 优惠券\ncouponsCode: 优惠码\ndiscount: 折扣\npoints: 积分\nmemeber: 会员\nvip: 会员\nmembership: 会员\ndelivery: 运费\ndomain: 域名\ndashboard: 仪表盘\nstore: 门店\nshop: 店铺\nproduct: 产品\ngoods: 商品\norder: 订单\nsetting: 设置\nmanager: 管理\nchannel: 渠道\nnotFound: 404页面\nfeedback: 反馈\nscratch: 刮刮卡\nclient: 客户端\nmarket: 市场\npromotion: 促销\npopularize: 推广\ntool: 工具\nbanner: 广告\nfriendlink：友情链接\npartner： 合作伙伴\nvote: 投票\n```\n\n# 技术文章阅读常用词汇\n\n// 副词\n\n```\napproximately: 大约；近似地；近于\nindirectly: 间接地；迂回地\ninevitably:不可避免地；必然地\nrepeatedly: 反复地；再三地\ndefiantly: 挑战地；对抗地\n```\n\n// 形容词\n\n```\ngeneral: 一般的；普通的；大体的\npartial: 局部的\nwell-formed：符合语法规则的\nappropriate: 适当的；恰当的；合适的\nreasonable: 合理的；公道的\nnon-trivial: 非平凡的\nconditional: 有条件的；假定的\ndisheartened: 沮丧的；灰心的\nunmotivated: 对（工作等）不感兴趣的；没有理由的\nterse: 简洁的；精练的；扼要的\nchaotic: 混沌的；混乱的，无秩序的\neffective: 有效的\ndiscursive: 离题的；东拉西扯的；无层次的\nimpressive: 感人的；令人钦佩的；给人以深刻印象的\nerror-prone: 于出错的\nweird: 怪异的；不可思议的；超自然的\nhypothetical: 假设的；假定的\ntricky:  狡猾的；机警的；棘手的\n```\n\n事件\n\n```\nOnmouseover 鼠标移到目标上；鼠标移进时\nOnclick 鼠标单击\nOnmouseout 鼠标移出时\nonkeyup 键抬起时\nonkeydown 键按下时\nblur vt. 涂污；使…模糊不清；使暗淡；玷污n. 污迹；模糊不清的事物\nonblur 失去焦点,数组常用方法\npush 推动，增加；对…施加压力，逼迫；按；说服\nfilter “n. 滤波器；[化工] 过滤器；筛选；滤光器vt. 过滤；渗透；用过滤法除”\n```\n\n运算单词\n\n```\nplus（表示运算）加;加的; 正的; 附加的; 比所示数量多的;\nminus（表示运算）减去; 减号; 负号; 不利; 不足;\nmultiply 乘; （使）相乘; （使）增加; （使）繁殖;\nquotient 商，商数，系数\ndivide(by) 分开，除\n\nDOM操作部分\nreplace vt. 取代，代替；替换，更换；归还，偿还；把…放回原处\nNode n. 节点；瘤；[数] 叉点\nElement n. 元素；要素；原理；成分；自然环境\nparentNode 父节点\nchildNodes 子节点\nnextSibling 下一个兄弟节点\nprevious adj.以前的; 先前的; 过早的; （时间上） 稍前的;\npreviousSibling 上一个兄弟节点\npreviousElementSibling 上一个兄弟元素\nnextElementSibling 下一个兄弟元素\nfirstChild 第一个子节点\nlastChild 最后一个子节点\nfirstElementChild 第一个子元素\nlastElementChild 最后个子元素\ninnerText 底层模板, 内部的纯文本, 元素文本\nappend vt.附加; 添加; 贴上; 签（名）\nappendChild 方法, 添加节点方法\nremoveChild 去除节点方法\ncreateElement 创建元素\nattribute n. 属性；特质\nsetAttribute 设置属性\ngetAttribute 获取属性\nremoveAttribute 移除属性\n```\n\n熟悉部分\n\n```\narea 地区; 区域，范围; 面积，平地; 领域;\nperimeter <数>周长; 周围，边界;\nmeter “米, 公尺#计量器, 仪表; 计量官; 计量监督员”\nradius 半径（距离）; 用半径度量的圆形面积; 半径范围; 桡骨;\ndifference 差别，差异; [数]差数，差额; 意见分歧; 特色;\nproduct 产品; 结果; 乘积; 作品;\ndestination 目的，目标; 目的地，终点;\nObject n. 目标；物体；客体；宾语\nModel n. 模型；典型；模范；模特儿；样式\ninstance n. 实例；情况；建议\ninner adj. 内部的；内心的；精神的\ntransparent adj. 透明的；显然的；坦率的；易懂的\n```\n\n了解部分\n\n```\nselected 挑选出来的\nchecked 检查;选中的；\ncurrent 现在的；流通的，通用的；最近的；草写的\n```\n\n常用数组方法\n\n```\nsort vt. 将…分类；将…排序；挑选出某物\nshift 改变; 去掉; 摆脱掉; 换挡;\nunshift 松开打字机或键盘的字型变换键;方法将元素插入到一个数组的开始部分\nreverse 颠倒；倒转\nconcat 合并多个数组；合并多个字符串\nslice 切成片; 切下; 划分;\nsplice 拼接；接合；使结婚\nsource n.根源，本源; 源头，水源; 原因; 提供消息的人; 英 [sɔːs]  美 [sɔrs]\n```\n\n常用的日期函数\n\n```\ngetTime 取得系统时间\ngetMilliseconds 取得 Date 对象中的毫秒字段\ngetSeconds 返回时间的秒\ngetMinutes 返回时间的分钟数\ngetHours 返回时间的小时字段\ngetDay 返回一周的某一天数字\ngetDate 返回月份的某一天\ngetMonth 取得 Date 对象中表示月份的数字\ngetFullYear 返回当前Date对象中的年份值\n```\n\n常用方法\n\n```\ntrim 会从一个字符串的两端删除空白字符\nsplit 用于把一个字符串分割成字符串数组\nforEach 为每一个遍历，循环\nmap 地图，天体图; 类似地图的事物;\nindexOf 查找字符或者子串第一次出现的地方,\nlastIndexOf 查找字符或者子串是后一次出现的地方\nevery 每个; 每; 所有可能的; 充足的;\nsome 一些; 某个; 大约; 相当多的;\nceil vt. 装天花板，装船内格子板;\n```\n\nBOM\n\n```\nwindow n. 窗口; 窗，窗户;\nsetTimeout 法用于在指定的毫秒数后调\n```\n\n用函数或计算表达式\n\n```\ninterval n. 间隔; 幕间休息; （数学） 区间;\nsetInterval 设置时间间隔, 按照指定时间周期调用函数或计算表达式, 循环\nhistory n. 历史，历史学；历史记录；来历\nlocation n. 定位; 位置，场所; 外景（拍摄地）;\n```\n\n掌握部分\n\n```\npath n. 小路，路; 路线，路程; 〈比喻〉（人生的）道路; （思想，行为，生活的） 途径;\nport n. 港口; （事情的） 意义; （计算机与其他设备的） 接口; （船、飞机等的） 左舷;\nprotocol n. 礼仪; （外交条约的） 草案; （数据传递的） 协议; 科学实验报告（或计划）;\nnavigator n. 领航员; 航海家，航行者，航海者; （船舶，飞机的） 驾驶员; 一个浏览器的品牌;\nagent n. 代理人; 代理商; 特工; 药剂; 英\nuseragent 用户代理, 代理程式识别码\nback vt. 使后退; 支持; 加背书于; 下赌注于;vi. 后退; 倒退;\noffset vt. 抵消; 补偿; （为了比较的目的而）把…并列（或并置） ; 为（管道等）装支管;\nstep n. 步，脚步; 步骤，手段; 步调; 级别;\nanimate vt. 使有生气; 驱动; 使栩栩如生地动作; 赋予…以生命;\nExtensible adj. 可展开的，可扩张的，可延长的;\n```\n\njs API\n\n```\nclient n. 顾客; 当事人; 诉讼委托人; [计算机] 客户端;\nresize vt. 调整大小\noffsetHeight 网页内容实际高度\nmath n. 数学\ngetComputedStyle 可以获取当前元素所有最终\n```\n\n使用的 CSS 属性值\n\n常用部分\n\n```\ncompute vt. 计算；估算；用计算机计算\ncomputed v. 计算，估算\ncomputer n. （电子） 计算机，电脑;\nfloor n. 地板，地面；楼层；基底；议员席\nmode n. 模式；方式；风格；时尚 英\ncompatMode 兼容模式；\ndocument.compatMode(判断当前浏览器采用的渲染方式)\nresponsive adj.应答的，响应的; 反应灵敏的; 共鸣的; 易反应的;\ntablet 药片,小块 .碑，匾; 便笺簿,平板电脑\nwrap n. 膝毯，披肩，围巾，围脖，头巾，罩衫，外套，大衣; 包装纸;\nslide n. 滑动；幻灯片；滑梯；雪崩 英\nassign vt. 分配；指派；计 赋值 英[ə\ninsert vt. 插入; 嵌入; （在文章中） 添加; 加\nbefore prep. 在…之前; 先于，优于; 当着…的面; 与其…;\n```\n","source":"_posts/📣-前端常用命名.md","raw":"---\ntitle: \"📣-前端常用命名\"\ndate: 2021-11-03\ntags: \n- 开发日常\n---\n## 背景\n\n在编码的过程中变量命名是一个容易忽略，又容易犯头疼的问题。例如在复杂的页面布局中 Class 的命名，同样一个结构在不同的上下文要表达的意思不一样，是采用通用命名呢？还是采用更具有描述性的业务相关词汇？但是呢还需要考虑到样式的复用、是否会冲突、被覆盖、组合命名的长度是否太长等问题。\n\n在实际工作中，每个人都有自己命名风格和惯用词汇，有的喜欢使用英文简写、有的喜欢使用中英文结合、有的喜欢给变量加数据类型前缀、有的喜欢乱造词汇、有的甚至单词都拼写不正确。在看别人代码的过程中你是否像我一样无语，但也只能截图指出并吐槽二下，有些时候对方并不买单，改正。\n\n每次到换工作的时候就更新博客，7 月下旬的高温天气就适合在家里码字，这次选择这个话题的原因是目前在网上还没有相关的文章来系统全面的论述有前端关代码变量命名的资料。Java 有《码出高效 - 阿里巴巴 Java 开发手册 终级版》，而前端这方面目前还是一个空白，虽然有很多代码规范，但是很少有人愿意在这方面去花心思，更多的是研究框架的源码、数据结构与算法和尝试新的技术，本人由于大脑开发有限、没有能力去啃这些骨头，只好捡一些很少有人去碰触的简单不费脑的知识点来考究一二，希望也能为前端的生态做出一点小贡献。\n\n# 命名规则\n\n目前流行的经典命名规则有：**驼峰命名法、匈牙利命名法、下划线命名法、\\*\\***帕斯卡命名法\\*\\*\n\n相关命名的具体规则请另行查阅。前端主要涉及到驼峰命名法，React 组件会用到**帕斯卡命名法。**\n\n然后是变量命名规则：\n\n- 变量名首字母必须为字母(a-z A-Z)，下划线(\\_)，或者美元符号($)开始\n- 变量名只能是字母(a-z A-Z)，数字(0-9)，下划线(\\_)的组合，并且之间不能包含空格，数字不能放在变量名首位。\n- 变量名不能使用编程语言的保留字。比如在 javascript 中不能使用 true, false, while, case, break 保留字等等。\n\n# 命名风格\n\n这里给出一些在开发过程中约定成俗的通用规则，涉及 JavaScript, Typescript, 框架组件, 样式及目录。在文章中将使用*【强制】来*表示必须严格遵守，*【推荐】*来表示建议*，【参考】*来给出多种命名方式的一种。\n\n**1. 【强制】在 JavaScript 中使用驼峰命名法来表示变量，不能以下划线或美元符号作为开始和结束。**\n\n```\n// 反例\n_name\n__name\nname_\n$name\nname$\n```\n\n> 补充：由于受框架和第三方库及语言限制，不可能完全避免。例如：在 RxJs 中通常命名流的时候是以 `变量名 + $` 的形式，在 Class 中定义私有变量时通常以 `_ + 变量名` 的方式来表示，在 Vue 中内部实例方法全部以 `$` 开始，在 AngularJs 中内部方法以 `$$` 开始，而 lodash 直接使用 `_` 作为其别名。\n\n**2.** 【**强制】在代码中严禁使用拼音与中英文混合的方式，更不允许直接使用中文的方式。除了一些国际通用的中文名称，要视为英文外，其它禁止使用。**\n\n```\n// 正例\ntaobao\ntmall\nshanghai\ncoupons\n```\n\n```\n// 反例\nyhq [优惠券]\n```\n\n**3. 【强制】类名使用大写驼峰命名法来表示，Typescript 中枚举值使用大写驼峰命名法表示。**\n\n```\n// 正例\nclass User {}\nenum Color {Red = 1, Green, Blue}\n```\n\n```\n\nclass user {}\n```\n\n**4. 【强制】常量名全部大写，单词间使用下划线隔开，力求表达完整清楚，不要嫌名字长。**\n// 正例\n\n```\nGOOGLE_MAP_TOKEN\n```\n\n// 反例\n\n```\nTOKEN\n```\n\n**5. 【建议】Typescript 中抽象类使用 `Abstract` 或 `Base` 开头；异常类使用 `Exception` 结尾。**\n\n```\nabstract class BaseDepartment {}\n```\n\n**6. 【建议】在 TypeScript 中，类型使用 `Type` 作后缀，接口使用 `I` 作为前缀。**\n\n```\ntype PropsType = {}\ninterface ILoginProps {}\n```\n\n**7. 【建议】 采用有意义的命名，在项目中坚持使用一种变量命名方式。不要 `usr` 与 `user` 混用**\n\n// 正例\n\n```\nusers\ngetUserByUid()\n```\n\n// 反例\n\n```\nregisterUsr()\ncopyUserInfo()\n```\n\n**8. 【建议】方法名必须准确表达该方法的行为，在多数情况下以动词开头**\n\n// 正例\n\n```\nfetchCoupons()\nupdateToken()\ncreateAccount()\ngenerateUniqueId()\n```\n\n// 反例\n\n```\ngetData()\n```\n\n**9.【建议】可以使用单词简写，但是只局限于常用词汇，注意不同词汇的简写有可能冲突**\n    // 正例\n\n```\nsetProps() [props -> property]\nselectCouponsDlg() [dlg -> dialog]\nreadPkg() [pkg -> package]\npreviewTpl [tpl -> template]\n```\n\n// 反例\n\n```\nvehicleDesc [desc -> description]\nvehicleDesc [desc -> descending]\nvehicleAesc [aesc -> aescending]\nfetchUsr() [usr -> user]\n```\n\n**10. 【建议】在 Vue 和 Angular 中，模板语法中所有组件名使用中线命名法，在 React 中使用大写驼峰命名法来表示**\n\n```\n// Vue\n<el-button type=\"text\" @click=\"toDetail\">详情</el-button>\n<custom-component a-prop=\"prop\" />\n\n// Angular\n<nz-sider [nzWidth]=\"200\" style=\"background:#fff\"></nz-sider>\n\n// React\n<SelectPicture data={this.images} />\n\n```\n\n**11. 【推荐】统一使用中线命名法来命名目录。**\n\n```\n|-- page-header |  |-- PageHeader.vue\n```\n\n**12. 【参考】在 Vue 模板语法中组件属性使用连字符命名法，在 Vue 中使用 JSX 则属性使用驼峰命名法，并且文件文以”.jsx”为文件类型。**\n\n```\n<Thumbnail\n  withHeadPicture={true}\n  data={this.selectedImages[0]}\n  withDetail={this.enabledDetail}\n/>\n```\n\n**13. 【强制】在服务名上使用 `Service` 后缀**\n\n```\nclass UserService {}\n```\n\n**14. 【建议】在 Vue 中组件文件名采用大写驼峰命名方式，React 同样如此，在 Angular 中以使用点和横杠来分隔文件名，并且符号名后面追加约定的类型后缀。**\n\n```\n// Vue\nUser.vue\n\n// Angular\napp.component.ts\nhero-list.component.ts\nvalidation.directive.ts\napp.module.ts\nuser-profile.service.ts\n\n// React\nUser.jsx\n```\n\n**15. 【参考】在 React 中使用目录名称作为组件名，在目录内容直接使用*index*作为入口，在 Vue 中不可以，在 Angular 中可以将*index*作为模块的入口，当然也可以直接作为组件的入口，但这样和其整个命名风格有所背离。**\n\n```\n// Vue\n|-- user-info |  |-- UserInfo.vue\n\n// Angular |-- user-info |  |-- user-info.component.ts |  |-- index.ts\n\n// React |-- user-info |  |-- index.jsx\n```\n\n**16. 【建议】在工程中文档使用全大写命名**\n\n```\nREADME.md\nCONTRIBUTORS.md\nCHANGELOG.md\n```\n\n**17. 【建议】在 Vue 中指令命名使用 `filter` 作为结束。所有引用命名使用 `ref` 作为后缀**\n\n```\nformatCouponsFilter\ninputRef\nselectRef\n```\n\n**18. 【强制】测试文件以 `.spec` 或者 `.test` 作为命名的一部分。**\n\n```\nselectPicture.spec.js\npageHeader.test.js\n```\n\n**19. 【建议】复数化变量名称，而不是命名中包含集合类型名称。**\n\n```\n// 正例\nhosts\nusers\nvalidUsers\nhostText\nhostJson\nportNumber\n```\n\n```\n// 反例\nhostList\nuserList\nhostStr\nintPort\n```\n\n**20. 【建议】在 `for` 循环中使用 `i, j, k` 来作为索引，使用 `n` 表示数量/次数/限制，使用 `e` 表示异常, 使用 `evt` 表示事件对象, 使用 `cb` 表示回调函数**。\n\n```\nfor (let i = 0; i < 10; i++) {\n  for (let j = 0; j < 10; j++) {\n    for (let k = 0; k < 10; k++) {\n      // do something\n    }\n  }\n}\n```\n\n**21. 【强制】在解构时使用 `const` 来声明。**\n\n```\nconst [ foo, bar ] = { foo: 1, bar: 2 }\n```\n\n**22. 【建议】在样式中 Class 命名可以使用一些常用简写来减少长度。**\n\n```\nhd -> head\nhdr -> header\nft -> foot\nftr -> footer\npg -> page\nbtn -> button\ntxt -> text\nel -> element\nopt -> option\nbd -> border\ncl -> clearfix\np -> padding\nm -> margin\nl -> left\nr -> right\nt -> top\nb -> bottom\nx -> horizontal\ny -> vertical\npx -> padding-left, padding-right\npy -> padding-top, padding-bottom\npl -> padding-left\nm -> margin\ndlg -> dialog\nsel -> select\nimg -> image\nlbl -> label\nchk -> checkbox\ntpl -> template\ntbl -> table\nhoz -> horizontal\nvert -> vertical\nref -> reference\nwiz -> wizard\noh -> overflow: hidden\n```\n\n> 补充：有些简写不能单独使用，终须组合才能使用，例如: `p`, `m`, `x`, `y`等单个词汇。\n\n**23. 【建议】在命名时采用 BEM 的方式，并适当变化，具体参见后续文章。**\n\n```\n.page-header__main\n.dialog__content\n.gallery-list--wrap\n.thumbnail-image--info\n.action__btn-group\n```\n\n**24. 【建议】样式 Class 命名使用中线连接，ID 命名采用下划线连接。Class 可以同时采用中线和下划线，但要遵循一定的规则。**\n\n```\n.thumbnail-item-image\n#page_header\n```\n\n**25. 【参考】样式 Class 采用组合方式，通过外层 Class 名来限制作用范围。**\n\n```\n// 正例\n<div class=\"page-header\">\n  <div class=\"page-header__wrap common\"></div>\n  <div class=\"page-header__wrap tab\"></div>\n</div>\n\n// 反例\n<div class=\"page-header\">\n  <div class=\"page-header__wrap page-header--common\"></div>\n  <div class=\"page-header__wrap page-header--tab\"></div>\n</div>\n```\n\n> 补充：这种方式的目的在于减少长度，通过 \"主体 + 分类名词\" 的方式，可以解释为 “带分类的主体”，但是有一个问题是全局样式要注意不要使用通用的词汇来定义样式，比如 `title`, `action`, `header`, `footer`, `left`, `right`等，不然会引起样式覆盖。\n\navaScript 作为前端开发从业人员必须掌握的 3 大基础知识中最重要的一环，也是平是接触时间最长、写得最多的。在开发过程中必然会遇到命名的问题，你会词穷、纠结、惆怅吗？本文的出现相信能够解决大部分烦恼，让你轻松写出符合规范、易读、简短的代码。\n\n本文将通过大量的实例来试图自圆其说，形成一套系统化、实用的变量命名理化体系。通过按 JavaScript 的数据类型分类着手、细到一个函数的参数命名，并提供众多可选方案，并尽量给出其适用范围和利弊。\n\n> 需要注意的是由于个人写作水平、和知识有限，很多方面叙述上有些生硬，在分类上也没有什么特别的依据，文章也没有人审稿，所以有什么纰漏还请留言告知。由于写作仓促，内容可能不全，后续会随着工作和学习的深入而不断地调整和更新。\n\n# 布尔值(Boolean)命名\n\nBoolean 值是两种逻辑状态的变量，它包含两个值：**真**和**假**。在 JavaScript 中对应 `true` 和 `false`，在实践中通常使用数字`1`表示真值，`0`来表示假值。\n\n虽然 Boolean 的状态只有两种但是在命名时可以进一步分类，这里给出几种场景：\n\n## 场景一：表示可见性、进行中的状态\n\n**解释**：**可见性**在通常指页面中的元素、组件是否显示（或者组件挂载到 DOM 上，但并不可见）。**进行中**主要是说明某种状态是处于持续进行中。\n\n推荐命名方式为 `is + 动词（现在进行时）/形容词`，同时这种方式也可以直接不写 `is`，但是为了更好的作区分，建议还是加上。\n\n```\n{\n  isShow: '是否显示',\n  isVisible: '是否可见',\n  isLoading: '是否处于加载中',\n  isConnecting: '是否处于连接中',\n  isValidating: '正在验证中',\n  isRunning: '正在运行中',\n  isListening: '正在监听中'\n}\n```\n\n> **注意**： 在 Java 中使用这种方式是有一定副作用的，为什么请移步：[为什么阿里巴巴禁止开发人员使用 “isSuccess” 作为变量名？](https://link.segmentfault.com/?enc=8r%2BGGCeC9VWmfQ%2BVLEFhwg%3D%3D.05DmwxjFVBpEhcTgoDetMN8i3JOhj6QhBxIW%2FJ8tUPqcX8rQBo9XhQPaZlhW1A08)\n\n## 场景二：属性状态类\n\n**解释**：通常用来描述实体（例如：HTML 标签、组件、对象）的功能属性，而且定法比较固定。\n\n```\n{\n  disabled: '是否禁用',\n  editable: '是否可编辑',\n  clearable: '是否可清除',\n  readonly: '只读',\n  expandable: '是否可展开',\n  checked: '是否选中',\n  enumberable: '是否可枚举',\n  iterable: '是否可迭代',\n  clickable: '是否可点击',\n  draggable: '是否可拖拽'\n}\n```\n\n## 场景三：配置类、选项类\n\n**解释**：主要是指组件功能的开启与关闭，功能属性的配置。\n\n这是一种比较常见的情景，目前命名方式也有很多种，但是归纳起来也不多。推荐使用 `withXx` 来表示组件在基本功能形态外的其它功能，比如组件的基础功能到高级功能的开启；使用 `enableXx` 来表示组件某些功能的开启；使用 `allowXx` 来表示功能属性的配置；使用 `noXx` 用于建议功能使用者这个不建议开启。\n\n```\n{\n  withTab: '是否带选项卡',\n  withoutTab: '不带选项卡',\n  enableFilter: '开启过滤',\n  allownCustomScale: '允许自定义缩放',\n  shouldClear: '是否清除',\n  canSelectItem: '是否能选中元素',\n  noColon: '不显示label后面的冒号',\n  checkJs: '检查Js',\n  emitBOM: 'Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.'\n}\n```\n\n> **注意**：如果嫌分类太多，可以只使用其中一种方式，比如在 Typescript 中使用了 `allownXx` 和 `noXx`。\n\n除了上面这些带有特定的前置介词、动词方式外还有一些在语义上带有疑问性质的组合通常也是作为 Boolean 命名的一种参考。\n\n```\n{\n  virtualScroll: '是否启用虚拟滚动模式',\n  unlinkPanels: '在范围选择器里取消两个日期面板之间的联动',\n  validateEvent: '输入时是否触发表单的校验'\n}\n```\n\n# 函数命名\n\n函数在不同的上下文中的叫法也不一样，在对象中称为方法，在类中有构造函数、在异步处理时有回调函数，还有立即执行函数、箭头函数、柯里函数等。\n\n函数命名的方式常常是和业务逻辑耦合在一起的，但是在命名规则上也有一些常见的模式可以遵循。\n\n## 场景一：事件处理\n\n事件处理函数是前端平时用到最多的，包括浏览器原生事件、异步事件和组件自定义事件。在写法上最常见的两种命名分别为 `onXx`、`onXxClick`和`handleXx`、`handleXxChange`。\n\n这里如何在二者之间选择，可以从二方面来归类。一是，原生事件采用 `onXx`，而自定义事件使用 `handleXx`。二是，事件主动监听采用 `onXx`，被动处理使用 `handleXx`。\n\n从实践及三大主流框架的文档关于事件部分的内容来看，推荐使用 `handleXx` 这种方式，而在表单提交的时候通常采用 `onSubmit` 函数。\n\n其实，在实际项目中很少严格这样来命名事件处理函数，因为这种方式有一定的局限性，比如点击按钮打开一个对话框，使用 `handleOpenDlg` 和 `onOpenDlg` 都没有直接写 `openDlg` 方便，如果页面有多个不同功能的对话框采用这种方式会显得变量名过长，而 handle 和 on 就显得没有必要了，比如 `hanldeOpenCommentDlg` 就没有 `openCommentDlg` 直白。\n\n下面列出了一些约定成俗的适用例子：\n\n```\n{\n  onSubmit: '提交表单',\n  handleSizeChange: '处理分页页数改变',\n  handlePageChange: '处理分页每页大小改变',\n  onKeydown: '按下键'\n}\n```\n\n## 场景二：异步处理\n\n这里主要是指在写数据层服务、状态管理中的 Action 命名，以及 Ajax 回调的命名规则。\n\n```\n{\n  getUsers: '获取用户列表',\n  fetchToken: '取得Token',\n  deleteUser: '删除用户',\n  removeTag: '移除标签',\n  updateUsrInfo: '更新用户信息',\n  addUsr: '添加用户',\n  createAccount: '创建账户'\n}\n```\n\n命名主要围绕数据的增删查找来划分，获取数据通常是 `getXx` 和 `fetchXx`，在作者看来两者在使用上的区分在于 `getXx` 的数据来源不一定直接取自异步的原始数据，可能是加工处理后的，而 `fetchXx` 是直接拿的原始数据。当然在实际项目中并没有区分，看个人喜好。\n\n`deleteXx` 主要用于数据删除，而 `removeXx` 在语义上是移除数据，通常情况数据是还存在的，只是没有显示或数据假删除。`updateXx` 是指数据更新操作，`addXx` 是在已有列表数据中添加新的子项、而`createXx` 主要是创建新的实例，比如新建一个账户。\n\n## 场景三： 跳转路由\n\n在实际开发过种中，比如在使用 react-router/vue-router 时，在模板或者 JSX 中可以直接在标签中写上目标地址，但有些时候跳转的目标地址是经过判断或者组合后的，并且通过事件触发跳转的，这个时候就需要一个函数来处理，那么在函数命名的时候可以考虑使用\n\n```\n{\n  toTplDetail: '跳转到模板详情页面',\n  navigateToHome: '导航到首页',\n  jumpHome: '跳转首页',\n  goHome: '跳转首页',\n  redirectToLogin: '重定向到登录页',\n  switchTab: '切换Tab选项卡',\n  backHome: '回到主页'\n}\n```\n\n推荐使用 `toXx` 和 `goXx` 这两种方式，如果不是在当前页面打开/跳转页面，可以使用 `toBlankTplDetail` 或者 `goBlankHome` 这种方式来进一步语义化。如果前端页面是位于 Webview 中，也可以考虑采用 `toNativeShare` 这种方式来命名。\n\n## 场景四：框架相关特定方法\n\n这里主要是针对前端 3 大主流流行框架，有一些命名是带有特定标识符的，还有就是一些生命周期的命名方式。\n\n```\n{\n  formatTimeFilter: '在AngularJs和Vue中，通常用于过滤器命名',\n  storeCtrl: '用于AngularJs定义控制器方法',\n  formatPipe: '用于Angular中，标识管道方法',\n  $emit: 'Vue中的实例方法',\n  $$formatters: 'AngularJs中的内置方法',\n  beforeCreate: 'Vue的生命周期命名',\n  componentWillMount: 'React生命周期命名',\n  componentDidMount: 'React生命周期命名',\n  afterContentInit: 'Anuglar生命周期命名',\n  afterViewChecked: 'Angula生命周期命名',\n  httpProvider: 'AngularJs服务',\n  userFactory: '工厂函数',\n  useCallback: 'React钩子函数'\n}\n```\n\n## 场景五：数据的加工\n\n这类场景在处理列表的时候经常会碰到，比如排序、过滤、添加额外的字段、根据 ID 和索引获取特定数据等。\n\n### 情形一：根据特定属性获取属性\n\n这里可以参考 DOM 方法的命名，比如：`getElememtById()`、`getElementsByTagName()`、`getElementsByClassName()` 和 `getElementsByName()`，然后提炼出一个比较实用的模板：`getXxByYy()`。其中 `Xx` 可以是：`element`, `item`, `option`, `data`, `selection`, `list`, `options` 以及一些特定上下文的名字，比如：`user(s)`, `menu(s)` 等。`Yy` 相对来说比较固定，经常用到的就是 `id`, `index`, `key`, `value`, `selected`, `actived` 等。\n\n除了使用 `get`，还可以使用 `query` 和 `fetch`，但是需要注意和上面提到的异步数据处理作一个区分。\n\n```\n{\n  getItemById: '根据ID获取数据元素',\n  getItemsBySelected: '根据传入的已选列表ID来获取列表全部数据',\n  queryUserByUid: '根据UID查询用户'\n}\n```\n\n注意：在 `getItemsBySelected` 这种情形下直接写成 `getItemsSelected` 更好，但只适用于 `Yy` 为形容词的场景\n\n### 情形二：格式化数据\n\n这里的格式化操作包括排序、调整数据结构、过滤数据、添加属性。命名通常使用 `formatXx`, `convertXx`, `inverseXx`, `toggleXx`, `parseXx`, `flatXx`, 也可以结合数组的一些操作方法来命名，比如 `sliceXx`, `substrXx`, `spliceXx`, `sortXx`, `joinXx` 等来命名。\n\n```\n{\n  formatDate: '格式化日期',\n  convertCurrency: '转换货币单位',\n  inverseList: '反转数据列表',\n  toggleAllSelected: '切换所有已选择数据状态',\n  parseXml: '解析XML数据',\n  flatSelect: '展开选择数据',\n  sortByDesc: '按降序排序'\n}\n```\n\n# 数组命名\n\n数组的命名推荐使用复数形式来命名，还有就是名词和具有列表意思的单词组合。常见的词汇有 `options`, `list`, `maps`, `nodes`, `entities`, `collection` 等。\n\n```\n{\n  users: '用户列表',\n  userList: '用户列表',\n  tabOptions: '选项卡选项',\n  stateMaps: '状态映射表',\n  selectedNodes: '选中的节点',\n  btnGroup: '按钮组',\n  userEntities: '用户实体'\n}\n```\n\n# 选项元素、下拉元素命名\n\n主要针对的是在下拉选择框、选项卡元素、Radio、Checkbox 等数据源每个选项数据的命名。常见的词汇有：`title`, `name`, `key`, `label`, `field`, `value`, `id`, `children`, `index`, `nodes` 等。\n\n基中 `title/name/key/label/field` 作为选项显示名, `value/id` 用于唯一标识选项，`children/nodes` 用于包含子节点内容。如果选项元素的语义很明确的情况下也可以直接使用特定单词来代替提到的这些泛指的词汇，例如菜单列表就可以使用 `menu` 来作为显示名。\n\n// 最常见组合\n\n```\n{\n  title: '标题',\n  value: 'ID值'\n}\n\n// 组合二\n{\n  label: '标签名',\n  value: 'ID值'\n}\n\n// 组合三\n{\n  name: '元素名',\n  id: 'ID值'\n}\n\n// 组合四\n{\n  field: '字段',\n  value: '标识',\n  index: '索引'\n}\n```\n\n# 当前选项、激活项命名\n\n适用列表的选中项、菜单选中项、步骤操作的当前进行步骤、页面路由当前路由等的命名。\n\n```\n{\n  activeTab: '当前选中选项卡',\n  currentPage: '当前页',\n  selectedData: '当前选项中数据',\n}\n```\n\n# 临时数据、比对数据命名\n\n针对在代码中有时会使用一些临时的变量来存储数据、保存数据快照的场景下的命名。\n\n```\n{\n  swapData: '临时交换数据',\n  tempData: '临时数据',\n  dataSnapshot: '数据快照'\n}\n```\n\n# 数据循环语句中变量命名\n\n在使用 `for` 循环时，多层嵌套请依次使用 `i/j/k`，超过 3 层可以使用 `x/y/z`，`m/n` 来命名。使用 `forEach`, `map`, `filter` 等方法时，每一个元素命名可以根据不同语境下的特殊名字来命名，比如遍历 `menus`，那么每个元素可以命名为 `menu`，不然则使用上下文无关的词汇，比如：`item`, `option`, `data`, `key`, `object` 等。至于索引通常使用 `index`，如果多层可以使用 `index + 数字` 的形式，也可以直接使用 `i/j/k` 来作为索引，甚至还可以使用 `subIndex/grandIndex` 这种方式来命名。\n\n对于在使用 `for` 循环时数组长度如果需要单独命名的话，可以使用 `xxlength/xxLens`，或者 `xxCount`。\n\n在循环的过程中通常还会统计某个条件下数据匹配的次数、重复元素数量、记录中间结果等情况。这里推荐使用 `count` 表示次数，`skipped` 表示跳过的数量，`result` 表示结果。\n\n```\n// for 循环\nfor (let i = 0; i < 10; i++) {\n  for (let j = 0; j < 10; j++) {\n    for (let k = 0; k < 10; k++) {\n      // do something\n    }\n  }\n}\n\nfor (let i = 0, lens = this.options.length; i < lens; i++) {\n  // do something\n}\n\n// forEach\nusers.forEach((item, index) => {\n  // do something\n})\n\nmenus.forEach((menu, index) => {\n  if (menu.children) {\n    menu.children.forEach((subMenu, subIndex) => {\n      if (subMenu.children) {\n        subMenu.children.forEach((grandMenu, grandIndex) => {\n          // 一个不常用的示例\n        })\n      }\n    })\n  }\n})\n```\n\n# 方法参数命名\n\n方法的参数名称和数量在不同的方法中各不相同，但是还是有一些固定的模式可以参考，比如在 Vue 中监听属性变化的新值和旧值；`reduce` 方法的上一个值，当前值；回调函数的命名、剩余参数的命名等。\n\n## 情形一：新值、旧值\n\n常见于 Vue 中`watch` 对像中的属性监听回调函数，推荐使用\n\n```\n{\n  oldVal: '旧值',\n  newVal: '新值'\n}\n```\n\n## 情形二：上一个值、下一个值和当前值\n\n这种情形见于路由的钩子方法，`Object.assign` 数据拷贝的参数。\n\n```\n// 组合一\n{\n  from: '从...',\n  to: '到...'\n}\n\n// 组合二\n{\n  prev: '上一个...',\n  next: '下一个...',\n  cur: '当前'\n}\n\n// 组合三\n{\n  source: '源',\n  target: '目标'\n}\n\n// 组合四\n{\n  start: '开始',\n  end: '结束'\n}\n```\n\n## 情形三：异步数据返回\n\n用于 Promise 的`then`方法参数，`await` 的返回的 Promise 等。可选择的词汇有：`res`, `data`, `json`, `entity`，推荐使用 `res`。\n\n```\ndemoPromise.then(res => {\n  // do something\n})\n```\n\n## 情形四：其它情况\n\n一些使用不多，但是在编程时约定成俗的命名方式。例如 `ch` 表示单个字符，`str` 表示字符串, `n` 代表次数, `reg` 表示正则, `expr` 表示表达式, `lens` 表示数组长度, `count` 表示数量, `p` 表示数据的精度, `q` 表示查询(query), `src` 表示数据源(source), `no` 表示数字(number), `rate` 表示比率, `status` 表示状态, `bool` 表示布尔值, `arr` 表示数组值, `obj` 表示对象值, `x` 和 `y` 表示坐标两轴, `func` 表示函数, `ua`表示 User Agent, `size` 表示大小, `unit` 表示单位, `hoz` 表示水平方向, `vert` 表示垂直方向, `radix` 表示基数，根\n\n```\n// 传入单个字符\nfunction upper(ch) {}\n\n// 数量重复\nfunction repeat(str, n)\n\n// 正则\n'abab'.replace(reg, 'bb')\n```\n\n# 事件命名\n\n这里根据 DOM、nodejs 和一些框架和 UI 组件的事件进行归纳\n\n## **DOM 事件**\n\n这里列举 DOM 中常见的事件命名\n\n```\n{\n  load: '已完成加载',\n  unload: '资源正在被卸载',\n  beforeunload: '资源即将被卸载',\n  error: '失败时',\n  abort: '中止时',\n  focus: '元素获得焦点',\n  blur: '元素失去焦点',\n  cut: '已经剪贴选中的文本内容并且复制到了剪贴板',\n  copy: '已经把选中的文本内容复制到了剪贴板',\n  paste: '从剪贴板复制的文本内容被粘贴',\n  resize: '元素重置大小',\n  scroll: '滚动事件',\n  reset: '重置',\n  submit: '表单提交',\n  online: '在线',\n  offline: '离线',\n  open: '打开',\n  close: '关闭',\n  connect: '连接',\n  start: '开始',\n  end: '结束',\n  print: '打印',\n  afterprint: '打印机关闭时触发',\n  click: '点击',\n  dblclick: '双击',\n  change: '变动',\n  select: '文本被选中被选中',\n  keydown/keypress/keyup: '按键事件',\n  mousemove/mousedown/mouseup/mouseleave/mouseout: '鼠标事件',\n  touch: '轻按',\n  contextmenu: '右键点击 (右键菜单显示前)',\n  wheel: '滚轮向任意方向滚动',\n  pointer: '指针事件',\n  drag/dragstart/dragend/dragenter/dragover/dragleave: '拖放事件',\n  drop: '元素在有效释放目标区上释放',\n  play: '播放',\n  pause: '暂停',\n  suspend: '挂起',\n  complete: '完成',\n  seek: '搜索',\n  install: '安装',\n  progress: '进行',\n  broadcast: '广播',\n  input: '输入',\n  message: '消息',\n  valid: '有效',\n  zoom: '放大',\n  rotate: '旋转',\n  scale: '缩放',\n  upgrade: '更新',\n  ready: '准备好',\n  active: '激活'\n}\n```\n\n## **自定义事件**\n\n在封装组件时提供的事件名除了参考 DOM 事件外，在命名上也可以参考 Github Api 采用 `动词过去时 + Event` 的方式, Visual Studio Code Api 的 `on +\n\n```\n{\n  assignedEvent: '分配事件',\n  closedEvent: '关闭事件',\n  labeledEvent: '标签事件',\n  lockedEvent: '锁事件',\n  deployedEvent: '部署事件'\n}\n```\n\n此外，很多命名方式可以根据场景使用 `元素 + click` 、`元素 + change` 、`select + 范围`等方式灵活运用\n\n```\n{\n  selectAll: '选择所有',\n  cellClick: '当某个单元格被点击时会触发该事件',\n  sortChange: '当表格的排序条件发生变化的时候会触发该事件'\n}\n```\n\n# 状态管理命名\n\n如果在项目中用到了状态管理(redux/vuex/ngrx)，下面给出一些 ActionType，Mutation, Action 的命名参考。\n\n```\n// Redux 的 actionType\nLOAD_SUCCESS\nLOAD_FAIL\nTOGGLE_SHOW_HISTORY\nON_PLAY\nON_LOAD_START\nFETCH_SONGS_REQUEST\nRECEIVE_PRODUCTS\n\n// ngrx\nconst SET_CURRENT_USER = '[User] Set current';\nconst ADD_THREAD = '[Thread] Add';\nconst UPDATE_TRIP_SUCCESS = 'Update [Trip] Success';\n```\n\n# 其它命名\n\n```\n// 日期、时间\n// --------------------------------------------------------\nsentAt: '发送时间'\naddAt: '添加时间'\nupdateAt: '更新时间'\nstartDate: '开始日期'\nendDate: '结束日期'\nstartTime: '开时时间'\nendTime: '结束时间'\n```\n\n本文主要为广大前端开发人员提供一个英文词汇参考，便于记忆和查阅。文中内容按照特定的方式进行分类便于读者关注感兴趣的部分。\n\n文中的单词并没有给出其词性，很多词性的变化需要读者具备一定的英语语法知识，以便在特定情况下灵活运用。\n\n# 数字\n\n数字部分包含英文的数字表示、数字运算符、数字单位\n\ninfinite: 无限的\n\n## 英文数字\n\n```\nzero: 零\none: 一\ntwo: 二\nthree: 三\nfour: 四\nfive: 五\nsix: 六\nseven: 七\neight: 八\nnine: 九\nten: 十\neleven: 十一\ntwelve: 十二\nthirteen: 十三\nfourteen: 十四\nfifteen: 十五\nsixteen: 十六\nseventeen: 十七\neighteen: 十八\nnineteen: 十九\ntwenty: 二十\nthirty: 三十\nforty: 四十\nfifty: 五十\neighty: 八十\nninety: 九十\nhundred: 百\nthousand: 千\nmillion: 百万\nbillion: 十亿\n```\n\n## 计数单位\n\n```\npixel: 像素\npercent: 百分比\n```\n\n// 中文数字\n\n```\nten: 十\nhundred: 百\nthousand: 千\nten thousand: 万\nbillion: 亿\ntrillion: 兆\n```\n\n// 存储容量\n\n```\nbyte: 字节 B\nkilobyte: 千字节 KB\nmegabyte 兆字节 MB\ngigabyte 吉字节 GB\ntrillionbyte 太字节 TB\n```\n\n## 进制\n\n```\ndecimal: 十进制\nhex: 十六进制\nbinary: 二进制\noctal: 八进制\n```\n\n## 运算符\n\n```\nadd: 加\nsubtract: 减\nmultiply: 乘\ndivide: 除\nand: 与\nor: 或\nnot: 非\nintersection: 交集\ncompose: 并集\n```\n\n# 键盘符号\n\n```\npunctuator: 标点符号\nidentifier: 标识符\n\n// Unique graphic character allocations\n// 独特的图形字符分配\n// --------------------------------------------------------\nexclamation mark: ! 感叹号\nquotation mark: \" 双引号\npercent sign: % 百分号\nampersand: & and符号\napostrophe: ' 撇号\nellipse/apostrophe: …… 省略号\nleft parenthesis: ( 左括号\nright parenthesis: ) 右括号\nasterisk: * 星号\nplus sign: + 加号\ncomma: , 逗号\nslight-pause mark: 、 顿号\nhyphen-minus: - 连字符(-) 或者 减号(-)\nfull stop: . 句号\nmiddle dot: ・ 中间点\ninterpunct: · 间隔号\nhyphenation point: · 连字点\nsolidus: / 斜线\ncolon: : 冒号\nsemicolon: ; 分号\nless-than sign: < 小于符号\nequals sign: = 等于符号\ngreater-than sign: > 大于符号\nquestion mark: ? 问号\nlow line: _ 下划线\ndigital 0: 0 数字 0\nlatin capital letter A:  A 大写拉丁字母\nlatin small letter A: A 小写拉丁字母\n\n// Alternative graphic character allocations\n// 可选的图形字符分配\n// --------------------------------------------------------\nnumber sign: # 数字符号\npound sign: £ 英镑符号\ndollar sign: $ 美元符号\ncurrency sign:  货币符\n\n// IRV(International Reference Version) graphic character allocations\n// IRV图形字符分配\n// --------------------------------------------------------\nnumber sign: # 数字符号\ndollar sign: $ 美元符号\ncommercial at: @\nleft square bracket: [ 左方括号\nreverse solidus:  反斜线\nright square bracket: ] 右方括号\ncircumflex accent: ^ 抑扬音符号\ngrave accent: ` 沉音符\nleft curly bracket: { 左花括号\nvertical line: | 垂直线\nright curly bracked: } 右花括号\ntilde: ~ 波浪符\n```\n\n> 说明：由于[标点符号](https://link.segmentfault.com/?enc=YykBjtgFkx%2F2EOzGtHbG%2BQ%3D%3D.MnCoapm6qUK6g38kx76BRxEjFDEbCyZewPa9ca8lcskAjsFjoNiosJToubJxgK%2BB1I5%2FtKAff6DYIvoOo%2B%2FcAbIkswGkxu3W3qvnJYZoOf0%3D)中英文语言环境同一个符号也不同叫法别名，因此上面列举的词汇只能说涉及到了部分，并没有把所有 Dialect(方言) 包含进来。\n>\n> 注：`·` 符号在不同的上下文中有不同的叫法，比如“间隔号”、“中间点”、“项目符号”、“连子点”等，虽然肉眼看起来没有什么大的区别，但是在计算机中的 Unicode 编码是不一样的，更多参见[间隔符](https://link.segmentfault.com/?enc=STENo%2BrzOkZyEp%2FAgKZwYw%3D%3D.5GeyGZArq33ewuH8l%2BA9Tqgk0fxRV1%2B63cCElzq24xvnNpZkpYmovtUNhk%2FjQQ55h0bw%2B5ynrGnSibAp3IjdMA%3D%3D)\n\n# 时间、日期\n\n下面虽然列举了很多时间相关的词汇，但是在实际前端开发过程中用到的就年、月、日和时、分、秒、毫秒。\n\n```\ntime: 时间\ndate: 日期\nworkday: 工作日\nweekend: 周末\nseason: 季节\nanniversary: 周年\ncentury: 世纪；百年\nquarter: 一刻钟\nholiday: 节日；假日\nmorning: 上午\nnoon/midday: 中午\nafternoon: 下午\nnight: 晚上\nmidnight: 半夜\nyesterday: 昨天\ntoday: 今天\ntomorrow: 明天\nclock: 时钟\nnow: 现在；如今；立刻\nnowadays: 现今；时下\npresent: 现在（的）\nformer: 从前的；前任的\nbefore: 在...之前\nafter: 在...之后\nfuture: 将来\npermanent: 永久的；不变的\nperiod: 周期；期间；一段时间\nduring: 在...的期间；在...期间的某个时候\nterm: 学期；期限\nearly: 早期的，提早；在初期\nahead: 在前的；领先的；提前的\nlater: 后来；稍后；随后\nstart/begin: 开始\nend: 结束\npause: 暂停\nsuspend: 推迟；使暂停\ntimeout: 超时；暂时休息；工间休息\ninterval: 间隔\novertime: 超时的；加班的，加班时间\n```\n\n## 时间\n\n```\nyear: 年\nmonth: 月\nday: 日\nweek: 周\nhour: 小时\nminute: 分\nseconds: 秒\nmillisecond: 毫秒\n```\n\n## 星期\n\n```\nMonday: 星期一\nTuesday: 星期二\nWednesday: 星期三\nThursday: 星期四\nFriday: 星期五\nSaturday: 星期六\nSunday: 星期日\n```\n\n## 月份\n\n```\nJanuary: 一月\nFebruary: 二月\nMarch: 三月\nApril: 四月\nMay: 五月\nJune: 六月\nJuly: 七月\nAugust: 八月\nSeptember: 九月\nOctober: 十月\nNovember: 十一月\nDecember: 十二月\n```\n\n## 季节\n\n```\nspring: 春季\nsummer: 夏季\nautumn: 秋季\nwinter: 冬季\n```\n\n# 地理位置\n\n```\nmap: 地图\nlocation: 地理位置\nplace: 地方\nearth: 地球\nprovince: 省\ncity: 市\ndistrict: 区\narea: 区域、范围\nregion: 地区、范围、部位\naddress: 地址\nedges: 边界\nboundary: 边界；范围；分界线\ncoordinate: 坐标\neast: 东\nsouth: 南\nwest: 西\nnorth: 北\n```\n\n# 方位\n\n```\ndirection: 方向\nposition: 位置\ntop: 上\nright: 右\nbottom: 下\nleft: 左\nopposite: 对面的\ncenter: 中间（水平）\nmiddle: 中间（垂直）\n```\n\n# 排版\n\n```\nabstract: 摘要\nannex: 附录\nsuffix: 后缀；词尾\nprefix: 前缀\ntitl: 标题\nsummary: 总结；概要\nspecifications: 规范\nheadline: 大标题；内容提要；栏外标题\npreface: 前言；引语；序言\nchapter: 章；篇；回\nsection: 章节；部分\nabbreviation: 缩写；缩写词\n\nfont: 字体\ncolor: 颜色\nheading: 标题\nalign: 对齐\nalign left/align center/align right: 左对齐/居中对齐/右对齐\nalign top/align middle/align bottom: 顶对齐/垂直居中/底部对齐\ntext: 文本\nzoom: 放大\nsize: 大小\nopacity: 透明度\nposition: 位置\nrotation: 旋转\nfill: 填充\nshadow: 阴影\nblur: 模糊\nfilter: 滤镜\nradius: 圆角\nunite: 合并\nsubtract: 差集\nintersect: 交集\nexclude: 排除\njoin: 合并\ninsert image: 插入图片\ncode: 插入代码\nhighlight: 高亮\nstrikethrough: 删除线\nunderscore: 下划线\nitalic: 斜体\nbold: 粗体\nhorizontal line: 水平分隔线\nattach file: 附加文件\nchecklist: 清单列表\nbullet: 项目符号\nindention: 缩进\n```\n\n# 形状\n\n```\nfigure: 图形\nstroke: 描边\nfill: 填充\nborder: 边框\nline: 线\nrectangle: 矩形\nellipse: 椭圆\nsphere: 球\ntriangle: 三角形\nsector: 扇形\nannulus: 圆环\ntrapezium: 梯形\npolygon: 多边形\narch: 弓形\ncircle: 圆、循环、周期\nstar: 星形、评分\ncylinder: 圆柱\ncircle cone: 圆锥\nlove: 爱心\n```\n\n# 语法\n\n```\ngrammar: 语法\nsyntax: 句法\nmorphology: 词法\nstructure: 结构\nsentence: 句子\nclause: 从句\nphrase: 词组\nword: 单词\nadjective: 形容词\nverb: 动词\nnoun: 名词\nabstract noun: 抽象名词\npronouns: 代词\ndeterminer: 限定词\nconjunction: 连词\ninterjection: 感叹词\nadverb: 副词\npreposition: 介词；前置词\nderivative: 派生词\nnumeral: 数词\nauxiliary: 助动词\ntense: 时态\npassive: 被动语态\ngerund: 动名词\nantonym: 反义词\narticle: 冠词\nantecedent: 先行词\nregular/irregular verbs: 规则╱不规则动词\ntransitive/intransitive verbs: 及物╱不及物动词\nsubject: 主语\nobject: 宾语\npredicate: 谓语；表语\nadverbial: 状语\ncomplement: 补语\nappositive: 同位语\nadjunct: 修饰语\naffix: 词缀\nacronym: 首字母缩略词\nabbreviation: 缩写词\n```\n\n# 常用颜色\n\n```\npink: 粉红\nviolet: 紫罗兰\nmagenta: 洋红(玫瑰红)\npurple: 紫色\nblue: 纯蓝\nazure: 蔚蓝色\ncyan: 青色\ngreen: 纯绿\nlime: 闪光绿\nivory: 象牙色\nyellow: 纯黄\nolive: 橄榄\ngold: 金色\norange: 橙色\nsnow: 雪白色\nred: 纯红\nbrown: 棕色\nwhite: 纯白\nsliver: 银灰色\ngray: 灰色\nblack: 纯黑\n```\n\n# JavaScript 语言相关\n\n```\ntype: 数据类型\nprimitive type: 原始类型\nobject: 对象\narray: 数组\nstring: 字符串\nboolean: 布尔值\nsymbol: 符号\nundefined: 未定义\nnull: 空\nfunction: 函数\narray function: 箭头函数\ncurried function: 柯里函数\ncallback: 回调函数\nclass: 类\nmodule: 模块\nimport: 导入\nexport: 导出\nconstructor: 构造函数\nprototype: 原型\nreference: 引用\nclosure: 闭包\ndestructure: 解构\nvariable: 变量\nproperty: 属性\nattribute: 特性\niterator: 迭代器\ngenerator: 生成器\nyield: 产出\nobservable: 可观赛的\nhosit: 提升\noperator: 运算符\nequal: 相等\nstatement: 语句\nblock: 块\ncomment: 注释\nwhitespace: 空格\nevent: 事件\nlistener: 监听器\naccessor: 访问器\ndecorator: 装饰器\nproxy: 代理\nreflect: 反射\npromise: 承诺\ntest: 测试\nfetch: 拿；取\ndescriptor: 描述符号\nsync: 同步\nasync: 异步\nawait: 等候\nfind: 查找\nevery: 所有\nsome: 部分\nforeach: 为每一个\nmap: 遍历\nfilter: 过滤\npad: 填充\nindex: 索引\ndata: 数据\nslice: 把...分成部分\nsplice: 拼接，接合\nreduce: 归纳\npush: 推\npull: 拉\npop: 弹出\nsplit: 分离\njoin: 连接\nflatten: 变平\nreplace: 替换\nsearch: 搜索\nscope: 作用域\ntimeout: 超时\ninterval: 间隔\nvalue: 值\ndefine: 定义\nmath: 数学\nsum: 求和\nconfigurable: 可配置\nenumerable: 可枚举\nwritable: 可写\nlocal: 局部的\nglobal: 全局的\nnot: 非\nor: 或\nxor: 异或\nand: 且\nregexp: 正则表达式\nmatch: 匹配\npattern: 模式\ngreed: 贪婪\ncolor: 颜色\nrest: 剩余\nassign: 赋值\ntag: 标签\nbuffer: 缓冲区\nsuper: 极好的\nextend: 扩展\nreadonly: 只读\noverride: 重写\ndynamic: 动态的；多态\ndefault: 默认的\nimplement: 实现；执行\nstrict: 严格的\ndeprecate: 不推荐；反对\ntab: 制表符\nspace: 空格\nindentation: 缩进\npublic: 公共的\nprivate: 私有的\nnamespace: 命名空间\nmember: 成员\nmethod: 方法\nparameter/argument: 参数\ninstance: 实例\nternary: 三目运算\nliterary: 字面量\ntemplate: 模板\ncharacter: 字符\nmarkup: 标记\nsyntax: 语法\nequality: 相等\nconditional statements: 条件判断语句\ntrue: 是\nfalse: 否\ntype-checker: 类型检查\ncompile-time: 编译时\nlexical scope: 词法作用域\nstatic scope: 静态作用域\nloop: 循环\nnotation: 符号\noperand: 操作数；运算对象\nordinary object: 普通对象\nstandard object: 标准对象\nbuilt-in object: 内置对象\nexotic object: 外来对象\nlast-in/first-out manner: 后进先出的方式\nreserved word: 保留单词\nsignature: 签名\nenumerable: 可枚举的\niterable: 可迭代的\n```\n\n# 常用简写\n\n简写后面用 ”\\*“ 号标注的为推荐使用简写，可以放心大胆在项目中使用。\n\n```\nhd -> head\nhdr -> header\nbd -> body\nft -> foot\nftr -> footer\ntbl -> table\nel -> element **\ncnt -> content\ncmp -> component\nbtn -> button **\nsel -> select *\nopt -> option *\nchk -> checkbox\nlbl -> label\nwiz -> wizard *\nbg -> background **\ncur -> current **\nprev -> previous **\nidx -> index\nlen -> length **\npg -> page\nvm -> view page\nrepo -> repository *\norg -> organization *\nref -> reference *\nres -> response **\nreq -> request **\nmsg -> message **\nstr -> string **\nch -> chracter *\nlbl -> label\nimg -> image **\nbuf -> buffer *\nusr -> user\nargs -> arguments *\nno -> number\nerr -> error *\ntmp/temp -> temporary **\nrst -> result\nbdr -> border\nfn/func -> function **\nnav -> navigator *\nval -> value\nparams -> parameter *\ndev -> development *\nprod -> product *\nutil -> utility *\nhoc -> high order component *\ncb -> callback *\nlib -> library *\nprop(s) -> property(ies) *\nattr(s) -> attribute(s) *\narr -> array *\nconf -> config *\ndlg -> dialog\ne/ev/evt -> event **\npkg -> package *\ntpl -> template *\naddr -> address\ndesc -> descending\naesc -> aescending\nexpr -> expression **\nsrc -> source **\nhoz -> horizontal\nvert -> vertical\nabbr -> abbreviate\nenv -> envirnment **\nsec -> seconds *\nms -> millisecond **\nbool -> boolean *\ndbl -> double\n```\n\n# 常用词汇及其变体\n\n```\nactive -> inactive -> deactive\nload -> preload -> unload\ncoming -> incoming\nwith -> without\nsync -> async\nallowed -> unallowed\ngoing -> ingoing -> ongoing\nonline -> offline\nvisible -> invisible\nfinite -> infinite\nable -> enabled -> unable -> disabled\nlogin -> logout\nsingin -> signout\ncheck -> uncheck\nselect -> unselect\ninlet -> outlet\nregular -> irregular\nimplicit -> explicit\nimport -> export\nmicro -> macro\n```\n\n# 专用名词缩写\n\n```\nGUI -> Graphical User Interface 图形用户界面\nOEM -> Original Equipment manufacturer 原始设备制造商\nCMS -> Content Manager System 内容管理系统\nPWA -> Progressive Web App 渐近式Web应用\nSDK -> Software Development Kit 软件开发工具包\nIDE -> Integrated Development Envirnment 集成开发环境\nSOA -> Service-Oriented Architecture 面向服务架构\nORM -> Object Relation Mapping 对象关系映射\nMVC -> Model View Controller\nOOP -> Object Oriented programing 面向对象编程\nBEM -> Block Element Modifier 块-元素-修饰符\nBFC -> Block Format Context\nSKU -> Stock Keeping Unit 库存单位\nAJAX -> Asynchronous JavaScript and\nHOC -> High Order Component 高阶组件\nI18N -> Internationalization 国际化\nGUID -> Globally Unique Identifier 全球唯一标识符\n```\n\n# UI 组件相关\n\n参考 Element、Antd、Bootstrap 和 Material Design\n\n// 通用\n\n```\nHead: 标题\nLabel: 标签\nButton: 按钮\nIcon: 图标\nLink: 文字链接\nInput: 输入框\nCheckbox: 筛选框\nRadio: 单选框\nSelect: 下拉选择框\nSwitch: 开关\nUpload: 文件上传\nForm: 表单\nRadio: 音频\nVideo: 视频\nCanvas: 画布\n```\n\n// 布局\n\n```\nLayout: 布局\nGrid: 网格；栅格\nContainer: 布局容器\n```\n\n// 导航\n\n```\nAffix: 固钉\nBreadcrumb: 面包屑\nDropdown: 下拉菜单\nMenu: 导航菜单\nPagination: 分页\nPageHeader: 页头\nSteps: 步骤条\nNavMenu: 导航菜单\nMinimap: 小地图\n```\n\n// 数据录入\n\n```\nAutoComplete: 自动完成\nCascader: 级联选择框\nDatePicker: 日期选择框\nTimePicker: 时间选择框\nDateRangePicker: 日期区间选择框\nColorPicker: 颜色选择框\nInputNumber: 数字输入框\nMentions: 提及\nRate: 评分\nSlider: 滑动输入条；滑块\nTreeSelect: 树选择器\nTransfer: 穿梭框\nWizard: 向导\n```\n\n// 数据展示\n\n```\nAvatar: 头像\nBadge: 徽标数\nComment: 评论\nCollapse: 折叠面板\nCarousel: 走马灯；轮播\nCard: 卡片\nPanel: 面板\nCalender: 日历\nDescriptions: 描述列表\nEmpty: 空状态\nList: 列表\nPopover: 气泡卡片\nStatistic: 统计数值\nTree: 树形控件\nTooltip: 文字提示\nTimeline: 时间轴\nTag: 标签\nTabs: 标签页\nInfiniteScroll: 无限滚动\nChips: 芯片\nDialog: 对话框\n```\n\n// 反馈\n\n```\nAlert: 警告提示\nDrawer: 抽屉\nModal: 对话框\nMessage: 全局提示\nMessageBox: 弹框\nNotification: 通知提醒框\nProgress: 进度条\nPopconfirm: 气泡确认框\nResult: 结果\nSpin: 加载中\nSkeleton: 骨架屏\n```\n\n// 其它\n\n```\nAnchor: 锚点\nBackTop: 回到顶部\nDivider: 分隔线\nConfigProvider: 全局化配置\n```\n\n// Button 尺寸\n\n```\n// --------------------------------------------------------\nmini: 微型的；袖珍的\ntiny: 微小的；很少的\nmicro: 极小的；基本的；微小的；微观的\nsmall: 小\nmedium: 中等\nlarge: 大\nfixed: 固定宽度的\n```\n\n// Button 外观\n\n```\n// --------------------------------------------------------\ndefault: 默认的\nplain: 朴素的\nprimary: 主要的\ninfo: 信息的\nwarning: 警告的\nerror: 错误的\ndanger: 危险的\ngray: 灰色的\nlink: 带链接的\noutline: 带轮廓的\ndashed: 带虚线的\nround: 带圆角的\ncircle: 圆形的\nghost: 幽灵的\n```\n\n// 表单控件验证状态\n\n```\n// --------------------------------------------------------\nvalid: 有效的\ninvalid: 无效的\npending: 验证中\nrequired: 必填的\ndirty: 脏的\npristine: 干净的\n```\n\n# 代码常用词汇\n\n下面列出开发过种中经常使用的动词、名词、介词、形容词。这些词汇通常可以相互组合在特定上下文中适当变动可以覆盖工作中的绝大多数场景。\n\n// 动词\n\n```\non: 监听、正在进行中\nget: 取\nset: 设置\nfetch: 获取\nfind: 查找\nadd: 添加\ncreate: 创建\nremove: 移除\ndelete: 删除\nupdate: 更新\nupgrade: 升级\ndowngrade: 使降级\nsync: 同步\ntoggle: 切换\npull: 拉\npush: 推\nshow: 显示\nhide: 隐藏\nresolve: 解析；分解\nparse: 解析\nlock: 锁定\nlink: 连接\nmerge: 合并\nclose: 关闭\nclone: 克隆\nclear: 清除\nformat: 格式化\nconvert: 转变\ncancel: 取消\naccept: 承认；同意\ncheck: 检查，核对\nconcat: 合并数组、字符串\njoin: 合并\nsplit: 分开\nspread: 展开\nsearch: 搜索\nsort: 排序\nassign: 分配，指定\nhandle: 处理\ntrigger: 触发\nlogin: 登入\nlogout: 登出\nregister: 注册\nsign: 签名\nthrow: 抛出\nload: 加载\npreload: 加载\ncopy: 复制\npaste: 粘贴\nconnect: 连接\nchange: 改变\nselect: 选择\nvalidate: 验证\nsubmit: 表单提交\ncommit: 提交\nmatch: 匹配\nscroll: 滚动\nwrite: 写\nread: 读\nenable: 启用\ndisable: 禁用\nlimit: 限制\nbootstrap: 启动\ninit: 初始化\ninstall: 加载\nupload: 上传\ninject: 注入\nprovide: 提供\nexit: 退出\naccess: 访问\nflush: 刷新/使暴露\nrefresh: 刷新\nrelease: 发布\npreview: 预览；试映\npublish: 出版；发行\nnavigate: 导航；浏览\nredirect: 重定向\nback: 返回\nswitch: 切换\nlaunch: 加载\nbrowse/visit: 浏览\nappend: 追加\ninsert: 插入\nswap: 交换\nmap: 遍历\nextract: 提取；选取\nprovide: 提供\ninject: 注入\nobserve: 观察\nrender: 渲染\ndebug: 调试\nalign: 对齐\npopup: 弹出\ntransfer: 转让、迁移\nattach: 附加\nbuild: 构建\ndiagnose: 诊断，断定\nignore: 忽略\ndeploy: 部署；展开\nsend/sent: 送；寄出\ndefer: 推迟\ndelegate: 委托\ndestroy: 销毁\ndispatch: 派发；分派\ntrace: 追踪\n```\n\n// 名词\n\n```\navatar: 头像\nbrand: 品牌\nrecord: 记录\nissue: 问题\nproject: 项目\nrepo(repository): 仓库；知识库\necosystem: 生态系统\nassets: 资产\nresource: 资源\ntoolkit: 工具包、工具箱\nworkbench: 工作台\nitem: 项目；条款\noption: 选项\nfield: 字段\ntype: 类型\nstatus: 状态\nproperty: 属性\nattribute: 特性\nparameter/argument: 参数\nlength: 长度\nsize: 尺寸\nshape: 形状\nlabel: 标签\nvalue: 值\nview: 视图\npage: 页面\nenv(envirnment): 环境\ncontext: 上下文\ncount: 总数；计数\namount: 数量；数额\nsum: 合计；金额\nnum(number): 号码\ntotal: 总数\nmoney: 钱；货币\nfilter: 过滤器\npipe: 管道\nstream: 流\nbuffer: 缓冲器\ncomment: 评论\nref(reference): 引用\nres(response): 响应\nreq(request): 请求\nentity: 实体\nevent: 事件\nsetup 设置\nprefix 前缀\nsuffix 后缀\nwizard 小部件\nmodel 模型\nflag 标志\nfactory 工厂\nservice 服务\nconstant: 常量\nvar(iable): 变量\ncollection: 集合\narray: 数组\nraw: 原始值\nplatform 平台\ncapital: 大写字母\nuppercase/lowercase: 大/小写\nletter: 字母\nentrance: 入口\npath: 路径\nroute: 路由\nrouter: 路由器\nconfig: 配置\nmiddleware: 中间件\nsuccess: 成功\nerror: 错误\nfail(ure): 失败\nfrontend: 前端\nbackend: 后端\nlocal: 本地\nsever: 服务器\nproduction: 线上；产品\nborder: 边框\noutline: 轮廓\nprecision: 精度\nseparator: 分隔符\nmask: 遮罩\nmetadata: 元数据\nlocation: 位置\nsandbox: 沙箱\nscope: 作用域\nqueue: 队列\nheap: 堆\nnotice: 通知\nbubble: 气泡\nhooks: 钩子\ncell: 单元格\nrow: 行\ncolumn: 列\ngroup: 组\ncursor: 游标\npattern: 模式\nabstract: 抽象\ncompose: 复合；并集\ncallback: 回调函数\npriority: 优先级\ngrade/rank/hierarchy 等级、层级\ntable,chart, graph, diagram: 表格，图表，曲线图，图表\nsystem: 系统、体系\nguards: 保障、守卫\nsegment/fragment: 片段、碎片\nshaking: 抖动\nmix: 混淆\ndependence: 依赖\ninjection: 注入\nmarkup: 标记\nemail: 电子邮件\nversion: 版本\ndetail: 详情\nstub: 存根\nscore: 成绩\nbreakpoint: 断点\nrecord: 记录\npointer: 指针\nthumbnail: 缩略图\ngallery: 画廊\nviewport: 视口\nstrategy: 策略\noutlet: 出口\ninlet: 入口\ngist: 主旨；要点；依据\nlicence: 许可证\ncopyright: 版权\norder: 命令\ninput: 输入\noutput: 输出\neffect: 影响；效果；作用\nposition: 位置\ncorner: 角落\nanimation: 动画\ndot: 点\npalette: 调色板；颜料\nalbum: 相册\nphoto: 照片\nhost: 主机\nsession: 会话\ncookie: 饼干；小甜点\ndomain: 域名\ncertificates: 证书\ncoercion: 强制\npayload: 载物\nthread: 线程\nprocess: 进程\ntimestamp: 时间缀\nconflicts: 冲突\nterminal: 终端\nportrait: 肖像\nauxiliary: 附属物\nbackup: 备份\nbitmap: 位图\nbreakpoint: 断点\nconcurrency: 并发\nlock: 锁\ndigest: 摘要\nexception: 异常\ngenericity: 泛型\nhandle: 句柄\nmacro: 宏\nmanifest: 清单\nmodifier: 修饰字；修饰符\noverride: 覆写\noverload: 重载\nprocedure: 过程\nprotocol: 协议\nrecursion: 递归\nmarquee: 跑马灯\n\n// 形容词\nnative: 原生的\nhybrid: 混合的\nbasic: 基础的\ncomplex: 复杂的\nempty: 空的\nonline: 在线的\noffline: 离线的\npublic: 公共的\nprivate: 私有的\nstatic: 静态的\ndynamic: 动态的\nshared: 共享的\nsafe: 安全的\nrelative: 相对的\nabsolute: 绝对的\noriginal: 原始的\ninfinite: 无限的\npartial: 局部的\nascending: 按升序\ndescending: 按降序\nprimary: 原始的，第一的\nsecondary: 第二的\ntertiary: 第三的\ndeprecated: 弃用的\nconcrete: 具体的\nabstract: 抽象的\nexplicit: 显示的；明确的\nimplicit: 含蓄的；暗示的\nmutable: 可变的\n```\n\n# 业务常用词汇\n\n# 电商\n\n```\ncoupons: 优惠券\ncouponsCode: 优惠码\ndiscount: 折扣\npoints: 积分\nmemeber: 会员\nvip: 会员\nmembership: 会员\ndelivery: 运费\ndomain: 域名\ndashboard: 仪表盘\nstore: 门店\nshop: 店铺\nproduct: 产品\ngoods: 商品\norder: 订单\nsetting: 设置\nmanager: 管理\nchannel: 渠道\nnotFound: 404页面\nfeedback: 反馈\nscratch: 刮刮卡\nclient: 客户端\nmarket: 市场\npromotion: 促销\npopularize: 推广\ntool: 工具\nbanner: 广告\nfriendlink：友情链接\npartner： 合作伙伴\nvote: 投票\n```\n\n# 技术文章阅读常用词汇\n\n// 副词\n\n```\napproximately: 大约；近似地；近于\nindirectly: 间接地；迂回地\ninevitably:不可避免地；必然地\nrepeatedly: 反复地；再三地\ndefiantly: 挑战地；对抗地\n```\n\n// 形容词\n\n```\ngeneral: 一般的；普通的；大体的\npartial: 局部的\nwell-formed：符合语法规则的\nappropriate: 适当的；恰当的；合适的\nreasonable: 合理的；公道的\nnon-trivial: 非平凡的\nconditional: 有条件的；假定的\ndisheartened: 沮丧的；灰心的\nunmotivated: 对（工作等）不感兴趣的；没有理由的\nterse: 简洁的；精练的；扼要的\nchaotic: 混沌的；混乱的，无秩序的\neffective: 有效的\ndiscursive: 离题的；东拉西扯的；无层次的\nimpressive: 感人的；令人钦佩的；给人以深刻印象的\nerror-prone: 于出错的\nweird: 怪异的；不可思议的；超自然的\nhypothetical: 假设的；假定的\ntricky:  狡猾的；机警的；棘手的\n```\n\n事件\n\n```\nOnmouseover 鼠标移到目标上；鼠标移进时\nOnclick 鼠标单击\nOnmouseout 鼠标移出时\nonkeyup 键抬起时\nonkeydown 键按下时\nblur vt. 涂污；使…模糊不清；使暗淡；玷污n. 污迹；模糊不清的事物\nonblur 失去焦点,数组常用方法\npush 推动，增加；对…施加压力，逼迫；按；说服\nfilter “n. 滤波器；[化工] 过滤器；筛选；滤光器vt. 过滤；渗透；用过滤法除”\n```\n\n运算单词\n\n```\nplus（表示运算）加;加的; 正的; 附加的; 比所示数量多的;\nminus（表示运算）减去; 减号; 负号; 不利; 不足;\nmultiply 乘; （使）相乘; （使）增加; （使）繁殖;\nquotient 商，商数，系数\ndivide(by) 分开，除\n\nDOM操作部分\nreplace vt. 取代，代替；替换，更换；归还，偿还；把…放回原处\nNode n. 节点；瘤；[数] 叉点\nElement n. 元素；要素；原理；成分；自然环境\nparentNode 父节点\nchildNodes 子节点\nnextSibling 下一个兄弟节点\nprevious adj.以前的; 先前的; 过早的; （时间上） 稍前的;\npreviousSibling 上一个兄弟节点\npreviousElementSibling 上一个兄弟元素\nnextElementSibling 下一个兄弟元素\nfirstChild 第一个子节点\nlastChild 最后一个子节点\nfirstElementChild 第一个子元素\nlastElementChild 最后个子元素\ninnerText 底层模板, 内部的纯文本, 元素文本\nappend vt.附加; 添加; 贴上; 签（名）\nappendChild 方法, 添加节点方法\nremoveChild 去除节点方法\ncreateElement 创建元素\nattribute n. 属性；特质\nsetAttribute 设置属性\ngetAttribute 获取属性\nremoveAttribute 移除属性\n```\n\n熟悉部分\n\n```\narea 地区; 区域，范围; 面积，平地; 领域;\nperimeter <数>周长; 周围，边界;\nmeter “米, 公尺#计量器, 仪表; 计量官; 计量监督员”\nradius 半径（距离）; 用半径度量的圆形面积; 半径范围; 桡骨;\ndifference 差别，差异; [数]差数，差额; 意见分歧; 特色;\nproduct 产品; 结果; 乘积; 作品;\ndestination 目的，目标; 目的地，终点;\nObject n. 目标；物体；客体；宾语\nModel n. 模型；典型；模范；模特儿；样式\ninstance n. 实例；情况；建议\ninner adj. 内部的；内心的；精神的\ntransparent adj. 透明的；显然的；坦率的；易懂的\n```\n\n了解部分\n\n```\nselected 挑选出来的\nchecked 检查;选中的；\ncurrent 现在的；流通的，通用的；最近的；草写的\n```\n\n常用数组方法\n\n```\nsort vt. 将…分类；将…排序；挑选出某物\nshift 改变; 去掉; 摆脱掉; 换挡;\nunshift 松开打字机或键盘的字型变换键;方法将元素插入到一个数组的开始部分\nreverse 颠倒；倒转\nconcat 合并多个数组；合并多个字符串\nslice 切成片; 切下; 划分;\nsplice 拼接；接合；使结婚\nsource n.根源，本源; 源头，水源; 原因; 提供消息的人; 英 [sɔːs]  美 [sɔrs]\n```\n\n常用的日期函数\n\n```\ngetTime 取得系统时间\ngetMilliseconds 取得 Date 对象中的毫秒字段\ngetSeconds 返回时间的秒\ngetMinutes 返回时间的分钟数\ngetHours 返回时间的小时字段\ngetDay 返回一周的某一天数字\ngetDate 返回月份的某一天\ngetMonth 取得 Date 对象中表示月份的数字\ngetFullYear 返回当前Date对象中的年份值\n```\n\n常用方法\n\n```\ntrim 会从一个字符串的两端删除空白字符\nsplit 用于把一个字符串分割成字符串数组\nforEach 为每一个遍历，循环\nmap 地图，天体图; 类似地图的事物;\nindexOf 查找字符或者子串第一次出现的地方,\nlastIndexOf 查找字符或者子串是后一次出现的地方\nevery 每个; 每; 所有可能的; 充足的;\nsome 一些; 某个; 大约; 相当多的;\nceil vt. 装天花板，装船内格子板;\n```\n\nBOM\n\n```\nwindow n. 窗口; 窗，窗户;\nsetTimeout 法用于在指定的毫秒数后调\n```\n\n用函数或计算表达式\n\n```\ninterval n. 间隔; 幕间休息; （数学） 区间;\nsetInterval 设置时间间隔, 按照指定时间周期调用函数或计算表达式, 循环\nhistory n. 历史，历史学；历史记录；来历\nlocation n. 定位; 位置，场所; 外景（拍摄地）;\n```\n\n掌握部分\n\n```\npath n. 小路，路; 路线，路程; 〈比喻〉（人生的）道路; （思想，行为，生活的） 途径;\nport n. 港口; （事情的） 意义; （计算机与其他设备的） 接口; （船、飞机等的） 左舷;\nprotocol n. 礼仪; （外交条约的） 草案; （数据传递的） 协议; 科学实验报告（或计划）;\nnavigator n. 领航员; 航海家，航行者，航海者; （船舶，飞机的） 驾驶员; 一个浏览器的品牌;\nagent n. 代理人; 代理商; 特工; 药剂; 英\nuseragent 用户代理, 代理程式识别码\nback vt. 使后退; 支持; 加背书于; 下赌注于;vi. 后退; 倒退;\noffset vt. 抵消; 补偿; （为了比较的目的而）把…并列（或并置） ; 为（管道等）装支管;\nstep n. 步，脚步; 步骤，手段; 步调; 级别;\nanimate vt. 使有生气; 驱动; 使栩栩如生地动作; 赋予…以生命;\nExtensible adj. 可展开的，可扩张的，可延长的;\n```\n\njs API\n\n```\nclient n. 顾客; 当事人; 诉讼委托人; [计算机] 客户端;\nresize vt. 调整大小\noffsetHeight 网页内容实际高度\nmath n. 数学\ngetComputedStyle 可以获取当前元素所有最终\n```\n\n使用的 CSS 属性值\n\n常用部分\n\n```\ncompute vt. 计算；估算；用计算机计算\ncomputed v. 计算，估算\ncomputer n. （电子） 计算机，电脑;\nfloor n. 地板，地面；楼层；基底；议员席\nmode n. 模式；方式；风格；时尚 英\ncompatMode 兼容模式；\ndocument.compatMode(判断当前浏览器采用的渲染方式)\nresponsive adj.应答的，响应的; 反应灵敏的; 共鸣的; 易反应的;\ntablet 药片,小块 .碑，匾; 便笺簿,平板电脑\nwrap n. 膝毯，披肩，围巾，围脖，头巾，罩衫，外套，大衣; 包装纸;\nslide n. 滑动；幻灯片；滑梯；雪崩 英\nassign vt. 分配；指派；计 赋值 英[ə\ninsert vt. 插入; 嵌入; （在文章中） 添加; 加\nbefore prep. 在…之前; 先于，优于; 当着…的面; 与其…;\n```\n","slug":"📣-前端常用命名","published":1,"updated":"2024-05-16T07:39:11.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094p600602omve4la119s","content":"<div class=\"\"><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在编码的过程中变量命名是一个容易忽略，又容易犯头疼的问题。例如在复杂的页面布局中 Class 的命名，同样一个结构在不同的上下文要表达的意思不一样，是采用通用命名呢？还是采用更具有描述性的业务相关词汇？但是呢还需要考虑到样式的复用、是否会冲突、被覆盖、组合命名的长度是否太长等问题。</p>\n<p>在实际工作中，每个人都有自己命名风格和惯用词汇，有的喜欢使用英文简写、有的喜欢使用中英文结合、有的喜欢给变量加数据类型前缀、有的喜欢乱造词汇、有的甚至单词都拼写不正确。在看别人代码的过程中你是否像我一样无语，但也只能截图指出并吐槽二下，有些时候对方并不买单，改正。</p>\n<p>每次到换工作的时候就更新博客，7 月下旬的高温天气就适合在家里码字，这次选择这个话题的原因是目前在网上还没有相关的文章来系统全面的论述有前端关代码变量命名的资料。Java 有《码出高效 - 阿里巴巴 Java 开发手册 终级版》，而前端这方面目前还是一个空白，虽然有很多代码规范，但是很少有人愿意在这方面去花心思，更多的是研究框架的源码、数据结构与算法和尝试新的技术，本人由于大脑开发有限、没有能力去啃这些骨头，只好捡一些很少有人去碰触的简单不费脑的知识点来考究一二，希望也能为前端的生态做出一点小贡献。</p>\n<h1 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h1><p>目前流行的经典命名规则有：**驼峰命名法、匈牙利命名法、下划线命名法、****帕斯卡命名法**</p>\n<p>相关命名的具体规则请另行查阅。前端主要涉及到驼峰命名法，React 组件会用到<strong>帕斯卡命名法。</strong></p>\n<p>然后是变量命名规则：</p>\n<ul>\n<li>变量名首字母必须为字母(a-z A-Z)，下划线(_)，或者美元符号($)开始</li>\n<li>变量名只能是字母(a-z A-Z)，数字(0-9)，下划线(_)的组合，并且之间不能包含空格，数字不能放在变量名首位。</li>\n<li>变量名不能使用编程语言的保留字。比如在 javascript 中不能使用 true, false, while, case, break 保留字等等。</li>\n</ul>\n<h1 id=\"命名风格\"><a href=\"#命名风格\" class=\"headerlink\" title=\"命名风格\"></a>命名风格</h1><p>这里给出一些在开发过程中约定成俗的通用规则，涉及 JavaScript, Typescript, 框架组件, 样式及目录。在文章中将使用<em>【强制】来</em>表示必须严格遵守，<em>【推荐】</em>来表示建议<em>，【参考】</em>来给出多种命名方式的一种。</p>\n<p><strong>1. 【强制】在 JavaScript 中使用驼峰命名法来表示变量，不能以下划线或美元符号作为开始和结束。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 反例</span><br><span class=\"line\">_name</span><br><span class=\"line\">__name</span><br><span class=\"line\">name_</span><br><span class=\"line\">$name</span><br><span class=\"line\">name$</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>补充：由于受框架和第三方库及语言限制，不可能完全避免。例如：在 RxJs 中通常命名流的时候是以 <code>变量名 + $</code> 的形式，在 Class 中定义私有变量时通常以 <code>_ + 变量名</code> 的方式来表示，在 Vue 中内部实例方法全部以 <code>$</code> 开始，在 AngularJs 中内部方法以 <code>$$</code> 开始，而 lodash 直接使用 <code>_</code> 作为其别名。</p>\n</blockquote>\n<p><strong>2.</strong> 【<strong>强制】在代码中严禁使用拼音与中英文混合的方式，更不允许直接使用中文的方式。除了一些国际通用的中文名称，要视为英文外，其它禁止使用。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 正例</span><br><span class=\"line\">taobao</span><br><span class=\"line\">tmall</span><br><span class=\"line\">shanghai</span><br><span class=\"line\">coupons</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 反例</span><br><span class=\"line\">yhq [优惠券]</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. 【强制】类名使用大写驼峰命名法来表示，Typescript 中枚举值使用大写驼峰命名法表示。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 正例</span><br><span class=\"line\">class User &#123;&#125;</span><br><span class=\"line\">enum Color &#123;Red = 1, Green, Blue&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class user &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4. 【强制】常量名全部大写，单词间使用下划线隔开，力求表达完整清楚，不要嫌名字长。</strong><br>&#x2F;&#x2F; 正例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOGLE_MAP_TOKEN</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 反例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TOKEN</span><br></pre></td></tr></table></figure>\n\n<p><strong>5. 【建议】Typescript 中抽象类使用 <code>Abstract</code> 或 <code>Base</code> 开头；异常类使用 <code>Exception</code> 结尾。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstract class BaseDepartment &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>6. 【建议】在 TypeScript 中，类型使用 <code>Type</code> 作后缀，接口使用 <code>I</code> 作为前缀。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type PropsType = &#123;&#125;</span><br><span class=\"line\">interface ILoginProps &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>7. 【建议】 采用有意义的命名，在项目中坚持使用一种变量命名方式。不要 <code>usr</code> 与 <code>user</code> 混用</strong></p>\n<p>&#x2F;&#x2F; 正例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">users</span><br><span class=\"line\">getUserByUid()</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 反例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerUsr()</span><br><span class=\"line\">copyUserInfo()</span><br></pre></td></tr></table></figure>\n\n<p><strong>8. 【建议】方法名必须准确表达该方法的行为，在多数情况下以动词开头</strong></p>\n<p>&#x2F;&#x2F; 正例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetchCoupons()</span><br><span class=\"line\">updateToken()</span><br><span class=\"line\">createAccount()</span><br><span class=\"line\">generateUniqueId()</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 反例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getData()</span><br></pre></td></tr></table></figure>\n\n<p><strong>9.【建议】可以使用单词简写，但是只局限于常用词汇，注意不同词汇的简写有可能冲突</strong><br>    &#x2F;&#x2F; 正例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setProps() [props -&gt; property]</span><br><span class=\"line\">selectCouponsDlg() [dlg -&gt; dialog]</span><br><span class=\"line\">readPkg() [pkg -&gt; package]</span><br><span class=\"line\">previewTpl [tpl -&gt; template]</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 反例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vehicleDesc [desc -&gt; description]</span><br><span class=\"line\">vehicleDesc [desc -&gt; descending]</span><br><span class=\"line\">vehicleAesc [aesc -&gt; aescending]</span><br><span class=\"line\">fetchUsr() [usr -&gt; user]</span><br></pre></td></tr></table></figure>\n\n<p><strong>10. 【建议】在 Vue 和 Angular 中，模板语法中所有组件名使用中线命名法，在 React 中使用大写驼峰命名法来表示</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Vue</span><br><span class=\"line\">&lt;el-button type=&quot;text&quot; @click=&quot;toDetail&quot;&gt;详情&lt;/el-button&gt;</span><br><span class=\"line\">&lt;custom-component a-prop=&quot;prop&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Angular</span><br><span class=\"line\">&lt;nz-sider [nzWidth]=&quot;200&quot; style=&quot;background:#fff&quot;&gt;&lt;/nz-sider&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// React</span><br><span class=\"line\">&lt;SelectPicture data=&#123;this.images&#125; /&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>11. 【推荐】统一使用中线命名法来命名目录。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- page-header |  |-- PageHeader.vue</span><br></pre></td></tr></table></figure>\n\n<p><strong>12. 【参考】在 Vue 模板语法中组件属性使用连字符命名法，在 Vue 中使用 JSX 则属性使用驼峰命名法，并且文件文以”.jsx”为文件类型。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Thumbnail</span><br><span class=\"line\">  withHeadPicture=&#123;true&#125;</span><br><span class=\"line\">  data=&#123;this.selectedImages[0]&#125;</span><br><span class=\"line\">  withDetail=&#123;this.enabledDetail&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>13. 【强制】在服务名上使用 <code>Service</code> 后缀</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class UserService &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>14. 【建议】在 Vue 中组件文件名采用大写驼峰命名方式，React 同样如此，在 Angular 中以使用点和横杠来分隔文件名，并且符号名后面追加约定的类型后缀。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Vue</span><br><span class=\"line\">User.vue</span><br><span class=\"line\"></span><br><span class=\"line\">// Angular</span><br><span class=\"line\">app.component.ts</span><br><span class=\"line\">hero-list.component.ts</span><br><span class=\"line\">validation.directive.ts</span><br><span class=\"line\">app.module.ts</span><br><span class=\"line\">user-profile.service.ts</span><br><span class=\"line\"></span><br><span class=\"line\">// React</span><br><span class=\"line\">User.jsx</span><br></pre></td></tr></table></figure>\n\n<p><strong>15. 【参考】在 React 中使用目录名称作为组件名，在目录内容直接使用<em>index</em>作为入口，在 Vue 中不可以，在 Angular 中可以将<em>index</em>作为模块的入口，当然也可以直接作为组件的入口，但这样和其整个命名风格有所背离。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Vue</span><br><span class=\"line\">|-- user-info |  |-- UserInfo.vue</span><br><span class=\"line\"></span><br><span class=\"line\">// Angular |-- user-info |  |-- user-info.component.ts |  |-- index.ts</span><br><span class=\"line\"></span><br><span class=\"line\">// React |-- user-info |  |-- index.jsx</span><br></pre></td></tr></table></figure>\n\n<p><strong>16. 【建议】在工程中文档使用全大写命名</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">README.md</span><br><span class=\"line\">CONTRIBUTORS.md</span><br><span class=\"line\">CHANGELOG.md</span><br></pre></td></tr></table></figure>\n\n<p><strong>17. 【建议】在 Vue 中指令命名使用 <code>filter</code> 作为结束。所有引用命名使用 <code>ref</code> 作为后缀</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formatCouponsFilter</span><br><span class=\"line\">inputRef</span><br><span class=\"line\">selectRef</span><br></pre></td></tr></table></figure>\n\n<p><strong>18. 【强制】测试文件以 <code>.spec</code> 或者 <code>.test</code> 作为命名的一部分。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selectPicture.spec.js</span><br><span class=\"line\">pageHeader.test.js</span><br></pre></td></tr></table></figure>\n\n<p><strong>19. 【建议】复数化变量名称，而不是命名中包含集合类型名称。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 正例</span><br><span class=\"line\">hosts</span><br><span class=\"line\">users</span><br><span class=\"line\">validUsers</span><br><span class=\"line\">hostText</span><br><span class=\"line\">hostJson</span><br><span class=\"line\">portNumber</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 反例</span><br><span class=\"line\">hostList</span><br><span class=\"line\">userList</span><br><span class=\"line\">hostStr</span><br><span class=\"line\">intPort</span><br></pre></td></tr></table></figure>\n\n<p><strong>20. 【建议】在 <code>for</code> 循环中使用 <code>i, j, k</code> 来作为索引，使用 <code>n</code> 表示数量&#x2F;次数&#x2F;限制，使用 <code>e</code> 表示异常, 使用 <code>evt</code> 表示事件对象, 使用 <code>cb</code> 表示回调函数</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">  for (let j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">    for (let k = 0; k &lt; 10; k++) &#123;</span><br><span class=\"line\">      // do something</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>21. 【强制】在解构时使用 <code>const</code> 来声明。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [ foo, bar ] = &#123; foo: 1, bar: 2 &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>22. 【建议】在样式中 Class 命名可以使用一些常用简写来减少长度。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hd -&gt; head</span><br><span class=\"line\">hdr -&gt; header</span><br><span class=\"line\">ft -&gt; foot</span><br><span class=\"line\">ftr -&gt; footer</span><br><span class=\"line\">pg -&gt; page</span><br><span class=\"line\">btn -&gt; button</span><br><span class=\"line\">txt -&gt; text</span><br><span class=\"line\">el -&gt; element</span><br><span class=\"line\">opt -&gt; option</span><br><span class=\"line\">bd -&gt; border</span><br><span class=\"line\">cl -&gt; clearfix</span><br><span class=\"line\">p -&gt; padding</span><br><span class=\"line\">m -&gt; margin</span><br><span class=\"line\">l -&gt; left</span><br><span class=\"line\">r -&gt; right</span><br><span class=\"line\">t -&gt; top</span><br><span class=\"line\">b -&gt; bottom</span><br><span class=\"line\">x -&gt; horizontal</span><br><span class=\"line\">y -&gt; vertical</span><br><span class=\"line\">px -&gt; padding-left, padding-right</span><br><span class=\"line\">py -&gt; padding-top, padding-bottom</span><br><span class=\"line\">pl -&gt; padding-left</span><br><span class=\"line\">m -&gt; margin</span><br><span class=\"line\">dlg -&gt; dialog</span><br><span class=\"line\">sel -&gt; select</span><br><span class=\"line\">img -&gt; image</span><br><span class=\"line\">lbl -&gt; label</span><br><span class=\"line\">chk -&gt; checkbox</span><br><span class=\"line\">tpl -&gt; template</span><br><span class=\"line\">tbl -&gt; table</span><br><span class=\"line\">hoz -&gt; horizontal</span><br><span class=\"line\">vert -&gt; vertical</span><br><span class=\"line\">ref -&gt; reference</span><br><span class=\"line\">wiz -&gt; wizard</span><br><span class=\"line\">oh -&gt; overflow: hidden</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>补充：有些简写不能单独使用，终须组合才能使用，例如: <code>p</code>, <code>m</code>, <code>x</code>, <code>y</code>等单个词汇。</p>\n</blockquote>\n<p><strong>23. 【建议】在命名时采用 BEM 的方式，并适当变化，具体参见后续文章。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.page-header__main</span><br><span class=\"line\">.dialog__content</span><br><span class=\"line\">.gallery-list--wrap</span><br><span class=\"line\">.thumbnail-image--info</span><br><span class=\"line\">.action__btn-group</span><br></pre></td></tr></table></figure>\n\n<p><strong>24. 【建议】样式 Class 命名使用中线连接，ID 命名采用下划线连接。Class 可以同时采用中线和下划线，但要遵循一定的规则。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.thumbnail-item-image</span><br><span class=\"line\">#page_header</span><br></pre></td></tr></table></figure>\n\n<p><strong>25. 【参考】样式 Class 采用组合方式，通过外层 Class 名来限制作用范围。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 正例</span><br><span class=\"line\">&lt;div class=&quot;page-header&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;page-header__wrap common&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;page-header__wrap tab&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 反例</span><br><span class=\"line\">&lt;div class=&quot;page-header&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;page-header__wrap page-header--common&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;page-header__wrap page-header--tab&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>补充：这种方式的目的在于减少长度，通过 “主体 + 分类名词” 的方式，可以解释为 “带分类的主体”，但是有一个问题是全局样式要注意不要使用通用的词汇来定义样式，比如 <code>title</code>, <code>action</code>, <code>header</code>, <code>footer</code>, <code>left</code>, <code>right</code>等，不然会引起样式覆盖。</p>\n</blockquote>\n<p>avaScript 作为前端开发从业人员必须掌握的 3 大基础知识中最重要的一环，也是平是接触时间最长、写得最多的。在开发过程中必然会遇到命名的问题，你会词穷、纠结、惆怅吗？本文的出现相信能够解决大部分烦恼，让你轻松写出符合规范、易读、简短的代码。</p>\n<p>本文将通过大量的实例来试图自圆其说，形成一套系统化、实用的变量命名理化体系。通过按 JavaScript 的数据类型分类着手、细到一个函数的参数命名，并提供众多可选方案，并尽量给出其适用范围和利弊。</p>\n<blockquote>\n<p>需要注意的是由于个人写作水平、和知识有限，很多方面叙述上有些生硬，在分类上也没有什么特别的依据，文章也没有人审稿，所以有什么纰漏还请留言告知。由于写作仓促，内容可能不全，后续会随着工作和学习的深入而不断地调整和更新。</p>\n</blockquote>\n<h1 id=\"布尔值-Boolean-命名\"><a href=\"#布尔值-Boolean-命名\" class=\"headerlink\" title=\"布尔值(Boolean)命名\"></a>布尔值(Boolean)命名</h1><p>Boolean 值是两种逻辑状态的变量，它包含两个值：<strong>真</strong>和<strong>假</strong>。在 JavaScript 中对应 <code>true</code> 和 <code>false</code>，在实践中通常使用数字<code>1</code>表示真值，<code>0</code>来表示假值。</p>\n<p>虽然 Boolean 的状态只有两种但是在命名时可以进一步分类，这里给出几种场景：</p>\n</div><div class=\"\"><h2 id=\"场景一：表示可见性、进行中的状态\"><a href=\"#场景一：表示可见性、进行中的状态\" class=\"headerlink\" title=\"场景一：表示可见性、进行中的状态\"></a>场景一：表示可见性、进行中的状态</h2><p><strong>解释</strong>：<strong>可见性</strong>在通常指页面中的元素、组件是否显示（或者组件挂载到 DOM 上，但并不可见）。<strong>进行中</strong>主要是说明某种状态是处于持续进行中。</p>\n<p>推荐命名方式为 <code>is + 动词（现在进行时）/形容词</code>，同时这种方式也可以直接不写 <code>is</code>，但是为了更好的作区分，建议还是加上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  isShow: &#x27;是否显示&#x27;,</span><br><span class=\"line\">  isVisible: &#x27;是否可见&#x27;,</span><br><span class=\"line\">  isLoading: &#x27;是否处于加载中&#x27;,</span><br><span class=\"line\">  isConnecting: &#x27;是否处于连接中&#x27;,</span><br><span class=\"line\">  isValidating: &#x27;正在验证中&#x27;,</span><br><span class=\"line\">  isRunning: &#x27;正在运行中&#x27;,</span><br><span class=\"line\">  isListening: &#x27;正在监听中&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>： 在 Java 中使用这种方式是有一定副作用的，为什么请移步：<a href=\"https://link.segmentfault.com/?enc=8r+GGCeC9VWmfQ+VLEFhwg==.05DmwxjFVBpEhcTgoDetMN8i3JOhj6QhBxIW/J8tUPqcX8rQBo9XhQPaZlhW1A08\">为什么阿里巴巴禁止开发人员使用 “isSuccess” 作为变量名？</a></p>\n</blockquote>\n</div><div class=\"\"><h2 id=\"场景二：属性状态类\"><a href=\"#场景二：属性状态类\" class=\"headerlink\" title=\"场景二：属性状态类\"></a>场景二：属性状态类</h2><p><strong>解释</strong>：通常用来描述实体（例如：HTML 标签、组件、对象）的功能属性，而且定法比较固定。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  disabled: &#x27;是否禁用&#x27;,</span><br><span class=\"line\">  editable: &#x27;是否可编辑&#x27;,</span><br><span class=\"line\">  clearable: &#x27;是否可清除&#x27;,</span><br><span class=\"line\">  readonly: &#x27;只读&#x27;,</span><br><span class=\"line\">  expandable: &#x27;是否可展开&#x27;,</span><br><span class=\"line\">  checked: &#x27;是否选中&#x27;,</span><br><span class=\"line\">  enumberable: &#x27;是否可枚举&#x27;,</span><br><span class=\"line\">  iterable: &#x27;是否可迭代&#x27;,</span><br><span class=\"line\">  clickable: &#x27;是否可点击&#x27;,</span><br><span class=\"line\">  draggable: &#x27;是否可拖拽&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"场景三：配置类、选项类\"><a href=\"#场景三：配置类、选项类\" class=\"headerlink\" title=\"场景三：配置类、选项类\"></a>场景三：配置类、选项类</h2><p><strong>解释</strong>：主要是指组件功能的开启与关闭，功能属性的配置。</p>\n<p>这是一种比较常见的情景，目前命名方式也有很多种，但是归纳起来也不多。推荐使用 <code>withXx</code> 来表示组件在基本功能形态外的其它功能，比如组件的基础功能到高级功能的开启；使用 <code>enableXx</code> 来表示组件某些功能的开启；使用 <code>allowXx</code> 来表示功能属性的配置；使用 <code>noXx</code> 用于建议功能使用者这个不建议开启。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  withTab: &#x27;是否带选项卡&#x27;,</span><br><span class=\"line\">  withoutTab: &#x27;不带选项卡&#x27;,</span><br><span class=\"line\">  enableFilter: &#x27;开启过滤&#x27;,</span><br><span class=\"line\">  allownCustomScale: &#x27;允许自定义缩放&#x27;,</span><br><span class=\"line\">  shouldClear: &#x27;是否清除&#x27;,</span><br><span class=\"line\">  canSelectItem: &#x27;是否能选中元素&#x27;,</span><br><span class=\"line\">  noColon: &#x27;不显示label后面的冒号&#x27;,</span><br><span class=\"line\">  checkJs: &#x27;检查Js&#x27;,</span><br><span class=\"line\">  emitBOM: &#x27;Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>：如果嫌分类太多，可以只使用其中一种方式，比如在 Typescript 中使用了 <code>allownXx</code> 和 <code>noXx</code>。</p>\n</blockquote>\n<p>除了上面这些带有特定的前置介词、动词方式外还有一些在语义上带有疑问性质的组合通常也是作为 Boolean 命名的一种参考。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  virtualScroll: &#x27;是否启用虚拟滚动模式&#x27;,</span><br><span class=\"line\">  unlinkPanels: &#x27;在范围选择器里取消两个日期面板之间的联动&#x27;,</span><br><span class=\"line\">  validateEvent: &#x27;输入时是否触发表单的校验&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数命名\"><a href=\"#函数命名\" class=\"headerlink\" title=\"函数命名\"></a>函数命名</h1><p>函数在不同的上下文中的叫法也不一样，在对象中称为方法，在类中有构造函数、在异步处理时有回调函数，还有立即执行函数、箭头函数、柯里函数等。</p>\n<p>函数命名的方式常常是和业务逻辑耦合在一起的，但是在命名规则上也有一些常见的模式可以遵循。</p>\n</div><div class=\"\"><h2 id=\"场景一：事件处理\"><a href=\"#场景一：事件处理\" class=\"headerlink\" title=\"场景一：事件处理\"></a>场景一：事件处理</h2><p>事件处理函数是前端平时用到最多的，包括浏览器原生事件、异步事件和组件自定义事件。在写法上最常见的两种命名分别为 <code>onXx</code>、<code>onXxClick</code>和<code>handleXx</code>、<code>handleXxChange</code>。</p>\n<p>这里如何在二者之间选择，可以从二方面来归类。一是，原生事件采用 <code>onXx</code>，而自定义事件使用 <code>handleXx</code>。二是，事件主动监听采用 <code>onXx</code>，被动处理使用 <code>handleXx</code>。</p>\n<p>从实践及三大主流框架的文档关于事件部分的内容来看，推荐使用 <code>handleXx</code> 这种方式，而在表单提交的时候通常采用 <code>onSubmit</code> 函数。</p>\n<p>其实，在实际项目中很少严格这样来命名事件处理函数，因为这种方式有一定的局限性，比如点击按钮打开一个对话框，使用 <code>handleOpenDlg</code> 和 <code>onOpenDlg</code> 都没有直接写 <code>openDlg</code> 方便，如果页面有多个不同功能的对话框采用这种方式会显得变量名过长，而 handle 和 on 就显得没有必要了，比如 <code>hanldeOpenCommentDlg</code> 就没有 <code>openCommentDlg</code> 直白。</p>\n<p>下面列出了一些约定成俗的适用例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  onSubmit: &#x27;提交表单&#x27;,</span><br><span class=\"line\">  handleSizeChange: &#x27;处理分页页数改变&#x27;,</span><br><span class=\"line\">  handlePageChange: &#x27;处理分页每页大小改变&#x27;,</span><br><span class=\"line\">  onKeydown: &#x27;按下键&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"场景二：异步处理\"><a href=\"#场景二：异步处理\" class=\"headerlink\" title=\"场景二：异步处理\"></a>场景二：异步处理</h2><p>这里主要是指在写数据层服务、状态管理中的 Action 命名，以及 Ajax 回调的命名规则。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  getUsers: &#x27;获取用户列表&#x27;,</span><br><span class=\"line\">  fetchToken: &#x27;取得Token&#x27;,</span><br><span class=\"line\">  deleteUser: &#x27;删除用户&#x27;,</span><br><span class=\"line\">  removeTag: &#x27;移除标签&#x27;,</span><br><span class=\"line\">  updateUsrInfo: &#x27;更新用户信息&#x27;,</span><br><span class=\"line\">  addUsr: &#x27;添加用户&#x27;,</span><br><span class=\"line\">  createAccount: &#x27;创建账户&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命名主要围绕数据的增删查找来划分，获取数据通常是 <code>getXx</code> 和 <code>fetchXx</code>，在作者看来两者在使用上的区分在于 <code>getXx</code> 的数据来源不一定直接取自异步的原始数据，可能是加工处理后的，而 <code>fetchXx</code> 是直接拿的原始数据。当然在实际项目中并没有区分，看个人喜好。</p>\n<p><code>deleteXx</code> 主要用于数据删除，而 <code>removeXx</code> 在语义上是移除数据，通常情况数据是还存在的，只是没有显示或数据假删除。<code>updateXx</code> 是指数据更新操作，<code>addXx</code> 是在已有列表数据中添加新的子项、而<code>createXx</code> 主要是创建新的实例，比如新建一个账户。</p>\n</div><div class=\"\"><h2 id=\"场景三：-跳转路由\"><a href=\"#场景三：-跳转路由\" class=\"headerlink\" title=\"场景三： 跳转路由\"></a>场景三： 跳转路由</h2><p>在实际开发过种中，比如在使用 react-router&#x2F;vue-router 时，在模板或者 JSX 中可以直接在标签中写上目标地址，但有些时候跳转的目标地址是经过判断或者组合后的，并且通过事件触发跳转的，这个时候就需要一个函数来处理，那么在函数命名的时候可以考虑使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  toTplDetail: &#x27;跳转到模板详情页面&#x27;,</span><br><span class=\"line\">  navigateToHome: &#x27;导航到首页&#x27;,</span><br><span class=\"line\">  jumpHome: &#x27;跳转首页&#x27;,</span><br><span class=\"line\">  goHome: &#x27;跳转首页&#x27;,</span><br><span class=\"line\">  redirectToLogin: &#x27;重定向到登录页&#x27;,</span><br><span class=\"line\">  switchTab: &#x27;切换Tab选项卡&#x27;,</span><br><span class=\"line\">  backHome: &#x27;回到主页&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐使用 <code>toXx</code> 和 <code>goXx</code> 这两种方式，如果不是在当前页面打开&#x2F;跳转页面，可以使用 <code>toBlankTplDetail</code> 或者 <code>goBlankHome</code> 这种方式来进一步语义化。如果前端页面是位于 Webview 中，也可以考虑采用 <code>toNativeShare</code> 这种方式来命名。</p>\n</div><div class=\"\"><h2 id=\"场景四：框架相关特定方法\"><a href=\"#场景四：框架相关特定方法\" class=\"headerlink\" title=\"场景四：框架相关特定方法\"></a>场景四：框架相关特定方法</h2><p>这里主要是针对前端 3 大主流流行框架，有一些命名是带有特定标识符的，还有就是一些生命周期的命名方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  formatTimeFilter: &#x27;在AngularJs和Vue中，通常用于过滤器命名&#x27;,</span><br><span class=\"line\">  storeCtrl: &#x27;用于AngularJs定义控制器方法&#x27;,</span><br><span class=\"line\">  formatPipe: &#x27;用于Angular中，标识管道方法&#x27;,</span><br><span class=\"line\">  $emit: &#x27;Vue中的实例方法&#x27;,</span><br><span class=\"line\">  $$formatters: &#x27;AngularJs中的内置方法&#x27;,</span><br><span class=\"line\">  beforeCreate: &#x27;Vue的生命周期命名&#x27;,</span><br><span class=\"line\">  componentWillMount: &#x27;React生命周期命名&#x27;,</span><br><span class=\"line\">  componentDidMount: &#x27;React生命周期命名&#x27;,</span><br><span class=\"line\">  afterContentInit: &#x27;Anuglar生命周期命名&#x27;,</span><br><span class=\"line\">  afterViewChecked: &#x27;Angula生命周期命名&#x27;,</span><br><span class=\"line\">  httpProvider: &#x27;AngularJs服务&#x27;,</span><br><span class=\"line\">  userFactory: &#x27;工厂函数&#x27;,</span><br><span class=\"line\">  useCallback: &#x27;React钩子函数&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"场景五：数据的加工\"><a href=\"#场景五：数据的加工\" class=\"headerlink\" title=\"场景五：数据的加工\"></a>场景五：数据的加工</h2><p>这类场景在处理列表的时候经常会碰到，比如排序、过滤、添加额外的字段、根据 ID 和索引获取特定数据等。</p>\n<h3 id=\"情形一：根据特定属性获取属性\"><a href=\"#情形一：根据特定属性获取属性\" class=\"headerlink\" title=\"情形一：根据特定属性获取属性\"></a>情形一：根据特定属性获取属性</h3><p>这里可以参考 DOM 方法的命名，比如：<code>getElememtById()</code>、<code>getElementsByTagName()</code>、<code>getElementsByClassName()</code> 和 <code>getElementsByName()</code>，然后提炼出一个比较实用的模板：<code>getXxByYy()</code>。其中 <code>Xx</code> 可以是：<code>element</code>, <code>item</code>, <code>option</code>, <code>data</code>, <code>selection</code>, <code>list</code>, <code>options</code> 以及一些特定上下文的名字，比如：<code>user(s)</code>, <code>menu(s)</code> 等。<code>Yy</code> 相对来说比较固定，经常用到的就是 <code>id</code>, <code>index</code>, <code>key</code>, <code>value</code>, <code>selected</code>, <code>actived</code> 等。</p>\n<p>除了使用 <code>get</code>，还可以使用 <code>query</code> 和 <code>fetch</code>，但是需要注意和上面提到的异步数据处理作一个区分。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  getItemById: &#x27;根据ID获取数据元素&#x27;,</span><br><span class=\"line\">  getItemsBySelected: &#x27;根据传入的已选列表ID来获取列表全部数据&#x27;,</span><br><span class=\"line\">  queryUserByUid: &#x27;根据UID查询用户&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：在 <code>getItemsBySelected</code> 这种情形下直接写成 <code>getItemsSelected</code> 更好，但只适用于 <code>Yy</code> 为形容词的场景</p>\n<h3 id=\"情形二：格式化数据\"><a href=\"#情形二：格式化数据\" class=\"headerlink\" title=\"情形二：格式化数据\"></a>情形二：格式化数据</h3><p>这里的格式化操作包括排序、调整数据结构、过滤数据、添加属性。命名通常使用 <code>formatXx</code>, <code>convertXx</code>, <code>inverseXx</code>, <code>toggleXx</code>, <code>parseXx</code>, <code>flatXx</code>, 也可以结合数组的一些操作方法来命名，比如 <code>sliceXx</code>, <code>substrXx</code>, <code>spliceXx</code>, <code>sortXx</code>, <code>joinXx</code> 等来命名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  formatDate: &#x27;格式化日期&#x27;,</span><br><span class=\"line\">  convertCurrency: &#x27;转换货币单位&#x27;,</span><br><span class=\"line\">  inverseList: &#x27;反转数据列表&#x27;,</span><br><span class=\"line\">  toggleAllSelected: &#x27;切换所有已选择数据状态&#x27;,</span><br><span class=\"line\">  parseXml: &#x27;解析XML数据&#x27;,</span><br><span class=\"line\">  flatSelect: &#x27;展开选择数据&#x27;,</span><br><span class=\"line\">  sortByDesc: &#x27;按降序排序&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组命名\"><a href=\"#数组命名\" class=\"headerlink\" title=\"数组命名\"></a>数组命名</h1><p>数组的命名推荐使用复数形式来命名，还有就是名词和具有列表意思的单词组合。常见的词汇有 <code>options</code>, <code>list</code>, <code>maps</code>, <code>nodes</code>, <code>entities</code>, <code>collection</code> 等。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  users: &#x27;用户列表&#x27;,</span><br><span class=\"line\">  userList: &#x27;用户列表&#x27;,</span><br><span class=\"line\">  tabOptions: &#x27;选项卡选项&#x27;,</span><br><span class=\"line\">  stateMaps: &#x27;状态映射表&#x27;,</span><br><span class=\"line\">  selectedNodes: &#x27;选中的节点&#x27;,</span><br><span class=\"line\">  btnGroup: &#x27;按钮组&#x27;,</span><br><span class=\"line\">  userEntities: &#x27;用户实体&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"选项元素、下拉元素命名\"><a href=\"#选项元素、下拉元素命名\" class=\"headerlink\" title=\"选项元素、下拉元素命名\"></a>选项元素、下拉元素命名</h1><p>主要针对的是在下拉选择框、选项卡元素、Radio、Checkbox 等数据源每个选项数据的命名。常见的词汇有：<code>title</code>, <code>name</code>, <code>key</code>, <code>label</code>, <code>field</code>, <code>value</code>, <code>id</code>, <code>children</code>, <code>index</code>, <code>nodes</code> 等。</p>\n<p>基中 <code>title/name/key/label/field</code> 作为选项显示名, <code>value/id</code> 用于唯一标识选项，<code>children/nodes</code> 用于包含子节点内容。如果选项元素的语义很明确的情况下也可以直接使用特定单词来代替提到的这些泛指的词汇，例如菜单列表就可以使用 <code>menu</code> 来作为显示名。</p>\n<p>&#x2F;&#x2F; 最常见组合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  title: &#x27;标题&#x27;,</span><br><span class=\"line\">  value: &#x27;ID值&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合二</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  label: &#x27;标签名&#x27;,</span><br><span class=\"line\">  value: &#x27;ID值&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合三</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  name: &#x27;元素名&#x27;,</span><br><span class=\"line\">  id: &#x27;ID值&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合四</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  field: &#x27;字段&#x27;,</span><br><span class=\"line\">  value: &#x27;标识&#x27;,</span><br><span class=\"line\">  index: &#x27;索引&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"当前选项、激活项命名\"><a href=\"#当前选项、激活项命名\" class=\"headerlink\" title=\"当前选项、激活项命名\"></a>当前选项、激活项命名</h1><p>适用列表的选中项、菜单选中项、步骤操作的当前进行步骤、页面路由当前路由等的命名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  activeTab: &#x27;当前选中选项卡&#x27;,</span><br><span class=\"line\">  currentPage: &#x27;当前页&#x27;,</span><br><span class=\"line\">  selectedData: &#x27;当前选项中数据&#x27;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"临时数据、比对数据命名\"><a href=\"#临时数据、比对数据命名\" class=\"headerlink\" title=\"临时数据、比对数据命名\"></a>临时数据、比对数据命名</h1><p>针对在代码中有时会使用一些临时的变量来存储数据、保存数据快照的场景下的命名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  swapData: &#x27;临时交换数据&#x27;,</span><br><span class=\"line\">  tempData: &#x27;临时数据&#x27;,</span><br><span class=\"line\">  dataSnapshot: &#x27;数据快照&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据循环语句中变量命名\"><a href=\"#数据循环语句中变量命名\" class=\"headerlink\" title=\"数据循环语句中变量命名\"></a>数据循环语句中变量命名</h1><p>在使用 <code>for</code> 循环时，多层嵌套请依次使用 <code>i/j/k</code>，超过 3 层可以使用 <code>x/y/z</code>，<code>m/n</code> 来命名。使用 <code>forEach</code>, <code>map</code>, <code>filter</code> 等方法时，每一个元素命名可以根据不同语境下的特殊名字来命名，比如遍历 <code>menus</code>，那么每个元素可以命名为 <code>menu</code>，不然则使用上下文无关的词汇，比如：<code>item</code>, <code>option</code>, <code>data</code>, <code>key</code>, <code>object</code> 等。至于索引通常使用 <code>index</code>，如果多层可以使用 <code>index + 数字</code> 的形式，也可以直接使用 <code>i/j/k</code> 来作为索引，甚至还可以使用 <code>subIndex/grandIndex</code> 这种方式来命名。</p>\n<p>对于在使用 <code>for</code> 循环时数组长度如果需要单独命名的话，可以使用 <code>xxlength/xxLens</code>，或者 <code>xxCount</code>。</p>\n<p>在循环的过程中通常还会统计某个条件下数据匹配的次数、重复元素数量、记录中间结果等情况。这里推荐使用 <code>count</code> 表示次数，<code>skipped</code> 表示跳过的数量，<code>result</code> 表示结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// for 循环</span><br><span class=\"line\">for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">  for (let j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">    for (let k = 0; k &lt; 10; k++) &#123;</span><br><span class=\"line\">      // do something</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for (let i = 0, lens = this.options.length; i &lt; lens; i++) &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// forEach</span><br><span class=\"line\">users.forEach((item, index) =&gt; &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">menus.forEach((menu, index) =&gt; &#123;</span><br><span class=\"line\">  if (menu.children) &#123;</span><br><span class=\"line\">    menu.children.forEach((subMenu, subIndex) =&gt; &#123;</span><br><span class=\"line\">      if (subMenu.children) &#123;</span><br><span class=\"line\">        subMenu.children.forEach((grandMenu, grandIndex) =&gt; &#123;</span><br><span class=\"line\">          // 一个不常用的示例</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法参数命名\"><a href=\"#方法参数命名\" class=\"headerlink\" title=\"方法参数命名\"></a>方法参数命名</h1><p>方法的参数名称和数量在不同的方法中各不相同，但是还是有一些固定的模式可以参考，比如在 Vue 中监听属性变化的新值和旧值；<code>reduce</code> 方法的上一个值，当前值；回调函数的命名、剩余参数的命名等。</p>\n</div><div class=\"\"><h2 id=\"情形一：新值、旧值\"><a href=\"#情形一：新值、旧值\" class=\"headerlink\" title=\"情形一：新值、旧值\"></a>情形一：新值、旧值</h2><p>常见于 Vue 中<code>watch</code> 对像中的属性监听回调函数，推荐使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  oldVal: &#x27;旧值&#x27;,</span><br><span class=\"line\">  newVal: &#x27;新值&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"情形二：上一个值、下一个值和当前值\"><a href=\"#情形二：上一个值、下一个值和当前值\" class=\"headerlink\" title=\"情形二：上一个值、下一个值和当前值\"></a>情形二：上一个值、下一个值和当前值</h2><p>这种情形见于路由的钩子方法，<code>Object.assign</code> 数据拷贝的参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 组合一</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  from: &#x27;从...&#x27;,</span><br><span class=\"line\">  to: &#x27;到...&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合二</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  prev: &#x27;上一个...&#x27;,</span><br><span class=\"line\">  next: &#x27;下一个...&#x27;,</span><br><span class=\"line\">  cur: &#x27;当前&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合三</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  source: &#x27;源&#x27;,</span><br><span class=\"line\">  target: &#x27;目标&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合四</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  start: &#x27;开始&#x27;,</span><br><span class=\"line\">  end: &#x27;结束&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"情形三：异步数据返回\"><a href=\"#情形三：异步数据返回\" class=\"headerlink\" title=\"情形三：异步数据返回\"></a>情形三：异步数据返回</h2><p>用于 Promise 的<code>then</code>方法参数，<code>await</code> 的返回的 Promise 等。可选择的词汇有：<code>res</code>, <code>data</code>, <code>json</code>, <code>entity</code>，推荐使用 <code>res</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">demoPromise.then(res =&gt; &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"情形四：其它情况\"><a href=\"#情形四：其它情况\" class=\"headerlink\" title=\"情形四：其它情况\"></a>情形四：其它情况</h2><p>一些使用不多，但是在编程时约定成俗的命名方式。例如 <code>ch</code> 表示单个字符，<code>str</code> 表示字符串, <code>n</code> 代表次数, <code>reg</code> 表示正则, <code>expr</code> 表示表达式, <code>lens</code> 表示数组长度, <code>count</code> 表示数量, <code>p</code> 表示数据的精度, <code>q</code> 表示查询(query), <code>src</code> 表示数据源(source), <code>no</code> 表示数字(number), <code>rate</code> 表示比率, <code>status</code> 表示状态, <code>bool</code> 表示布尔值, <code>arr</code> 表示数组值, <code>obj</code> 表示对象值, <code>x</code> 和 <code>y</code> 表示坐标两轴, <code>func</code> 表示函数, <code>ua</code>表示 User Agent, <code>size</code> 表示大小, <code>unit</code> 表示单位, <code>hoz</code> 表示水平方向, <code>vert</code> 表示垂直方向, <code>radix</code> 表示基数，根</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 传入单个字符</span><br><span class=\"line\">function upper(ch) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 数量重复</span><br><span class=\"line\">function repeat(str, n)</span><br><span class=\"line\"></span><br><span class=\"line\">// 正则</span><br><span class=\"line\">&#x27;abab&#x27;.replace(reg, &#x27;bb&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事件命名\"><a href=\"#事件命名\" class=\"headerlink\" title=\"事件命名\"></a>事件命名</h1><p>这里根据 DOM、nodejs 和一些框架和 UI 组件的事件进行归纳</p>\n</div><div class=\"\"><h2 id=\"DOM-事件\"><a href=\"#DOM-事件\" class=\"headerlink\" title=\"DOM 事件\"></a><strong>DOM 事件</strong></h2><p>这里列举 DOM 中常见的事件命名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  load: &#x27;已完成加载&#x27;,</span><br><span class=\"line\">  unload: &#x27;资源正在被卸载&#x27;,</span><br><span class=\"line\">  beforeunload: &#x27;资源即将被卸载&#x27;,</span><br><span class=\"line\">  error: &#x27;失败时&#x27;,</span><br><span class=\"line\">  abort: &#x27;中止时&#x27;,</span><br><span class=\"line\">  focus: &#x27;元素获得焦点&#x27;,</span><br><span class=\"line\">  blur: &#x27;元素失去焦点&#x27;,</span><br><span class=\"line\">  cut: &#x27;已经剪贴选中的文本内容并且复制到了剪贴板&#x27;,</span><br><span class=\"line\">  copy: &#x27;已经把选中的文本内容复制到了剪贴板&#x27;,</span><br><span class=\"line\">  paste: &#x27;从剪贴板复制的文本内容被粘贴&#x27;,</span><br><span class=\"line\">  resize: &#x27;元素重置大小&#x27;,</span><br><span class=\"line\">  scroll: &#x27;滚动事件&#x27;,</span><br><span class=\"line\">  reset: &#x27;重置&#x27;,</span><br><span class=\"line\">  submit: &#x27;表单提交&#x27;,</span><br><span class=\"line\">  online: &#x27;在线&#x27;,</span><br><span class=\"line\">  offline: &#x27;离线&#x27;,</span><br><span class=\"line\">  open: &#x27;打开&#x27;,</span><br><span class=\"line\">  close: &#x27;关闭&#x27;,</span><br><span class=\"line\">  connect: &#x27;连接&#x27;,</span><br><span class=\"line\">  start: &#x27;开始&#x27;,</span><br><span class=\"line\">  end: &#x27;结束&#x27;,</span><br><span class=\"line\">  print: &#x27;打印&#x27;,</span><br><span class=\"line\">  afterprint: &#x27;打印机关闭时触发&#x27;,</span><br><span class=\"line\">  click: &#x27;点击&#x27;,</span><br><span class=\"line\">  dblclick: &#x27;双击&#x27;,</span><br><span class=\"line\">  change: &#x27;变动&#x27;,</span><br><span class=\"line\">  select: &#x27;文本被选中被选中&#x27;,</span><br><span class=\"line\">  keydown/keypress/keyup: &#x27;按键事件&#x27;,</span><br><span class=\"line\">  mousemove/mousedown/mouseup/mouseleave/mouseout: &#x27;鼠标事件&#x27;,</span><br><span class=\"line\">  touch: &#x27;轻按&#x27;,</span><br><span class=\"line\">  contextmenu: &#x27;右键点击 (右键菜单显示前)&#x27;,</span><br><span class=\"line\">  wheel: &#x27;滚轮向任意方向滚动&#x27;,</span><br><span class=\"line\">  pointer: &#x27;指针事件&#x27;,</span><br><span class=\"line\">  drag/dragstart/dragend/dragenter/dragover/dragleave: &#x27;拖放事件&#x27;,</span><br><span class=\"line\">  drop: &#x27;元素在有效释放目标区上释放&#x27;,</span><br><span class=\"line\">  play: &#x27;播放&#x27;,</span><br><span class=\"line\">  pause: &#x27;暂停&#x27;,</span><br><span class=\"line\">  suspend: &#x27;挂起&#x27;,</span><br><span class=\"line\">  complete: &#x27;完成&#x27;,</span><br><span class=\"line\">  seek: &#x27;搜索&#x27;,</span><br><span class=\"line\">  install: &#x27;安装&#x27;,</span><br><span class=\"line\">  progress: &#x27;进行&#x27;,</span><br><span class=\"line\">  broadcast: &#x27;广播&#x27;,</span><br><span class=\"line\">  input: &#x27;输入&#x27;,</span><br><span class=\"line\">  message: &#x27;消息&#x27;,</span><br><span class=\"line\">  valid: &#x27;有效&#x27;,</span><br><span class=\"line\">  zoom: &#x27;放大&#x27;,</span><br><span class=\"line\">  rotate: &#x27;旋转&#x27;,</span><br><span class=\"line\">  scale: &#x27;缩放&#x27;,</span><br><span class=\"line\">  upgrade: &#x27;更新&#x27;,</span><br><span class=\"line\">  ready: &#x27;准备好&#x27;,</span><br><span class=\"line\">  active: &#x27;激活&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a><strong>自定义事件</strong></h2><p>在封装组件时提供的事件名除了参考 DOM 事件外，在命名上也可以参考 Github Api 采用 <code>动词过去时 + Event</code> 的方式, Visual Studio Code Api 的 &#96;on +</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  assignedEvent: &#x27;分配事件&#x27;,</span><br><span class=\"line\">  closedEvent: &#x27;关闭事件&#x27;,</span><br><span class=\"line\">  labeledEvent: &#x27;标签事件&#x27;,</span><br><span class=\"line\">  lockedEvent: &#x27;锁事件&#x27;,</span><br><span class=\"line\">  deployedEvent: &#x27;部署事件&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，很多命名方式可以根据场景使用 <code>元素 + click</code> 、<code>元素 + change</code> 、<code>select + 范围</code>等方式灵活运用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  selectAll: &#x27;选择所有&#x27;,</span><br><span class=\"line\">  cellClick: &#x27;当某个单元格被点击时会触发该事件&#x27;,</span><br><span class=\"line\">  sortChange: &#x27;当表格的排序条件发生变化的时候会触发该事件&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"状态管理命名\"><a href=\"#状态管理命名\" class=\"headerlink\" title=\"状态管理命名\"></a>状态管理命名</h1><p>如果在项目中用到了状态管理(redux&#x2F;vuex&#x2F;ngrx)，下面给出一些 ActionType，Mutation, Action 的命名参考。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Redux 的 actionType</span><br><span class=\"line\">LOAD_SUCCESS</span><br><span class=\"line\">LOAD_FAIL</span><br><span class=\"line\">TOGGLE_SHOW_HISTORY</span><br><span class=\"line\">ON_PLAY</span><br><span class=\"line\">ON_LOAD_START</span><br><span class=\"line\">FETCH_SONGS_REQUEST</span><br><span class=\"line\">RECEIVE_PRODUCTS</span><br><span class=\"line\"></span><br><span class=\"line\">// ngrx</span><br><span class=\"line\">const SET_CURRENT_USER = &#x27;[User] Set current&#x27;;</span><br><span class=\"line\">const ADD_THREAD = &#x27;[Thread] Add&#x27;;</span><br><span class=\"line\">const UPDATE_TRIP_SUCCESS = &#x27;Update [Trip] Success&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其它命名\"><a href=\"#其它命名\" class=\"headerlink\" title=\"其它命名\"></a>其它命名</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 日期、时间</span><br><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">sentAt: &#x27;发送时间&#x27;</span><br><span class=\"line\">addAt: &#x27;添加时间&#x27;</span><br><span class=\"line\">updateAt: &#x27;更新时间&#x27;</span><br><span class=\"line\">startDate: &#x27;开始日期&#x27;</span><br><span class=\"line\">endDate: &#x27;结束日期&#x27;</span><br><span class=\"line\">startTime: &#x27;开时时间&#x27;</span><br><span class=\"line\">endTime: &#x27;结束时间&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>本文主要为广大前端开发人员提供一个英文词汇参考，便于记忆和查阅。文中内容按照特定的方式进行分类便于读者关注感兴趣的部分。</p>\n<p>文中的单词并没有给出其词性，很多词性的变化需要读者具备一定的英语语法知识，以便在特定情况下灵活运用。</p>\n<h1 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h1><p>数字部分包含英文的数字表示、数字运算符、数字单位</p>\n<p>infinite: 无限的</p>\n</div><div class=\"\"><h2 id=\"英文数字\"><a href=\"#英文数字\" class=\"headerlink\" title=\"英文数字\"></a>英文数字</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zero: 零</span><br><span class=\"line\">one: 一</span><br><span class=\"line\">two: 二</span><br><span class=\"line\">three: 三</span><br><span class=\"line\">four: 四</span><br><span class=\"line\">five: 五</span><br><span class=\"line\">six: 六</span><br><span class=\"line\">seven: 七</span><br><span class=\"line\">eight: 八</span><br><span class=\"line\">nine: 九</span><br><span class=\"line\">ten: 十</span><br><span class=\"line\">eleven: 十一</span><br><span class=\"line\">twelve: 十二</span><br><span class=\"line\">thirteen: 十三</span><br><span class=\"line\">fourteen: 十四</span><br><span class=\"line\">fifteen: 十五</span><br><span class=\"line\">sixteen: 十六</span><br><span class=\"line\">seventeen: 十七</span><br><span class=\"line\">eighteen: 十八</span><br><span class=\"line\">nineteen: 十九</span><br><span class=\"line\">twenty: 二十</span><br><span class=\"line\">thirty: 三十</span><br><span class=\"line\">forty: 四十</span><br><span class=\"line\">fifty: 五十</span><br><span class=\"line\">eighty: 八十</span><br><span class=\"line\">ninety: 九十</span><br><span class=\"line\">hundred: 百</span><br><span class=\"line\">thousand: 千</span><br><span class=\"line\">million: 百万</span><br><span class=\"line\">billion: 十亿</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"计数单位\"><a href=\"#计数单位\" class=\"headerlink\" title=\"计数单位\"></a>计数单位</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pixel: 像素</span><br><span class=\"line\">percent: 百分比</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 中文数字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ten: 十</span><br><span class=\"line\">hundred: 百</span><br><span class=\"line\">thousand: 千</span><br><span class=\"line\">ten thousand: 万</span><br><span class=\"line\">billion: 亿</span><br><span class=\"line\">trillion: 兆</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 存储容量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte: 字节 B</span><br><span class=\"line\">kilobyte: 千字节 KB</span><br><span class=\"line\">megabyte 兆字节 MB</span><br><span class=\"line\">gigabyte 吉字节 GB</span><br><span class=\"line\">trillionbyte 太字节 TB</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decimal: 十进制</span><br><span class=\"line\">hex: 十六进制</span><br><span class=\"line\">binary: 二进制</span><br><span class=\"line\">octal: 八进制</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add: 加</span><br><span class=\"line\">subtract: 减</span><br><span class=\"line\">multiply: 乘</span><br><span class=\"line\">divide: 除</span><br><span class=\"line\">and: 与</span><br><span class=\"line\">or: 或</span><br><span class=\"line\">not: 非</span><br><span class=\"line\">intersection: 交集</span><br><span class=\"line\">compose: 并集</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"键盘符号\"><a href=\"#键盘符号\" class=\"headerlink\" title=\"键盘符号\"></a>键盘符号</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">punctuator: 标点符号</span><br><span class=\"line\">identifier: 标识符</span><br><span class=\"line\"></span><br><span class=\"line\">// Unique graphic character allocations</span><br><span class=\"line\">// 独特的图形字符分配</span><br><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">exclamation mark: ! 感叹号</span><br><span class=\"line\">quotation mark: &quot; 双引号</span><br><span class=\"line\">percent sign: % 百分号</span><br><span class=\"line\">ampersand: &amp; and符号</span><br><span class=\"line\">apostrophe: &#x27; 撇号</span><br><span class=\"line\">ellipse/apostrophe: …… 省略号</span><br><span class=\"line\">left parenthesis: ( 左括号</span><br><span class=\"line\">right parenthesis: ) 右括号</span><br><span class=\"line\">asterisk: * 星号</span><br><span class=\"line\">plus sign: + 加号</span><br><span class=\"line\">comma: , 逗号</span><br><span class=\"line\">slight-pause mark: 、 顿号</span><br><span class=\"line\">hyphen-minus: - 连字符(-) 或者 减号(-)</span><br><span class=\"line\">full stop: . 句号</span><br><span class=\"line\">middle dot: ・ 中间点</span><br><span class=\"line\">interpunct: · 间隔号</span><br><span class=\"line\">hyphenation point: · 连字点</span><br><span class=\"line\">solidus: / 斜线</span><br><span class=\"line\">colon: : 冒号</span><br><span class=\"line\">semicolon: ; 分号</span><br><span class=\"line\">less-than sign: &lt; 小于符号</span><br><span class=\"line\">equals sign: = 等于符号</span><br><span class=\"line\">greater-than sign: &gt; 大于符号</span><br><span class=\"line\">question mark: ? 问号</span><br><span class=\"line\">low line: _ 下划线</span><br><span class=\"line\">digital 0: 0 数字 0</span><br><span class=\"line\">latin capital letter A:  A 大写拉丁字母</span><br><span class=\"line\">latin small letter A: A 小写拉丁字母</span><br><span class=\"line\"></span><br><span class=\"line\">// Alternative graphic character allocations</span><br><span class=\"line\">// 可选的图形字符分配</span><br><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">number sign: # 数字符号</span><br><span class=\"line\">pound sign: £ 英镑符号</span><br><span class=\"line\">dollar sign: $ 美元符号</span><br><span class=\"line\">currency sign:  货币符</span><br><span class=\"line\"></span><br><span class=\"line\">// IRV(International Reference Version) graphic character allocations</span><br><span class=\"line\">// IRV图形字符分配</span><br><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">number sign: # 数字符号</span><br><span class=\"line\">dollar sign: $ 美元符号</span><br><span class=\"line\">commercial at: @</span><br><span class=\"line\">left square bracket: [ 左方括号</span><br><span class=\"line\">reverse solidus:  反斜线</span><br><span class=\"line\">right square bracket: ] 右方括号</span><br><span class=\"line\">circumflex accent: ^ 抑扬音符号</span><br><span class=\"line\">grave accent: ` 沉音符</span><br><span class=\"line\">left curly bracket: &#123; 左花括号</span><br><span class=\"line\">vertical line: | 垂直线</span><br><span class=\"line\">right curly bracked: &#125; 右花括号</span><br><span class=\"line\">tilde: ~ 波浪符</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明：由于<a href=\"https://link.segmentfault.com/?enc=YykBjtgFkx/2EOzGtHbG+Q==.MnCoapm6qUK6g38kx76BRxEjFDEbCyZewPa9ca8lcskAjsFjoNiosJToubJxgK+B1I5/tKAff6DYIvoOo+/cAbIkswGkxu3W3qvnJYZoOf0=\">标点符号</a>中英文语言环境同一个符号也不同叫法别名，因此上面列举的词汇只能说涉及到了部分，并没有把所有 Dialect(方言) 包含进来。</p>\n<p>注：<code>·</code> 符号在不同的上下文中有不同的叫法，比如“间隔号”、“中间点”、“项目符号”、“连子点”等，虽然肉眼看起来没有什么大的区别，但是在计算机中的 Unicode 编码是不一样的，更多参见<a href=\"https://link.segmentfault.com/?enc=STENo+rzOkZyEp/AgKZwYw==.5GeyGZArq33ewuH8l+A9Tqgk0fxRV1+63cCElzq24xvnNpZkpYmovtUNhk/jQQ55h0bw+5ynrGnSibAp3IjdMA==\">间隔符</a></p>\n</blockquote>\n<h1 id=\"时间、日期\"><a href=\"#时间、日期\" class=\"headerlink\" title=\"时间、日期\"></a>时间、日期</h1><p>下面虽然列举了很多时间相关的词汇，但是在实际前端开发过程中用到的就年、月、日和时、分、秒、毫秒。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time: 时间</span><br><span class=\"line\">date: 日期</span><br><span class=\"line\">workday: 工作日</span><br><span class=\"line\">weekend: 周末</span><br><span class=\"line\">season: 季节</span><br><span class=\"line\">anniversary: 周年</span><br><span class=\"line\">century: 世纪；百年</span><br><span class=\"line\">quarter: 一刻钟</span><br><span class=\"line\">holiday: 节日；假日</span><br><span class=\"line\">morning: 上午</span><br><span class=\"line\">noon/midday: 中午</span><br><span class=\"line\">afternoon: 下午</span><br><span class=\"line\">night: 晚上</span><br><span class=\"line\">midnight: 半夜</span><br><span class=\"line\">yesterday: 昨天</span><br><span class=\"line\">today: 今天</span><br><span class=\"line\">tomorrow: 明天</span><br><span class=\"line\">clock: 时钟</span><br><span class=\"line\">now: 现在；如今；立刻</span><br><span class=\"line\">nowadays: 现今；时下</span><br><span class=\"line\">present: 现在（的）</span><br><span class=\"line\">former: 从前的；前任的</span><br><span class=\"line\">before: 在...之前</span><br><span class=\"line\">after: 在...之后</span><br><span class=\"line\">future: 将来</span><br><span class=\"line\">permanent: 永久的；不变的</span><br><span class=\"line\">period: 周期；期间；一段时间</span><br><span class=\"line\">during: 在...的期间；在...期间的某个时候</span><br><span class=\"line\">term: 学期；期限</span><br><span class=\"line\">early: 早期的，提早；在初期</span><br><span class=\"line\">ahead: 在前的；领先的；提前的</span><br><span class=\"line\">later: 后来；稍后；随后</span><br><span class=\"line\">start/begin: 开始</span><br><span class=\"line\">end: 结束</span><br><span class=\"line\">pause: 暂停</span><br><span class=\"line\">suspend: 推迟；使暂停</span><br><span class=\"line\">timeout: 超时；暂时休息；工间休息</span><br><span class=\"line\">interval: 间隔</span><br><span class=\"line\">overtime: 超时的；加班的，加班时间</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">year: 年</span><br><span class=\"line\">month: 月</span><br><span class=\"line\">day: 日</span><br><span class=\"line\">week: 周</span><br><span class=\"line\">hour: 小时</span><br><span class=\"line\">minute: 分</span><br><span class=\"line\">seconds: 秒</span><br><span class=\"line\">millisecond: 毫秒</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"星期\"><a href=\"#星期\" class=\"headerlink\" title=\"星期\"></a>星期</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Monday: 星期一</span><br><span class=\"line\">Tuesday: 星期二</span><br><span class=\"line\">Wednesday: 星期三</span><br><span class=\"line\">Thursday: 星期四</span><br><span class=\"line\">Friday: 星期五</span><br><span class=\"line\">Saturday: 星期六</span><br><span class=\"line\">Sunday: 星期日</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"月份\"><a href=\"#月份\" class=\"headerlink\" title=\"月份\"></a>月份</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">January: 一月</span><br><span class=\"line\">February: 二月</span><br><span class=\"line\">March: 三月</span><br><span class=\"line\">April: 四月</span><br><span class=\"line\">May: 五月</span><br><span class=\"line\">June: 六月</span><br><span class=\"line\">July: 七月</span><br><span class=\"line\">August: 八月</span><br><span class=\"line\">September: 九月</span><br><span class=\"line\">October: 十月</span><br><span class=\"line\">November: 十一月</span><br><span class=\"line\">December: 十二月</span><br></pre></td></tr></table></figure>\n\n</div><div class=\"\"><h2 id=\"季节\"><a href=\"#季节\" class=\"headerlink\" title=\"季节\"></a>季节</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring: 春季</span><br><span class=\"line\">summer: 夏季</span><br><span class=\"line\">autumn: 秋季</span><br><span class=\"line\">winter: 冬季</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map: 地图</span><br><span class=\"line\">location: 地理位置</span><br><span class=\"line\">place: 地方</span><br><span class=\"line\">earth: 地球</span><br><span class=\"line\">province: 省</span><br><span class=\"line\">city: 市</span><br><span class=\"line\">district: 区</span><br><span class=\"line\">area: 区域、范围</span><br><span class=\"line\">region: 地区、范围、部位</span><br><span class=\"line\">address: 地址</span><br><span class=\"line\">edges: 边界</span><br><span class=\"line\">boundary: 边界；范围；分界线</span><br><span class=\"line\">coordinate: 坐标</span><br><span class=\"line\">east: 东</span><br><span class=\"line\">south: 南</span><br><span class=\"line\">west: 西</span><br><span class=\"line\">north: 北</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方位\"><a href=\"#方位\" class=\"headerlink\" title=\"方位\"></a>方位</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">direction: 方向</span><br><span class=\"line\">position: 位置</span><br><span class=\"line\">top: 上</span><br><span class=\"line\">right: 右</span><br><span class=\"line\">bottom: 下</span><br><span class=\"line\">left: 左</span><br><span class=\"line\">opposite: 对面的</span><br><span class=\"line\">center: 中间（水平）</span><br><span class=\"line\">middle: 中间（垂直）</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"排版\"><a href=\"#排版\" class=\"headerlink\" title=\"排版\"></a>排版</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstract: 摘要</span><br><span class=\"line\">annex: 附录</span><br><span class=\"line\">suffix: 后缀；词尾</span><br><span class=\"line\">prefix: 前缀</span><br><span class=\"line\">titl: 标题</span><br><span class=\"line\">summary: 总结；概要</span><br><span class=\"line\">specifications: 规范</span><br><span class=\"line\">headline: 大标题；内容提要；栏外标题</span><br><span class=\"line\">preface: 前言；引语；序言</span><br><span class=\"line\">chapter: 章；篇；回</span><br><span class=\"line\">section: 章节；部分</span><br><span class=\"line\">abbreviation: 缩写；缩写词</span><br><span class=\"line\"></span><br><span class=\"line\">font: 字体</span><br><span class=\"line\">color: 颜色</span><br><span class=\"line\">heading: 标题</span><br><span class=\"line\">align: 对齐</span><br><span class=\"line\">align left/align center/align right: 左对齐/居中对齐/右对齐</span><br><span class=\"line\">align top/align middle/align bottom: 顶对齐/垂直居中/底部对齐</span><br><span class=\"line\">text: 文本</span><br><span class=\"line\">zoom: 放大</span><br><span class=\"line\">size: 大小</span><br><span class=\"line\">opacity: 透明度</span><br><span class=\"line\">position: 位置</span><br><span class=\"line\">rotation: 旋转</span><br><span class=\"line\">fill: 填充</span><br><span class=\"line\">shadow: 阴影</span><br><span class=\"line\">blur: 模糊</span><br><span class=\"line\">filter: 滤镜</span><br><span class=\"line\">radius: 圆角</span><br><span class=\"line\">unite: 合并</span><br><span class=\"line\">subtract: 差集</span><br><span class=\"line\">intersect: 交集</span><br><span class=\"line\">exclude: 排除</span><br><span class=\"line\">join: 合并</span><br><span class=\"line\">insert image: 插入图片</span><br><span class=\"line\">code: 插入代码</span><br><span class=\"line\">highlight: 高亮</span><br><span class=\"line\">strikethrough: 删除线</span><br><span class=\"line\">underscore: 下划线</span><br><span class=\"line\">italic: 斜体</span><br><span class=\"line\">bold: 粗体</span><br><span class=\"line\">horizontal line: 水平分隔线</span><br><span class=\"line\">attach file: 附加文件</span><br><span class=\"line\">checklist: 清单列表</span><br><span class=\"line\">bullet: 项目符号</span><br><span class=\"line\">indention: 缩进</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"形状\"><a href=\"#形状\" class=\"headerlink\" title=\"形状\"></a>形状</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">figure: 图形</span><br><span class=\"line\">stroke: 描边</span><br><span class=\"line\">fill: 填充</span><br><span class=\"line\">border: 边框</span><br><span class=\"line\">line: 线</span><br><span class=\"line\">rectangle: 矩形</span><br><span class=\"line\">ellipse: 椭圆</span><br><span class=\"line\">sphere: 球</span><br><span class=\"line\">triangle: 三角形</span><br><span class=\"line\">sector: 扇形</span><br><span class=\"line\">annulus: 圆环</span><br><span class=\"line\">trapezium: 梯形</span><br><span class=\"line\">polygon: 多边形</span><br><span class=\"line\">arch: 弓形</span><br><span class=\"line\">circle: 圆、循环、周期</span><br><span class=\"line\">star: 星形、评分</span><br><span class=\"line\">cylinder: 圆柱</span><br><span class=\"line\">circle cone: 圆锥</span><br><span class=\"line\">love: 爱心</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grammar: 语法</span><br><span class=\"line\">syntax: 句法</span><br><span class=\"line\">morphology: 词法</span><br><span class=\"line\">structure: 结构</span><br><span class=\"line\">sentence: 句子</span><br><span class=\"line\">clause: 从句</span><br><span class=\"line\">phrase: 词组</span><br><span class=\"line\">word: 单词</span><br><span class=\"line\">adjective: 形容词</span><br><span class=\"line\">verb: 动词</span><br><span class=\"line\">noun: 名词</span><br><span class=\"line\">abstract noun: 抽象名词</span><br><span class=\"line\">pronouns: 代词</span><br><span class=\"line\">determiner: 限定词</span><br><span class=\"line\">conjunction: 连词</span><br><span class=\"line\">interjection: 感叹词</span><br><span class=\"line\">adverb: 副词</span><br><span class=\"line\">preposition: 介词；前置词</span><br><span class=\"line\">derivative: 派生词</span><br><span class=\"line\">numeral: 数词</span><br><span class=\"line\">auxiliary: 助动词</span><br><span class=\"line\">tense: 时态</span><br><span class=\"line\">passive: 被动语态</span><br><span class=\"line\">gerund: 动名词</span><br><span class=\"line\">antonym: 反义词</span><br><span class=\"line\">article: 冠词</span><br><span class=\"line\">antecedent: 先行词</span><br><span class=\"line\">regular/irregular verbs: 规则╱不规则动词</span><br><span class=\"line\">transitive/intransitive verbs: 及物╱不及物动词</span><br><span class=\"line\">subject: 主语</span><br><span class=\"line\">object: 宾语</span><br><span class=\"line\">predicate: 谓语；表语</span><br><span class=\"line\">adverbial: 状语</span><br><span class=\"line\">complement: 补语</span><br><span class=\"line\">appositive: 同位语</span><br><span class=\"line\">adjunct: 修饰语</span><br><span class=\"line\">affix: 词缀</span><br><span class=\"line\">acronym: 首字母缩略词</span><br><span class=\"line\">abbreviation: 缩写词</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用颜色\"><a href=\"#常用颜色\" class=\"headerlink\" title=\"常用颜色\"></a>常用颜色</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pink: 粉红</span><br><span class=\"line\">violet: 紫罗兰</span><br><span class=\"line\">magenta: 洋红(玫瑰红)</span><br><span class=\"line\">purple: 紫色</span><br><span class=\"line\">blue: 纯蓝</span><br><span class=\"line\">azure: 蔚蓝色</span><br><span class=\"line\">cyan: 青色</span><br><span class=\"line\">green: 纯绿</span><br><span class=\"line\">lime: 闪光绿</span><br><span class=\"line\">ivory: 象牙色</span><br><span class=\"line\">yellow: 纯黄</span><br><span class=\"line\">olive: 橄榄</span><br><span class=\"line\">gold: 金色</span><br><span class=\"line\">orange: 橙色</span><br><span class=\"line\">snow: 雪白色</span><br><span class=\"line\">red: 纯红</span><br><span class=\"line\">brown: 棕色</span><br><span class=\"line\">white: 纯白</span><br><span class=\"line\">sliver: 银灰色</span><br><span class=\"line\">gray: 灰色</span><br><span class=\"line\">black: 纯黑</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"JavaScript-语言相关\"><a href=\"#JavaScript-语言相关\" class=\"headerlink\" title=\"JavaScript 语言相关\"></a>JavaScript 语言相关</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: 数据类型</span><br><span class=\"line\">primitive type: 原始类型</span><br><span class=\"line\">object: 对象</span><br><span class=\"line\">array: 数组</span><br><span class=\"line\">string: 字符串</span><br><span class=\"line\">boolean: 布尔值</span><br><span class=\"line\">symbol: 符号</span><br><span class=\"line\">undefined: 未定义</span><br><span class=\"line\">null: 空</span><br><span class=\"line\">function: 函数</span><br><span class=\"line\">array function: 箭头函数</span><br><span class=\"line\">curried function: 柯里函数</span><br><span class=\"line\">callback: 回调函数</span><br><span class=\"line\">class: 类</span><br><span class=\"line\">module: 模块</span><br><span class=\"line\">import: 导入</span><br><span class=\"line\">export: 导出</span><br><span class=\"line\">constructor: 构造函数</span><br><span class=\"line\">prototype: 原型</span><br><span class=\"line\">reference: 引用</span><br><span class=\"line\">closure: 闭包</span><br><span class=\"line\">destructure: 解构</span><br><span class=\"line\">variable: 变量</span><br><span class=\"line\">property: 属性</span><br><span class=\"line\">attribute: 特性</span><br><span class=\"line\">iterator: 迭代器</span><br><span class=\"line\">generator: 生成器</span><br><span class=\"line\">yield: 产出</span><br><span class=\"line\">observable: 可观赛的</span><br><span class=\"line\">hosit: 提升</span><br><span class=\"line\">operator: 运算符</span><br><span class=\"line\">equal: 相等</span><br><span class=\"line\">statement: 语句</span><br><span class=\"line\">block: 块</span><br><span class=\"line\">comment: 注释</span><br><span class=\"line\">whitespace: 空格</span><br><span class=\"line\">event: 事件</span><br><span class=\"line\">listener: 监听器</span><br><span class=\"line\">accessor: 访问器</span><br><span class=\"line\">decorator: 装饰器</span><br><span class=\"line\">proxy: 代理</span><br><span class=\"line\">reflect: 反射</span><br><span class=\"line\">promise: 承诺</span><br><span class=\"line\">test: 测试</span><br><span class=\"line\">fetch: 拿；取</span><br><span class=\"line\">descriptor: 描述符号</span><br><span class=\"line\">sync: 同步</span><br><span class=\"line\">async: 异步</span><br><span class=\"line\">await: 等候</span><br><span class=\"line\">find: 查找</span><br><span class=\"line\">every: 所有</span><br><span class=\"line\">some: 部分</span><br><span class=\"line\">foreach: 为每一个</span><br><span class=\"line\">map: 遍历</span><br><span class=\"line\">filter: 过滤</span><br><span class=\"line\">pad: 填充</span><br><span class=\"line\">index: 索引</span><br><span class=\"line\">data: 数据</span><br><span class=\"line\">slice: 把...分成部分</span><br><span class=\"line\">splice: 拼接，接合</span><br><span class=\"line\">reduce: 归纳</span><br><span class=\"line\">push: 推</span><br><span class=\"line\">pull: 拉</span><br><span class=\"line\">pop: 弹出</span><br><span class=\"line\">split: 分离</span><br><span class=\"line\">join: 连接</span><br><span class=\"line\">flatten: 变平</span><br><span class=\"line\">replace: 替换</span><br><span class=\"line\">search: 搜索</span><br><span class=\"line\">scope: 作用域</span><br><span class=\"line\">timeout: 超时</span><br><span class=\"line\">interval: 间隔</span><br><span class=\"line\">value: 值</span><br><span class=\"line\">define: 定义</span><br><span class=\"line\">math: 数学</span><br><span class=\"line\">sum: 求和</span><br><span class=\"line\">configurable: 可配置</span><br><span class=\"line\">enumerable: 可枚举</span><br><span class=\"line\">writable: 可写</span><br><span class=\"line\">local: 局部的</span><br><span class=\"line\">global: 全局的</span><br><span class=\"line\">not: 非</span><br><span class=\"line\">or: 或</span><br><span class=\"line\">xor: 异或</span><br><span class=\"line\">and: 且</span><br><span class=\"line\">regexp: 正则表达式</span><br><span class=\"line\">match: 匹配</span><br><span class=\"line\">pattern: 模式</span><br><span class=\"line\">greed: 贪婪</span><br><span class=\"line\">color: 颜色</span><br><span class=\"line\">rest: 剩余</span><br><span class=\"line\">assign: 赋值</span><br><span class=\"line\">tag: 标签</span><br><span class=\"line\">buffer: 缓冲区</span><br><span class=\"line\">super: 极好的</span><br><span class=\"line\">extend: 扩展</span><br><span class=\"line\">readonly: 只读</span><br><span class=\"line\">override: 重写</span><br><span class=\"line\">dynamic: 动态的；多态</span><br><span class=\"line\">default: 默认的</span><br><span class=\"line\">implement: 实现；执行</span><br><span class=\"line\">strict: 严格的</span><br><span class=\"line\">deprecate: 不推荐；反对</span><br><span class=\"line\">tab: 制表符</span><br><span class=\"line\">space: 空格</span><br><span class=\"line\">indentation: 缩进</span><br><span class=\"line\">public: 公共的</span><br><span class=\"line\">private: 私有的</span><br><span class=\"line\">namespace: 命名空间</span><br><span class=\"line\">member: 成员</span><br><span class=\"line\">method: 方法</span><br><span class=\"line\">parameter/argument: 参数</span><br><span class=\"line\">instance: 实例</span><br><span class=\"line\">ternary: 三目运算</span><br><span class=\"line\">literary: 字面量</span><br><span class=\"line\">template: 模板</span><br><span class=\"line\">character: 字符</span><br><span class=\"line\">markup: 标记</span><br><span class=\"line\">syntax: 语法</span><br><span class=\"line\">equality: 相等</span><br><span class=\"line\">conditional statements: 条件判断语句</span><br><span class=\"line\">true: 是</span><br><span class=\"line\">false: 否</span><br><span class=\"line\">type-checker: 类型检查</span><br><span class=\"line\">compile-time: 编译时</span><br><span class=\"line\">lexical scope: 词法作用域</span><br><span class=\"line\">static scope: 静态作用域</span><br><span class=\"line\">loop: 循环</span><br><span class=\"line\">notation: 符号</span><br><span class=\"line\">operand: 操作数；运算对象</span><br><span class=\"line\">ordinary object: 普通对象</span><br><span class=\"line\">standard object: 标准对象</span><br><span class=\"line\">built-in object: 内置对象</span><br><span class=\"line\">exotic object: 外来对象</span><br><span class=\"line\">last-in/first-out manner: 后进先出的方式</span><br><span class=\"line\">reserved word: 保留单词</span><br><span class=\"line\">signature: 签名</span><br><span class=\"line\">enumerable: 可枚举的</span><br><span class=\"line\">iterable: 可迭代的</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用简写\"><a href=\"#常用简写\" class=\"headerlink\" title=\"常用简写\"></a>常用简写</h1><p>简写后面用 ”*“ 号标注的为推荐使用简写，可以放心大胆在项目中使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hd -&gt; head</span><br><span class=\"line\">hdr -&gt; header</span><br><span class=\"line\">bd -&gt; body</span><br><span class=\"line\">ft -&gt; foot</span><br><span class=\"line\">ftr -&gt; footer</span><br><span class=\"line\">tbl -&gt; table</span><br><span class=\"line\">el -&gt; element **</span><br><span class=\"line\">cnt -&gt; content</span><br><span class=\"line\">cmp -&gt; component</span><br><span class=\"line\">btn -&gt; button **</span><br><span class=\"line\">sel -&gt; select *</span><br><span class=\"line\">opt -&gt; option *</span><br><span class=\"line\">chk -&gt; checkbox</span><br><span class=\"line\">lbl -&gt; label</span><br><span class=\"line\">wiz -&gt; wizard *</span><br><span class=\"line\">bg -&gt; background **</span><br><span class=\"line\">cur -&gt; current **</span><br><span class=\"line\">prev -&gt; previous **</span><br><span class=\"line\">idx -&gt; index</span><br><span class=\"line\">len -&gt; length **</span><br><span class=\"line\">pg -&gt; page</span><br><span class=\"line\">vm -&gt; view page</span><br><span class=\"line\">repo -&gt; repository *</span><br><span class=\"line\">org -&gt; organization *</span><br><span class=\"line\">ref -&gt; reference *</span><br><span class=\"line\">res -&gt; response **</span><br><span class=\"line\">req -&gt; request **</span><br><span class=\"line\">msg -&gt; message **</span><br><span class=\"line\">str -&gt; string **</span><br><span class=\"line\">ch -&gt; chracter *</span><br><span class=\"line\">lbl -&gt; label</span><br><span class=\"line\">img -&gt; image **</span><br><span class=\"line\">buf -&gt; buffer *</span><br><span class=\"line\">usr -&gt; user</span><br><span class=\"line\">args -&gt; arguments *</span><br><span class=\"line\">no -&gt; number</span><br><span class=\"line\">err -&gt; error *</span><br><span class=\"line\">tmp/temp -&gt; temporary **</span><br><span class=\"line\">rst -&gt; result</span><br><span class=\"line\">bdr -&gt; border</span><br><span class=\"line\">fn/func -&gt; function **</span><br><span class=\"line\">nav -&gt; navigator *</span><br><span class=\"line\">val -&gt; value</span><br><span class=\"line\">params -&gt; parameter *</span><br><span class=\"line\">dev -&gt; development *</span><br><span class=\"line\">prod -&gt; product *</span><br><span class=\"line\">util -&gt; utility *</span><br><span class=\"line\">hoc -&gt; high order component *</span><br><span class=\"line\">cb -&gt; callback *</span><br><span class=\"line\">lib -&gt; library *</span><br><span class=\"line\">prop(s) -&gt; property(ies) *</span><br><span class=\"line\">attr(s) -&gt; attribute(s) *</span><br><span class=\"line\">arr -&gt; array *</span><br><span class=\"line\">conf -&gt; config *</span><br><span class=\"line\">dlg -&gt; dialog</span><br><span class=\"line\">e/ev/evt -&gt; event **</span><br><span class=\"line\">pkg -&gt; package *</span><br><span class=\"line\">tpl -&gt; template *</span><br><span class=\"line\">addr -&gt; address</span><br><span class=\"line\">desc -&gt; descending</span><br><span class=\"line\">aesc -&gt; aescending</span><br><span class=\"line\">expr -&gt; expression **</span><br><span class=\"line\">src -&gt; source **</span><br><span class=\"line\">hoz -&gt; horizontal</span><br><span class=\"line\">vert -&gt; vertical</span><br><span class=\"line\">abbr -&gt; abbreviate</span><br><span class=\"line\">env -&gt; envirnment **</span><br><span class=\"line\">sec -&gt; seconds *</span><br><span class=\"line\">ms -&gt; millisecond **</span><br><span class=\"line\">bool -&gt; boolean *</span><br><span class=\"line\">dbl -&gt; double</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用词汇及其变体\"><a href=\"#常用词汇及其变体\" class=\"headerlink\" title=\"常用词汇及其变体\"></a>常用词汇及其变体</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">active -&gt; inactive -&gt; deactive</span><br><span class=\"line\">load -&gt; preload -&gt; unload</span><br><span class=\"line\">coming -&gt; incoming</span><br><span class=\"line\">with -&gt; without</span><br><span class=\"line\">sync -&gt; async</span><br><span class=\"line\">allowed -&gt; unallowed</span><br><span class=\"line\">going -&gt; ingoing -&gt; ongoing</span><br><span class=\"line\">online -&gt; offline</span><br><span class=\"line\">visible -&gt; invisible</span><br><span class=\"line\">finite -&gt; infinite</span><br><span class=\"line\">able -&gt; enabled -&gt; unable -&gt; disabled</span><br><span class=\"line\">login -&gt; logout</span><br><span class=\"line\">singin -&gt; signout</span><br><span class=\"line\">check -&gt; uncheck</span><br><span class=\"line\">select -&gt; unselect</span><br><span class=\"line\">inlet -&gt; outlet</span><br><span class=\"line\">regular -&gt; irregular</span><br><span class=\"line\">implicit -&gt; explicit</span><br><span class=\"line\">import -&gt; export</span><br><span class=\"line\">micro -&gt; macro</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"专用名词缩写\"><a href=\"#专用名词缩写\" class=\"headerlink\" title=\"专用名词缩写\"></a>专用名词缩写</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GUI -&gt; Graphical User Interface 图形用户界面</span><br><span class=\"line\">OEM -&gt; Original Equipment manufacturer 原始设备制造商</span><br><span class=\"line\">CMS -&gt; Content Manager System 内容管理系统</span><br><span class=\"line\">PWA -&gt; Progressive Web App 渐近式Web应用</span><br><span class=\"line\">SDK -&gt; Software Development Kit 软件开发工具包</span><br><span class=\"line\">IDE -&gt; Integrated Development Envirnment 集成开发环境</span><br><span class=\"line\">SOA -&gt; Service-Oriented Architecture 面向服务架构</span><br><span class=\"line\">ORM -&gt; Object Relation Mapping 对象关系映射</span><br><span class=\"line\">MVC -&gt; Model View Controller</span><br><span class=\"line\">OOP -&gt; Object Oriented programing 面向对象编程</span><br><span class=\"line\">BEM -&gt; Block Element Modifier 块-元素-修饰符</span><br><span class=\"line\">BFC -&gt; Block Format Context</span><br><span class=\"line\">SKU -&gt; Stock Keeping Unit 库存单位</span><br><span class=\"line\">AJAX -&gt; Asynchronous JavaScript and</span><br><span class=\"line\">HOC -&gt; High Order Component 高阶组件</span><br><span class=\"line\">I18N -&gt; Internationalization 国际化</span><br><span class=\"line\">GUID -&gt; Globally Unique Identifier 全球唯一标识符</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"UI-组件相关\"><a href=\"#UI-组件相关\" class=\"headerlink\" title=\"UI 组件相关\"></a>UI 组件相关</h1><p>参考 Element、Antd、Bootstrap 和 Material Design</p>\n<p>&#x2F;&#x2F; 通用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Head: 标题</span><br><span class=\"line\">Label: 标签</span><br><span class=\"line\">Button: 按钮</span><br><span class=\"line\">Icon: 图标</span><br><span class=\"line\">Link: 文字链接</span><br><span class=\"line\">Input: 输入框</span><br><span class=\"line\">Checkbox: 筛选框</span><br><span class=\"line\">Radio: 单选框</span><br><span class=\"line\">Select: 下拉选择框</span><br><span class=\"line\">Switch: 开关</span><br><span class=\"line\">Upload: 文件上传</span><br><span class=\"line\">Form: 表单</span><br><span class=\"line\">Radio: 音频</span><br><span class=\"line\">Video: 视频</span><br><span class=\"line\">Canvas: 画布</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 布局</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Layout: 布局</span><br><span class=\"line\">Grid: 网格；栅格</span><br><span class=\"line\">Container: 布局容器</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 导航</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Affix: 固钉</span><br><span class=\"line\">Breadcrumb: 面包屑</span><br><span class=\"line\">Dropdown: 下拉菜单</span><br><span class=\"line\">Menu: 导航菜单</span><br><span class=\"line\">Pagination: 分页</span><br><span class=\"line\">PageHeader: 页头</span><br><span class=\"line\">Steps: 步骤条</span><br><span class=\"line\">NavMenu: 导航菜单</span><br><span class=\"line\">Minimap: 小地图</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 数据录入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AutoComplete: 自动完成</span><br><span class=\"line\">Cascader: 级联选择框</span><br><span class=\"line\">DatePicker: 日期选择框</span><br><span class=\"line\">TimePicker: 时间选择框</span><br><span class=\"line\">DateRangePicker: 日期区间选择框</span><br><span class=\"line\">ColorPicker: 颜色选择框</span><br><span class=\"line\">InputNumber: 数字输入框</span><br><span class=\"line\">Mentions: 提及</span><br><span class=\"line\">Rate: 评分</span><br><span class=\"line\">Slider: 滑动输入条；滑块</span><br><span class=\"line\">TreeSelect: 树选择器</span><br><span class=\"line\">Transfer: 穿梭框</span><br><span class=\"line\">Wizard: 向导</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 数据展示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Avatar: 头像</span><br><span class=\"line\">Badge: 徽标数</span><br><span class=\"line\">Comment: 评论</span><br><span class=\"line\">Collapse: 折叠面板</span><br><span class=\"line\">Carousel: 走马灯；轮播</span><br><span class=\"line\">Card: 卡片</span><br><span class=\"line\">Panel: 面板</span><br><span class=\"line\">Calender: 日历</span><br><span class=\"line\">Descriptions: 描述列表</span><br><span class=\"line\">Empty: 空状态</span><br><span class=\"line\">List: 列表</span><br><span class=\"line\">Popover: 气泡卡片</span><br><span class=\"line\">Statistic: 统计数值</span><br><span class=\"line\">Tree: 树形控件</span><br><span class=\"line\">Tooltip: 文字提示</span><br><span class=\"line\">Timeline: 时间轴</span><br><span class=\"line\">Tag: 标签</span><br><span class=\"line\">Tabs: 标签页</span><br><span class=\"line\">InfiniteScroll: 无限滚动</span><br><span class=\"line\">Chips: 芯片</span><br><span class=\"line\">Dialog: 对话框</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 反馈</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alert: 警告提示</span><br><span class=\"line\">Drawer: 抽屉</span><br><span class=\"line\">Modal: 对话框</span><br><span class=\"line\">Message: 全局提示</span><br><span class=\"line\">MessageBox: 弹框</span><br><span class=\"line\">Notification: 通知提醒框</span><br><span class=\"line\">Progress: 进度条</span><br><span class=\"line\">Popconfirm: 气泡确认框</span><br><span class=\"line\">Result: 结果</span><br><span class=\"line\">Spin: 加载中</span><br><span class=\"line\">Skeleton: 骨架屏</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 其它</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Anchor: 锚点</span><br><span class=\"line\">BackTop: 回到顶部</span><br><span class=\"line\">Divider: 分隔线</span><br><span class=\"line\">ConfigProvider: 全局化配置</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; Button 尺寸</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">mini: 微型的；袖珍的</span><br><span class=\"line\">tiny: 微小的；很少的</span><br><span class=\"line\">micro: 极小的；基本的；微小的；微观的</span><br><span class=\"line\">small: 小</span><br><span class=\"line\">medium: 中等</span><br><span class=\"line\">large: 大</span><br><span class=\"line\">fixed: 固定宽度的</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; Button 外观</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">default: 默认的</span><br><span class=\"line\">plain: 朴素的</span><br><span class=\"line\">primary: 主要的</span><br><span class=\"line\">info: 信息的</span><br><span class=\"line\">warning: 警告的</span><br><span class=\"line\">error: 错误的</span><br><span class=\"line\">danger: 危险的</span><br><span class=\"line\">gray: 灰色的</span><br><span class=\"line\">link: 带链接的</span><br><span class=\"line\">outline: 带轮廓的</span><br><span class=\"line\">dashed: 带虚线的</span><br><span class=\"line\">round: 带圆角的</span><br><span class=\"line\">circle: 圆形的</span><br><span class=\"line\">ghost: 幽灵的</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 表单控件验证状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">valid: 有效的</span><br><span class=\"line\">invalid: 无效的</span><br><span class=\"line\">pending: 验证中</span><br><span class=\"line\">required: 必填的</span><br><span class=\"line\">dirty: 脏的</span><br><span class=\"line\">pristine: 干净的</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码常用词汇\"><a href=\"#代码常用词汇\" class=\"headerlink\" title=\"代码常用词汇\"></a>代码常用词汇</h1><p>下面列出开发过种中经常使用的动词、名词、介词、形容词。这些词汇通常可以相互组合在特定上下文中适当变动可以覆盖工作中的绝大多数场景。</p>\n<p>&#x2F;&#x2F; 动词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on: 监听、正在进行中</span><br><span class=\"line\">get: 取</span><br><span class=\"line\">set: 设置</span><br><span class=\"line\">fetch: 获取</span><br><span class=\"line\">find: 查找</span><br><span class=\"line\">add: 添加</span><br><span class=\"line\">create: 创建</span><br><span class=\"line\">remove: 移除</span><br><span class=\"line\">delete: 删除</span><br><span class=\"line\">update: 更新</span><br><span class=\"line\">upgrade: 升级</span><br><span class=\"line\">downgrade: 使降级</span><br><span class=\"line\">sync: 同步</span><br><span class=\"line\">toggle: 切换</span><br><span class=\"line\">pull: 拉</span><br><span class=\"line\">push: 推</span><br><span class=\"line\">show: 显示</span><br><span class=\"line\">hide: 隐藏</span><br><span class=\"line\">resolve: 解析；分解</span><br><span class=\"line\">parse: 解析</span><br><span class=\"line\">lock: 锁定</span><br><span class=\"line\">link: 连接</span><br><span class=\"line\">merge: 合并</span><br><span class=\"line\">close: 关闭</span><br><span class=\"line\">clone: 克隆</span><br><span class=\"line\">clear: 清除</span><br><span class=\"line\">format: 格式化</span><br><span class=\"line\">convert: 转变</span><br><span class=\"line\">cancel: 取消</span><br><span class=\"line\">accept: 承认；同意</span><br><span class=\"line\">check: 检查，核对</span><br><span class=\"line\">concat: 合并数组、字符串</span><br><span class=\"line\">join: 合并</span><br><span class=\"line\">split: 分开</span><br><span class=\"line\">spread: 展开</span><br><span class=\"line\">search: 搜索</span><br><span class=\"line\">sort: 排序</span><br><span class=\"line\">assign: 分配，指定</span><br><span class=\"line\">handle: 处理</span><br><span class=\"line\">trigger: 触发</span><br><span class=\"line\">login: 登入</span><br><span class=\"line\">logout: 登出</span><br><span class=\"line\">register: 注册</span><br><span class=\"line\">sign: 签名</span><br><span class=\"line\">throw: 抛出</span><br><span class=\"line\">load: 加载</span><br><span class=\"line\">preload: 加载</span><br><span class=\"line\">copy: 复制</span><br><span class=\"line\">paste: 粘贴</span><br><span class=\"line\">connect: 连接</span><br><span class=\"line\">change: 改变</span><br><span class=\"line\">select: 选择</span><br><span class=\"line\">validate: 验证</span><br><span class=\"line\">submit: 表单提交</span><br><span class=\"line\">commit: 提交</span><br><span class=\"line\">match: 匹配</span><br><span class=\"line\">scroll: 滚动</span><br><span class=\"line\">write: 写</span><br><span class=\"line\">read: 读</span><br><span class=\"line\">enable: 启用</span><br><span class=\"line\">disable: 禁用</span><br><span class=\"line\">limit: 限制</span><br><span class=\"line\">bootstrap: 启动</span><br><span class=\"line\">init: 初始化</span><br><span class=\"line\">install: 加载</span><br><span class=\"line\">upload: 上传</span><br><span class=\"line\">inject: 注入</span><br><span class=\"line\">provide: 提供</span><br><span class=\"line\">exit: 退出</span><br><span class=\"line\">access: 访问</span><br><span class=\"line\">flush: 刷新/使暴露</span><br><span class=\"line\">refresh: 刷新</span><br><span class=\"line\">release: 发布</span><br><span class=\"line\">preview: 预览；试映</span><br><span class=\"line\">publish: 出版；发行</span><br><span class=\"line\">navigate: 导航；浏览</span><br><span class=\"line\">redirect: 重定向</span><br><span class=\"line\">back: 返回</span><br><span class=\"line\">switch: 切换</span><br><span class=\"line\">launch: 加载</span><br><span class=\"line\">browse/visit: 浏览</span><br><span class=\"line\">append: 追加</span><br><span class=\"line\">insert: 插入</span><br><span class=\"line\">swap: 交换</span><br><span class=\"line\">map: 遍历</span><br><span class=\"line\">extract: 提取；选取</span><br><span class=\"line\">provide: 提供</span><br><span class=\"line\">inject: 注入</span><br><span class=\"line\">observe: 观察</span><br><span class=\"line\">render: 渲染</span><br><span class=\"line\">debug: 调试</span><br><span class=\"line\">align: 对齐</span><br><span class=\"line\">popup: 弹出</span><br><span class=\"line\">transfer: 转让、迁移</span><br><span class=\"line\">attach: 附加</span><br><span class=\"line\">build: 构建</span><br><span class=\"line\">diagnose: 诊断，断定</span><br><span class=\"line\">ignore: 忽略</span><br><span class=\"line\">deploy: 部署；展开</span><br><span class=\"line\">send/sent: 送；寄出</span><br><span class=\"line\">defer: 推迟</span><br><span class=\"line\">delegate: 委托</span><br><span class=\"line\">destroy: 销毁</span><br><span class=\"line\">dispatch: 派发；分派</span><br><span class=\"line\">trace: 追踪</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 名词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar: 头像</span><br><span class=\"line\">brand: 品牌</span><br><span class=\"line\">record: 记录</span><br><span class=\"line\">issue: 问题</span><br><span class=\"line\">project: 项目</span><br><span class=\"line\">repo(repository): 仓库；知识库</span><br><span class=\"line\">ecosystem: 生态系统</span><br><span class=\"line\">assets: 资产</span><br><span class=\"line\">resource: 资源</span><br><span class=\"line\">toolkit: 工具包、工具箱</span><br><span class=\"line\">workbench: 工作台</span><br><span class=\"line\">item: 项目；条款</span><br><span class=\"line\">option: 选项</span><br><span class=\"line\">field: 字段</span><br><span class=\"line\">type: 类型</span><br><span class=\"line\">status: 状态</span><br><span class=\"line\">property: 属性</span><br><span class=\"line\">attribute: 特性</span><br><span class=\"line\">parameter/argument: 参数</span><br><span class=\"line\">length: 长度</span><br><span class=\"line\">size: 尺寸</span><br><span class=\"line\">shape: 形状</span><br><span class=\"line\">label: 标签</span><br><span class=\"line\">value: 值</span><br><span class=\"line\">view: 视图</span><br><span class=\"line\">page: 页面</span><br><span class=\"line\">env(envirnment): 环境</span><br><span class=\"line\">context: 上下文</span><br><span class=\"line\">count: 总数；计数</span><br><span class=\"line\">amount: 数量；数额</span><br><span class=\"line\">sum: 合计；金额</span><br><span class=\"line\">num(number): 号码</span><br><span class=\"line\">total: 总数</span><br><span class=\"line\">money: 钱；货币</span><br><span class=\"line\">filter: 过滤器</span><br><span class=\"line\">pipe: 管道</span><br><span class=\"line\">stream: 流</span><br><span class=\"line\">buffer: 缓冲器</span><br><span class=\"line\">comment: 评论</span><br><span class=\"line\">ref(reference): 引用</span><br><span class=\"line\">res(response): 响应</span><br><span class=\"line\">req(request): 请求</span><br><span class=\"line\">entity: 实体</span><br><span class=\"line\">event: 事件</span><br><span class=\"line\">setup 设置</span><br><span class=\"line\">prefix 前缀</span><br><span class=\"line\">suffix 后缀</span><br><span class=\"line\">wizard 小部件</span><br><span class=\"line\">model 模型</span><br><span class=\"line\">flag 标志</span><br><span class=\"line\">factory 工厂</span><br><span class=\"line\">service 服务</span><br><span class=\"line\">constant: 常量</span><br><span class=\"line\">var(iable): 变量</span><br><span class=\"line\">collection: 集合</span><br><span class=\"line\">array: 数组</span><br><span class=\"line\">raw: 原始值</span><br><span class=\"line\">platform 平台</span><br><span class=\"line\">capital: 大写字母</span><br><span class=\"line\">uppercase/lowercase: 大/小写</span><br><span class=\"line\">letter: 字母</span><br><span class=\"line\">entrance: 入口</span><br><span class=\"line\">path: 路径</span><br><span class=\"line\">route: 路由</span><br><span class=\"line\">router: 路由器</span><br><span class=\"line\">config: 配置</span><br><span class=\"line\">middleware: 中间件</span><br><span class=\"line\">success: 成功</span><br><span class=\"line\">error: 错误</span><br><span class=\"line\">fail(ure): 失败</span><br><span class=\"line\">frontend: 前端</span><br><span class=\"line\">backend: 后端</span><br><span class=\"line\">local: 本地</span><br><span class=\"line\">sever: 服务器</span><br><span class=\"line\">production: 线上；产品</span><br><span class=\"line\">border: 边框</span><br><span class=\"line\">outline: 轮廓</span><br><span class=\"line\">precision: 精度</span><br><span class=\"line\">separator: 分隔符</span><br><span class=\"line\">mask: 遮罩</span><br><span class=\"line\">metadata: 元数据</span><br><span class=\"line\">location: 位置</span><br><span class=\"line\">sandbox: 沙箱</span><br><span class=\"line\">scope: 作用域</span><br><span class=\"line\">queue: 队列</span><br><span class=\"line\">heap: 堆</span><br><span class=\"line\">notice: 通知</span><br><span class=\"line\">bubble: 气泡</span><br><span class=\"line\">hooks: 钩子</span><br><span class=\"line\">cell: 单元格</span><br><span class=\"line\">row: 行</span><br><span class=\"line\">column: 列</span><br><span class=\"line\">group: 组</span><br><span class=\"line\">cursor: 游标</span><br><span class=\"line\">pattern: 模式</span><br><span class=\"line\">abstract: 抽象</span><br><span class=\"line\">compose: 复合；并集</span><br><span class=\"line\">callback: 回调函数</span><br><span class=\"line\">priority: 优先级</span><br><span class=\"line\">grade/rank/hierarchy 等级、层级</span><br><span class=\"line\">table,chart, graph, diagram: 表格，图表，曲线图，图表</span><br><span class=\"line\">system: 系统、体系</span><br><span class=\"line\">guards: 保障、守卫</span><br><span class=\"line\">segment/fragment: 片段、碎片</span><br><span class=\"line\">shaking: 抖动</span><br><span class=\"line\">mix: 混淆</span><br><span class=\"line\">dependence: 依赖</span><br><span class=\"line\">injection: 注入</span><br><span class=\"line\">markup: 标记</span><br><span class=\"line\">email: 电子邮件</span><br><span class=\"line\">version: 版本</span><br><span class=\"line\">detail: 详情</span><br><span class=\"line\">stub: 存根</span><br><span class=\"line\">score: 成绩</span><br><span class=\"line\">breakpoint: 断点</span><br><span class=\"line\">record: 记录</span><br><span class=\"line\">pointer: 指针</span><br><span class=\"line\">thumbnail: 缩略图</span><br><span class=\"line\">gallery: 画廊</span><br><span class=\"line\">viewport: 视口</span><br><span class=\"line\">strategy: 策略</span><br><span class=\"line\">outlet: 出口</span><br><span class=\"line\">inlet: 入口</span><br><span class=\"line\">gist: 主旨；要点；依据</span><br><span class=\"line\">licence: 许可证</span><br><span class=\"line\">copyright: 版权</span><br><span class=\"line\">order: 命令</span><br><span class=\"line\">input: 输入</span><br><span class=\"line\">output: 输出</span><br><span class=\"line\">effect: 影响；效果；作用</span><br><span class=\"line\">position: 位置</span><br><span class=\"line\">corner: 角落</span><br><span class=\"line\">animation: 动画</span><br><span class=\"line\">dot: 点</span><br><span class=\"line\">palette: 调色板；颜料</span><br><span class=\"line\">album: 相册</span><br><span class=\"line\">photo: 照片</span><br><span class=\"line\">host: 主机</span><br><span class=\"line\">session: 会话</span><br><span class=\"line\">cookie: 饼干；小甜点</span><br><span class=\"line\">domain: 域名</span><br><span class=\"line\">certificates: 证书</span><br><span class=\"line\">coercion: 强制</span><br><span class=\"line\">payload: 载物</span><br><span class=\"line\">thread: 线程</span><br><span class=\"line\">process: 进程</span><br><span class=\"line\">timestamp: 时间缀</span><br><span class=\"line\">conflicts: 冲突</span><br><span class=\"line\">terminal: 终端</span><br><span class=\"line\">portrait: 肖像</span><br><span class=\"line\">auxiliary: 附属物</span><br><span class=\"line\">backup: 备份</span><br><span class=\"line\">bitmap: 位图</span><br><span class=\"line\">breakpoint: 断点</span><br><span class=\"line\">concurrency: 并发</span><br><span class=\"line\">lock: 锁</span><br><span class=\"line\">digest: 摘要</span><br><span class=\"line\">exception: 异常</span><br><span class=\"line\">genericity: 泛型</span><br><span class=\"line\">handle: 句柄</span><br><span class=\"line\">macro: 宏</span><br><span class=\"line\">manifest: 清单</span><br><span class=\"line\">modifier: 修饰字；修饰符</span><br><span class=\"line\">override: 覆写</span><br><span class=\"line\">overload: 重载</span><br><span class=\"line\">procedure: 过程</span><br><span class=\"line\">protocol: 协议</span><br><span class=\"line\">recursion: 递归</span><br><span class=\"line\">marquee: 跑马灯</span><br><span class=\"line\"></span><br><span class=\"line\">// 形容词</span><br><span class=\"line\">native: 原生的</span><br><span class=\"line\">hybrid: 混合的</span><br><span class=\"line\">basic: 基础的</span><br><span class=\"line\">complex: 复杂的</span><br><span class=\"line\">empty: 空的</span><br><span class=\"line\">online: 在线的</span><br><span class=\"line\">offline: 离线的</span><br><span class=\"line\">public: 公共的</span><br><span class=\"line\">private: 私有的</span><br><span class=\"line\">static: 静态的</span><br><span class=\"line\">dynamic: 动态的</span><br><span class=\"line\">shared: 共享的</span><br><span class=\"line\">safe: 安全的</span><br><span class=\"line\">relative: 相对的</span><br><span class=\"line\">absolute: 绝对的</span><br><span class=\"line\">original: 原始的</span><br><span class=\"line\">infinite: 无限的</span><br><span class=\"line\">partial: 局部的</span><br><span class=\"line\">ascending: 按升序</span><br><span class=\"line\">descending: 按降序</span><br><span class=\"line\">primary: 原始的，第一的</span><br><span class=\"line\">secondary: 第二的</span><br><span class=\"line\">tertiary: 第三的</span><br><span class=\"line\">deprecated: 弃用的</span><br><span class=\"line\">concrete: 具体的</span><br><span class=\"line\">abstract: 抽象的</span><br><span class=\"line\">explicit: 显示的；明确的</span><br><span class=\"line\">implicit: 含蓄的；暗示的</span><br><span class=\"line\">mutable: 可变的</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"业务常用词汇\"><a href=\"#业务常用词汇\" class=\"headerlink\" title=\"业务常用词汇\"></a>业务常用词汇</h1><h1 id=\"电商\"><a href=\"#电商\" class=\"headerlink\" title=\"电商\"></a>电商</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coupons: 优惠券</span><br><span class=\"line\">couponsCode: 优惠码</span><br><span class=\"line\">discount: 折扣</span><br><span class=\"line\">points: 积分</span><br><span class=\"line\">memeber: 会员</span><br><span class=\"line\">vip: 会员</span><br><span class=\"line\">membership: 会员</span><br><span class=\"line\">delivery: 运费</span><br><span class=\"line\">domain: 域名</span><br><span class=\"line\">dashboard: 仪表盘</span><br><span class=\"line\">store: 门店</span><br><span class=\"line\">shop: 店铺</span><br><span class=\"line\">product: 产品</span><br><span class=\"line\">goods: 商品</span><br><span class=\"line\">order: 订单</span><br><span class=\"line\">setting: 设置</span><br><span class=\"line\">manager: 管理</span><br><span class=\"line\">channel: 渠道</span><br><span class=\"line\">notFound: 404页面</span><br><span class=\"line\">feedback: 反馈</span><br><span class=\"line\">scratch: 刮刮卡</span><br><span class=\"line\">client: 客户端</span><br><span class=\"line\">market: 市场</span><br><span class=\"line\">promotion: 促销</span><br><span class=\"line\">popularize: 推广</span><br><span class=\"line\">tool: 工具</span><br><span class=\"line\">banner: 广告</span><br><span class=\"line\">friendlink：友情链接</span><br><span class=\"line\">partner： 合作伙伴</span><br><span class=\"line\">vote: 投票</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"技术文章阅读常用词汇\"><a href=\"#技术文章阅读常用词汇\" class=\"headerlink\" title=\"技术文章阅读常用词汇\"></a>技术文章阅读常用词汇</h1><p>&#x2F;&#x2F; 副词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">approximately: 大约；近似地；近于</span><br><span class=\"line\">indirectly: 间接地；迂回地</span><br><span class=\"line\">inevitably:不可避免地；必然地</span><br><span class=\"line\">repeatedly: 反复地；再三地</span><br><span class=\"line\">defiantly: 挑战地；对抗地</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 形容词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">general: 一般的；普通的；大体的</span><br><span class=\"line\">partial: 局部的</span><br><span class=\"line\">well-formed：符合语法规则的</span><br><span class=\"line\">appropriate: 适当的；恰当的；合适的</span><br><span class=\"line\">reasonable: 合理的；公道的</span><br><span class=\"line\">non-trivial: 非平凡的</span><br><span class=\"line\">conditional: 有条件的；假定的</span><br><span class=\"line\">disheartened: 沮丧的；灰心的</span><br><span class=\"line\">unmotivated: 对（工作等）不感兴趣的；没有理由的</span><br><span class=\"line\">terse: 简洁的；精练的；扼要的</span><br><span class=\"line\">chaotic: 混沌的；混乱的，无秩序的</span><br><span class=\"line\">effective: 有效的</span><br><span class=\"line\">discursive: 离题的；东拉西扯的；无层次的</span><br><span class=\"line\">impressive: 感人的；令人钦佩的；给人以深刻印象的</span><br><span class=\"line\">error-prone: 于出错的</span><br><span class=\"line\">weird: 怪异的；不可思议的；超自然的</span><br><span class=\"line\">hypothetical: 假设的；假定的</span><br><span class=\"line\">tricky:  狡猾的；机警的；棘手的</span><br></pre></td></tr></table></figure>\n\n<p>事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Onmouseover 鼠标移到目标上；鼠标移进时</span><br><span class=\"line\">Onclick 鼠标单击</span><br><span class=\"line\">Onmouseout 鼠标移出时</span><br><span class=\"line\">onkeyup 键抬起时</span><br><span class=\"line\">onkeydown 键按下时</span><br><span class=\"line\">blur vt. 涂污；使…模糊不清；使暗淡；玷污n. 污迹；模糊不清的事物</span><br><span class=\"line\">onblur 失去焦点,数组常用方法</span><br><span class=\"line\">push 推动，增加；对…施加压力，逼迫；按；说服</span><br><span class=\"line\">filter “n. 滤波器；[化工] 过滤器；筛选；滤光器vt. 过滤；渗透；用过滤法除”</span><br></pre></td></tr></table></figure>\n\n<p>运算单词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plus（表示运算）加;加的; 正的; 附加的; 比所示数量多的;</span><br><span class=\"line\">minus（表示运算）减去; 减号; 负号; 不利; 不足;</span><br><span class=\"line\">multiply 乘; （使）相乘; （使）增加; （使）繁殖;</span><br><span class=\"line\">quotient 商，商数，系数</span><br><span class=\"line\">divide(by) 分开，除</span><br><span class=\"line\"></span><br><span class=\"line\">DOM操作部分</span><br><span class=\"line\">replace vt. 取代，代替；替换，更换；归还，偿还；把…放回原处</span><br><span class=\"line\">Node n. 节点；瘤；[数] 叉点</span><br><span class=\"line\">Element n. 元素；要素；原理；成分；自然环境</span><br><span class=\"line\">parentNode 父节点</span><br><span class=\"line\">childNodes 子节点</span><br><span class=\"line\">nextSibling 下一个兄弟节点</span><br><span class=\"line\">previous adj.以前的; 先前的; 过早的; （时间上） 稍前的;</span><br><span class=\"line\">previousSibling 上一个兄弟节点</span><br><span class=\"line\">previousElementSibling 上一个兄弟元素</span><br><span class=\"line\">nextElementSibling 下一个兄弟元素</span><br><span class=\"line\">firstChild 第一个子节点</span><br><span class=\"line\">lastChild 最后一个子节点</span><br><span class=\"line\">firstElementChild 第一个子元素</span><br><span class=\"line\">lastElementChild 最后个子元素</span><br><span class=\"line\">innerText 底层模板, 内部的纯文本, 元素文本</span><br><span class=\"line\">append vt.附加; 添加; 贴上; 签（名）</span><br><span class=\"line\">appendChild 方法, 添加节点方法</span><br><span class=\"line\">removeChild 去除节点方法</span><br><span class=\"line\">createElement 创建元素</span><br><span class=\"line\">attribute n. 属性；特质</span><br><span class=\"line\">setAttribute 设置属性</span><br><span class=\"line\">getAttribute 获取属性</span><br><span class=\"line\">removeAttribute 移除属性</span><br></pre></td></tr></table></figure>\n\n<p>熟悉部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">area 地区; 区域，范围; 面积，平地; 领域;</span><br><span class=\"line\">perimeter &lt;数&gt;周长; 周围，边界;</span><br><span class=\"line\">meter “米, 公尺#计量器, 仪表; 计量官; 计量监督员”</span><br><span class=\"line\">radius 半径（距离）; 用半径度量的圆形面积; 半径范围; 桡骨;</span><br><span class=\"line\">difference 差别，差异; [数]差数，差额; 意见分歧; 特色;</span><br><span class=\"line\">product 产品; 结果; 乘积; 作品;</span><br><span class=\"line\">destination 目的，目标; 目的地，终点;</span><br><span class=\"line\">Object n. 目标；物体；客体；宾语</span><br><span class=\"line\">Model n. 模型；典型；模范；模特儿；样式</span><br><span class=\"line\">instance n. 实例；情况；建议</span><br><span class=\"line\">inner adj. 内部的；内心的；精神的</span><br><span class=\"line\">transparent adj. 透明的；显然的；坦率的；易懂的</span><br></pre></td></tr></table></figure>\n\n<p>了解部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selected 挑选出来的</span><br><span class=\"line\">checked 检查;选中的；</span><br><span class=\"line\">current 现在的；流通的，通用的；最近的；草写的</span><br></pre></td></tr></table></figure>\n\n<p>常用数组方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort vt. 将…分类；将…排序；挑选出某物</span><br><span class=\"line\">shift 改变; 去掉; 摆脱掉; 换挡;</span><br><span class=\"line\">unshift 松开打字机或键盘的字型变换键;方法将元素插入到一个数组的开始部分</span><br><span class=\"line\">reverse 颠倒；倒转</span><br><span class=\"line\">concat 合并多个数组；合并多个字符串</span><br><span class=\"line\">slice 切成片; 切下; 划分;</span><br><span class=\"line\">splice 拼接；接合；使结婚</span><br><span class=\"line\">source n.根源，本源; 源头，水源; 原因; 提供消息的人; 英 [sɔːs]  美 [sɔrs]</span><br></pre></td></tr></table></figure>\n\n<p>常用的日期函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTime 取得系统时间</span><br><span class=\"line\">getMilliseconds 取得 Date 对象中的毫秒字段</span><br><span class=\"line\">getSeconds 返回时间的秒</span><br><span class=\"line\">getMinutes 返回时间的分钟数</span><br><span class=\"line\">getHours 返回时间的小时字段</span><br><span class=\"line\">getDay 返回一周的某一天数字</span><br><span class=\"line\">getDate 返回月份的某一天</span><br><span class=\"line\">getMonth 取得 Date 对象中表示月份的数字</span><br><span class=\"line\">getFullYear 返回当前Date对象中的年份值</span><br></pre></td></tr></table></figure>\n\n<p>常用方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trim 会从一个字符串的两端删除空白字符</span><br><span class=\"line\">split 用于把一个字符串分割成字符串数组</span><br><span class=\"line\">forEach 为每一个遍历，循环</span><br><span class=\"line\">map 地图，天体图; 类似地图的事物;</span><br><span class=\"line\">indexOf 查找字符或者子串第一次出现的地方,</span><br><span class=\"line\">lastIndexOf 查找字符或者子串是后一次出现的地方</span><br><span class=\"line\">every 每个; 每; 所有可能的; 充足的;</span><br><span class=\"line\">some 一些; 某个; 大约; 相当多的;</span><br><span class=\"line\">ceil vt. 装天花板，装船内格子板;</span><br></pre></td></tr></table></figure>\n\n<p>BOM</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window n. 窗口; 窗，窗户;</span><br><span class=\"line\">setTimeout 法用于在指定的毫秒数后调</span><br></pre></td></tr></table></figure>\n\n<p>用函数或计算表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interval n. 间隔; 幕间休息; （数学） 区间;</span><br><span class=\"line\">setInterval 设置时间间隔, 按照指定时间周期调用函数或计算表达式, 循环</span><br><span class=\"line\">history n. 历史，历史学；历史记录；来历</span><br><span class=\"line\">location n. 定位; 位置，场所; 外景（拍摄地）;</span><br></pre></td></tr></table></figure>\n\n<p>掌握部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path n. 小路，路; 路线，路程; 〈比喻〉（人生的）道路; （思想，行为，生活的） 途径;</span><br><span class=\"line\">port n. 港口; （事情的） 意义; （计算机与其他设备的） 接口; （船、飞机等的） 左舷;</span><br><span class=\"line\">protocol n. 礼仪; （外交条约的） 草案; （数据传递的） 协议; 科学实验报告（或计划）;</span><br><span class=\"line\">navigator n. 领航员; 航海家，航行者，航海者; （船舶，飞机的） 驾驶员; 一个浏览器的品牌;</span><br><span class=\"line\">agent n. 代理人; 代理商; 特工; 药剂; 英</span><br><span class=\"line\">useragent 用户代理, 代理程式识别码</span><br><span class=\"line\">back vt. 使后退; 支持; 加背书于; 下赌注于;vi. 后退; 倒退;</span><br><span class=\"line\">offset vt. 抵消; 补偿; （为了比较的目的而）把…并列（或并置） ; 为（管道等）装支管;</span><br><span class=\"line\">step n. 步，脚步; 步骤，手段; 步调; 级别;</span><br><span class=\"line\">animate vt. 使有生气; 驱动; 使栩栩如生地动作; 赋予…以生命;</span><br><span class=\"line\">Extensible adj. 可展开的，可扩张的，可延长的;</span><br></pre></td></tr></table></figure>\n\n<p>js API</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client n. 顾客; 当事人; 诉讼委托人; [计算机] 客户端;</span><br><span class=\"line\">resize vt. 调整大小</span><br><span class=\"line\">offsetHeight 网页内容实际高度</span><br><span class=\"line\">math n. 数学</span><br><span class=\"line\">getComputedStyle 可以获取当前元素所有最终</span><br></pre></td></tr></table></figure>\n\n<p>使用的 CSS 属性值</p>\n<p>常用部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compute vt. 计算；估算；用计算机计算</span><br><span class=\"line\">computed v. 计算，估算</span><br><span class=\"line\">computer n. （电子） 计算机，电脑;</span><br><span class=\"line\">floor n. 地板，地面；楼层；基底；议员席</span><br><span class=\"line\">mode n. 模式；方式；风格；时尚 英</span><br><span class=\"line\">compatMode 兼容模式；</span><br><span class=\"line\">document.compatMode(判断当前浏览器采用的渲染方式)</span><br><span class=\"line\">responsive adj.应答的，响应的; 反应灵敏的; 共鸣的; 易反应的;</span><br><span class=\"line\">tablet 药片,小块 .碑，匾; 便笺簿,平板电脑</span><br><span class=\"line\">wrap n. 膝毯，披肩，围巾，围脖，头巾，罩衫，外套，大衣; 包装纸;</span><br><span class=\"line\">slide n. 滑动；幻灯片；滑梯；雪崩 英</span><br><span class=\"line\">assign vt. 分配；指派；计 赋值 英[ə</span><br><span class=\"line\">insert vt. 插入; 嵌入; （在文章中） 添加; 加</span><br><span class=\"line\">before prep. 在…之前; 先于，优于; 当着…的面; 与其…;</span><br></pre></td></tr></table></figure>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在编码的过程中变量命名是一个容易忽略，又容易犯头疼的问题。例如在复杂的页面布局中 Class 的命名，同样一个结构在不同的上下文要表达的意思不一样，是采用通用命名呢？还是采用更具有描述性的业务相关词汇？但是呢还需要考虑到样式的复用、是否会冲突、被覆盖、组合命名的长度是否太长等问题。</p>\n<p>在实际工作中，每个人都有自己命名风格和惯用词汇，有的喜欢使用英文简写、有的喜欢使用中英文结合、有的喜欢给变量加数据类型前缀、有的喜欢乱造词汇、有的甚至单词都拼写不正确。在看别人代码的过程中你是否像我一样无语，但也只能截图指出并吐槽二下，有些时候对方并不买单，改正。</p>\n<p>每次到换工作的时候就更新博客，7 月下旬的高温天气就适合在家里码字，这次选择这个话题的原因是目前在网上还没有相关的文章来系统全面的论述有前端关代码变量命名的资料。Java 有《码出高效 - 阿里巴巴 Java 开发手册 终级版》，而前端这方面目前还是一个空白，虽然有很多代码规范，但是很少有人愿意在这方面去花心思，更多的是研究框架的源码、数据结构与算法和尝试新的技术，本人由于大脑开发有限、没有能力去啃这些骨头，只好捡一些很少有人去碰触的简单不费脑的知识点来考究一二，希望也能为前端的生态做出一点小贡献。</p>\n<h1 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h1><p>目前流行的经典命名规则有：**驼峰命名法、匈牙利命名法、下划线命名法、****帕斯卡命名法**</p>\n<p>相关命名的具体规则请另行查阅。前端主要涉及到驼峰命名法，React 组件会用到<strong>帕斯卡命名法。</strong></p>\n<p>然后是变量命名规则：</p>\n<ul>\n<li>变量名首字母必须为字母(a-z A-Z)，下划线(_)，或者美元符号($)开始</li>\n<li>变量名只能是字母(a-z A-Z)，数字(0-9)，下划线(_)的组合，并且之间不能包含空格，数字不能放在变量名首位。</li>\n<li>变量名不能使用编程语言的保留字。比如在 javascript 中不能使用 true, false, while, case, break 保留字等等。</li>\n</ul>\n<h1 id=\"命名风格\"><a href=\"#命名风格\" class=\"headerlink\" title=\"命名风格\"></a>命名风格</h1><p>这里给出一些在开发过程中约定成俗的通用规则，涉及 JavaScript, Typescript, 框架组件, 样式及目录。在文章中将使用<em>【强制】来</em>表示必须严格遵守，<em>【推荐】</em>来表示建议<em>，【参考】</em>来给出多种命名方式的一种。</p>\n<p><strong>1. 【强制】在 JavaScript 中使用驼峰命名法来表示变量，不能以下划线或美元符号作为开始和结束。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 反例</span><br><span class=\"line\">_name</span><br><span class=\"line\">__name</span><br><span class=\"line\">name_</span><br><span class=\"line\">$name</span><br><span class=\"line\">name$</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>补充：由于受框架和第三方库及语言限制，不可能完全避免。例如：在 RxJs 中通常命名流的时候是以 <code>变量名 + $</code> 的形式，在 Class 中定义私有变量时通常以 <code>_ + 变量名</code> 的方式来表示，在 Vue 中内部实例方法全部以 <code>$</code> 开始，在 AngularJs 中内部方法以 <code>$$</code> 开始，而 lodash 直接使用 <code>_</code> 作为其别名。</p>\n</blockquote>\n<p><strong>2.</strong> 【<strong>强制】在代码中严禁使用拼音与中英文混合的方式，更不允许直接使用中文的方式。除了一些国际通用的中文名称，要视为英文外，其它禁止使用。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 正例</span><br><span class=\"line\">taobao</span><br><span class=\"line\">tmall</span><br><span class=\"line\">shanghai</span><br><span class=\"line\">coupons</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 反例</span><br><span class=\"line\">yhq [优惠券]</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. 【强制】类名使用大写驼峰命名法来表示，Typescript 中枚举值使用大写驼峰命名法表示。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 正例</span><br><span class=\"line\">class User &#123;&#125;</span><br><span class=\"line\">enum Color &#123;Red = 1, Green, Blue&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class user &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4. 【强制】常量名全部大写，单词间使用下划线隔开，力求表达完整清楚，不要嫌名字长。</strong><br>&#x2F;&#x2F; 正例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOGLE_MAP_TOKEN</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 反例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TOKEN</span><br></pre></td></tr></table></figure>\n\n<p><strong>5. 【建议】Typescript 中抽象类使用 <code>Abstract</code> 或 <code>Base</code> 开头；异常类使用 <code>Exception</code> 结尾。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstract class BaseDepartment &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>6. 【建议】在 TypeScript 中，类型使用 <code>Type</code> 作后缀，接口使用 <code>I</code> 作为前缀。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type PropsType = &#123;&#125;</span><br><span class=\"line\">interface ILoginProps &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>7. 【建议】 采用有意义的命名，在项目中坚持使用一种变量命名方式。不要 <code>usr</code> 与 <code>user</code> 混用</strong></p>\n<p>&#x2F;&#x2F; 正例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">users</span><br><span class=\"line\">getUserByUid()</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 反例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerUsr()</span><br><span class=\"line\">copyUserInfo()</span><br></pre></td></tr></table></figure>\n\n<p><strong>8. 【建议】方法名必须准确表达该方法的行为，在多数情况下以动词开头</strong></p>\n<p>&#x2F;&#x2F; 正例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetchCoupons()</span><br><span class=\"line\">updateToken()</span><br><span class=\"line\">createAccount()</span><br><span class=\"line\">generateUniqueId()</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 反例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getData()</span><br></pre></td></tr></table></figure>\n\n<p><strong>9.【建议】可以使用单词简写，但是只局限于常用词汇，注意不同词汇的简写有可能冲突</strong><br>    &#x2F;&#x2F; 正例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setProps() [props -&gt; property]</span><br><span class=\"line\">selectCouponsDlg() [dlg -&gt; dialog]</span><br><span class=\"line\">readPkg() [pkg -&gt; package]</span><br><span class=\"line\">previewTpl [tpl -&gt; template]</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 反例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vehicleDesc [desc -&gt; description]</span><br><span class=\"line\">vehicleDesc [desc -&gt; descending]</span><br><span class=\"line\">vehicleAesc [aesc -&gt; aescending]</span><br><span class=\"line\">fetchUsr() [usr -&gt; user]</span><br></pre></td></tr></table></figure>\n\n<p><strong>10. 【建议】在 Vue 和 Angular 中，模板语法中所有组件名使用中线命名法，在 React 中使用大写驼峰命名法来表示</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Vue</span><br><span class=\"line\">&lt;el-button type=&quot;text&quot; @click=&quot;toDetail&quot;&gt;详情&lt;/el-button&gt;</span><br><span class=\"line\">&lt;custom-component a-prop=&quot;prop&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Angular</span><br><span class=\"line\">&lt;nz-sider [nzWidth]=&quot;200&quot; style=&quot;background:#fff&quot;&gt;&lt;/nz-sider&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// React</span><br><span class=\"line\">&lt;SelectPicture data=&#123;this.images&#125; /&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>11. 【推荐】统一使用中线命名法来命名目录。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- page-header |  |-- PageHeader.vue</span><br></pre></td></tr></table></figure>\n\n<p><strong>12. 【参考】在 Vue 模板语法中组件属性使用连字符命名法，在 Vue 中使用 JSX 则属性使用驼峰命名法，并且文件文以”.jsx”为文件类型。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Thumbnail</span><br><span class=\"line\">  withHeadPicture=&#123;true&#125;</span><br><span class=\"line\">  data=&#123;this.selectedImages[0]&#125;</span><br><span class=\"line\">  withDetail=&#123;this.enabledDetail&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>13. 【强制】在服务名上使用 <code>Service</code> 后缀</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class UserService &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>14. 【建议】在 Vue 中组件文件名采用大写驼峰命名方式，React 同样如此，在 Angular 中以使用点和横杠来分隔文件名，并且符号名后面追加约定的类型后缀。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Vue</span><br><span class=\"line\">User.vue</span><br><span class=\"line\"></span><br><span class=\"line\">// Angular</span><br><span class=\"line\">app.component.ts</span><br><span class=\"line\">hero-list.component.ts</span><br><span class=\"line\">validation.directive.ts</span><br><span class=\"line\">app.module.ts</span><br><span class=\"line\">user-profile.service.ts</span><br><span class=\"line\"></span><br><span class=\"line\">// React</span><br><span class=\"line\">User.jsx</span><br></pre></td></tr></table></figure>\n\n<p><strong>15. 【参考】在 React 中使用目录名称作为组件名，在目录内容直接使用<em>index</em>作为入口，在 Vue 中不可以，在 Angular 中可以将<em>index</em>作为模块的入口，当然也可以直接作为组件的入口，但这样和其整个命名风格有所背离。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Vue</span><br><span class=\"line\">|-- user-info |  |-- UserInfo.vue</span><br><span class=\"line\"></span><br><span class=\"line\">// Angular |-- user-info |  |-- user-info.component.ts |  |-- index.ts</span><br><span class=\"line\"></span><br><span class=\"line\">// React |-- user-info |  |-- index.jsx</span><br></pre></td></tr></table></figure>\n\n<p><strong>16. 【建议】在工程中文档使用全大写命名</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">README.md</span><br><span class=\"line\">CONTRIBUTORS.md</span><br><span class=\"line\">CHANGELOG.md</span><br></pre></td></tr></table></figure>\n\n<p><strong>17. 【建议】在 Vue 中指令命名使用 <code>filter</code> 作为结束。所有引用命名使用 <code>ref</code> 作为后缀</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">formatCouponsFilter</span><br><span class=\"line\">inputRef</span><br><span class=\"line\">selectRef</span><br></pre></td></tr></table></figure>\n\n<p><strong>18. 【强制】测试文件以 <code>.spec</code> 或者 <code>.test</code> 作为命名的一部分。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selectPicture.spec.js</span><br><span class=\"line\">pageHeader.test.js</span><br></pre></td></tr></table></figure>\n\n<p><strong>19. 【建议】复数化变量名称，而不是命名中包含集合类型名称。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 正例</span><br><span class=\"line\">hosts</span><br><span class=\"line\">users</span><br><span class=\"line\">validUsers</span><br><span class=\"line\">hostText</span><br><span class=\"line\">hostJson</span><br><span class=\"line\">portNumber</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 反例</span><br><span class=\"line\">hostList</span><br><span class=\"line\">userList</span><br><span class=\"line\">hostStr</span><br><span class=\"line\">intPort</span><br></pre></td></tr></table></figure>\n\n<p><strong>20. 【建议】在 <code>for</code> 循环中使用 <code>i, j, k</code> 来作为索引，使用 <code>n</code> 表示数量&#x2F;次数&#x2F;限制，使用 <code>e</code> 表示异常, 使用 <code>evt</code> 表示事件对象, 使用 <code>cb</code> 表示回调函数</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">  for (let j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">    for (let k = 0; k &lt; 10; k++) &#123;</span><br><span class=\"line\">      // do something</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>21. 【强制】在解构时使用 <code>const</code> 来声明。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [ foo, bar ] = &#123; foo: 1, bar: 2 &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>22. 【建议】在样式中 Class 命名可以使用一些常用简写来减少长度。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hd -&gt; head</span><br><span class=\"line\">hdr -&gt; header</span><br><span class=\"line\">ft -&gt; foot</span><br><span class=\"line\">ftr -&gt; footer</span><br><span class=\"line\">pg -&gt; page</span><br><span class=\"line\">btn -&gt; button</span><br><span class=\"line\">txt -&gt; text</span><br><span class=\"line\">el -&gt; element</span><br><span class=\"line\">opt -&gt; option</span><br><span class=\"line\">bd -&gt; border</span><br><span class=\"line\">cl -&gt; clearfix</span><br><span class=\"line\">p -&gt; padding</span><br><span class=\"line\">m -&gt; margin</span><br><span class=\"line\">l -&gt; left</span><br><span class=\"line\">r -&gt; right</span><br><span class=\"line\">t -&gt; top</span><br><span class=\"line\">b -&gt; bottom</span><br><span class=\"line\">x -&gt; horizontal</span><br><span class=\"line\">y -&gt; vertical</span><br><span class=\"line\">px -&gt; padding-left, padding-right</span><br><span class=\"line\">py -&gt; padding-top, padding-bottom</span><br><span class=\"line\">pl -&gt; padding-left</span><br><span class=\"line\">m -&gt; margin</span><br><span class=\"line\">dlg -&gt; dialog</span><br><span class=\"line\">sel -&gt; select</span><br><span class=\"line\">img -&gt; image</span><br><span class=\"line\">lbl -&gt; label</span><br><span class=\"line\">chk -&gt; checkbox</span><br><span class=\"line\">tpl -&gt; template</span><br><span class=\"line\">tbl -&gt; table</span><br><span class=\"line\">hoz -&gt; horizontal</span><br><span class=\"line\">vert -&gt; vertical</span><br><span class=\"line\">ref -&gt; reference</span><br><span class=\"line\">wiz -&gt; wizard</span><br><span class=\"line\">oh -&gt; overflow: hidden</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>补充：有些简写不能单独使用，终须组合才能使用，例如: <code>p</code>, <code>m</code>, <code>x</code>, <code>y</code>等单个词汇。</p>\n</blockquote>\n<p><strong>23. 【建议】在命名时采用 BEM 的方式，并适当变化，具体参见后续文章。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.page-header__main</span><br><span class=\"line\">.dialog__content</span><br><span class=\"line\">.gallery-list--wrap</span><br><span class=\"line\">.thumbnail-image--info</span><br><span class=\"line\">.action__btn-group</span><br></pre></td></tr></table></figure>\n\n<p><strong>24. 【建议】样式 Class 命名使用中线连接，ID 命名采用下划线连接。Class 可以同时采用中线和下划线，但要遵循一定的规则。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.thumbnail-item-image</span><br><span class=\"line\">#page_header</span><br></pre></td></tr></table></figure>\n\n<p><strong>25. 【参考】样式 Class 采用组合方式，通过外层 Class 名来限制作用范围。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 正例</span><br><span class=\"line\">&lt;div class=&quot;page-header&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;page-header__wrap common&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;page-header__wrap tab&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 反例</span><br><span class=\"line\">&lt;div class=&quot;page-header&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;page-header__wrap page-header--common&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;page-header__wrap page-header--tab&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>补充：这种方式的目的在于减少长度，通过 “主体 + 分类名词” 的方式，可以解释为 “带分类的主体”，但是有一个问题是全局样式要注意不要使用通用的词汇来定义样式，比如 <code>title</code>, <code>action</code>, <code>header</code>, <code>footer</code>, <code>left</code>, <code>right</code>等，不然会引起样式覆盖。</p>\n</blockquote>\n<p>avaScript 作为前端开发从业人员必须掌握的 3 大基础知识中最重要的一环，也是平是接触时间最长、写得最多的。在开发过程中必然会遇到命名的问题，你会词穷、纠结、惆怅吗？本文的出现相信能够解决大部分烦恼，让你轻松写出符合规范、易读、简短的代码。</p>\n<p>本文将通过大量的实例来试图自圆其说，形成一套系统化、实用的变量命名理化体系。通过按 JavaScript 的数据类型分类着手、细到一个函数的参数命名，并提供众多可选方案，并尽量给出其适用范围和利弊。</p>\n<blockquote>\n<p>需要注意的是由于个人写作水平、和知识有限，很多方面叙述上有些生硬，在分类上也没有什么特别的依据，文章也没有人审稿，所以有什么纰漏还请留言告知。由于写作仓促，内容可能不全，后续会随着工作和学习的深入而不断地调整和更新。</p>\n</blockquote>\n<h1 id=\"布尔值-Boolean-命名\"><a href=\"#布尔值-Boolean-命名\" class=\"headerlink\" title=\"布尔值(Boolean)命名\"></a>布尔值(Boolean)命名</h1><p>Boolean 值是两种逻辑状态的变量，它包含两个值：<strong>真</strong>和<strong>假</strong>。在 JavaScript 中对应 <code>true</code> 和 <code>false</code>，在实践中通常使用数字<code>1</code>表示真值，<code>0</code>来表示假值。</p>\n<p>虽然 Boolean 的状态只有两种但是在命名时可以进一步分类，这里给出几种场景：</p>\n<h2 id=\"场景一：表示可见性、进行中的状态\"><a href=\"#场景一：表示可见性、进行中的状态\" class=\"headerlink\" title=\"场景一：表示可见性、进行中的状态\"></a>场景一：表示可见性、进行中的状态</h2><p><strong>解释</strong>：<strong>可见性</strong>在通常指页面中的元素、组件是否显示（或者组件挂载到 DOM 上，但并不可见）。<strong>进行中</strong>主要是说明某种状态是处于持续进行中。</p>\n<p>推荐命名方式为 <code>is + 动词（现在进行时）/形容词</code>，同时这种方式也可以直接不写 <code>is</code>，但是为了更好的作区分，建议还是加上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  isShow: &#x27;是否显示&#x27;,</span><br><span class=\"line\">  isVisible: &#x27;是否可见&#x27;,</span><br><span class=\"line\">  isLoading: &#x27;是否处于加载中&#x27;,</span><br><span class=\"line\">  isConnecting: &#x27;是否处于连接中&#x27;,</span><br><span class=\"line\">  isValidating: &#x27;正在验证中&#x27;,</span><br><span class=\"line\">  isRunning: &#x27;正在运行中&#x27;,</span><br><span class=\"line\">  isListening: &#x27;正在监听中&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>： 在 Java 中使用这种方式是有一定副作用的，为什么请移步：<a href=\"https://link.segmentfault.com/?enc=8r+GGCeC9VWmfQ+VLEFhwg==.05DmwxjFVBpEhcTgoDetMN8i3JOhj6QhBxIW/J8tUPqcX8rQBo9XhQPaZlhW1A08\">为什么阿里巴巴禁止开发人员使用 “isSuccess” 作为变量名？</a></p>\n</blockquote>\n<h2 id=\"场景二：属性状态类\"><a href=\"#场景二：属性状态类\" class=\"headerlink\" title=\"场景二：属性状态类\"></a>场景二：属性状态类</h2><p><strong>解释</strong>：通常用来描述实体（例如：HTML 标签、组件、对象）的功能属性，而且定法比较固定。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  disabled: &#x27;是否禁用&#x27;,</span><br><span class=\"line\">  editable: &#x27;是否可编辑&#x27;,</span><br><span class=\"line\">  clearable: &#x27;是否可清除&#x27;,</span><br><span class=\"line\">  readonly: &#x27;只读&#x27;,</span><br><span class=\"line\">  expandable: &#x27;是否可展开&#x27;,</span><br><span class=\"line\">  checked: &#x27;是否选中&#x27;,</span><br><span class=\"line\">  enumberable: &#x27;是否可枚举&#x27;,</span><br><span class=\"line\">  iterable: &#x27;是否可迭代&#x27;,</span><br><span class=\"line\">  clickable: &#x27;是否可点击&#x27;,</span><br><span class=\"line\">  draggable: &#x27;是否可拖拽&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"场景三：配置类、选项类\"><a href=\"#场景三：配置类、选项类\" class=\"headerlink\" title=\"场景三：配置类、选项类\"></a>场景三：配置类、选项类</h2><p><strong>解释</strong>：主要是指组件功能的开启与关闭，功能属性的配置。</p>\n<p>这是一种比较常见的情景，目前命名方式也有很多种，但是归纳起来也不多。推荐使用 <code>withXx</code> 来表示组件在基本功能形态外的其它功能，比如组件的基础功能到高级功能的开启；使用 <code>enableXx</code> 来表示组件某些功能的开启；使用 <code>allowXx</code> 来表示功能属性的配置；使用 <code>noXx</code> 用于建议功能使用者这个不建议开启。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  withTab: &#x27;是否带选项卡&#x27;,</span><br><span class=\"line\">  withoutTab: &#x27;不带选项卡&#x27;,</span><br><span class=\"line\">  enableFilter: &#x27;开启过滤&#x27;,</span><br><span class=\"line\">  allownCustomScale: &#x27;允许自定义缩放&#x27;,</span><br><span class=\"line\">  shouldClear: &#x27;是否清除&#x27;,</span><br><span class=\"line\">  canSelectItem: &#x27;是否能选中元素&#x27;,</span><br><span class=\"line\">  noColon: &#x27;不显示label后面的冒号&#x27;,</span><br><span class=\"line\">  checkJs: &#x27;检查Js&#x27;,</span><br><span class=\"line\">  emitBOM: &#x27;Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>：如果嫌分类太多，可以只使用其中一种方式，比如在 Typescript 中使用了 <code>allownXx</code> 和 <code>noXx</code>。</p>\n</blockquote>\n<p>除了上面这些带有特定的前置介词、动词方式外还有一些在语义上带有疑问性质的组合通常也是作为 Boolean 命名的一种参考。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  virtualScroll: &#x27;是否启用虚拟滚动模式&#x27;,</span><br><span class=\"line\">  unlinkPanels: &#x27;在范围选择器里取消两个日期面板之间的联动&#x27;,</span><br><span class=\"line\">  validateEvent: &#x27;输入时是否触发表单的校验&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数命名\"><a href=\"#函数命名\" class=\"headerlink\" title=\"函数命名\"></a>函数命名</h1><p>函数在不同的上下文中的叫法也不一样，在对象中称为方法，在类中有构造函数、在异步处理时有回调函数，还有立即执行函数、箭头函数、柯里函数等。</p>\n<p>函数命名的方式常常是和业务逻辑耦合在一起的，但是在命名规则上也有一些常见的模式可以遵循。</p>\n<h2 id=\"场景一：事件处理\"><a href=\"#场景一：事件处理\" class=\"headerlink\" title=\"场景一：事件处理\"></a>场景一：事件处理</h2><p>事件处理函数是前端平时用到最多的，包括浏览器原生事件、异步事件和组件自定义事件。在写法上最常见的两种命名分别为 <code>onXx</code>、<code>onXxClick</code>和<code>handleXx</code>、<code>handleXxChange</code>。</p>\n<p>这里如何在二者之间选择，可以从二方面来归类。一是，原生事件采用 <code>onXx</code>，而自定义事件使用 <code>handleXx</code>。二是，事件主动监听采用 <code>onXx</code>，被动处理使用 <code>handleXx</code>。</p>\n<p>从实践及三大主流框架的文档关于事件部分的内容来看，推荐使用 <code>handleXx</code> 这种方式，而在表单提交的时候通常采用 <code>onSubmit</code> 函数。</p>\n<p>其实，在实际项目中很少严格这样来命名事件处理函数，因为这种方式有一定的局限性，比如点击按钮打开一个对话框，使用 <code>handleOpenDlg</code> 和 <code>onOpenDlg</code> 都没有直接写 <code>openDlg</code> 方便，如果页面有多个不同功能的对话框采用这种方式会显得变量名过长，而 handle 和 on 就显得没有必要了，比如 <code>hanldeOpenCommentDlg</code> 就没有 <code>openCommentDlg</code> 直白。</p>\n<p>下面列出了一些约定成俗的适用例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  onSubmit: &#x27;提交表单&#x27;,</span><br><span class=\"line\">  handleSizeChange: &#x27;处理分页页数改变&#x27;,</span><br><span class=\"line\">  handlePageChange: &#x27;处理分页每页大小改变&#x27;,</span><br><span class=\"line\">  onKeydown: &#x27;按下键&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"场景二：异步处理\"><a href=\"#场景二：异步处理\" class=\"headerlink\" title=\"场景二：异步处理\"></a>场景二：异步处理</h2><p>这里主要是指在写数据层服务、状态管理中的 Action 命名，以及 Ajax 回调的命名规则。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  getUsers: &#x27;获取用户列表&#x27;,</span><br><span class=\"line\">  fetchToken: &#x27;取得Token&#x27;,</span><br><span class=\"line\">  deleteUser: &#x27;删除用户&#x27;,</span><br><span class=\"line\">  removeTag: &#x27;移除标签&#x27;,</span><br><span class=\"line\">  updateUsrInfo: &#x27;更新用户信息&#x27;,</span><br><span class=\"line\">  addUsr: &#x27;添加用户&#x27;,</span><br><span class=\"line\">  createAccount: &#x27;创建账户&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命名主要围绕数据的增删查找来划分，获取数据通常是 <code>getXx</code> 和 <code>fetchXx</code>，在作者看来两者在使用上的区分在于 <code>getXx</code> 的数据来源不一定直接取自异步的原始数据，可能是加工处理后的，而 <code>fetchXx</code> 是直接拿的原始数据。当然在实际项目中并没有区分，看个人喜好。</p>\n<p><code>deleteXx</code> 主要用于数据删除，而 <code>removeXx</code> 在语义上是移除数据，通常情况数据是还存在的，只是没有显示或数据假删除。<code>updateXx</code> 是指数据更新操作，<code>addXx</code> 是在已有列表数据中添加新的子项、而<code>createXx</code> 主要是创建新的实例，比如新建一个账户。</p>\n<h2 id=\"场景三：-跳转路由\"><a href=\"#场景三：-跳转路由\" class=\"headerlink\" title=\"场景三： 跳转路由\"></a>场景三： 跳转路由</h2><p>在实际开发过种中，比如在使用 react-router&#x2F;vue-router 时，在模板或者 JSX 中可以直接在标签中写上目标地址，但有些时候跳转的目标地址是经过判断或者组合后的，并且通过事件触发跳转的，这个时候就需要一个函数来处理，那么在函数命名的时候可以考虑使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  toTplDetail: &#x27;跳转到模板详情页面&#x27;,</span><br><span class=\"line\">  navigateToHome: &#x27;导航到首页&#x27;,</span><br><span class=\"line\">  jumpHome: &#x27;跳转首页&#x27;,</span><br><span class=\"line\">  goHome: &#x27;跳转首页&#x27;,</span><br><span class=\"line\">  redirectToLogin: &#x27;重定向到登录页&#x27;,</span><br><span class=\"line\">  switchTab: &#x27;切换Tab选项卡&#x27;,</span><br><span class=\"line\">  backHome: &#x27;回到主页&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐使用 <code>toXx</code> 和 <code>goXx</code> 这两种方式，如果不是在当前页面打开&#x2F;跳转页面，可以使用 <code>toBlankTplDetail</code> 或者 <code>goBlankHome</code> 这种方式来进一步语义化。如果前端页面是位于 Webview 中，也可以考虑采用 <code>toNativeShare</code> 这种方式来命名。</p>\n<h2 id=\"场景四：框架相关特定方法\"><a href=\"#场景四：框架相关特定方法\" class=\"headerlink\" title=\"场景四：框架相关特定方法\"></a>场景四：框架相关特定方法</h2><p>这里主要是针对前端 3 大主流流行框架，有一些命名是带有特定标识符的，还有就是一些生命周期的命名方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  formatTimeFilter: &#x27;在AngularJs和Vue中，通常用于过滤器命名&#x27;,</span><br><span class=\"line\">  storeCtrl: &#x27;用于AngularJs定义控制器方法&#x27;,</span><br><span class=\"line\">  formatPipe: &#x27;用于Angular中，标识管道方法&#x27;,</span><br><span class=\"line\">  $emit: &#x27;Vue中的实例方法&#x27;,</span><br><span class=\"line\">  $$formatters: &#x27;AngularJs中的内置方法&#x27;,</span><br><span class=\"line\">  beforeCreate: &#x27;Vue的生命周期命名&#x27;,</span><br><span class=\"line\">  componentWillMount: &#x27;React生命周期命名&#x27;,</span><br><span class=\"line\">  componentDidMount: &#x27;React生命周期命名&#x27;,</span><br><span class=\"line\">  afterContentInit: &#x27;Anuglar生命周期命名&#x27;,</span><br><span class=\"line\">  afterViewChecked: &#x27;Angula生命周期命名&#x27;,</span><br><span class=\"line\">  httpProvider: &#x27;AngularJs服务&#x27;,</span><br><span class=\"line\">  userFactory: &#x27;工厂函数&#x27;,</span><br><span class=\"line\">  useCallback: &#x27;React钩子函数&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"场景五：数据的加工\"><a href=\"#场景五：数据的加工\" class=\"headerlink\" title=\"场景五：数据的加工\"></a>场景五：数据的加工</h2><p>这类场景在处理列表的时候经常会碰到，比如排序、过滤、添加额外的字段、根据 ID 和索引获取特定数据等。</p>\n<h3 id=\"情形一：根据特定属性获取属性\"><a href=\"#情形一：根据特定属性获取属性\" class=\"headerlink\" title=\"情形一：根据特定属性获取属性\"></a>情形一：根据特定属性获取属性</h3><p>这里可以参考 DOM 方法的命名，比如：<code>getElememtById()</code>、<code>getElementsByTagName()</code>、<code>getElementsByClassName()</code> 和 <code>getElementsByName()</code>，然后提炼出一个比较实用的模板：<code>getXxByYy()</code>。其中 <code>Xx</code> 可以是：<code>element</code>, <code>item</code>, <code>option</code>, <code>data</code>, <code>selection</code>, <code>list</code>, <code>options</code> 以及一些特定上下文的名字，比如：<code>user(s)</code>, <code>menu(s)</code> 等。<code>Yy</code> 相对来说比较固定，经常用到的就是 <code>id</code>, <code>index</code>, <code>key</code>, <code>value</code>, <code>selected</code>, <code>actived</code> 等。</p>\n<p>除了使用 <code>get</code>，还可以使用 <code>query</code> 和 <code>fetch</code>，但是需要注意和上面提到的异步数据处理作一个区分。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  getItemById: &#x27;根据ID获取数据元素&#x27;,</span><br><span class=\"line\">  getItemsBySelected: &#x27;根据传入的已选列表ID来获取列表全部数据&#x27;,</span><br><span class=\"line\">  queryUserByUid: &#x27;根据UID查询用户&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：在 <code>getItemsBySelected</code> 这种情形下直接写成 <code>getItemsSelected</code> 更好，但只适用于 <code>Yy</code> 为形容词的场景</p>\n<h3 id=\"情形二：格式化数据\"><a href=\"#情形二：格式化数据\" class=\"headerlink\" title=\"情形二：格式化数据\"></a>情形二：格式化数据</h3><p>这里的格式化操作包括排序、调整数据结构、过滤数据、添加属性。命名通常使用 <code>formatXx</code>, <code>convertXx</code>, <code>inverseXx</code>, <code>toggleXx</code>, <code>parseXx</code>, <code>flatXx</code>, 也可以结合数组的一些操作方法来命名，比如 <code>sliceXx</code>, <code>substrXx</code>, <code>spliceXx</code>, <code>sortXx</code>, <code>joinXx</code> 等来命名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  formatDate: &#x27;格式化日期&#x27;,</span><br><span class=\"line\">  convertCurrency: &#x27;转换货币单位&#x27;,</span><br><span class=\"line\">  inverseList: &#x27;反转数据列表&#x27;,</span><br><span class=\"line\">  toggleAllSelected: &#x27;切换所有已选择数据状态&#x27;,</span><br><span class=\"line\">  parseXml: &#x27;解析XML数据&#x27;,</span><br><span class=\"line\">  flatSelect: &#x27;展开选择数据&#x27;,</span><br><span class=\"line\">  sortByDesc: &#x27;按降序排序&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组命名\"><a href=\"#数组命名\" class=\"headerlink\" title=\"数组命名\"></a>数组命名</h1><p>数组的命名推荐使用复数形式来命名，还有就是名词和具有列表意思的单词组合。常见的词汇有 <code>options</code>, <code>list</code>, <code>maps</code>, <code>nodes</code>, <code>entities</code>, <code>collection</code> 等。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  users: &#x27;用户列表&#x27;,</span><br><span class=\"line\">  userList: &#x27;用户列表&#x27;,</span><br><span class=\"line\">  tabOptions: &#x27;选项卡选项&#x27;,</span><br><span class=\"line\">  stateMaps: &#x27;状态映射表&#x27;,</span><br><span class=\"line\">  selectedNodes: &#x27;选中的节点&#x27;,</span><br><span class=\"line\">  btnGroup: &#x27;按钮组&#x27;,</span><br><span class=\"line\">  userEntities: &#x27;用户实体&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"选项元素、下拉元素命名\"><a href=\"#选项元素、下拉元素命名\" class=\"headerlink\" title=\"选项元素、下拉元素命名\"></a>选项元素、下拉元素命名</h1><p>主要针对的是在下拉选择框、选项卡元素、Radio、Checkbox 等数据源每个选项数据的命名。常见的词汇有：<code>title</code>, <code>name</code>, <code>key</code>, <code>label</code>, <code>field</code>, <code>value</code>, <code>id</code>, <code>children</code>, <code>index</code>, <code>nodes</code> 等。</p>\n<p>基中 <code>title/name/key/label/field</code> 作为选项显示名, <code>value/id</code> 用于唯一标识选项，<code>children/nodes</code> 用于包含子节点内容。如果选项元素的语义很明确的情况下也可以直接使用特定单词来代替提到的这些泛指的词汇，例如菜单列表就可以使用 <code>menu</code> 来作为显示名。</p>\n<p>&#x2F;&#x2F; 最常见组合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  title: &#x27;标题&#x27;,</span><br><span class=\"line\">  value: &#x27;ID值&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合二</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  label: &#x27;标签名&#x27;,</span><br><span class=\"line\">  value: &#x27;ID值&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合三</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  name: &#x27;元素名&#x27;,</span><br><span class=\"line\">  id: &#x27;ID值&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合四</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  field: &#x27;字段&#x27;,</span><br><span class=\"line\">  value: &#x27;标识&#x27;,</span><br><span class=\"line\">  index: &#x27;索引&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"当前选项、激活项命名\"><a href=\"#当前选项、激活项命名\" class=\"headerlink\" title=\"当前选项、激活项命名\"></a>当前选项、激活项命名</h1><p>适用列表的选中项、菜单选中项、步骤操作的当前进行步骤、页面路由当前路由等的命名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  activeTab: &#x27;当前选中选项卡&#x27;,</span><br><span class=\"line\">  currentPage: &#x27;当前页&#x27;,</span><br><span class=\"line\">  selectedData: &#x27;当前选项中数据&#x27;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"临时数据、比对数据命名\"><a href=\"#临时数据、比对数据命名\" class=\"headerlink\" title=\"临时数据、比对数据命名\"></a>临时数据、比对数据命名</h1><p>针对在代码中有时会使用一些临时的变量来存储数据、保存数据快照的场景下的命名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  swapData: &#x27;临时交换数据&#x27;,</span><br><span class=\"line\">  tempData: &#x27;临时数据&#x27;,</span><br><span class=\"line\">  dataSnapshot: &#x27;数据快照&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据循环语句中变量命名\"><a href=\"#数据循环语句中变量命名\" class=\"headerlink\" title=\"数据循环语句中变量命名\"></a>数据循环语句中变量命名</h1><p>在使用 <code>for</code> 循环时，多层嵌套请依次使用 <code>i/j/k</code>，超过 3 层可以使用 <code>x/y/z</code>，<code>m/n</code> 来命名。使用 <code>forEach</code>, <code>map</code>, <code>filter</code> 等方法时，每一个元素命名可以根据不同语境下的特殊名字来命名，比如遍历 <code>menus</code>，那么每个元素可以命名为 <code>menu</code>，不然则使用上下文无关的词汇，比如：<code>item</code>, <code>option</code>, <code>data</code>, <code>key</code>, <code>object</code> 等。至于索引通常使用 <code>index</code>，如果多层可以使用 <code>index + 数字</code> 的形式，也可以直接使用 <code>i/j/k</code> 来作为索引，甚至还可以使用 <code>subIndex/grandIndex</code> 这种方式来命名。</p>\n<p>对于在使用 <code>for</code> 循环时数组长度如果需要单独命名的话，可以使用 <code>xxlength/xxLens</code>，或者 <code>xxCount</code>。</p>\n<p>在循环的过程中通常还会统计某个条件下数据匹配的次数、重复元素数量、记录中间结果等情况。这里推荐使用 <code>count</code> 表示次数，<code>skipped</code> 表示跳过的数量，<code>result</code> 表示结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// for 循环</span><br><span class=\"line\">for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">  for (let j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">    for (let k = 0; k &lt; 10; k++) &#123;</span><br><span class=\"line\">      // do something</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for (let i = 0, lens = this.options.length; i &lt; lens; i++) &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// forEach</span><br><span class=\"line\">users.forEach((item, index) =&gt; &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">menus.forEach((menu, index) =&gt; &#123;</span><br><span class=\"line\">  if (menu.children) &#123;</span><br><span class=\"line\">    menu.children.forEach((subMenu, subIndex) =&gt; &#123;</span><br><span class=\"line\">      if (subMenu.children) &#123;</span><br><span class=\"line\">        subMenu.children.forEach((grandMenu, grandIndex) =&gt; &#123;</span><br><span class=\"line\">          // 一个不常用的示例</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法参数命名\"><a href=\"#方法参数命名\" class=\"headerlink\" title=\"方法参数命名\"></a>方法参数命名</h1><p>方法的参数名称和数量在不同的方法中各不相同，但是还是有一些固定的模式可以参考，比如在 Vue 中监听属性变化的新值和旧值；<code>reduce</code> 方法的上一个值，当前值；回调函数的命名、剩余参数的命名等。</p>\n<h2 id=\"情形一：新值、旧值\"><a href=\"#情形一：新值、旧值\" class=\"headerlink\" title=\"情形一：新值、旧值\"></a>情形一：新值、旧值</h2><p>常见于 Vue 中<code>watch</code> 对像中的属性监听回调函数，推荐使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  oldVal: &#x27;旧值&#x27;,</span><br><span class=\"line\">  newVal: &#x27;新值&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"情形二：上一个值、下一个值和当前值\"><a href=\"#情形二：上一个值、下一个值和当前值\" class=\"headerlink\" title=\"情形二：上一个值、下一个值和当前值\"></a>情形二：上一个值、下一个值和当前值</h2><p>这种情形见于路由的钩子方法，<code>Object.assign</code> 数据拷贝的参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 组合一</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  from: &#x27;从...&#x27;,</span><br><span class=\"line\">  to: &#x27;到...&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合二</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  prev: &#x27;上一个...&#x27;,</span><br><span class=\"line\">  next: &#x27;下一个...&#x27;,</span><br><span class=\"line\">  cur: &#x27;当前&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合三</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  source: &#x27;源&#x27;,</span><br><span class=\"line\">  target: &#x27;目标&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 组合四</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  start: &#x27;开始&#x27;,</span><br><span class=\"line\">  end: &#x27;结束&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"情形三：异步数据返回\"><a href=\"#情形三：异步数据返回\" class=\"headerlink\" title=\"情形三：异步数据返回\"></a>情形三：异步数据返回</h2><p>用于 Promise 的<code>then</code>方法参数，<code>await</code> 的返回的 Promise 等。可选择的词汇有：<code>res</code>, <code>data</code>, <code>json</code>, <code>entity</code>，推荐使用 <code>res</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">demoPromise.then(res =&gt; &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"情形四：其它情况\"><a href=\"#情形四：其它情况\" class=\"headerlink\" title=\"情形四：其它情况\"></a>情形四：其它情况</h2><p>一些使用不多，但是在编程时约定成俗的命名方式。例如 <code>ch</code> 表示单个字符，<code>str</code> 表示字符串, <code>n</code> 代表次数, <code>reg</code> 表示正则, <code>expr</code> 表示表达式, <code>lens</code> 表示数组长度, <code>count</code> 表示数量, <code>p</code> 表示数据的精度, <code>q</code> 表示查询(query), <code>src</code> 表示数据源(source), <code>no</code> 表示数字(number), <code>rate</code> 表示比率, <code>status</code> 表示状态, <code>bool</code> 表示布尔值, <code>arr</code> 表示数组值, <code>obj</code> 表示对象值, <code>x</code> 和 <code>y</code> 表示坐标两轴, <code>func</code> 表示函数, <code>ua</code>表示 User Agent, <code>size</code> 表示大小, <code>unit</code> 表示单位, <code>hoz</code> 表示水平方向, <code>vert</code> 表示垂直方向, <code>radix</code> 表示基数，根</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 传入单个字符</span><br><span class=\"line\">function upper(ch) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 数量重复</span><br><span class=\"line\">function repeat(str, n)</span><br><span class=\"line\"></span><br><span class=\"line\">// 正则</span><br><span class=\"line\">&#x27;abab&#x27;.replace(reg, &#x27;bb&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事件命名\"><a href=\"#事件命名\" class=\"headerlink\" title=\"事件命名\"></a>事件命名</h1><p>这里根据 DOM、nodejs 和一些框架和 UI 组件的事件进行归纳</p>\n<h2 id=\"DOM-事件\"><a href=\"#DOM-事件\" class=\"headerlink\" title=\"DOM 事件\"></a><strong>DOM 事件</strong></h2><p>这里列举 DOM 中常见的事件命名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  load: &#x27;已完成加载&#x27;,</span><br><span class=\"line\">  unload: &#x27;资源正在被卸载&#x27;,</span><br><span class=\"line\">  beforeunload: &#x27;资源即将被卸载&#x27;,</span><br><span class=\"line\">  error: &#x27;失败时&#x27;,</span><br><span class=\"line\">  abort: &#x27;中止时&#x27;,</span><br><span class=\"line\">  focus: &#x27;元素获得焦点&#x27;,</span><br><span class=\"line\">  blur: &#x27;元素失去焦点&#x27;,</span><br><span class=\"line\">  cut: &#x27;已经剪贴选中的文本内容并且复制到了剪贴板&#x27;,</span><br><span class=\"line\">  copy: &#x27;已经把选中的文本内容复制到了剪贴板&#x27;,</span><br><span class=\"line\">  paste: &#x27;从剪贴板复制的文本内容被粘贴&#x27;,</span><br><span class=\"line\">  resize: &#x27;元素重置大小&#x27;,</span><br><span class=\"line\">  scroll: &#x27;滚动事件&#x27;,</span><br><span class=\"line\">  reset: &#x27;重置&#x27;,</span><br><span class=\"line\">  submit: &#x27;表单提交&#x27;,</span><br><span class=\"line\">  online: &#x27;在线&#x27;,</span><br><span class=\"line\">  offline: &#x27;离线&#x27;,</span><br><span class=\"line\">  open: &#x27;打开&#x27;,</span><br><span class=\"line\">  close: &#x27;关闭&#x27;,</span><br><span class=\"line\">  connect: &#x27;连接&#x27;,</span><br><span class=\"line\">  start: &#x27;开始&#x27;,</span><br><span class=\"line\">  end: &#x27;结束&#x27;,</span><br><span class=\"line\">  print: &#x27;打印&#x27;,</span><br><span class=\"line\">  afterprint: &#x27;打印机关闭时触发&#x27;,</span><br><span class=\"line\">  click: &#x27;点击&#x27;,</span><br><span class=\"line\">  dblclick: &#x27;双击&#x27;,</span><br><span class=\"line\">  change: &#x27;变动&#x27;,</span><br><span class=\"line\">  select: &#x27;文本被选中被选中&#x27;,</span><br><span class=\"line\">  keydown/keypress/keyup: &#x27;按键事件&#x27;,</span><br><span class=\"line\">  mousemove/mousedown/mouseup/mouseleave/mouseout: &#x27;鼠标事件&#x27;,</span><br><span class=\"line\">  touch: &#x27;轻按&#x27;,</span><br><span class=\"line\">  contextmenu: &#x27;右键点击 (右键菜单显示前)&#x27;,</span><br><span class=\"line\">  wheel: &#x27;滚轮向任意方向滚动&#x27;,</span><br><span class=\"line\">  pointer: &#x27;指针事件&#x27;,</span><br><span class=\"line\">  drag/dragstart/dragend/dragenter/dragover/dragleave: &#x27;拖放事件&#x27;,</span><br><span class=\"line\">  drop: &#x27;元素在有效释放目标区上释放&#x27;,</span><br><span class=\"line\">  play: &#x27;播放&#x27;,</span><br><span class=\"line\">  pause: &#x27;暂停&#x27;,</span><br><span class=\"line\">  suspend: &#x27;挂起&#x27;,</span><br><span class=\"line\">  complete: &#x27;完成&#x27;,</span><br><span class=\"line\">  seek: &#x27;搜索&#x27;,</span><br><span class=\"line\">  install: &#x27;安装&#x27;,</span><br><span class=\"line\">  progress: &#x27;进行&#x27;,</span><br><span class=\"line\">  broadcast: &#x27;广播&#x27;,</span><br><span class=\"line\">  input: &#x27;输入&#x27;,</span><br><span class=\"line\">  message: &#x27;消息&#x27;,</span><br><span class=\"line\">  valid: &#x27;有效&#x27;,</span><br><span class=\"line\">  zoom: &#x27;放大&#x27;,</span><br><span class=\"line\">  rotate: &#x27;旋转&#x27;,</span><br><span class=\"line\">  scale: &#x27;缩放&#x27;,</span><br><span class=\"line\">  upgrade: &#x27;更新&#x27;,</span><br><span class=\"line\">  ready: &#x27;准备好&#x27;,</span><br><span class=\"line\">  active: &#x27;激活&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a><strong>自定义事件</strong></h2><p>在封装组件时提供的事件名除了参考 DOM 事件外，在命名上也可以参考 Github Api 采用 <code>动词过去时 + Event</code> 的方式, Visual Studio Code Api 的 &#96;on +</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  assignedEvent: &#x27;分配事件&#x27;,</span><br><span class=\"line\">  closedEvent: &#x27;关闭事件&#x27;,</span><br><span class=\"line\">  labeledEvent: &#x27;标签事件&#x27;,</span><br><span class=\"line\">  lockedEvent: &#x27;锁事件&#x27;,</span><br><span class=\"line\">  deployedEvent: &#x27;部署事件&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，很多命名方式可以根据场景使用 <code>元素 + click</code> 、<code>元素 + change</code> 、<code>select + 范围</code>等方式灵活运用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  selectAll: &#x27;选择所有&#x27;,</span><br><span class=\"line\">  cellClick: &#x27;当某个单元格被点击时会触发该事件&#x27;,</span><br><span class=\"line\">  sortChange: &#x27;当表格的排序条件发生变化的时候会触发该事件&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"状态管理命名\"><a href=\"#状态管理命名\" class=\"headerlink\" title=\"状态管理命名\"></a>状态管理命名</h1><p>如果在项目中用到了状态管理(redux&#x2F;vuex&#x2F;ngrx)，下面给出一些 ActionType，Mutation, Action 的命名参考。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Redux 的 actionType</span><br><span class=\"line\">LOAD_SUCCESS</span><br><span class=\"line\">LOAD_FAIL</span><br><span class=\"line\">TOGGLE_SHOW_HISTORY</span><br><span class=\"line\">ON_PLAY</span><br><span class=\"line\">ON_LOAD_START</span><br><span class=\"line\">FETCH_SONGS_REQUEST</span><br><span class=\"line\">RECEIVE_PRODUCTS</span><br><span class=\"line\"></span><br><span class=\"line\">// ngrx</span><br><span class=\"line\">const SET_CURRENT_USER = &#x27;[User] Set current&#x27;;</span><br><span class=\"line\">const ADD_THREAD = &#x27;[Thread] Add&#x27;;</span><br><span class=\"line\">const UPDATE_TRIP_SUCCESS = &#x27;Update [Trip] Success&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其它命名\"><a href=\"#其它命名\" class=\"headerlink\" title=\"其它命名\"></a>其它命名</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 日期、时间</span><br><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">sentAt: &#x27;发送时间&#x27;</span><br><span class=\"line\">addAt: &#x27;添加时间&#x27;</span><br><span class=\"line\">updateAt: &#x27;更新时间&#x27;</span><br><span class=\"line\">startDate: &#x27;开始日期&#x27;</span><br><span class=\"line\">endDate: &#x27;结束日期&#x27;</span><br><span class=\"line\">startTime: &#x27;开时时间&#x27;</span><br><span class=\"line\">endTime: &#x27;结束时间&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>本文主要为广大前端开发人员提供一个英文词汇参考，便于记忆和查阅。文中内容按照特定的方式进行分类便于读者关注感兴趣的部分。</p>\n<p>文中的单词并没有给出其词性，很多词性的变化需要读者具备一定的英语语法知识，以便在特定情况下灵活运用。</p>\n<h1 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h1><p>数字部分包含英文的数字表示、数字运算符、数字单位</p>\n<p>infinite: 无限的</p>\n<h2 id=\"英文数字\"><a href=\"#英文数字\" class=\"headerlink\" title=\"英文数字\"></a>英文数字</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zero: 零</span><br><span class=\"line\">one: 一</span><br><span class=\"line\">two: 二</span><br><span class=\"line\">three: 三</span><br><span class=\"line\">four: 四</span><br><span class=\"line\">five: 五</span><br><span class=\"line\">six: 六</span><br><span class=\"line\">seven: 七</span><br><span class=\"line\">eight: 八</span><br><span class=\"line\">nine: 九</span><br><span class=\"line\">ten: 十</span><br><span class=\"line\">eleven: 十一</span><br><span class=\"line\">twelve: 十二</span><br><span class=\"line\">thirteen: 十三</span><br><span class=\"line\">fourteen: 十四</span><br><span class=\"line\">fifteen: 十五</span><br><span class=\"line\">sixteen: 十六</span><br><span class=\"line\">seventeen: 十七</span><br><span class=\"line\">eighteen: 十八</span><br><span class=\"line\">nineteen: 十九</span><br><span class=\"line\">twenty: 二十</span><br><span class=\"line\">thirty: 三十</span><br><span class=\"line\">forty: 四十</span><br><span class=\"line\">fifty: 五十</span><br><span class=\"line\">eighty: 八十</span><br><span class=\"line\">ninety: 九十</span><br><span class=\"line\">hundred: 百</span><br><span class=\"line\">thousand: 千</span><br><span class=\"line\">million: 百万</span><br><span class=\"line\">billion: 十亿</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计数单位\"><a href=\"#计数单位\" class=\"headerlink\" title=\"计数单位\"></a>计数单位</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pixel: 像素</span><br><span class=\"line\">percent: 百分比</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 中文数字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ten: 十</span><br><span class=\"line\">hundred: 百</span><br><span class=\"line\">thousand: 千</span><br><span class=\"line\">ten thousand: 万</span><br><span class=\"line\">billion: 亿</span><br><span class=\"line\">trillion: 兆</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 存储容量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte: 字节 B</span><br><span class=\"line\">kilobyte: 千字节 KB</span><br><span class=\"line\">megabyte 兆字节 MB</span><br><span class=\"line\">gigabyte 吉字节 GB</span><br><span class=\"line\">trillionbyte 太字节 TB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decimal: 十进制</span><br><span class=\"line\">hex: 十六进制</span><br><span class=\"line\">binary: 二进制</span><br><span class=\"line\">octal: 八进制</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add: 加</span><br><span class=\"line\">subtract: 减</span><br><span class=\"line\">multiply: 乘</span><br><span class=\"line\">divide: 除</span><br><span class=\"line\">and: 与</span><br><span class=\"line\">or: 或</span><br><span class=\"line\">not: 非</span><br><span class=\"line\">intersection: 交集</span><br><span class=\"line\">compose: 并集</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"键盘符号\"><a href=\"#键盘符号\" class=\"headerlink\" title=\"键盘符号\"></a>键盘符号</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">punctuator: 标点符号</span><br><span class=\"line\">identifier: 标识符</span><br><span class=\"line\"></span><br><span class=\"line\">// Unique graphic character allocations</span><br><span class=\"line\">// 独特的图形字符分配</span><br><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">exclamation mark: ! 感叹号</span><br><span class=\"line\">quotation mark: &quot; 双引号</span><br><span class=\"line\">percent sign: % 百分号</span><br><span class=\"line\">ampersand: &amp; and符号</span><br><span class=\"line\">apostrophe: &#x27; 撇号</span><br><span class=\"line\">ellipse/apostrophe: …… 省略号</span><br><span class=\"line\">left parenthesis: ( 左括号</span><br><span class=\"line\">right parenthesis: ) 右括号</span><br><span class=\"line\">asterisk: * 星号</span><br><span class=\"line\">plus sign: + 加号</span><br><span class=\"line\">comma: , 逗号</span><br><span class=\"line\">slight-pause mark: 、 顿号</span><br><span class=\"line\">hyphen-minus: - 连字符(-) 或者 减号(-)</span><br><span class=\"line\">full stop: . 句号</span><br><span class=\"line\">middle dot: ・ 中间点</span><br><span class=\"line\">interpunct: · 间隔号</span><br><span class=\"line\">hyphenation point: · 连字点</span><br><span class=\"line\">solidus: / 斜线</span><br><span class=\"line\">colon: : 冒号</span><br><span class=\"line\">semicolon: ; 分号</span><br><span class=\"line\">less-than sign: &lt; 小于符号</span><br><span class=\"line\">equals sign: = 等于符号</span><br><span class=\"line\">greater-than sign: &gt; 大于符号</span><br><span class=\"line\">question mark: ? 问号</span><br><span class=\"line\">low line: _ 下划线</span><br><span class=\"line\">digital 0: 0 数字 0</span><br><span class=\"line\">latin capital letter A:  A 大写拉丁字母</span><br><span class=\"line\">latin small letter A: A 小写拉丁字母</span><br><span class=\"line\"></span><br><span class=\"line\">// Alternative graphic character allocations</span><br><span class=\"line\">// 可选的图形字符分配</span><br><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">number sign: # 数字符号</span><br><span class=\"line\">pound sign: £ 英镑符号</span><br><span class=\"line\">dollar sign: $ 美元符号</span><br><span class=\"line\">currency sign:  货币符</span><br><span class=\"line\"></span><br><span class=\"line\">// IRV(International Reference Version) graphic character allocations</span><br><span class=\"line\">// IRV图形字符分配</span><br><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">number sign: # 数字符号</span><br><span class=\"line\">dollar sign: $ 美元符号</span><br><span class=\"line\">commercial at: @</span><br><span class=\"line\">left square bracket: [ 左方括号</span><br><span class=\"line\">reverse solidus:  反斜线</span><br><span class=\"line\">right square bracket: ] 右方括号</span><br><span class=\"line\">circumflex accent: ^ 抑扬音符号</span><br><span class=\"line\">grave accent: ` 沉音符</span><br><span class=\"line\">left curly bracket: &#123; 左花括号</span><br><span class=\"line\">vertical line: | 垂直线</span><br><span class=\"line\">right curly bracked: &#125; 右花括号</span><br><span class=\"line\">tilde: ~ 波浪符</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明：由于<a href=\"https://link.segmentfault.com/?enc=YykBjtgFkx/2EOzGtHbG+Q==.MnCoapm6qUK6g38kx76BRxEjFDEbCyZewPa9ca8lcskAjsFjoNiosJToubJxgK+B1I5/tKAff6DYIvoOo+/cAbIkswGkxu3W3qvnJYZoOf0=\">标点符号</a>中英文语言环境同一个符号也不同叫法别名，因此上面列举的词汇只能说涉及到了部分，并没有把所有 Dialect(方言) 包含进来。</p>\n<p>注：<code>·</code> 符号在不同的上下文中有不同的叫法，比如“间隔号”、“中间点”、“项目符号”、“连子点”等，虽然肉眼看起来没有什么大的区别，但是在计算机中的 Unicode 编码是不一样的，更多参见<a href=\"https://link.segmentfault.com/?enc=STENo+rzOkZyEp/AgKZwYw==.5GeyGZArq33ewuH8l+A9Tqgk0fxRV1+63cCElzq24xvnNpZkpYmovtUNhk/jQQ55h0bw+5ynrGnSibAp3IjdMA==\">间隔符</a></p>\n</blockquote>\n<h1 id=\"时间、日期\"><a href=\"#时间、日期\" class=\"headerlink\" title=\"时间、日期\"></a>时间、日期</h1><p>下面虽然列举了很多时间相关的词汇，但是在实际前端开发过程中用到的就年、月、日和时、分、秒、毫秒。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time: 时间</span><br><span class=\"line\">date: 日期</span><br><span class=\"line\">workday: 工作日</span><br><span class=\"line\">weekend: 周末</span><br><span class=\"line\">season: 季节</span><br><span class=\"line\">anniversary: 周年</span><br><span class=\"line\">century: 世纪；百年</span><br><span class=\"line\">quarter: 一刻钟</span><br><span class=\"line\">holiday: 节日；假日</span><br><span class=\"line\">morning: 上午</span><br><span class=\"line\">noon/midday: 中午</span><br><span class=\"line\">afternoon: 下午</span><br><span class=\"line\">night: 晚上</span><br><span class=\"line\">midnight: 半夜</span><br><span class=\"line\">yesterday: 昨天</span><br><span class=\"line\">today: 今天</span><br><span class=\"line\">tomorrow: 明天</span><br><span class=\"line\">clock: 时钟</span><br><span class=\"line\">now: 现在；如今；立刻</span><br><span class=\"line\">nowadays: 现今；时下</span><br><span class=\"line\">present: 现在（的）</span><br><span class=\"line\">former: 从前的；前任的</span><br><span class=\"line\">before: 在...之前</span><br><span class=\"line\">after: 在...之后</span><br><span class=\"line\">future: 将来</span><br><span class=\"line\">permanent: 永久的；不变的</span><br><span class=\"line\">period: 周期；期间；一段时间</span><br><span class=\"line\">during: 在...的期间；在...期间的某个时候</span><br><span class=\"line\">term: 学期；期限</span><br><span class=\"line\">early: 早期的，提早；在初期</span><br><span class=\"line\">ahead: 在前的；领先的；提前的</span><br><span class=\"line\">later: 后来；稍后；随后</span><br><span class=\"line\">start/begin: 开始</span><br><span class=\"line\">end: 结束</span><br><span class=\"line\">pause: 暂停</span><br><span class=\"line\">suspend: 推迟；使暂停</span><br><span class=\"line\">timeout: 超时；暂时休息；工间休息</span><br><span class=\"line\">interval: 间隔</span><br><span class=\"line\">overtime: 超时的；加班的，加班时间</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">year: 年</span><br><span class=\"line\">month: 月</span><br><span class=\"line\">day: 日</span><br><span class=\"line\">week: 周</span><br><span class=\"line\">hour: 小时</span><br><span class=\"line\">minute: 分</span><br><span class=\"line\">seconds: 秒</span><br><span class=\"line\">millisecond: 毫秒</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"星期\"><a href=\"#星期\" class=\"headerlink\" title=\"星期\"></a>星期</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Monday: 星期一</span><br><span class=\"line\">Tuesday: 星期二</span><br><span class=\"line\">Wednesday: 星期三</span><br><span class=\"line\">Thursday: 星期四</span><br><span class=\"line\">Friday: 星期五</span><br><span class=\"line\">Saturday: 星期六</span><br><span class=\"line\">Sunday: 星期日</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"月份\"><a href=\"#月份\" class=\"headerlink\" title=\"月份\"></a>月份</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">January: 一月</span><br><span class=\"line\">February: 二月</span><br><span class=\"line\">March: 三月</span><br><span class=\"line\">April: 四月</span><br><span class=\"line\">May: 五月</span><br><span class=\"line\">June: 六月</span><br><span class=\"line\">July: 七月</span><br><span class=\"line\">August: 八月</span><br><span class=\"line\">September: 九月</span><br><span class=\"line\">October: 十月</span><br><span class=\"line\">November: 十一月</span><br><span class=\"line\">December: 十二月</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"季节\"><a href=\"#季节\" class=\"headerlink\" title=\"季节\"></a>季节</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring: 春季</span><br><span class=\"line\">summer: 夏季</span><br><span class=\"line\">autumn: 秋季</span><br><span class=\"line\">winter: 冬季</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map: 地图</span><br><span class=\"line\">location: 地理位置</span><br><span class=\"line\">place: 地方</span><br><span class=\"line\">earth: 地球</span><br><span class=\"line\">province: 省</span><br><span class=\"line\">city: 市</span><br><span class=\"line\">district: 区</span><br><span class=\"line\">area: 区域、范围</span><br><span class=\"line\">region: 地区、范围、部位</span><br><span class=\"line\">address: 地址</span><br><span class=\"line\">edges: 边界</span><br><span class=\"line\">boundary: 边界；范围；分界线</span><br><span class=\"line\">coordinate: 坐标</span><br><span class=\"line\">east: 东</span><br><span class=\"line\">south: 南</span><br><span class=\"line\">west: 西</span><br><span class=\"line\">north: 北</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方位\"><a href=\"#方位\" class=\"headerlink\" title=\"方位\"></a>方位</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">direction: 方向</span><br><span class=\"line\">position: 位置</span><br><span class=\"line\">top: 上</span><br><span class=\"line\">right: 右</span><br><span class=\"line\">bottom: 下</span><br><span class=\"line\">left: 左</span><br><span class=\"line\">opposite: 对面的</span><br><span class=\"line\">center: 中间（水平）</span><br><span class=\"line\">middle: 中间（垂直）</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"排版\"><a href=\"#排版\" class=\"headerlink\" title=\"排版\"></a>排版</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstract: 摘要</span><br><span class=\"line\">annex: 附录</span><br><span class=\"line\">suffix: 后缀；词尾</span><br><span class=\"line\">prefix: 前缀</span><br><span class=\"line\">titl: 标题</span><br><span class=\"line\">summary: 总结；概要</span><br><span class=\"line\">specifications: 规范</span><br><span class=\"line\">headline: 大标题；内容提要；栏外标题</span><br><span class=\"line\">preface: 前言；引语；序言</span><br><span class=\"line\">chapter: 章；篇；回</span><br><span class=\"line\">section: 章节；部分</span><br><span class=\"line\">abbreviation: 缩写；缩写词</span><br><span class=\"line\"></span><br><span class=\"line\">font: 字体</span><br><span class=\"line\">color: 颜色</span><br><span class=\"line\">heading: 标题</span><br><span class=\"line\">align: 对齐</span><br><span class=\"line\">align left/align center/align right: 左对齐/居中对齐/右对齐</span><br><span class=\"line\">align top/align middle/align bottom: 顶对齐/垂直居中/底部对齐</span><br><span class=\"line\">text: 文本</span><br><span class=\"line\">zoom: 放大</span><br><span class=\"line\">size: 大小</span><br><span class=\"line\">opacity: 透明度</span><br><span class=\"line\">position: 位置</span><br><span class=\"line\">rotation: 旋转</span><br><span class=\"line\">fill: 填充</span><br><span class=\"line\">shadow: 阴影</span><br><span class=\"line\">blur: 模糊</span><br><span class=\"line\">filter: 滤镜</span><br><span class=\"line\">radius: 圆角</span><br><span class=\"line\">unite: 合并</span><br><span class=\"line\">subtract: 差集</span><br><span class=\"line\">intersect: 交集</span><br><span class=\"line\">exclude: 排除</span><br><span class=\"line\">join: 合并</span><br><span class=\"line\">insert image: 插入图片</span><br><span class=\"line\">code: 插入代码</span><br><span class=\"line\">highlight: 高亮</span><br><span class=\"line\">strikethrough: 删除线</span><br><span class=\"line\">underscore: 下划线</span><br><span class=\"line\">italic: 斜体</span><br><span class=\"line\">bold: 粗体</span><br><span class=\"line\">horizontal line: 水平分隔线</span><br><span class=\"line\">attach file: 附加文件</span><br><span class=\"line\">checklist: 清单列表</span><br><span class=\"line\">bullet: 项目符号</span><br><span class=\"line\">indention: 缩进</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"形状\"><a href=\"#形状\" class=\"headerlink\" title=\"形状\"></a>形状</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">figure: 图形</span><br><span class=\"line\">stroke: 描边</span><br><span class=\"line\">fill: 填充</span><br><span class=\"line\">border: 边框</span><br><span class=\"line\">line: 线</span><br><span class=\"line\">rectangle: 矩形</span><br><span class=\"line\">ellipse: 椭圆</span><br><span class=\"line\">sphere: 球</span><br><span class=\"line\">triangle: 三角形</span><br><span class=\"line\">sector: 扇形</span><br><span class=\"line\">annulus: 圆环</span><br><span class=\"line\">trapezium: 梯形</span><br><span class=\"line\">polygon: 多边形</span><br><span class=\"line\">arch: 弓形</span><br><span class=\"line\">circle: 圆、循环、周期</span><br><span class=\"line\">star: 星形、评分</span><br><span class=\"line\">cylinder: 圆柱</span><br><span class=\"line\">circle cone: 圆锥</span><br><span class=\"line\">love: 爱心</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grammar: 语法</span><br><span class=\"line\">syntax: 句法</span><br><span class=\"line\">morphology: 词法</span><br><span class=\"line\">structure: 结构</span><br><span class=\"line\">sentence: 句子</span><br><span class=\"line\">clause: 从句</span><br><span class=\"line\">phrase: 词组</span><br><span class=\"line\">word: 单词</span><br><span class=\"line\">adjective: 形容词</span><br><span class=\"line\">verb: 动词</span><br><span class=\"line\">noun: 名词</span><br><span class=\"line\">abstract noun: 抽象名词</span><br><span class=\"line\">pronouns: 代词</span><br><span class=\"line\">determiner: 限定词</span><br><span class=\"line\">conjunction: 连词</span><br><span class=\"line\">interjection: 感叹词</span><br><span class=\"line\">adverb: 副词</span><br><span class=\"line\">preposition: 介词；前置词</span><br><span class=\"line\">derivative: 派生词</span><br><span class=\"line\">numeral: 数词</span><br><span class=\"line\">auxiliary: 助动词</span><br><span class=\"line\">tense: 时态</span><br><span class=\"line\">passive: 被动语态</span><br><span class=\"line\">gerund: 动名词</span><br><span class=\"line\">antonym: 反义词</span><br><span class=\"line\">article: 冠词</span><br><span class=\"line\">antecedent: 先行词</span><br><span class=\"line\">regular/irregular verbs: 规则╱不规则动词</span><br><span class=\"line\">transitive/intransitive verbs: 及物╱不及物动词</span><br><span class=\"line\">subject: 主语</span><br><span class=\"line\">object: 宾语</span><br><span class=\"line\">predicate: 谓语；表语</span><br><span class=\"line\">adverbial: 状语</span><br><span class=\"line\">complement: 补语</span><br><span class=\"line\">appositive: 同位语</span><br><span class=\"line\">adjunct: 修饰语</span><br><span class=\"line\">affix: 词缀</span><br><span class=\"line\">acronym: 首字母缩略词</span><br><span class=\"line\">abbreviation: 缩写词</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用颜色\"><a href=\"#常用颜色\" class=\"headerlink\" title=\"常用颜色\"></a>常用颜色</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pink: 粉红</span><br><span class=\"line\">violet: 紫罗兰</span><br><span class=\"line\">magenta: 洋红(玫瑰红)</span><br><span class=\"line\">purple: 紫色</span><br><span class=\"line\">blue: 纯蓝</span><br><span class=\"line\">azure: 蔚蓝色</span><br><span class=\"line\">cyan: 青色</span><br><span class=\"line\">green: 纯绿</span><br><span class=\"line\">lime: 闪光绿</span><br><span class=\"line\">ivory: 象牙色</span><br><span class=\"line\">yellow: 纯黄</span><br><span class=\"line\">olive: 橄榄</span><br><span class=\"line\">gold: 金色</span><br><span class=\"line\">orange: 橙色</span><br><span class=\"line\">snow: 雪白色</span><br><span class=\"line\">red: 纯红</span><br><span class=\"line\">brown: 棕色</span><br><span class=\"line\">white: 纯白</span><br><span class=\"line\">sliver: 银灰色</span><br><span class=\"line\">gray: 灰色</span><br><span class=\"line\">black: 纯黑</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"JavaScript-语言相关\"><a href=\"#JavaScript-语言相关\" class=\"headerlink\" title=\"JavaScript 语言相关\"></a>JavaScript 语言相关</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: 数据类型</span><br><span class=\"line\">primitive type: 原始类型</span><br><span class=\"line\">object: 对象</span><br><span class=\"line\">array: 数组</span><br><span class=\"line\">string: 字符串</span><br><span class=\"line\">boolean: 布尔值</span><br><span class=\"line\">symbol: 符号</span><br><span class=\"line\">undefined: 未定义</span><br><span class=\"line\">null: 空</span><br><span class=\"line\">function: 函数</span><br><span class=\"line\">array function: 箭头函数</span><br><span class=\"line\">curried function: 柯里函数</span><br><span class=\"line\">callback: 回调函数</span><br><span class=\"line\">class: 类</span><br><span class=\"line\">module: 模块</span><br><span class=\"line\">import: 导入</span><br><span class=\"line\">export: 导出</span><br><span class=\"line\">constructor: 构造函数</span><br><span class=\"line\">prototype: 原型</span><br><span class=\"line\">reference: 引用</span><br><span class=\"line\">closure: 闭包</span><br><span class=\"line\">destructure: 解构</span><br><span class=\"line\">variable: 变量</span><br><span class=\"line\">property: 属性</span><br><span class=\"line\">attribute: 特性</span><br><span class=\"line\">iterator: 迭代器</span><br><span class=\"line\">generator: 生成器</span><br><span class=\"line\">yield: 产出</span><br><span class=\"line\">observable: 可观赛的</span><br><span class=\"line\">hosit: 提升</span><br><span class=\"line\">operator: 运算符</span><br><span class=\"line\">equal: 相等</span><br><span class=\"line\">statement: 语句</span><br><span class=\"line\">block: 块</span><br><span class=\"line\">comment: 注释</span><br><span class=\"line\">whitespace: 空格</span><br><span class=\"line\">event: 事件</span><br><span class=\"line\">listener: 监听器</span><br><span class=\"line\">accessor: 访问器</span><br><span class=\"line\">decorator: 装饰器</span><br><span class=\"line\">proxy: 代理</span><br><span class=\"line\">reflect: 反射</span><br><span class=\"line\">promise: 承诺</span><br><span class=\"line\">test: 测试</span><br><span class=\"line\">fetch: 拿；取</span><br><span class=\"line\">descriptor: 描述符号</span><br><span class=\"line\">sync: 同步</span><br><span class=\"line\">async: 异步</span><br><span class=\"line\">await: 等候</span><br><span class=\"line\">find: 查找</span><br><span class=\"line\">every: 所有</span><br><span class=\"line\">some: 部分</span><br><span class=\"line\">foreach: 为每一个</span><br><span class=\"line\">map: 遍历</span><br><span class=\"line\">filter: 过滤</span><br><span class=\"line\">pad: 填充</span><br><span class=\"line\">index: 索引</span><br><span class=\"line\">data: 数据</span><br><span class=\"line\">slice: 把...分成部分</span><br><span class=\"line\">splice: 拼接，接合</span><br><span class=\"line\">reduce: 归纳</span><br><span class=\"line\">push: 推</span><br><span class=\"line\">pull: 拉</span><br><span class=\"line\">pop: 弹出</span><br><span class=\"line\">split: 分离</span><br><span class=\"line\">join: 连接</span><br><span class=\"line\">flatten: 变平</span><br><span class=\"line\">replace: 替换</span><br><span class=\"line\">search: 搜索</span><br><span class=\"line\">scope: 作用域</span><br><span class=\"line\">timeout: 超时</span><br><span class=\"line\">interval: 间隔</span><br><span class=\"line\">value: 值</span><br><span class=\"line\">define: 定义</span><br><span class=\"line\">math: 数学</span><br><span class=\"line\">sum: 求和</span><br><span class=\"line\">configurable: 可配置</span><br><span class=\"line\">enumerable: 可枚举</span><br><span class=\"line\">writable: 可写</span><br><span class=\"line\">local: 局部的</span><br><span class=\"line\">global: 全局的</span><br><span class=\"line\">not: 非</span><br><span class=\"line\">or: 或</span><br><span class=\"line\">xor: 异或</span><br><span class=\"line\">and: 且</span><br><span class=\"line\">regexp: 正则表达式</span><br><span class=\"line\">match: 匹配</span><br><span class=\"line\">pattern: 模式</span><br><span class=\"line\">greed: 贪婪</span><br><span class=\"line\">color: 颜色</span><br><span class=\"line\">rest: 剩余</span><br><span class=\"line\">assign: 赋值</span><br><span class=\"line\">tag: 标签</span><br><span class=\"line\">buffer: 缓冲区</span><br><span class=\"line\">super: 极好的</span><br><span class=\"line\">extend: 扩展</span><br><span class=\"line\">readonly: 只读</span><br><span class=\"line\">override: 重写</span><br><span class=\"line\">dynamic: 动态的；多态</span><br><span class=\"line\">default: 默认的</span><br><span class=\"line\">implement: 实现；执行</span><br><span class=\"line\">strict: 严格的</span><br><span class=\"line\">deprecate: 不推荐；反对</span><br><span class=\"line\">tab: 制表符</span><br><span class=\"line\">space: 空格</span><br><span class=\"line\">indentation: 缩进</span><br><span class=\"line\">public: 公共的</span><br><span class=\"line\">private: 私有的</span><br><span class=\"line\">namespace: 命名空间</span><br><span class=\"line\">member: 成员</span><br><span class=\"line\">method: 方法</span><br><span class=\"line\">parameter/argument: 参数</span><br><span class=\"line\">instance: 实例</span><br><span class=\"line\">ternary: 三目运算</span><br><span class=\"line\">literary: 字面量</span><br><span class=\"line\">template: 模板</span><br><span class=\"line\">character: 字符</span><br><span class=\"line\">markup: 标记</span><br><span class=\"line\">syntax: 语法</span><br><span class=\"line\">equality: 相等</span><br><span class=\"line\">conditional statements: 条件判断语句</span><br><span class=\"line\">true: 是</span><br><span class=\"line\">false: 否</span><br><span class=\"line\">type-checker: 类型检查</span><br><span class=\"line\">compile-time: 编译时</span><br><span class=\"line\">lexical scope: 词法作用域</span><br><span class=\"line\">static scope: 静态作用域</span><br><span class=\"line\">loop: 循环</span><br><span class=\"line\">notation: 符号</span><br><span class=\"line\">operand: 操作数；运算对象</span><br><span class=\"line\">ordinary object: 普通对象</span><br><span class=\"line\">standard object: 标准对象</span><br><span class=\"line\">built-in object: 内置对象</span><br><span class=\"line\">exotic object: 外来对象</span><br><span class=\"line\">last-in/first-out manner: 后进先出的方式</span><br><span class=\"line\">reserved word: 保留单词</span><br><span class=\"line\">signature: 签名</span><br><span class=\"line\">enumerable: 可枚举的</span><br><span class=\"line\">iterable: 可迭代的</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用简写\"><a href=\"#常用简写\" class=\"headerlink\" title=\"常用简写\"></a>常用简写</h1><p>简写后面用 ”*“ 号标注的为推荐使用简写，可以放心大胆在项目中使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hd -&gt; head</span><br><span class=\"line\">hdr -&gt; header</span><br><span class=\"line\">bd -&gt; body</span><br><span class=\"line\">ft -&gt; foot</span><br><span class=\"line\">ftr -&gt; footer</span><br><span class=\"line\">tbl -&gt; table</span><br><span class=\"line\">el -&gt; element **</span><br><span class=\"line\">cnt -&gt; content</span><br><span class=\"line\">cmp -&gt; component</span><br><span class=\"line\">btn -&gt; button **</span><br><span class=\"line\">sel -&gt; select *</span><br><span class=\"line\">opt -&gt; option *</span><br><span class=\"line\">chk -&gt; checkbox</span><br><span class=\"line\">lbl -&gt; label</span><br><span class=\"line\">wiz -&gt; wizard *</span><br><span class=\"line\">bg -&gt; background **</span><br><span class=\"line\">cur -&gt; current **</span><br><span class=\"line\">prev -&gt; previous **</span><br><span class=\"line\">idx -&gt; index</span><br><span class=\"line\">len -&gt; length **</span><br><span class=\"line\">pg -&gt; page</span><br><span class=\"line\">vm -&gt; view page</span><br><span class=\"line\">repo -&gt; repository *</span><br><span class=\"line\">org -&gt; organization *</span><br><span class=\"line\">ref -&gt; reference *</span><br><span class=\"line\">res -&gt; response **</span><br><span class=\"line\">req -&gt; request **</span><br><span class=\"line\">msg -&gt; message **</span><br><span class=\"line\">str -&gt; string **</span><br><span class=\"line\">ch -&gt; chracter *</span><br><span class=\"line\">lbl -&gt; label</span><br><span class=\"line\">img -&gt; image **</span><br><span class=\"line\">buf -&gt; buffer *</span><br><span class=\"line\">usr -&gt; user</span><br><span class=\"line\">args -&gt; arguments *</span><br><span class=\"line\">no -&gt; number</span><br><span class=\"line\">err -&gt; error *</span><br><span class=\"line\">tmp/temp -&gt; temporary **</span><br><span class=\"line\">rst -&gt; result</span><br><span class=\"line\">bdr -&gt; border</span><br><span class=\"line\">fn/func -&gt; function **</span><br><span class=\"line\">nav -&gt; navigator *</span><br><span class=\"line\">val -&gt; value</span><br><span class=\"line\">params -&gt; parameter *</span><br><span class=\"line\">dev -&gt; development *</span><br><span class=\"line\">prod -&gt; product *</span><br><span class=\"line\">util -&gt; utility *</span><br><span class=\"line\">hoc -&gt; high order component *</span><br><span class=\"line\">cb -&gt; callback *</span><br><span class=\"line\">lib -&gt; library *</span><br><span class=\"line\">prop(s) -&gt; property(ies) *</span><br><span class=\"line\">attr(s) -&gt; attribute(s) *</span><br><span class=\"line\">arr -&gt; array *</span><br><span class=\"line\">conf -&gt; config *</span><br><span class=\"line\">dlg -&gt; dialog</span><br><span class=\"line\">e/ev/evt -&gt; event **</span><br><span class=\"line\">pkg -&gt; package *</span><br><span class=\"line\">tpl -&gt; template *</span><br><span class=\"line\">addr -&gt; address</span><br><span class=\"line\">desc -&gt; descending</span><br><span class=\"line\">aesc -&gt; aescending</span><br><span class=\"line\">expr -&gt; expression **</span><br><span class=\"line\">src -&gt; source **</span><br><span class=\"line\">hoz -&gt; horizontal</span><br><span class=\"line\">vert -&gt; vertical</span><br><span class=\"line\">abbr -&gt; abbreviate</span><br><span class=\"line\">env -&gt; envirnment **</span><br><span class=\"line\">sec -&gt; seconds *</span><br><span class=\"line\">ms -&gt; millisecond **</span><br><span class=\"line\">bool -&gt; boolean *</span><br><span class=\"line\">dbl -&gt; double</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用词汇及其变体\"><a href=\"#常用词汇及其变体\" class=\"headerlink\" title=\"常用词汇及其变体\"></a>常用词汇及其变体</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">active -&gt; inactive -&gt; deactive</span><br><span class=\"line\">load -&gt; preload -&gt; unload</span><br><span class=\"line\">coming -&gt; incoming</span><br><span class=\"line\">with -&gt; without</span><br><span class=\"line\">sync -&gt; async</span><br><span class=\"line\">allowed -&gt; unallowed</span><br><span class=\"line\">going -&gt; ingoing -&gt; ongoing</span><br><span class=\"line\">online -&gt; offline</span><br><span class=\"line\">visible -&gt; invisible</span><br><span class=\"line\">finite -&gt; infinite</span><br><span class=\"line\">able -&gt; enabled -&gt; unable -&gt; disabled</span><br><span class=\"line\">login -&gt; logout</span><br><span class=\"line\">singin -&gt; signout</span><br><span class=\"line\">check -&gt; uncheck</span><br><span class=\"line\">select -&gt; unselect</span><br><span class=\"line\">inlet -&gt; outlet</span><br><span class=\"line\">regular -&gt; irregular</span><br><span class=\"line\">implicit -&gt; explicit</span><br><span class=\"line\">import -&gt; export</span><br><span class=\"line\">micro -&gt; macro</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"专用名词缩写\"><a href=\"#专用名词缩写\" class=\"headerlink\" title=\"专用名词缩写\"></a>专用名词缩写</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GUI -&gt; Graphical User Interface 图形用户界面</span><br><span class=\"line\">OEM -&gt; Original Equipment manufacturer 原始设备制造商</span><br><span class=\"line\">CMS -&gt; Content Manager System 内容管理系统</span><br><span class=\"line\">PWA -&gt; Progressive Web App 渐近式Web应用</span><br><span class=\"line\">SDK -&gt; Software Development Kit 软件开发工具包</span><br><span class=\"line\">IDE -&gt; Integrated Development Envirnment 集成开发环境</span><br><span class=\"line\">SOA -&gt; Service-Oriented Architecture 面向服务架构</span><br><span class=\"line\">ORM -&gt; Object Relation Mapping 对象关系映射</span><br><span class=\"line\">MVC -&gt; Model View Controller</span><br><span class=\"line\">OOP -&gt; Object Oriented programing 面向对象编程</span><br><span class=\"line\">BEM -&gt; Block Element Modifier 块-元素-修饰符</span><br><span class=\"line\">BFC -&gt; Block Format Context</span><br><span class=\"line\">SKU -&gt; Stock Keeping Unit 库存单位</span><br><span class=\"line\">AJAX -&gt; Asynchronous JavaScript and</span><br><span class=\"line\">HOC -&gt; High Order Component 高阶组件</span><br><span class=\"line\">I18N -&gt; Internationalization 国际化</span><br><span class=\"line\">GUID -&gt; Globally Unique Identifier 全球唯一标识符</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"UI-组件相关\"><a href=\"#UI-组件相关\" class=\"headerlink\" title=\"UI 组件相关\"></a>UI 组件相关</h1><p>参考 Element、Antd、Bootstrap 和 Material Design</p>\n<p>&#x2F;&#x2F; 通用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Head: 标题</span><br><span class=\"line\">Label: 标签</span><br><span class=\"line\">Button: 按钮</span><br><span class=\"line\">Icon: 图标</span><br><span class=\"line\">Link: 文字链接</span><br><span class=\"line\">Input: 输入框</span><br><span class=\"line\">Checkbox: 筛选框</span><br><span class=\"line\">Radio: 单选框</span><br><span class=\"line\">Select: 下拉选择框</span><br><span class=\"line\">Switch: 开关</span><br><span class=\"line\">Upload: 文件上传</span><br><span class=\"line\">Form: 表单</span><br><span class=\"line\">Radio: 音频</span><br><span class=\"line\">Video: 视频</span><br><span class=\"line\">Canvas: 画布</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 布局</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Layout: 布局</span><br><span class=\"line\">Grid: 网格；栅格</span><br><span class=\"line\">Container: 布局容器</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 导航</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Affix: 固钉</span><br><span class=\"line\">Breadcrumb: 面包屑</span><br><span class=\"line\">Dropdown: 下拉菜单</span><br><span class=\"line\">Menu: 导航菜单</span><br><span class=\"line\">Pagination: 分页</span><br><span class=\"line\">PageHeader: 页头</span><br><span class=\"line\">Steps: 步骤条</span><br><span class=\"line\">NavMenu: 导航菜单</span><br><span class=\"line\">Minimap: 小地图</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 数据录入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AutoComplete: 自动完成</span><br><span class=\"line\">Cascader: 级联选择框</span><br><span class=\"line\">DatePicker: 日期选择框</span><br><span class=\"line\">TimePicker: 时间选择框</span><br><span class=\"line\">DateRangePicker: 日期区间选择框</span><br><span class=\"line\">ColorPicker: 颜色选择框</span><br><span class=\"line\">InputNumber: 数字输入框</span><br><span class=\"line\">Mentions: 提及</span><br><span class=\"line\">Rate: 评分</span><br><span class=\"line\">Slider: 滑动输入条；滑块</span><br><span class=\"line\">TreeSelect: 树选择器</span><br><span class=\"line\">Transfer: 穿梭框</span><br><span class=\"line\">Wizard: 向导</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 数据展示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Avatar: 头像</span><br><span class=\"line\">Badge: 徽标数</span><br><span class=\"line\">Comment: 评论</span><br><span class=\"line\">Collapse: 折叠面板</span><br><span class=\"line\">Carousel: 走马灯；轮播</span><br><span class=\"line\">Card: 卡片</span><br><span class=\"line\">Panel: 面板</span><br><span class=\"line\">Calender: 日历</span><br><span class=\"line\">Descriptions: 描述列表</span><br><span class=\"line\">Empty: 空状态</span><br><span class=\"line\">List: 列表</span><br><span class=\"line\">Popover: 气泡卡片</span><br><span class=\"line\">Statistic: 统计数值</span><br><span class=\"line\">Tree: 树形控件</span><br><span class=\"line\">Tooltip: 文字提示</span><br><span class=\"line\">Timeline: 时间轴</span><br><span class=\"line\">Tag: 标签</span><br><span class=\"line\">Tabs: 标签页</span><br><span class=\"line\">InfiniteScroll: 无限滚动</span><br><span class=\"line\">Chips: 芯片</span><br><span class=\"line\">Dialog: 对话框</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 反馈</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alert: 警告提示</span><br><span class=\"line\">Drawer: 抽屉</span><br><span class=\"line\">Modal: 对话框</span><br><span class=\"line\">Message: 全局提示</span><br><span class=\"line\">MessageBox: 弹框</span><br><span class=\"line\">Notification: 通知提醒框</span><br><span class=\"line\">Progress: 进度条</span><br><span class=\"line\">Popconfirm: 气泡确认框</span><br><span class=\"line\">Result: 结果</span><br><span class=\"line\">Spin: 加载中</span><br><span class=\"line\">Skeleton: 骨架屏</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 其它</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Anchor: 锚点</span><br><span class=\"line\">BackTop: 回到顶部</span><br><span class=\"line\">Divider: 分隔线</span><br><span class=\"line\">ConfigProvider: 全局化配置</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; Button 尺寸</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">mini: 微型的；袖珍的</span><br><span class=\"line\">tiny: 微小的；很少的</span><br><span class=\"line\">micro: 极小的；基本的；微小的；微观的</span><br><span class=\"line\">small: 小</span><br><span class=\"line\">medium: 中等</span><br><span class=\"line\">large: 大</span><br><span class=\"line\">fixed: 固定宽度的</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; Button 外观</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">default: 默认的</span><br><span class=\"line\">plain: 朴素的</span><br><span class=\"line\">primary: 主要的</span><br><span class=\"line\">info: 信息的</span><br><span class=\"line\">warning: 警告的</span><br><span class=\"line\">error: 错误的</span><br><span class=\"line\">danger: 危险的</span><br><span class=\"line\">gray: 灰色的</span><br><span class=\"line\">link: 带链接的</span><br><span class=\"line\">outline: 带轮廓的</span><br><span class=\"line\">dashed: 带虚线的</span><br><span class=\"line\">round: 带圆角的</span><br><span class=\"line\">circle: 圆形的</span><br><span class=\"line\">ghost: 幽灵的</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 表单控件验证状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// --------------------------------------------------------</span><br><span class=\"line\">valid: 有效的</span><br><span class=\"line\">invalid: 无效的</span><br><span class=\"line\">pending: 验证中</span><br><span class=\"line\">required: 必填的</span><br><span class=\"line\">dirty: 脏的</span><br><span class=\"line\">pristine: 干净的</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码常用词汇\"><a href=\"#代码常用词汇\" class=\"headerlink\" title=\"代码常用词汇\"></a>代码常用词汇</h1><p>下面列出开发过种中经常使用的动词、名词、介词、形容词。这些词汇通常可以相互组合在特定上下文中适当变动可以覆盖工作中的绝大多数场景。</p>\n<p>&#x2F;&#x2F; 动词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on: 监听、正在进行中</span><br><span class=\"line\">get: 取</span><br><span class=\"line\">set: 设置</span><br><span class=\"line\">fetch: 获取</span><br><span class=\"line\">find: 查找</span><br><span class=\"line\">add: 添加</span><br><span class=\"line\">create: 创建</span><br><span class=\"line\">remove: 移除</span><br><span class=\"line\">delete: 删除</span><br><span class=\"line\">update: 更新</span><br><span class=\"line\">upgrade: 升级</span><br><span class=\"line\">downgrade: 使降级</span><br><span class=\"line\">sync: 同步</span><br><span class=\"line\">toggle: 切换</span><br><span class=\"line\">pull: 拉</span><br><span class=\"line\">push: 推</span><br><span class=\"line\">show: 显示</span><br><span class=\"line\">hide: 隐藏</span><br><span class=\"line\">resolve: 解析；分解</span><br><span class=\"line\">parse: 解析</span><br><span class=\"line\">lock: 锁定</span><br><span class=\"line\">link: 连接</span><br><span class=\"line\">merge: 合并</span><br><span class=\"line\">close: 关闭</span><br><span class=\"line\">clone: 克隆</span><br><span class=\"line\">clear: 清除</span><br><span class=\"line\">format: 格式化</span><br><span class=\"line\">convert: 转变</span><br><span class=\"line\">cancel: 取消</span><br><span class=\"line\">accept: 承认；同意</span><br><span class=\"line\">check: 检查，核对</span><br><span class=\"line\">concat: 合并数组、字符串</span><br><span class=\"line\">join: 合并</span><br><span class=\"line\">split: 分开</span><br><span class=\"line\">spread: 展开</span><br><span class=\"line\">search: 搜索</span><br><span class=\"line\">sort: 排序</span><br><span class=\"line\">assign: 分配，指定</span><br><span class=\"line\">handle: 处理</span><br><span class=\"line\">trigger: 触发</span><br><span class=\"line\">login: 登入</span><br><span class=\"line\">logout: 登出</span><br><span class=\"line\">register: 注册</span><br><span class=\"line\">sign: 签名</span><br><span class=\"line\">throw: 抛出</span><br><span class=\"line\">load: 加载</span><br><span class=\"line\">preload: 加载</span><br><span class=\"line\">copy: 复制</span><br><span class=\"line\">paste: 粘贴</span><br><span class=\"line\">connect: 连接</span><br><span class=\"line\">change: 改变</span><br><span class=\"line\">select: 选择</span><br><span class=\"line\">validate: 验证</span><br><span class=\"line\">submit: 表单提交</span><br><span class=\"line\">commit: 提交</span><br><span class=\"line\">match: 匹配</span><br><span class=\"line\">scroll: 滚动</span><br><span class=\"line\">write: 写</span><br><span class=\"line\">read: 读</span><br><span class=\"line\">enable: 启用</span><br><span class=\"line\">disable: 禁用</span><br><span class=\"line\">limit: 限制</span><br><span class=\"line\">bootstrap: 启动</span><br><span class=\"line\">init: 初始化</span><br><span class=\"line\">install: 加载</span><br><span class=\"line\">upload: 上传</span><br><span class=\"line\">inject: 注入</span><br><span class=\"line\">provide: 提供</span><br><span class=\"line\">exit: 退出</span><br><span class=\"line\">access: 访问</span><br><span class=\"line\">flush: 刷新/使暴露</span><br><span class=\"line\">refresh: 刷新</span><br><span class=\"line\">release: 发布</span><br><span class=\"line\">preview: 预览；试映</span><br><span class=\"line\">publish: 出版；发行</span><br><span class=\"line\">navigate: 导航；浏览</span><br><span class=\"line\">redirect: 重定向</span><br><span class=\"line\">back: 返回</span><br><span class=\"line\">switch: 切换</span><br><span class=\"line\">launch: 加载</span><br><span class=\"line\">browse/visit: 浏览</span><br><span class=\"line\">append: 追加</span><br><span class=\"line\">insert: 插入</span><br><span class=\"line\">swap: 交换</span><br><span class=\"line\">map: 遍历</span><br><span class=\"line\">extract: 提取；选取</span><br><span class=\"line\">provide: 提供</span><br><span class=\"line\">inject: 注入</span><br><span class=\"line\">observe: 观察</span><br><span class=\"line\">render: 渲染</span><br><span class=\"line\">debug: 调试</span><br><span class=\"line\">align: 对齐</span><br><span class=\"line\">popup: 弹出</span><br><span class=\"line\">transfer: 转让、迁移</span><br><span class=\"line\">attach: 附加</span><br><span class=\"line\">build: 构建</span><br><span class=\"line\">diagnose: 诊断，断定</span><br><span class=\"line\">ignore: 忽略</span><br><span class=\"line\">deploy: 部署；展开</span><br><span class=\"line\">send/sent: 送；寄出</span><br><span class=\"line\">defer: 推迟</span><br><span class=\"line\">delegate: 委托</span><br><span class=\"line\">destroy: 销毁</span><br><span class=\"line\">dispatch: 派发；分派</span><br><span class=\"line\">trace: 追踪</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 名词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar: 头像</span><br><span class=\"line\">brand: 品牌</span><br><span class=\"line\">record: 记录</span><br><span class=\"line\">issue: 问题</span><br><span class=\"line\">project: 项目</span><br><span class=\"line\">repo(repository): 仓库；知识库</span><br><span class=\"line\">ecosystem: 生态系统</span><br><span class=\"line\">assets: 资产</span><br><span class=\"line\">resource: 资源</span><br><span class=\"line\">toolkit: 工具包、工具箱</span><br><span class=\"line\">workbench: 工作台</span><br><span class=\"line\">item: 项目；条款</span><br><span class=\"line\">option: 选项</span><br><span class=\"line\">field: 字段</span><br><span class=\"line\">type: 类型</span><br><span class=\"line\">status: 状态</span><br><span class=\"line\">property: 属性</span><br><span class=\"line\">attribute: 特性</span><br><span class=\"line\">parameter/argument: 参数</span><br><span class=\"line\">length: 长度</span><br><span class=\"line\">size: 尺寸</span><br><span class=\"line\">shape: 形状</span><br><span class=\"line\">label: 标签</span><br><span class=\"line\">value: 值</span><br><span class=\"line\">view: 视图</span><br><span class=\"line\">page: 页面</span><br><span class=\"line\">env(envirnment): 环境</span><br><span class=\"line\">context: 上下文</span><br><span class=\"line\">count: 总数；计数</span><br><span class=\"line\">amount: 数量；数额</span><br><span class=\"line\">sum: 合计；金额</span><br><span class=\"line\">num(number): 号码</span><br><span class=\"line\">total: 总数</span><br><span class=\"line\">money: 钱；货币</span><br><span class=\"line\">filter: 过滤器</span><br><span class=\"line\">pipe: 管道</span><br><span class=\"line\">stream: 流</span><br><span class=\"line\">buffer: 缓冲器</span><br><span class=\"line\">comment: 评论</span><br><span class=\"line\">ref(reference): 引用</span><br><span class=\"line\">res(response): 响应</span><br><span class=\"line\">req(request): 请求</span><br><span class=\"line\">entity: 实体</span><br><span class=\"line\">event: 事件</span><br><span class=\"line\">setup 设置</span><br><span class=\"line\">prefix 前缀</span><br><span class=\"line\">suffix 后缀</span><br><span class=\"line\">wizard 小部件</span><br><span class=\"line\">model 模型</span><br><span class=\"line\">flag 标志</span><br><span class=\"line\">factory 工厂</span><br><span class=\"line\">service 服务</span><br><span class=\"line\">constant: 常量</span><br><span class=\"line\">var(iable): 变量</span><br><span class=\"line\">collection: 集合</span><br><span class=\"line\">array: 数组</span><br><span class=\"line\">raw: 原始值</span><br><span class=\"line\">platform 平台</span><br><span class=\"line\">capital: 大写字母</span><br><span class=\"line\">uppercase/lowercase: 大/小写</span><br><span class=\"line\">letter: 字母</span><br><span class=\"line\">entrance: 入口</span><br><span class=\"line\">path: 路径</span><br><span class=\"line\">route: 路由</span><br><span class=\"line\">router: 路由器</span><br><span class=\"line\">config: 配置</span><br><span class=\"line\">middleware: 中间件</span><br><span class=\"line\">success: 成功</span><br><span class=\"line\">error: 错误</span><br><span class=\"line\">fail(ure): 失败</span><br><span class=\"line\">frontend: 前端</span><br><span class=\"line\">backend: 后端</span><br><span class=\"line\">local: 本地</span><br><span class=\"line\">sever: 服务器</span><br><span class=\"line\">production: 线上；产品</span><br><span class=\"line\">border: 边框</span><br><span class=\"line\">outline: 轮廓</span><br><span class=\"line\">precision: 精度</span><br><span class=\"line\">separator: 分隔符</span><br><span class=\"line\">mask: 遮罩</span><br><span class=\"line\">metadata: 元数据</span><br><span class=\"line\">location: 位置</span><br><span class=\"line\">sandbox: 沙箱</span><br><span class=\"line\">scope: 作用域</span><br><span class=\"line\">queue: 队列</span><br><span class=\"line\">heap: 堆</span><br><span class=\"line\">notice: 通知</span><br><span class=\"line\">bubble: 气泡</span><br><span class=\"line\">hooks: 钩子</span><br><span class=\"line\">cell: 单元格</span><br><span class=\"line\">row: 行</span><br><span class=\"line\">column: 列</span><br><span class=\"line\">group: 组</span><br><span class=\"line\">cursor: 游标</span><br><span class=\"line\">pattern: 模式</span><br><span class=\"line\">abstract: 抽象</span><br><span class=\"line\">compose: 复合；并集</span><br><span class=\"line\">callback: 回调函数</span><br><span class=\"line\">priority: 优先级</span><br><span class=\"line\">grade/rank/hierarchy 等级、层级</span><br><span class=\"line\">table,chart, graph, diagram: 表格，图表，曲线图，图表</span><br><span class=\"line\">system: 系统、体系</span><br><span class=\"line\">guards: 保障、守卫</span><br><span class=\"line\">segment/fragment: 片段、碎片</span><br><span class=\"line\">shaking: 抖动</span><br><span class=\"line\">mix: 混淆</span><br><span class=\"line\">dependence: 依赖</span><br><span class=\"line\">injection: 注入</span><br><span class=\"line\">markup: 标记</span><br><span class=\"line\">email: 电子邮件</span><br><span class=\"line\">version: 版本</span><br><span class=\"line\">detail: 详情</span><br><span class=\"line\">stub: 存根</span><br><span class=\"line\">score: 成绩</span><br><span class=\"line\">breakpoint: 断点</span><br><span class=\"line\">record: 记录</span><br><span class=\"line\">pointer: 指针</span><br><span class=\"line\">thumbnail: 缩略图</span><br><span class=\"line\">gallery: 画廊</span><br><span class=\"line\">viewport: 视口</span><br><span class=\"line\">strategy: 策略</span><br><span class=\"line\">outlet: 出口</span><br><span class=\"line\">inlet: 入口</span><br><span class=\"line\">gist: 主旨；要点；依据</span><br><span class=\"line\">licence: 许可证</span><br><span class=\"line\">copyright: 版权</span><br><span class=\"line\">order: 命令</span><br><span class=\"line\">input: 输入</span><br><span class=\"line\">output: 输出</span><br><span class=\"line\">effect: 影响；效果；作用</span><br><span class=\"line\">position: 位置</span><br><span class=\"line\">corner: 角落</span><br><span class=\"line\">animation: 动画</span><br><span class=\"line\">dot: 点</span><br><span class=\"line\">palette: 调色板；颜料</span><br><span class=\"line\">album: 相册</span><br><span class=\"line\">photo: 照片</span><br><span class=\"line\">host: 主机</span><br><span class=\"line\">session: 会话</span><br><span class=\"line\">cookie: 饼干；小甜点</span><br><span class=\"line\">domain: 域名</span><br><span class=\"line\">certificates: 证书</span><br><span class=\"line\">coercion: 强制</span><br><span class=\"line\">payload: 载物</span><br><span class=\"line\">thread: 线程</span><br><span class=\"line\">process: 进程</span><br><span class=\"line\">timestamp: 时间缀</span><br><span class=\"line\">conflicts: 冲突</span><br><span class=\"line\">terminal: 终端</span><br><span class=\"line\">portrait: 肖像</span><br><span class=\"line\">auxiliary: 附属物</span><br><span class=\"line\">backup: 备份</span><br><span class=\"line\">bitmap: 位图</span><br><span class=\"line\">breakpoint: 断点</span><br><span class=\"line\">concurrency: 并发</span><br><span class=\"line\">lock: 锁</span><br><span class=\"line\">digest: 摘要</span><br><span class=\"line\">exception: 异常</span><br><span class=\"line\">genericity: 泛型</span><br><span class=\"line\">handle: 句柄</span><br><span class=\"line\">macro: 宏</span><br><span class=\"line\">manifest: 清单</span><br><span class=\"line\">modifier: 修饰字；修饰符</span><br><span class=\"line\">override: 覆写</span><br><span class=\"line\">overload: 重载</span><br><span class=\"line\">procedure: 过程</span><br><span class=\"line\">protocol: 协议</span><br><span class=\"line\">recursion: 递归</span><br><span class=\"line\">marquee: 跑马灯</span><br><span class=\"line\"></span><br><span class=\"line\">// 形容词</span><br><span class=\"line\">native: 原生的</span><br><span class=\"line\">hybrid: 混合的</span><br><span class=\"line\">basic: 基础的</span><br><span class=\"line\">complex: 复杂的</span><br><span class=\"line\">empty: 空的</span><br><span class=\"line\">online: 在线的</span><br><span class=\"line\">offline: 离线的</span><br><span class=\"line\">public: 公共的</span><br><span class=\"line\">private: 私有的</span><br><span class=\"line\">static: 静态的</span><br><span class=\"line\">dynamic: 动态的</span><br><span class=\"line\">shared: 共享的</span><br><span class=\"line\">safe: 安全的</span><br><span class=\"line\">relative: 相对的</span><br><span class=\"line\">absolute: 绝对的</span><br><span class=\"line\">original: 原始的</span><br><span class=\"line\">infinite: 无限的</span><br><span class=\"line\">partial: 局部的</span><br><span class=\"line\">ascending: 按升序</span><br><span class=\"line\">descending: 按降序</span><br><span class=\"line\">primary: 原始的，第一的</span><br><span class=\"line\">secondary: 第二的</span><br><span class=\"line\">tertiary: 第三的</span><br><span class=\"line\">deprecated: 弃用的</span><br><span class=\"line\">concrete: 具体的</span><br><span class=\"line\">abstract: 抽象的</span><br><span class=\"line\">explicit: 显示的；明确的</span><br><span class=\"line\">implicit: 含蓄的；暗示的</span><br><span class=\"line\">mutable: 可变的</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"业务常用词汇\"><a href=\"#业务常用词汇\" class=\"headerlink\" title=\"业务常用词汇\"></a>业务常用词汇</h1><h1 id=\"电商\"><a href=\"#电商\" class=\"headerlink\" title=\"电商\"></a>电商</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coupons: 优惠券</span><br><span class=\"line\">couponsCode: 优惠码</span><br><span class=\"line\">discount: 折扣</span><br><span class=\"line\">points: 积分</span><br><span class=\"line\">memeber: 会员</span><br><span class=\"line\">vip: 会员</span><br><span class=\"line\">membership: 会员</span><br><span class=\"line\">delivery: 运费</span><br><span class=\"line\">domain: 域名</span><br><span class=\"line\">dashboard: 仪表盘</span><br><span class=\"line\">store: 门店</span><br><span class=\"line\">shop: 店铺</span><br><span class=\"line\">product: 产品</span><br><span class=\"line\">goods: 商品</span><br><span class=\"line\">order: 订单</span><br><span class=\"line\">setting: 设置</span><br><span class=\"line\">manager: 管理</span><br><span class=\"line\">channel: 渠道</span><br><span class=\"line\">notFound: 404页面</span><br><span class=\"line\">feedback: 反馈</span><br><span class=\"line\">scratch: 刮刮卡</span><br><span class=\"line\">client: 客户端</span><br><span class=\"line\">market: 市场</span><br><span class=\"line\">promotion: 促销</span><br><span class=\"line\">popularize: 推广</span><br><span class=\"line\">tool: 工具</span><br><span class=\"line\">banner: 广告</span><br><span class=\"line\">friendlink：友情链接</span><br><span class=\"line\">partner： 合作伙伴</span><br><span class=\"line\">vote: 投票</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"技术文章阅读常用词汇\"><a href=\"#技术文章阅读常用词汇\" class=\"headerlink\" title=\"技术文章阅读常用词汇\"></a>技术文章阅读常用词汇</h1><p>&#x2F;&#x2F; 副词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">approximately: 大约；近似地；近于</span><br><span class=\"line\">indirectly: 间接地；迂回地</span><br><span class=\"line\">inevitably:不可避免地；必然地</span><br><span class=\"line\">repeatedly: 反复地；再三地</span><br><span class=\"line\">defiantly: 挑战地；对抗地</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; 形容词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">general: 一般的；普通的；大体的</span><br><span class=\"line\">partial: 局部的</span><br><span class=\"line\">well-formed：符合语法规则的</span><br><span class=\"line\">appropriate: 适当的；恰当的；合适的</span><br><span class=\"line\">reasonable: 合理的；公道的</span><br><span class=\"line\">non-trivial: 非平凡的</span><br><span class=\"line\">conditional: 有条件的；假定的</span><br><span class=\"line\">disheartened: 沮丧的；灰心的</span><br><span class=\"line\">unmotivated: 对（工作等）不感兴趣的；没有理由的</span><br><span class=\"line\">terse: 简洁的；精练的；扼要的</span><br><span class=\"line\">chaotic: 混沌的；混乱的，无秩序的</span><br><span class=\"line\">effective: 有效的</span><br><span class=\"line\">discursive: 离题的；东拉西扯的；无层次的</span><br><span class=\"line\">impressive: 感人的；令人钦佩的；给人以深刻印象的</span><br><span class=\"line\">error-prone: 于出错的</span><br><span class=\"line\">weird: 怪异的；不可思议的；超自然的</span><br><span class=\"line\">hypothetical: 假设的；假定的</span><br><span class=\"line\">tricky:  狡猾的；机警的；棘手的</span><br></pre></td></tr></table></figure>\n\n<p>事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Onmouseover 鼠标移到目标上；鼠标移进时</span><br><span class=\"line\">Onclick 鼠标单击</span><br><span class=\"line\">Onmouseout 鼠标移出时</span><br><span class=\"line\">onkeyup 键抬起时</span><br><span class=\"line\">onkeydown 键按下时</span><br><span class=\"line\">blur vt. 涂污；使…模糊不清；使暗淡；玷污n. 污迹；模糊不清的事物</span><br><span class=\"line\">onblur 失去焦点,数组常用方法</span><br><span class=\"line\">push 推动，增加；对…施加压力，逼迫；按；说服</span><br><span class=\"line\">filter “n. 滤波器；[化工] 过滤器；筛选；滤光器vt. 过滤；渗透；用过滤法除”</span><br></pre></td></tr></table></figure>\n\n<p>运算单词</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plus（表示运算）加;加的; 正的; 附加的; 比所示数量多的;</span><br><span class=\"line\">minus（表示运算）减去; 减号; 负号; 不利; 不足;</span><br><span class=\"line\">multiply 乘; （使）相乘; （使）增加; （使）繁殖;</span><br><span class=\"line\">quotient 商，商数，系数</span><br><span class=\"line\">divide(by) 分开，除</span><br><span class=\"line\"></span><br><span class=\"line\">DOM操作部分</span><br><span class=\"line\">replace vt. 取代，代替；替换，更换；归还，偿还；把…放回原处</span><br><span class=\"line\">Node n. 节点；瘤；[数] 叉点</span><br><span class=\"line\">Element n. 元素；要素；原理；成分；自然环境</span><br><span class=\"line\">parentNode 父节点</span><br><span class=\"line\">childNodes 子节点</span><br><span class=\"line\">nextSibling 下一个兄弟节点</span><br><span class=\"line\">previous adj.以前的; 先前的; 过早的; （时间上） 稍前的;</span><br><span class=\"line\">previousSibling 上一个兄弟节点</span><br><span class=\"line\">previousElementSibling 上一个兄弟元素</span><br><span class=\"line\">nextElementSibling 下一个兄弟元素</span><br><span class=\"line\">firstChild 第一个子节点</span><br><span class=\"line\">lastChild 最后一个子节点</span><br><span class=\"line\">firstElementChild 第一个子元素</span><br><span class=\"line\">lastElementChild 最后个子元素</span><br><span class=\"line\">innerText 底层模板, 内部的纯文本, 元素文本</span><br><span class=\"line\">append vt.附加; 添加; 贴上; 签（名）</span><br><span class=\"line\">appendChild 方法, 添加节点方法</span><br><span class=\"line\">removeChild 去除节点方法</span><br><span class=\"line\">createElement 创建元素</span><br><span class=\"line\">attribute n. 属性；特质</span><br><span class=\"line\">setAttribute 设置属性</span><br><span class=\"line\">getAttribute 获取属性</span><br><span class=\"line\">removeAttribute 移除属性</span><br></pre></td></tr></table></figure>\n\n<p>熟悉部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">area 地区; 区域，范围; 面积，平地; 领域;</span><br><span class=\"line\">perimeter &lt;数&gt;周长; 周围，边界;</span><br><span class=\"line\">meter “米, 公尺#计量器, 仪表; 计量官; 计量监督员”</span><br><span class=\"line\">radius 半径（距离）; 用半径度量的圆形面积; 半径范围; 桡骨;</span><br><span class=\"line\">difference 差别，差异; [数]差数，差额; 意见分歧; 特色;</span><br><span class=\"line\">product 产品; 结果; 乘积; 作品;</span><br><span class=\"line\">destination 目的，目标; 目的地，终点;</span><br><span class=\"line\">Object n. 目标；物体；客体；宾语</span><br><span class=\"line\">Model n. 模型；典型；模范；模特儿；样式</span><br><span class=\"line\">instance n. 实例；情况；建议</span><br><span class=\"line\">inner adj. 内部的；内心的；精神的</span><br><span class=\"line\">transparent adj. 透明的；显然的；坦率的；易懂的</span><br></pre></td></tr></table></figure>\n\n<p>了解部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selected 挑选出来的</span><br><span class=\"line\">checked 检查;选中的；</span><br><span class=\"line\">current 现在的；流通的，通用的；最近的；草写的</span><br></pre></td></tr></table></figure>\n\n<p>常用数组方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort vt. 将…分类；将…排序；挑选出某物</span><br><span class=\"line\">shift 改变; 去掉; 摆脱掉; 换挡;</span><br><span class=\"line\">unshift 松开打字机或键盘的字型变换键;方法将元素插入到一个数组的开始部分</span><br><span class=\"line\">reverse 颠倒；倒转</span><br><span class=\"line\">concat 合并多个数组；合并多个字符串</span><br><span class=\"line\">slice 切成片; 切下; 划分;</span><br><span class=\"line\">splice 拼接；接合；使结婚</span><br><span class=\"line\">source n.根源，本源; 源头，水源; 原因; 提供消息的人; 英 [sɔːs]  美 [sɔrs]</span><br></pre></td></tr></table></figure>\n\n<p>常用的日期函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTime 取得系统时间</span><br><span class=\"line\">getMilliseconds 取得 Date 对象中的毫秒字段</span><br><span class=\"line\">getSeconds 返回时间的秒</span><br><span class=\"line\">getMinutes 返回时间的分钟数</span><br><span class=\"line\">getHours 返回时间的小时字段</span><br><span class=\"line\">getDay 返回一周的某一天数字</span><br><span class=\"line\">getDate 返回月份的某一天</span><br><span class=\"line\">getMonth 取得 Date 对象中表示月份的数字</span><br><span class=\"line\">getFullYear 返回当前Date对象中的年份值</span><br></pre></td></tr></table></figure>\n\n<p>常用方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trim 会从一个字符串的两端删除空白字符</span><br><span class=\"line\">split 用于把一个字符串分割成字符串数组</span><br><span class=\"line\">forEach 为每一个遍历，循环</span><br><span class=\"line\">map 地图，天体图; 类似地图的事物;</span><br><span class=\"line\">indexOf 查找字符或者子串第一次出现的地方,</span><br><span class=\"line\">lastIndexOf 查找字符或者子串是后一次出现的地方</span><br><span class=\"line\">every 每个; 每; 所有可能的; 充足的;</span><br><span class=\"line\">some 一些; 某个; 大约; 相当多的;</span><br><span class=\"line\">ceil vt. 装天花板，装船内格子板;</span><br></pre></td></tr></table></figure>\n\n<p>BOM</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window n. 窗口; 窗，窗户;</span><br><span class=\"line\">setTimeout 法用于在指定的毫秒数后调</span><br></pre></td></tr></table></figure>\n\n<p>用函数或计算表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interval n. 间隔; 幕间休息; （数学） 区间;</span><br><span class=\"line\">setInterval 设置时间间隔, 按照指定时间周期调用函数或计算表达式, 循环</span><br><span class=\"line\">history n. 历史，历史学；历史记录；来历</span><br><span class=\"line\">location n. 定位; 位置，场所; 外景（拍摄地）;</span><br></pre></td></tr></table></figure>\n\n<p>掌握部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path n. 小路，路; 路线，路程; 〈比喻〉（人生的）道路; （思想，行为，生活的） 途径;</span><br><span class=\"line\">port n. 港口; （事情的） 意义; （计算机与其他设备的） 接口; （船、飞机等的） 左舷;</span><br><span class=\"line\">protocol n. 礼仪; （外交条约的） 草案; （数据传递的） 协议; 科学实验报告（或计划）;</span><br><span class=\"line\">navigator n. 领航员; 航海家，航行者，航海者; （船舶，飞机的） 驾驶员; 一个浏览器的品牌;</span><br><span class=\"line\">agent n. 代理人; 代理商; 特工; 药剂; 英</span><br><span class=\"line\">useragent 用户代理, 代理程式识别码</span><br><span class=\"line\">back vt. 使后退; 支持; 加背书于; 下赌注于;vi. 后退; 倒退;</span><br><span class=\"line\">offset vt. 抵消; 补偿; （为了比较的目的而）把…并列（或并置） ; 为（管道等）装支管;</span><br><span class=\"line\">step n. 步，脚步; 步骤，手段; 步调; 级别;</span><br><span class=\"line\">animate vt. 使有生气; 驱动; 使栩栩如生地动作; 赋予…以生命;</span><br><span class=\"line\">Extensible adj. 可展开的，可扩张的，可延长的;</span><br></pre></td></tr></table></figure>\n\n<p>js API</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client n. 顾客; 当事人; 诉讼委托人; [计算机] 客户端;</span><br><span class=\"line\">resize vt. 调整大小</span><br><span class=\"line\">offsetHeight 网页内容实际高度</span><br><span class=\"line\">math n. 数学</span><br><span class=\"line\">getComputedStyle 可以获取当前元素所有最终</span><br></pre></td></tr></table></figure>\n\n<p>使用的 CSS 属性值</p>\n<p>常用部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compute vt. 计算；估算；用计算机计算</span><br><span class=\"line\">computed v. 计算，估算</span><br><span class=\"line\">computer n. （电子） 计算机，电脑;</span><br><span class=\"line\">floor n. 地板，地面；楼层；基底；议员席</span><br><span class=\"line\">mode n. 模式；方式；风格；时尚 英</span><br><span class=\"line\">compatMode 兼容模式；</span><br><span class=\"line\">document.compatMode(判断当前浏览器采用的渲染方式)</span><br><span class=\"line\">responsive adj.应答的，响应的; 反应灵敏的; 共鸣的; 易反应的;</span><br><span class=\"line\">tablet 药片,小块 .碑，匾; 便笺簿,平板电脑</span><br><span class=\"line\">wrap n. 膝毯，披肩，围巾，围脖，头巾，罩衫，外套，大衣; 包装纸;</span><br><span class=\"line\">slide n. 滑动；幻灯片；滑梯；雪崩 英</span><br><span class=\"line\">assign vt. 分配；指派；计 赋值 英[ə</span><br><span class=\"line\">insert vt. 插入; 嵌入; （在文章中） 添加; 加</span><br><span class=\"line\">before prep. 在…之前; 先于，优于; 当着…的面; 与其…;</span><br></pre></td></tr></table></figure>\n"},{"title":"📣▶️-33届前端早早聊，总结","date":"2021-10-24T16:00:00.000Z","_content":"\n![](https://upload-images.jianshu.io/upload_images/15312191-e9413ea16aaf3772.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.设计层 > 代码层\n2.focus on thinking and design\n3.掌握好基础，编译原理，数据结构与算法\n\n##  大圣专场\n![](https://upload-images.jianshu.io/upload_images/15312191-7488fd985d555217.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 招式需要找人练，内功自己打坐\n- 一段时间只专注于一种技术\n- 了解历史，掌握未来\n- 高效研发，复杂场景， 算法， 操作系统\n### 1.每个需求都做出亮点\n##### 懒加载 。。。企业级软件质量\n### 2.高效研发\n##### 统一规范 ，eslint, git commit, 分支，发布部署，代码风格\n##### 基建 快速迭代部署，lower code\n### 3.心法\n##### 原理源码  沉底最佳实践设计 设计模式  基础世界玩法不会变\n###### 阅读源码 从早期release版本开始看，follow作者博客，了解作者思想\n不要尝试蹦到6层楼，先跳到2、3层\n算法 + 数据结构 + 编译原理 = 工程化\n\n","source":"_posts/📣▶️-33届前端早早聊，总结.md","raw":"---\ntitle: \"📣▶️-33届前端早早聊，总结\"\ndate: 2021-10-25\ntags: \n- 开发日常\n---\n\n![](https://upload-images.jianshu.io/upload_images/15312191-e9413ea16aaf3772.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.设计层 > 代码层\n2.focus on thinking and design\n3.掌握好基础，编译原理，数据结构与算法\n\n##  大圣专场\n![](https://upload-images.jianshu.io/upload_images/15312191-7488fd985d555217.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 招式需要找人练，内功自己打坐\n- 一段时间只专注于一种技术\n- 了解历史，掌握未来\n- 高效研发，复杂场景， 算法， 操作系统\n### 1.每个需求都做出亮点\n##### 懒加载 。。。企业级软件质量\n### 2.高效研发\n##### 统一规范 ，eslint, git commit, 分支，发布部署，代码风格\n##### 基建 快速迭代部署，lower code\n### 3.心法\n##### 原理源码  沉底最佳实践设计 设计模式  基础世界玩法不会变\n###### 阅读源码 从早期release版本开始看，follow作者博客，了解作者思想\n不要尝试蹦到6层楼，先跳到2、3层\n算法 + 数据结构 + 编译原理 = 工程化\n\n","slug":"📣▶️-33届前端早早聊，总结","published":1,"updated":"2024-05-16T07:39:11.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094p700622omvbz304rgg","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-e9413ea16aaf3772.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>1.设计层 &gt; 代码层<br>2.focus on thinking and design<br>3.掌握好基础，编译原理，数据结构与算法</p>\n<div class=\"\"><h2 id=\"大圣专场\"><a href=\"#大圣专场\" class=\"headerlink\" title=\"大圣专场\"></a>大圣专场</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7488fd985d555217.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ul>\n<li>招式需要找人练，内功自己打坐</li>\n<li>一段时间只专注于一种技术</li>\n<li>了解历史，掌握未来</li>\n<li>高效研发，复杂场景， 算法， 操作系统<h3 id=\"1-每个需求都做出亮点\"><a href=\"#1-每个需求都做出亮点\" class=\"headerlink\" title=\"1.每个需求都做出亮点\"></a>1.每个需求都做出亮点</h3><h5 id=\"懒加载-。。。企业级软件质量\"><a href=\"#懒加载-。。。企业级软件质量\" class=\"headerlink\" title=\"懒加载 。。。企业级软件质量\"></a>懒加载 。。。企业级软件质量</h5><h3 id=\"2-高效研发\"><a href=\"#2-高效研发\" class=\"headerlink\" title=\"2.高效研发\"></a>2.高效研发</h3><h5 id=\"统一规范-，eslint-git-commit-分支，发布部署，代码风格\"><a href=\"#统一规范-，eslint-git-commit-分支，发布部署，代码风格\" class=\"headerlink\" title=\"统一规范 ，eslint, git commit, 分支，发布部署，代码风格\"></a>统一规范 ，eslint, git commit, 分支，发布部署，代码风格</h5><h5 id=\"基建-快速迭代部署，lower-code\"><a href=\"#基建-快速迭代部署，lower-code\" class=\"headerlink\" title=\"基建 快速迭代部署，lower code\"></a>基建 快速迭代部署，lower code</h5><h3 id=\"3-心法\"><a href=\"#3-心法\" class=\"headerlink\" title=\"3.心法\"></a>3.心法</h3><h5 id=\"原理源码-沉底最佳实践设计-设计模式-基础世界玩法不会变\"><a href=\"#原理源码-沉底最佳实践设计-设计模式-基础世界玩法不会变\" class=\"headerlink\" title=\"原理源码  沉底最佳实践设计 设计模式  基础世界玩法不会变\"></a>原理源码  沉底最佳实践设计 设计模式  基础世界玩法不会变</h5><h6 id=\"阅读源码-从早期release版本开始看，follow作者博客，了解作者思想\"><a href=\"#阅读源码-从早期release版本开始看，follow作者博客，了解作者思想\" class=\"headerlink\" title=\"阅读源码 从早期release版本开始看，follow作者博客，了解作者思想\"></a>阅读源码 从早期release版本开始看，follow作者博客，了解作者思想</h6>不要尝试蹦到6层楼，先跳到2、3层<br>算法 + 数据结构 + 编译原理 &#x3D; 工程化</li>\n</ul>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-e9413ea16aaf3772.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>1.设计层 &gt; 代码层<br>2.focus on thinking and design<br>3.掌握好基础，编译原理，数据结构与算法</p>\n<h2 id=\"大圣专场\"><a href=\"#大圣专场\" class=\"headerlink\" title=\"大圣专场\"></a>大圣专场</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7488fd985d555217.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<ul>\n<li>招式需要找人练，内功自己打坐</li>\n<li>一段时间只专注于一种技术</li>\n<li>了解历史，掌握未来</li>\n<li>高效研发，复杂场景， 算法， 操作系统<h3 id=\"1-每个需求都做出亮点\"><a href=\"#1-每个需求都做出亮点\" class=\"headerlink\" title=\"1.每个需求都做出亮点\"></a>1.每个需求都做出亮点</h3><h5 id=\"懒加载-。。。企业级软件质量\"><a href=\"#懒加载-。。。企业级软件质量\" class=\"headerlink\" title=\"懒加载 。。。企业级软件质量\"></a>懒加载 。。。企业级软件质量</h5><h3 id=\"2-高效研发\"><a href=\"#2-高效研发\" class=\"headerlink\" title=\"2.高效研发\"></a>2.高效研发</h3><h5 id=\"统一规范-，eslint-git-commit-分支，发布部署，代码风格\"><a href=\"#统一规范-，eslint-git-commit-分支，发布部署，代码风格\" class=\"headerlink\" title=\"统一规范 ，eslint, git commit, 分支，发布部署，代码风格\"></a>统一规范 ，eslint, git commit, 分支，发布部署，代码风格</h5><h5 id=\"基建-快速迭代部署，lower-code\"><a href=\"#基建-快速迭代部署，lower-code\" class=\"headerlink\" title=\"基建 快速迭代部署，lower code\"></a>基建 快速迭代部署，lower code</h5><h3 id=\"3-心法\"><a href=\"#3-心法\" class=\"headerlink\" title=\"3.心法\"></a>3.心法</h3><h5 id=\"原理源码-沉底最佳实践设计-设计模式-基础世界玩法不会变\"><a href=\"#原理源码-沉底最佳实践设计-设计模式-基础世界玩法不会变\" class=\"headerlink\" title=\"原理源码  沉底最佳实践设计 设计模式  基础世界玩法不会变\"></a>原理源码  沉底最佳实践设计 设计模式  基础世界玩法不会变</h5><h6 id=\"阅读源码-从早期release版本开始看，follow作者博客，了解作者思想\"><a href=\"#阅读源码-从早期release版本开始看，follow作者博客，了解作者思想\" class=\"headerlink\" title=\"阅读源码 从早期release版本开始看，follow作者博客，了解作者思想\"></a>阅读源码 从早期release版本开始看，follow作者博客，了解作者思想</h6>不要尝试蹦到6层楼，先跳到2、3层<br>算法 + 数据结构 + 编译原理 &#x3D; 工程化</li>\n</ul>\n"},{"title":"📖计算机自学之路","date":"2020-12-29T16:00:00.000Z","_content":"#### 大学四年课程\n![计算机大学四年课程](https://upload-images.jianshu.io/upload_images/15312191-8bafa6d0164e86c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 优秀书籍\n##### 计算机原理\n - 《计算机系统概论》\n- 《计算机是怎么跑起来的》\n- 《程序是怎么跑起来 的》\n - 《深入理解计算机系统》\n\n##### 硬件原理\n- 《电路原理》\n- 《单片机原理与应用技术》\n- 《彩色电视机技术原理及维修》\n- 《QBasic程序设计》\n\n##### 编译原理\n\n - 《现代编译原理：**C**语言描述（修订版）》（虎书）\n- 《[*Crafting Interpreters*](https://link.zhihu.com/?target=https%3A//craftinginterpreters.com/contents.html)》\n- 《编译原理》（龙书）\n- 《两周自制脚本语言》\n- 《游戏脚本高级编程》\n##### 操作系统\n- 《自己动手写操作系统》\n- 《操作系统导论》\n##### 算法\n- 《算法》（第**4**版）\n##### 网络\n- 《计算机网络 **-** 自顶向下方法》\n- 《图解三部曲》\n- 《**TCP/IP** 详解卷一：协议》\n- 《Wireshark 网络分析就是这么简单》\n\n##### 数据库\n\n《漫画数据库》\n\n##### 科技读物\n\n- 《浪潮之巅》\n- 《为什么：关于因果关系的新科学》\n\n\n\n\n**最后，读书学习切记囫囵吞枣，嚼碎，消化，吸收，弄懂为主，形成正向循环。**\n>  [顶尖中文大学计算机专业课程体系](https://study.163.com/curricula/cs.htm)\n","source":"_posts/📖计算机自学之路.md","raw":"---\ntitle: \"📖计算机自学之路\"\ndate: 2020-12-30\ntags: \n- 计算机基础小窥\n---\n#### 大学四年课程\n![计算机大学四年课程](https://upload-images.jianshu.io/upload_images/15312191-8bafa6d0164e86c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 优秀书籍\n##### 计算机原理\n - 《计算机系统概论》\n- 《计算机是怎么跑起来的》\n- 《程序是怎么跑起来 的》\n - 《深入理解计算机系统》\n\n##### 硬件原理\n- 《电路原理》\n- 《单片机原理与应用技术》\n- 《彩色电视机技术原理及维修》\n- 《QBasic程序设计》\n\n##### 编译原理\n\n - 《现代编译原理：**C**语言描述（修订版）》（虎书）\n- 《[*Crafting Interpreters*](https://link.zhihu.com/?target=https%3A//craftinginterpreters.com/contents.html)》\n- 《编译原理》（龙书）\n- 《两周自制脚本语言》\n- 《游戏脚本高级编程》\n##### 操作系统\n- 《自己动手写操作系统》\n- 《操作系统导论》\n##### 算法\n- 《算法》（第**4**版）\n##### 网络\n- 《计算机网络 **-** 自顶向下方法》\n- 《图解三部曲》\n- 《**TCP/IP** 详解卷一：协议》\n- 《Wireshark 网络分析就是这么简单》\n\n##### 数据库\n\n《漫画数据库》\n\n##### 科技读物\n\n- 《浪潮之巅》\n- 《为什么：关于因果关系的新科学》\n\n\n\n\n**最后，读书学习切记囫囵吞枣，嚼碎，消化，吸收，弄懂为主，形成正向循环。**\n>  [顶尖中文大学计算机专业课程体系](https://study.163.com/curricula/cs.htm)\n","slug":"📖计算机自学之路","published":1,"updated":"2024-05-16T07:39:11.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094p800642omv0q2j9nd2","content":"<h4 id=\"大学四年课程\"><a href=\"#大学四年课程\" class=\"headerlink\" title=\"大学四年课程\"></a>大学四年课程</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8bafa6d0164e86c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"计算机大学四年课程\"></p>\n<h4 id=\"优秀书籍\"><a href=\"#优秀书籍\" class=\"headerlink\" title=\"优秀书籍\"></a>优秀书籍</h4><h5 id=\"计算机原理\"><a href=\"#计算机原理\" class=\"headerlink\" title=\"计算机原理\"></a>计算机原理</h5><p> - 《计算机系统概论》</p>\n<ul>\n<li>《计算机是怎么跑起来的》</li>\n<li>《程序是怎么跑起来 的》<br> - 《深入理解计算机系统》</li>\n</ul>\n<h5 id=\"硬件原理\"><a href=\"#硬件原理\" class=\"headerlink\" title=\"硬件原理\"></a>硬件原理</h5><ul>\n<li>《电路原理》</li>\n<li>《单片机原理与应用技术》</li>\n<li>《彩色电视机技术原理及维修》</li>\n<li>《QBasic程序设计》</li>\n</ul>\n<h5 id=\"编译原理\"><a href=\"#编译原理\" class=\"headerlink\" title=\"编译原理\"></a>编译原理</h5><p> - 《现代编译原理：<strong>C</strong>语言描述（修订版）》（虎书）</p>\n<ul>\n<li>《<a href=\"https://link.zhihu.com/?target=https://craftinginterpreters.com/contents.html\"><em>Crafting Interpreters</em></a>》</li>\n<li>《编译原理》（龙书）</li>\n<li>《两周自制脚本语言》</li>\n<li>《游戏脚本高级编程》<h5 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h5></li>\n<li>《自己动手写操作系统》</li>\n<li>《操作系统导论》<h5 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h5></li>\n<li>《算法》（第<strong>4</strong>版）<h5 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h5></li>\n<li>《计算机网络 <strong>-</strong> 自顶向下方法》</li>\n<li>《图解三部曲》</li>\n<li>《<strong>TCP&#x2F;IP</strong> 详解卷一：协议》</li>\n<li>《Wireshark 网络分析就是这么简单》</li>\n</ul>\n<h5 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h5><p>《漫画数据库》</p>\n<h5 id=\"科技读物\"><a href=\"#科技读物\" class=\"headerlink\" title=\"科技读物\"></a>科技读物</h5><ul>\n<li>《浪潮之巅》</li>\n<li>《为什么：关于因果关系的新科学》</li>\n</ul>\n<p><strong>最后，读书学习切记囫囵吞枣，嚼碎，消化，吸收，弄懂为主，形成正向循环。</strong></p>\n<blockquote>\n<p> <a href=\"https://study.163.com/curricula/cs.htm\">顶尖中文大学计算机专业课程体系</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"大学四年课程\"><a href=\"#大学四年课程\" class=\"headerlink\" title=\"大学四年课程\"></a>大学四年课程</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8bafa6d0164e86c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"计算机大学四年课程\"></p>\n<h4 id=\"优秀书籍\"><a href=\"#优秀书籍\" class=\"headerlink\" title=\"优秀书籍\"></a>优秀书籍</h4><h5 id=\"计算机原理\"><a href=\"#计算机原理\" class=\"headerlink\" title=\"计算机原理\"></a>计算机原理</h5><p> - 《计算机系统概论》</p>\n<ul>\n<li>《计算机是怎么跑起来的》</li>\n<li>《程序是怎么跑起来 的》<br> - 《深入理解计算机系统》</li>\n</ul>\n<h5 id=\"硬件原理\"><a href=\"#硬件原理\" class=\"headerlink\" title=\"硬件原理\"></a>硬件原理</h5><ul>\n<li>《电路原理》</li>\n<li>《单片机原理与应用技术》</li>\n<li>《彩色电视机技术原理及维修》</li>\n<li>《QBasic程序设计》</li>\n</ul>\n<h5 id=\"编译原理\"><a href=\"#编译原理\" class=\"headerlink\" title=\"编译原理\"></a>编译原理</h5><p> - 《现代编译原理：<strong>C</strong>语言描述（修订版）》（虎书）</p>\n<ul>\n<li>《<a href=\"https://link.zhihu.com/?target=https://craftinginterpreters.com/contents.html\"><em>Crafting Interpreters</em></a>》</li>\n<li>《编译原理》（龙书）</li>\n<li>《两周自制脚本语言》</li>\n<li>《游戏脚本高级编程》<h5 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h5></li>\n<li>《自己动手写操作系统》</li>\n<li>《操作系统导论》<h5 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h5></li>\n<li>《算法》（第<strong>4</strong>版）<h5 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h5></li>\n<li>《计算机网络 <strong>-</strong> 自顶向下方法》</li>\n<li>《图解三部曲》</li>\n<li>《<strong>TCP&#x2F;IP</strong> 详解卷一：协议》</li>\n<li>《Wireshark 网络分析就是这么简单》</li>\n</ul>\n<h5 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h5><p>《漫画数据库》</p>\n<h5 id=\"科技读物\"><a href=\"#科技读物\" class=\"headerlink\" title=\"科技读物\"></a>科技读物</h5><ul>\n<li>《浪潮之巅》</li>\n<li>《为什么：关于因果关系的新科学》</li>\n</ul>\n<p><strong>最后，读书学习切记囫囵吞枣，嚼碎，消化，吸收，弄懂为主，形成正向循环。</strong></p>\n<blockquote>\n<p> <a href=\"https://study.163.com/curricula/cs.htm\">顶尖中文大学计算机专业课程体系</a></p>\n</blockquote>\n"},{"title":"📣🐘🐘🐘🐘程序员面试指东","date":"2022-03-16T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-72731a26ee60634c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 程序员面试\n\n如果面试一个程序员，我会从以下几个方面入手\n\n---\n##### 1、系统设计：工程能力-优雅和美观的抽象能力，追求代码世界的简约\n普通程序员和顶尖程序员之间的区别在于优雅和美观的抽象能力。好的系统通常是要做到两个方面才合格，其一是好用，其二是好看。但是令人遗憾的是，普通程序员仅仅从实现的角度进行堆砌。顶尖程序员往往能够更进一步，经常会去思考用户在操作这个功能的时候，到底还会做什么事情。\n\n代码的注释是否恰到好处、函数模块和类的结构是否能让其他人直接秒懂、架构的设计是否足够清晰等等，都属于程序员追求简约的范畴。\n有一种炫技程序员或者架构师，喜欢简单事情往复杂了做。明明几个类能搞定的，弄出很多中间类，明明三层架构就解决的问题，生生弄出五层。\n\n##### 2、算法和数据结构：裸编能力\n处理程序实际实现部分的子任务，实现函数或者算法之类的能力。听起来很简单对吧？实际上很多程序员缺失这样的能力。\n不知道大家有没有见过「复制粘贴工程师」，review他们的代码甚至会发现一些网上的注释，又或者其他人的编写错误。\n普通的程序员连时间复杂度怎么计算可能都不清楚，优秀的程序员轻松用算法优化性能卡点，更别提大厂面试普遍要求手写算法。\n\n**程序员要想进大厂先从刷算法做起是个好方法，算法厉害的人进大厂非常容易。**\n\n##### 3、基础知识：掌握底层系统原理\n处理复杂任务或解决复杂BUG时，具备深厚的底层系统知识非常重要。比如数据结构、网络协议、操作系统相关知识，等等。\n程序的很多问题都是源于对计算机工作原理的误解，即使是使用高级语言开发的程序也一样。另外，一些更偏应用层的架构或框架，基础一定是更底层的系统。\n**了解了底层原理，我们才能看穿眼花缭乱的技术背后的东西，不被层出不穷的新技术所累。**\n\n#### 4、行为态度：创造力\n从长远看，创造力是程序员核心竞争力，也是决定一个程序员能走多远的重要特征。保持好奇心，保持对生活的激情和自信。\n\n比如前端开发，怎么样写出自己JSSDK，具有项目创造力呢？\n以下是我的一位前辈说的:\n\n我个人觉得，或者说我的方法一般都是早期临摹就跟写书法一样。我一般回去[bestofjs](https://bestofjs.org/)去寻找比较热度适中的库来临摹。为什么呢？\n因为一般热度适中的库的代码复杂度不是很高，但是整体代码质量也还可以，能够看懂并模仿下来。然后我一般是看懂了，关上他的。自己开始着手去做，遇到问题了再回去参考人家的。直到跑通代码、我再去看那些这个项目下的其他特别火热的库。\n大家会觉得？为啥不直接临摹最火热的。\n因为这种一般经过长时间维护代码复杂度太高了，就比如蹦台阶，不可能一下能到10层20层，先蹦到2层，4层。\n等我的代码跑起来我再从他的代码和项目结构中吸收精髓。这样下来下几个库你就会有创造的能力。\n最后就是多学习一些技巧语法，比如devto啊、大牛的推特啊。都能让你的编码技术大增。\n\n#### 核心能力\n作为搞计算机的同学，抽象能力是核心能力，加油。\n\n\n### 做好程序员的四个点\n![](https://upload-images.jianshu.io/upload_images/15312191-ad02c1fdf9fab09c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 1.认知态度\n人的一生，失败和挫折可能是主流，会伴随我们的一生。成功就是在失败的基础上一点一点积累起来的。\n\n我们一定要认真，一定要自信，一定要踏实。\n\n踏实程度，左耳朵耗子曾说：\n对于当前这个社会：大多数人的信息渠道都被微信朋友圈、微博、知乎、今日头条、抖音占据着。这些信息渠道中有营养的信息少之又少。\n大多数公司都是实行类似于 996 这样的加班文化，在透支和消耗着下一代年轻人，让他们成长不起来。\n因为国内互联网访问不通畅，加上英文水平受限，所以，大多数人根本没法获取到国外的第一手信息。\n快餐文化盛行，绝大多数人都急于速成，心态比较浮燥，对事物不求甚解。\n所以，你看，在这种环境下，你根本不需要努力的。你只需要**踏实一点**，像以前那样看书，看英文资料，你只需要正常学习，根本不用努力，就可以超过你身边的绝大多数人。\n\n积极性，任正非内部讲话第一篇：价值观态度比能力重要，态度决定高度。\n\n总之注意非智力因素的培养，非技巧因素培养，韧劲，毅力，坚持，需要引起重视。一步一个脚印的往前走。\n#### 2.个人素质 \n个人素质很重要，就是智商了，有些东西确实需要智商，比如这个人是否够聪明，学习能力快。这个天生的没办法，多吃核桃，多锻炼，身体是革命的本钱嘛。\n#### 3.理论积累和高度\n这是区分理论研究和应用研究的一个重要分水岭。\n理论达到当前领域的纬度，可以孵化出不同的应用方向。比如拥有深厚理论功底的计算机博士，可以在智能驾驶，图像人脸检测，大数据，机器人等开辟新的方向。而这些东西让一个没有理论知识只知道搞api得应用开发者，是搞不成的。\n\n**结论就是：理论高度决定了你的工作领域的高度。**\n\n基础是否牢靠，计算机原理，数据结构算法，思维逻辑清晰，也可以叫内功，少林有72绝技，但是让它成为武林泰斗的还是《易筋经》，这个东西，需要自己磨练，靠项目无法提升，多看书，多刷题，多消化。有机会搞个更高的学位，比如考研，考博。\n\n#### 4.应用经验积累\n计算机应用一直在变化，应用领域一直在变化，可能有些专业知识，过几年就没市场了，领域没了，开发经验就是废纸，比如正在下沉的安卓，IOS，但同样重要。。\n\n##### 1.应用专业知识积累\n不断完善系统化知识，知识地图。比如你是前端 css js。。 ,后端java 数据库。。。\n#####  2.工程化积累\n是否在工作中一直积累有效经验，注意是有效经验，一年经验用N年的程序员一抓一大把。\n不要以调用API作为一种项目积累，这东西几天不用，就快忘干净了。有效积累绝不是记住和调用APi；\n主要是在某种语言和设计模式方面有了基础的积累，对软件设计的场景积累，工程化解决方案的方向。\n\n\n> 参考： 《深入理解计算机系统》\n","source":"_posts/📣🐘🐘🐘🐘程序员面试指东.md","raw":"---\ntitle: \"📣🐘🐘🐘🐘程序员面试指东\"\ndate: 2022-03-17\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-72731a26ee60634c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 程序员面试\n\n如果面试一个程序员，我会从以下几个方面入手\n\n---\n##### 1、系统设计：工程能力-优雅和美观的抽象能力，追求代码世界的简约\n普通程序员和顶尖程序员之间的区别在于优雅和美观的抽象能力。好的系统通常是要做到两个方面才合格，其一是好用，其二是好看。但是令人遗憾的是，普通程序员仅仅从实现的角度进行堆砌。顶尖程序员往往能够更进一步，经常会去思考用户在操作这个功能的时候，到底还会做什么事情。\n\n代码的注释是否恰到好处、函数模块和类的结构是否能让其他人直接秒懂、架构的设计是否足够清晰等等，都属于程序员追求简约的范畴。\n有一种炫技程序员或者架构师，喜欢简单事情往复杂了做。明明几个类能搞定的，弄出很多中间类，明明三层架构就解决的问题，生生弄出五层。\n\n##### 2、算法和数据结构：裸编能力\n处理程序实际实现部分的子任务，实现函数或者算法之类的能力。听起来很简单对吧？实际上很多程序员缺失这样的能力。\n不知道大家有没有见过「复制粘贴工程师」，review他们的代码甚至会发现一些网上的注释，又或者其他人的编写错误。\n普通的程序员连时间复杂度怎么计算可能都不清楚，优秀的程序员轻松用算法优化性能卡点，更别提大厂面试普遍要求手写算法。\n\n**程序员要想进大厂先从刷算法做起是个好方法，算法厉害的人进大厂非常容易。**\n\n##### 3、基础知识：掌握底层系统原理\n处理复杂任务或解决复杂BUG时，具备深厚的底层系统知识非常重要。比如数据结构、网络协议、操作系统相关知识，等等。\n程序的很多问题都是源于对计算机工作原理的误解，即使是使用高级语言开发的程序也一样。另外，一些更偏应用层的架构或框架，基础一定是更底层的系统。\n**了解了底层原理，我们才能看穿眼花缭乱的技术背后的东西，不被层出不穷的新技术所累。**\n\n#### 4、行为态度：创造力\n从长远看，创造力是程序员核心竞争力，也是决定一个程序员能走多远的重要特征。保持好奇心，保持对生活的激情和自信。\n\n比如前端开发，怎么样写出自己JSSDK，具有项目创造力呢？\n以下是我的一位前辈说的:\n\n我个人觉得，或者说我的方法一般都是早期临摹就跟写书法一样。我一般回去[bestofjs](https://bestofjs.org/)去寻找比较热度适中的库来临摹。为什么呢？\n因为一般热度适中的库的代码复杂度不是很高，但是整体代码质量也还可以，能够看懂并模仿下来。然后我一般是看懂了，关上他的。自己开始着手去做，遇到问题了再回去参考人家的。直到跑通代码、我再去看那些这个项目下的其他特别火热的库。\n大家会觉得？为啥不直接临摹最火热的。\n因为这种一般经过长时间维护代码复杂度太高了，就比如蹦台阶，不可能一下能到10层20层，先蹦到2层，4层。\n等我的代码跑起来我再从他的代码和项目结构中吸收精髓。这样下来下几个库你就会有创造的能力。\n最后就是多学习一些技巧语法，比如devto啊、大牛的推特啊。都能让你的编码技术大增。\n\n#### 核心能力\n作为搞计算机的同学，抽象能力是核心能力，加油。\n\n\n### 做好程序员的四个点\n![](https://upload-images.jianshu.io/upload_images/15312191-ad02c1fdf9fab09c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 1.认知态度\n人的一生，失败和挫折可能是主流，会伴随我们的一生。成功就是在失败的基础上一点一点积累起来的。\n\n我们一定要认真，一定要自信，一定要踏实。\n\n踏实程度，左耳朵耗子曾说：\n对于当前这个社会：大多数人的信息渠道都被微信朋友圈、微博、知乎、今日头条、抖音占据着。这些信息渠道中有营养的信息少之又少。\n大多数公司都是实行类似于 996 这样的加班文化，在透支和消耗着下一代年轻人，让他们成长不起来。\n因为国内互联网访问不通畅，加上英文水平受限，所以，大多数人根本没法获取到国外的第一手信息。\n快餐文化盛行，绝大多数人都急于速成，心态比较浮燥，对事物不求甚解。\n所以，你看，在这种环境下，你根本不需要努力的。你只需要**踏实一点**，像以前那样看书，看英文资料，你只需要正常学习，根本不用努力，就可以超过你身边的绝大多数人。\n\n积极性，任正非内部讲话第一篇：价值观态度比能力重要，态度决定高度。\n\n总之注意非智力因素的培养，非技巧因素培养，韧劲，毅力，坚持，需要引起重视。一步一个脚印的往前走。\n#### 2.个人素质 \n个人素质很重要，就是智商了，有些东西确实需要智商，比如这个人是否够聪明，学习能力快。这个天生的没办法，多吃核桃，多锻炼，身体是革命的本钱嘛。\n#### 3.理论积累和高度\n这是区分理论研究和应用研究的一个重要分水岭。\n理论达到当前领域的纬度，可以孵化出不同的应用方向。比如拥有深厚理论功底的计算机博士，可以在智能驾驶，图像人脸检测，大数据，机器人等开辟新的方向。而这些东西让一个没有理论知识只知道搞api得应用开发者，是搞不成的。\n\n**结论就是：理论高度决定了你的工作领域的高度。**\n\n基础是否牢靠，计算机原理，数据结构算法，思维逻辑清晰，也可以叫内功，少林有72绝技，但是让它成为武林泰斗的还是《易筋经》，这个东西，需要自己磨练，靠项目无法提升，多看书，多刷题，多消化。有机会搞个更高的学位，比如考研，考博。\n\n#### 4.应用经验积累\n计算机应用一直在变化，应用领域一直在变化，可能有些专业知识，过几年就没市场了，领域没了，开发经验就是废纸，比如正在下沉的安卓，IOS，但同样重要。。\n\n##### 1.应用专业知识积累\n不断完善系统化知识，知识地图。比如你是前端 css js。。 ,后端java 数据库。。。\n#####  2.工程化积累\n是否在工作中一直积累有效经验，注意是有效经验，一年经验用N年的程序员一抓一大把。\n不要以调用API作为一种项目积累，这东西几天不用，就快忘干净了。有效积累绝不是记住和调用APi；\n主要是在某种语言和设计模式方面有了基础的积累，对软件设计的场景积累，工程化解决方案的方向。\n\n\n> 参考： 《深入理解计算机系统》\n","slug":"📣🐘🐘🐘🐘程序员面试指东","published":1,"updated":"2024-05-16T07:39:11.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094p900662omvgib96k4y","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-72731a26ee60634c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"程序员面试\"><a href=\"#程序员面试\" class=\"headerlink\" title=\"程序员面试\"></a>程序员面试</h3><p>如果面试一个程序员，我会从以下几个方面入手</p>\n<hr>\n<h5 id=\"1、系统设计：工程能力-优雅和美观的抽象能力，追求代码世界的简约\"><a href=\"#1、系统设计：工程能力-优雅和美观的抽象能力，追求代码世界的简约\" class=\"headerlink\" title=\"1、系统设计：工程能力-优雅和美观的抽象能力，追求代码世界的简约\"></a>1、系统设计：工程能力-优雅和美观的抽象能力，追求代码世界的简约</h5><p>普通程序员和顶尖程序员之间的区别在于优雅和美观的抽象能力。好的系统通常是要做到两个方面才合格，其一是好用，其二是好看。但是令人遗憾的是，普通程序员仅仅从实现的角度进行堆砌。顶尖程序员往往能够更进一步，经常会去思考用户在操作这个功能的时候，到底还会做什么事情。</p>\n<p>代码的注释是否恰到好处、函数模块和类的结构是否能让其他人直接秒懂、架构的设计是否足够清晰等等，都属于程序员追求简约的范畴。<br>有一种炫技程序员或者架构师，喜欢简单事情往复杂了做。明明几个类能搞定的，弄出很多中间类，明明三层架构就解决的问题，生生弄出五层。</p>\n<h5 id=\"2、算法和数据结构：裸编能力\"><a href=\"#2、算法和数据结构：裸编能力\" class=\"headerlink\" title=\"2、算法和数据结构：裸编能力\"></a>2、算法和数据结构：裸编能力</h5><p>处理程序实际实现部分的子任务，实现函数或者算法之类的能力。听起来很简单对吧？实际上很多程序员缺失这样的能力。<br>不知道大家有没有见过「复制粘贴工程师」，review他们的代码甚至会发现一些网上的注释，又或者其他人的编写错误。<br>普通的程序员连时间复杂度怎么计算可能都不清楚，优秀的程序员轻松用算法优化性能卡点，更别提大厂面试普遍要求手写算法。</p>\n<p><strong>程序员要想进大厂先从刷算法做起是个好方法，算法厉害的人进大厂非常容易。</strong></p>\n<h5 id=\"3、基础知识：掌握底层系统原理\"><a href=\"#3、基础知识：掌握底层系统原理\" class=\"headerlink\" title=\"3、基础知识：掌握底层系统原理\"></a>3、基础知识：掌握底层系统原理</h5><p>处理复杂任务或解决复杂BUG时，具备深厚的底层系统知识非常重要。比如数据结构、网络协议、操作系统相关知识，等等。<br>程序的很多问题都是源于对计算机工作原理的误解，即使是使用高级语言开发的程序也一样。另外，一些更偏应用层的架构或框架，基础一定是更底层的系统。<br><strong>了解了底层原理，我们才能看穿眼花缭乱的技术背后的东西，不被层出不穷的新技术所累。</strong></p>\n<h4 id=\"4、行为态度：创造力\"><a href=\"#4、行为态度：创造力\" class=\"headerlink\" title=\"4、行为态度：创造力\"></a>4、行为态度：创造力</h4><p>从长远看，创造力是程序员核心竞争力，也是决定一个程序员能走多远的重要特征。保持好奇心，保持对生活的激情和自信。</p>\n<p>比如前端开发，怎么样写出自己JSSDK，具有项目创造力呢？<br>以下是我的一位前辈说的:</p>\n<p>我个人觉得，或者说我的方法一般都是早期临摹就跟写书法一样。我一般回去<a href=\"https://bestofjs.org/\">bestofjs</a>去寻找比较热度适中的库来临摹。为什么呢？<br>因为一般热度适中的库的代码复杂度不是很高，但是整体代码质量也还可以，能够看懂并模仿下来。然后我一般是看懂了，关上他的。自己开始着手去做，遇到问题了再回去参考人家的。直到跑通代码、我再去看那些这个项目下的其他特别火热的库。<br>大家会觉得？为啥不直接临摹最火热的。<br>因为这种一般经过长时间维护代码复杂度太高了，就比如蹦台阶，不可能一下能到10层20层，先蹦到2层，4层。<br>等我的代码跑起来我再从他的代码和项目结构中吸收精髓。这样下来下几个库你就会有创造的能力。<br>最后就是多学习一些技巧语法，比如devto啊、大牛的推特啊。都能让你的编码技术大增。</p>\n<h4 id=\"核心能力\"><a href=\"#核心能力\" class=\"headerlink\" title=\"核心能力\"></a>核心能力</h4><p>作为搞计算机的同学，抽象能力是核心能力，加油。</p>\n<h3 id=\"做好程序员的四个点\"><a href=\"#做好程序员的四个点\" class=\"headerlink\" title=\"做好程序员的四个点\"></a>做好程序员的四个点</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-ad02c1fdf9fab09c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"1-认知态度\"><a href=\"#1-认知态度\" class=\"headerlink\" title=\"1.认知态度\"></a>1.认知态度</h4><p>人的一生，失败和挫折可能是主流，会伴随我们的一生。成功就是在失败的基础上一点一点积累起来的。</p>\n<p>我们一定要认真，一定要自信，一定要踏实。</p>\n<p>踏实程度，左耳朵耗子曾说：<br>对于当前这个社会：大多数人的信息渠道都被微信朋友圈、微博、知乎、今日头条、抖音占据着。这些信息渠道中有营养的信息少之又少。<br>大多数公司都是实行类似于 996 这样的加班文化，在透支和消耗着下一代年轻人，让他们成长不起来。<br>因为国内互联网访问不通畅，加上英文水平受限，所以，大多数人根本没法获取到国外的第一手信息。<br>快餐文化盛行，绝大多数人都急于速成，心态比较浮燥，对事物不求甚解。<br>所以，你看，在这种环境下，你根本不需要努力的。你只需要<strong>踏实一点</strong>，像以前那样看书，看英文资料，你只需要正常学习，根本不用努力，就可以超过你身边的绝大多数人。</p>\n<p>积极性，任正非内部讲话第一篇：价值观态度比能力重要，态度决定高度。</p>\n<p>总之注意非智力因素的培养，非技巧因素培养，韧劲，毅力，坚持，需要引起重视。一步一个脚印的往前走。</p>\n<h4 id=\"2-个人素质\"><a href=\"#2-个人素质\" class=\"headerlink\" title=\"2.个人素质\"></a>2.个人素质</h4><p>个人素质很重要，就是智商了，有些东西确实需要智商，比如这个人是否够聪明，学习能力快。这个天生的没办法，多吃核桃，多锻炼，身体是革命的本钱嘛。</p>\n<h4 id=\"3-理论积累和高度\"><a href=\"#3-理论积累和高度\" class=\"headerlink\" title=\"3.理论积累和高度\"></a>3.理论积累和高度</h4><p>这是区分理论研究和应用研究的一个重要分水岭。<br>理论达到当前领域的纬度，可以孵化出不同的应用方向。比如拥有深厚理论功底的计算机博士，可以在智能驾驶，图像人脸检测，大数据，机器人等开辟新的方向。而这些东西让一个没有理论知识只知道搞api得应用开发者，是搞不成的。</p>\n<p><strong>结论就是：理论高度决定了你的工作领域的高度。</strong></p>\n<p>基础是否牢靠，计算机原理，数据结构算法，思维逻辑清晰，也可以叫内功，少林有72绝技，但是让它成为武林泰斗的还是《易筋经》，这个东西，需要自己磨练，靠项目无法提升，多看书，多刷题，多消化。有机会搞个更高的学位，比如考研，考博。</p>\n<h4 id=\"4-应用经验积累\"><a href=\"#4-应用经验积累\" class=\"headerlink\" title=\"4.应用经验积累\"></a>4.应用经验积累</h4><p>计算机应用一直在变化，应用领域一直在变化，可能有些专业知识，过几年就没市场了，领域没了，开发经验就是废纸，比如正在下沉的安卓，IOS，但同样重要。。</p>\n<h5 id=\"1-应用专业知识积累\"><a href=\"#1-应用专业知识积累\" class=\"headerlink\" title=\"1.应用专业知识积累\"></a>1.应用专业知识积累</h5><p>不断完善系统化知识，知识地图。比如你是前端 css js。。 ,后端java 数据库。。。</p>\n<h5 id=\"2-工程化积累\"><a href=\"#2-工程化积累\" class=\"headerlink\" title=\"2.工程化积累\"></a>2.工程化积累</h5><p>是否在工作中一直积累有效经验，注意是有效经验，一年经验用N年的程序员一抓一大把。<br>不要以调用API作为一种项目积累，这东西几天不用，就快忘干净了。有效积累绝不是记住和调用APi；<br>主要是在某种语言和设计模式方面有了基础的积累，对软件设计的场景积累，工程化解决方案的方向。</p>\n<blockquote>\n<p>参考： 《深入理解计算机系统》</p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-72731a26ee60634c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"程序员面试\"><a href=\"#程序员面试\" class=\"headerlink\" title=\"程序员面试\"></a>程序员面试</h3><p>如果面试一个程序员，我会从以下几个方面入手</p>\n<hr>\n<h5 id=\"1、系统设计：工程能力-优雅和美观的抽象能力，追求代码世界的简约\"><a href=\"#1、系统设计：工程能力-优雅和美观的抽象能力，追求代码世界的简约\" class=\"headerlink\" title=\"1、系统设计：工程能力-优雅和美观的抽象能力，追求代码世界的简约\"></a>1、系统设计：工程能力-优雅和美观的抽象能力，追求代码世界的简约</h5><p>普通程序员和顶尖程序员之间的区别在于优雅和美观的抽象能力。好的系统通常是要做到两个方面才合格，其一是好用，其二是好看。但是令人遗憾的是，普通程序员仅仅从实现的角度进行堆砌。顶尖程序员往往能够更进一步，经常会去思考用户在操作这个功能的时候，到底还会做什么事情。</p>\n<p>代码的注释是否恰到好处、函数模块和类的结构是否能让其他人直接秒懂、架构的设计是否足够清晰等等，都属于程序员追求简约的范畴。<br>有一种炫技程序员或者架构师，喜欢简单事情往复杂了做。明明几个类能搞定的，弄出很多中间类，明明三层架构就解决的问题，生生弄出五层。</p>\n<h5 id=\"2、算法和数据结构：裸编能力\"><a href=\"#2、算法和数据结构：裸编能力\" class=\"headerlink\" title=\"2、算法和数据结构：裸编能力\"></a>2、算法和数据结构：裸编能力</h5><p>处理程序实际实现部分的子任务，实现函数或者算法之类的能力。听起来很简单对吧？实际上很多程序员缺失这样的能力。<br>不知道大家有没有见过「复制粘贴工程师」，review他们的代码甚至会发现一些网上的注释，又或者其他人的编写错误。<br>普通的程序员连时间复杂度怎么计算可能都不清楚，优秀的程序员轻松用算法优化性能卡点，更别提大厂面试普遍要求手写算法。</p>\n<p><strong>程序员要想进大厂先从刷算法做起是个好方法，算法厉害的人进大厂非常容易。</strong></p>\n<h5 id=\"3、基础知识：掌握底层系统原理\"><a href=\"#3、基础知识：掌握底层系统原理\" class=\"headerlink\" title=\"3、基础知识：掌握底层系统原理\"></a>3、基础知识：掌握底层系统原理</h5><p>处理复杂任务或解决复杂BUG时，具备深厚的底层系统知识非常重要。比如数据结构、网络协议、操作系统相关知识，等等。<br>程序的很多问题都是源于对计算机工作原理的误解，即使是使用高级语言开发的程序也一样。另外，一些更偏应用层的架构或框架，基础一定是更底层的系统。<br><strong>了解了底层原理，我们才能看穿眼花缭乱的技术背后的东西，不被层出不穷的新技术所累。</strong></p>\n<h4 id=\"4、行为态度：创造力\"><a href=\"#4、行为态度：创造力\" class=\"headerlink\" title=\"4、行为态度：创造力\"></a>4、行为态度：创造力</h4><p>从长远看，创造力是程序员核心竞争力，也是决定一个程序员能走多远的重要特征。保持好奇心，保持对生活的激情和自信。</p>\n<p>比如前端开发，怎么样写出自己JSSDK，具有项目创造力呢？<br>以下是我的一位前辈说的:</p>\n<p>我个人觉得，或者说我的方法一般都是早期临摹就跟写书法一样。我一般回去<a href=\"https://bestofjs.org/\">bestofjs</a>去寻找比较热度适中的库来临摹。为什么呢？<br>因为一般热度适中的库的代码复杂度不是很高，但是整体代码质量也还可以，能够看懂并模仿下来。然后我一般是看懂了，关上他的。自己开始着手去做，遇到问题了再回去参考人家的。直到跑通代码、我再去看那些这个项目下的其他特别火热的库。<br>大家会觉得？为啥不直接临摹最火热的。<br>因为这种一般经过长时间维护代码复杂度太高了，就比如蹦台阶，不可能一下能到10层20层，先蹦到2层，4层。<br>等我的代码跑起来我再从他的代码和项目结构中吸收精髓。这样下来下几个库你就会有创造的能力。<br>最后就是多学习一些技巧语法，比如devto啊、大牛的推特啊。都能让你的编码技术大增。</p>\n<h4 id=\"核心能力\"><a href=\"#核心能力\" class=\"headerlink\" title=\"核心能力\"></a>核心能力</h4><p>作为搞计算机的同学，抽象能力是核心能力，加油。</p>\n<h3 id=\"做好程序员的四个点\"><a href=\"#做好程序员的四个点\" class=\"headerlink\" title=\"做好程序员的四个点\"></a>做好程序员的四个点</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-ad02c1fdf9fab09c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"1-认知态度\"><a href=\"#1-认知态度\" class=\"headerlink\" title=\"1.认知态度\"></a>1.认知态度</h4><p>人的一生，失败和挫折可能是主流，会伴随我们的一生。成功就是在失败的基础上一点一点积累起来的。</p>\n<p>我们一定要认真，一定要自信，一定要踏实。</p>\n<p>踏实程度，左耳朵耗子曾说：<br>对于当前这个社会：大多数人的信息渠道都被微信朋友圈、微博、知乎、今日头条、抖音占据着。这些信息渠道中有营养的信息少之又少。<br>大多数公司都是实行类似于 996 这样的加班文化，在透支和消耗着下一代年轻人，让他们成长不起来。<br>因为国内互联网访问不通畅，加上英文水平受限，所以，大多数人根本没法获取到国外的第一手信息。<br>快餐文化盛行，绝大多数人都急于速成，心态比较浮燥，对事物不求甚解。<br>所以，你看，在这种环境下，你根本不需要努力的。你只需要<strong>踏实一点</strong>，像以前那样看书，看英文资料，你只需要正常学习，根本不用努力，就可以超过你身边的绝大多数人。</p>\n<p>积极性，任正非内部讲话第一篇：价值观态度比能力重要，态度决定高度。</p>\n<p>总之注意非智力因素的培养，非技巧因素培养，韧劲，毅力，坚持，需要引起重视。一步一个脚印的往前走。</p>\n<h4 id=\"2-个人素质\"><a href=\"#2-个人素质\" class=\"headerlink\" title=\"2.个人素质\"></a>2.个人素质</h4><p>个人素质很重要，就是智商了，有些东西确实需要智商，比如这个人是否够聪明，学习能力快。这个天生的没办法，多吃核桃，多锻炼，身体是革命的本钱嘛。</p>\n<h4 id=\"3-理论积累和高度\"><a href=\"#3-理论积累和高度\" class=\"headerlink\" title=\"3.理论积累和高度\"></a>3.理论积累和高度</h4><p>这是区分理论研究和应用研究的一个重要分水岭。<br>理论达到当前领域的纬度，可以孵化出不同的应用方向。比如拥有深厚理论功底的计算机博士，可以在智能驾驶，图像人脸检测，大数据，机器人等开辟新的方向。而这些东西让一个没有理论知识只知道搞api得应用开发者，是搞不成的。</p>\n<p><strong>结论就是：理论高度决定了你的工作领域的高度。</strong></p>\n<p>基础是否牢靠，计算机原理，数据结构算法，思维逻辑清晰，也可以叫内功，少林有72绝技，但是让它成为武林泰斗的还是《易筋经》，这个东西，需要自己磨练，靠项目无法提升，多看书，多刷题，多消化。有机会搞个更高的学位，比如考研，考博。</p>\n<h4 id=\"4-应用经验积累\"><a href=\"#4-应用经验积累\" class=\"headerlink\" title=\"4.应用经验积累\"></a>4.应用经验积累</h4><p>计算机应用一直在变化，应用领域一直在变化，可能有些专业知识，过几年就没市场了，领域没了，开发经验就是废纸，比如正在下沉的安卓，IOS，但同样重要。。</p>\n<h5 id=\"1-应用专业知识积累\"><a href=\"#1-应用专业知识积累\" class=\"headerlink\" title=\"1.应用专业知识积累\"></a>1.应用专业知识积累</h5><p>不断完善系统化知识，知识地图。比如你是前端 css js。。 ,后端java 数据库。。。</p>\n<h5 id=\"2-工程化积累\"><a href=\"#2-工程化积累\" class=\"headerlink\" title=\"2.工程化积累\"></a>2.工程化积累</h5><p>是否在工作中一直积累有效经验，注意是有效经验，一年经验用N年的程序员一抓一大把。<br>不要以调用API作为一种项目积累，这东西几天不用，就快忘干净了。有效积累绝不是记住和调用APi；<br>主要是在某种语言和设计模式方面有了基础的积累，对软件设计的场景积累，工程化解决方案的方向。</p>\n<blockquote>\n<p>参考： 《深入理解计算机系统》</p>\n</blockquote>\n"},{"title":"📣📒🔖-看网文和读书的区别","date":"2021-12-24T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-1b5a62d1cbb51171.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 1.书里有成体系的知识。\n书一般都是点到线，线到面 ，面面连接，还可能到空间，到N维；\n网文可能只是个点，无法体系化，组织化，只有碎片化。\n##### 体系化vs 碎片化\n**系统的知识**跟**碎片化的知识**还有有不一样的，读一本书，可能你会忘了书具体内容，但知识的架构不容易忘记，读网文，只是往脑子里倒碎片，建立不起结构，一来不能有效提高思维和认知能力，二来不能增加知识储备。\n\n\n##### 深度和广度\n现在很多写的好的网文，的确很有深度，也能引人思考，但由于篇幅所限，它没办法呈现出一个完整的知识体系，却偏偏还给人带来一种“我都了解到了”的错觉，但其实这些，不过是某个知识体系里的冰山一角而已。\n#### 2.网文相对书籍实效性更强，书籍信息相对滞后\n比如某个框架发布了新版本，用不了几天，网上就会有很多雨后春笋般的解读文章，但是关于这个框架的书籍不会马上出现。\n\n#### 3. 信息刺激\n书一般是作者的一段时间的心得体会和实际经验而来，是二手资料，有些好的书籍可能经过作者好几年打磨。\n网文可能是三手，N手资料，网上高质量的原创文章很少，很多相同技术点的文章都是互抄，可能没经过自己的实际检验，拾人牙慧。\n有的人写网文仅仅是自己知识总结，你可能无法站在作者的角度理解他当时面临的问题。\n而书籍，更多是为了传播知识，发表观点。\n#### 4.对人的影响不同\n\n长时间的碎片化阅读，得到的也是碎片化的知识，长此以往，会造成你的注意力无法长期集中，一旦想认真地读一些东西，你会发现你的注意力很难保持超过十五分钟。这也意味着你的耐心被消磨掉了。\n碎片化知识好比竹孔中观天，所见有限；以瓢量海水，所得无几；长期沉浸其中，会使人变得轻佻浮躁。\n\n一个长期通过碎片化来构建自己知识体系和世界观的人和一个长期通过书籍获取知识的人，踏实程度，看问题的角度和深度有很大不同。举个例子，很多人本科毕业后，也在不断学习，可是和读博士读研究生的人比较还是有很大不同，这些人接受的教育是系统化，体系化的，有了知识闭环。\n\n再比如，计算机专业的程序员和非计算机专业的程序员，在一定的阶段所表现出的素质也有很大不同，很多野路子出身的程序员没有高工指导，今天学点这个，明天学点哪个，始终停留在门外，无法将知识融会贯通。\n","source":"_posts/📣📒🔖-看网文和读书的区别.md","raw":"---\ntitle: \"📣📒🔖-看网文和读书的区别\"\ndate: 2021-12-25\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-1b5a62d1cbb51171.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 1.书里有成体系的知识。\n书一般都是点到线，线到面 ，面面连接，还可能到空间，到N维；\n网文可能只是个点，无法体系化，组织化，只有碎片化。\n##### 体系化vs 碎片化\n**系统的知识**跟**碎片化的知识**还有有不一样的，读一本书，可能你会忘了书具体内容，但知识的架构不容易忘记，读网文，只是往脑子里倒碎片，建立不起结构，一来不能有效提高思维和认知能力，二来不能增加知识储备。\n\n\n##### 深度和广度\n现在很多写的好的网文，的确很有深度，也能引人思考，但由于篇幅所限，它没办法呈现出一个完整的知识体系，却偏偏还给人带来一种“我都了解到了”的错觉，但其实这些，不过是某个知识体系里的冰山一角而已。\n#### 2.网文相对书籍实效性更强，书籍信息相对滞后\n比如某个框架发布了新版本，用不了几天，网上就会有很多雨后春笋般的解读文章，但是关于这个框架的书籍不会马上出现。\n\n#### 3. 信息刺激\n书一般是作者的一段时间的心得体会和实际经验而来，是二手资料，有些好的书籍可能经过作者好几年打磨。\n网文可能是三手，N手资料，网上高质量的原创文章很少，很多相同技术点的文章都是互抄，可能没经过自己的实际检验，拾人牙慧。\n有的人写网文仅仅是自己知识总结，你可能无法站在作者的角度理解他当时面临的问题。\n而书籍，更多是为了传播知识，发表观点。\n#### 4.对人的影响不同\n\n长时间的碎片化阅读，得到的也是碎片化的知识，长此以往，会造成你的注意力无法长期集中，一旦想认真地读一些东西，你会发现你的注意力很难保持超过十五分钟。这也意味着你的耐心被消磨掉了。\n碎片化知识好比竹孔中观天，所见有限；以瓢量海水，所得无几；长期沉浸其中，会使人变得轻佻浮躁。\n\n一个长期通过碎片化来构建自己知识体系和世界观的人和一个长期通过书籍获取知识的人，踏实程度，看问题的角度和深度有很大不同。举个例子，很多人本科毕业后，也在不断学习，可是和读博士读研究生的人比较还是有很大不同，这些人接受的教育是系统化，体系化的，有了知识闭环。\n\n再比如，计算机专业的程序员和非计算机专业的程序员，在一定的阶段所表现出的素质也有很大不同，很多野路子出身的程序员没有高工指导，今天学点这个，明天学点哪个，始终停留在门外，无法将知识融会贯通。\n","slug":"📣📒🔖-看网文和读书的区别","published":1,"updated":"2024-05-16T07:39:11.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pa00682omvcw0sd9pg","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1b5a62d1cbb51171.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"1-书里有成体系的知识。\"><a href=\"#1-书里有成体系的知识。\" class=\"headerlink\" title=\"1.书里有成体系的知识。\"></a>1.书里有成体系的知识。</h4><p>书一般都是点到线，线到面 ，面面连接，还可能到空间，到N维；<br>网文可能只是个点，无法体系化，组织化，只有碎片化。</p>\n<h5 id=\"体系化vs-碎片化\"><a href=\"#体系化vs-碎片化\" class=\"headerlink\" title=\"体系化vs 碎片化\"></a>体系化vs 碎片化</h5><p><strong>系统的知识</strong>跟<strong>碎片化的知识</strong>还有有不一样的，读一本书，可能你会忘了书具体内容，但知识的架构不容易忘记，读网文，只是往脑子里倒碎片，建立不起结构，一来不能有效提高思维和认知能力，二来不能增加知识储备。</p>\n<h5 id=\"深度和广度\"><a href=\"#深度和广度\" class=\"headerlink\" title=\"深度和广度\"></a>深度和广度</h5><p>现在很多写的好的网文，的确很有深度，也能引人思考，但由于篇幅所限，它没办法呈现出一个完整的知识体系，却偏偏还给人带来一种“我都了解到了”的错觉，但其实这些，不过是某个知识体系里的冰山一角而已。</p>\n<h4 id=\"2-网文相对书籍实效性更强，书籍信息相对滞后\"><a href=\"#2-网文相对书籍实效性更强，书籍信息相对滞后\" class=\"headerlink\" title=\"2.网文相对书籍实效性更强，书籍信息相对滞后\"></a>2.网文相对书籍实效性更强，书籍信息相对滞后</h4><p>比如某个框架发布了新版本，用不了几天，网上就会有很多雨后春笋般的解读文章，但是关于这个框架的书籍不会马上出现。</p>\n<h4 id=\"3-信息刺激\"><a href=\"#3-信息刺激\" class=\"headerlink\" title=\"3. 信息刺激\"></a>3. 信息刺激</h4><p>书一般是作者的一段时间的心得体会和实际经验而来，是二手资料，有些好的书籍可能经过作者好几年打磨。<br>网文可能是三手，N手资料，网上高质量的原创文章很少，很多相同技术点的文章都是互抄，可能没经过自己的实际检验，拾人牙慧。<br>有的人写网文仅仅是自己知识总结，你可能无法站在作者的角度理解他当时面临的问题。<br>而书籍，更多是为了传播知识，发表观点。</p>\n<h4 id=\"4-对人的影响不同\"><a href=\"#4-对人的影响不同\" class=\"headerlink\" title=\"4.对人的影响不同\"></a>4.对人的影响不同</h4><p>长时间的碎片化阅读，得到的也是碎片化的知识，长此以往，会造成你的注意力无法长期集中，一旦想认真地读一些东西，你会发现你的注意力很难保持超过十五分钟。这也意味着你的耐心被消磨掉了。<br>碎片化知识好比竹孔中观天，所见有限；以瓢量海水，所得无几；长期沉浸其中，会使人变得轻佻浮躁。</p>\n<p>一个长期通过碎片化来构建自己知识体系和世界观的人和一个长期通过书籍获取知识的人，踏实程度，看问题的角度和深度有很大不同。举个例子，很多人本科毕业后，也在不断学习，可是和读博士读研究生的人比较还是有很大不同，这些人接受的教育是系统化，体系化的，有了知识闭环。</p>\n<p>再比如，计算机专业的程序员和非计算机专业的程序员，在一定的阶段所表现出的素质也有很大不同，很多野路子出身的程序员没有高工指导，今天学点这个，明天学点哪个，始终停留在门外，无法将知识融会贯通。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-1b5a62d1cbb51171.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"1-书里有成体系的知识。\"><a href=\"#1-书里有成体系的知识。\" class=\"headerlink\" title=\"1.书里有成体系的知识。\"></a>1.书里有成体系的知识。</h4><p>书一般都是点到线，线到面 ，面面连接，还可能到空间，到N维；<br>网文可能只是个点，无法体系化，组织化，只有碎片化。</p>\n<h5 id=\"体系化vs-碎片化\"><a href=\"#体系化vs-碎片化\" class=\"headerlink\" title=\"体系化vs 碎片化\"></a>体系化vs 碎片化</h5><p><strong>系统的知识</strong>跟<strong>碎片化的知识</strong>还有有不一样的，读一本书，可能你会忘了书具体内容，但知识的架构不容易忘记，读网文，只是往脑子里倒碎片，建立不起结构，一来不能有效提高思维和认知能力，二来不能增加知识储备。</p>\n<h5 id=\"深度和广度\"><a href=\"#深度和广度\" class=\"headerlink\" title=\"深度和广度\"></a>深度和广度</h5><p>现在很多写的好的网文，的确很有深度，也能引人思考，但由于篇幅所限，它没办法呈现出一个完整的知识体系，却偏偏还给人带来一种“我都了解到了”的错觉，但其实这些，不过是某个知识体系里的冰山一角而已。</p>\n<h4 id=\"2-网文相对书籍实效性更强，书籍信息相对滞后\"><a href=\"#2-网文相对书籍实效性更强，书籍信息相对滞后\" class=\"headerlink\" title=\"2.网文相对书籍实效性更强，书籍信息相对滞后\"></a>2.网文相对书籍实效性更强，书籍信息相对滞后</h4><p>比如某个框架发布了新版本，用不了几天，网上就会有很多雨后春笋般的解读文章，但是关于这个框架的书籍不会马上出现。</p>\n<h4 id=\"3-信息刺激\"><a href=\"#3-信息刺激\" class=\"headerlink\" title=\"3. 信息刺激\"></a>3. 信息刺激</h4><p>书一般是作者的一段时间的心得体会和实际经验而来，是二手资料，有些好的书籍可能经过作者好几年打磨。<br>网文可能是三手，N手资料，网上高质量的原创文章很少，很多相同技术点的文章都是互抄，可能没经过自己的实际检验，拾人牙慧。<br>有的人写网文仅仅是自己知识总结，你可能无法站在作者的角度理解他当时面临的问题。<br>而书籍，更多是为了传播知识，发表观点。</p>\n<h4 id=\"4-对人的影响不同\"><a href=\"#4-对人的影响不同\" class=\"headerlink\" title=\"4.对人的影响不同\"></a>4.对人的影响不同</h4><p>长时间的碎片化阅读，得到的也是碎片化的知识，长此以往，会造成你的注意力无法长期集中，一旦想认真地读一些东西，你会发现你的注意力很难保持超过十五分钟。这也意味着你的耐心被消磨掉了。<br>碎片化知识好比竹孔中观天，所见有限；以瓢量海水，所得无几；长期沉浸其中，会使人变得轻佻浮躁。</p>\n<p>一个长期通过碎片化来构建自己知识体系和世界观的人和一个长期通过书籍获取知识的人，踏实程度，看问题的角度和深度有很大不同。举个例子，很多人本科毕业后，也在不断学习，可是和读博士读研究生的人比较还是有很大不同，这些人接受的教育是系统化，体系化的，有了知识闭环。</p>\n<p>再比如，计算机专业的程序员和非计算机专业的程序员，在一定的阶段所表现出的素质也有很大不同，很多野路子出身的程序员没有高工指导，今天学点这个，明天学点哪个，始终停留在门外，无法将知识融会贯通。</p>\n"},{"title":"📣📝-功夫在诗外，优秀文章精选","date":"2021-12-24T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-c84b00d2a1436d63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>故不积跬步，无以至千里；不积小流，无以成江海。\n>骐骥一跃，不能十步；驽马十驾，功在不舍。\n锲而舍之，朽木不折；锲而不舍，金石可镂。\n：学习要脚踏实地，注意积累。善于坚持，半途而废者，一事无成。\n------[《劝学》](https://so.gushiwen.cn/shiwenv_c743b1310a1c.aspx)\n\n\n> 满招损，谦受益，功夫在字外。\n------ [《笔中情》](https://www.dailymotion.com/video/x1apidq)\n\n>而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。\n有志矣，不随以止也，然力不足者，亦不能至也。\n有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也.\n：想做成一件事，不容易，要具备目标，自身条件，外部环境。\n------ [《游褒禅山记》](https://so.gushiwen.cn/shiwenv_3807bdb3ebd6.aspx)\n\n>完美是优秀的天敌。\n------ [《算法图解》]()\n\n> 对于一个有灵魂的人，贫穷和落后是难以忍受的。\n-----[《教父》]()\n","source":"_posts/📣📝-功夫在诗外，优秀文章精选.md","raw":"---\ntitle: \"📣📝-功夫在诗外，优秀文章精选\"\ndate: 2021-12-25\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-c84b00d2a1436d63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>故不积跬步，无以至千里；不积小流，无以成江海。\n>骐骥一跃，不能十步；驽马十驾，功在不舍。\n锲而舍之，朽木不折；锲而不舍，金石可镂。\n：学习要脚踏实地，注意积累。善于坚持，半途而废者，一事无成。\n------[《劝学》](https://so.gushiwen.cn/shiwenv_c743b1310a1c.aspx)\n\n\n> 满招损，谦受益，功夫在字外。\n------ [《笔中情》](https://www.dailymotion.com/video/x1apidq)\n\n>而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。\n有志矣，不随以止也，然力不足者，亦不能至也。\n有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也.\n：想做成一件事，不容易，要具备目标，自身条件，外部环境。\n------ [《游褒禅山记》](https://so.gushiwen.cn/shiwenv_3807bdb3ebd6.aspx)\n\n>完美是优秀的天敌。\n------ [《算法图解》]()\n\n> 对于一个有灵魂的人，贫穷和落后是难以忍受的。\n-----[《教父》]()\n","slug":"📣📝-功夫在诗外，优秀文章精选","published":1,"updated":"2024-05-16T07:39:11.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pb006a2omv9kn8e2zg","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c84b00d2a1436d63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<blockquote>\n<p>故不积跬步，无以至千里；不积小流，无以成江海。<br>骐骥一跃，不能十步；驽马十驾，功在不舍。<br>锲而舍之，朽木不折；锲而不舍，金石可镂。<br>：学习要脚踏实地，注意积累。善于坚持，半途而废者，一事无成。<br>——<a href=\"https://so.gushiwen.cn/shiwenv_c743b1310a1c.aspx\">《劝学》</a></p>\n</blockquote>\n<blockquote>\n<p>满招损，谦受益，功夫在字外。<br>—— <a href=\"https://www.dailymotion.com/video/x1apidq\">《笔中情》</a></p>\n</blockquote>\n<blockquote>\n<p>而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。<br>有志矣，不随以止也，然力不足者，亦不能至也。<br>有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也.<br>：想做成一件事，不容易，要具备目标，自身条件，外部环境。<br>—— <a href=\"https://so.gushiwen.cn/shiwenv_3807bdb3ebd6.aspx\">《游褒禅山记》</a></p>\n</blockquote>\n<blockquote>\n<p>完美是优秀的天敌。<br>—— <a href=\"\">《算法图解》</a></p>\n</blockquote>\n<blockquote>\n<p>对于一个有灵魂的人，贫穷和落后是难以忍受的。<br>—–<a href=\"\">《教父》</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c84b00d2a1436d63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<blockquote>\n<p>故不积跬步，无以至千里；不积小流，无以成江海。<br>骐骥一跃，不能十步；驽马十驾，功在不舍。<br>锲而舍之，朽木不折；锲而不舍，金石可镂。<br>：学习要脚踏实地，注意积累。善于坚持，半途而废者，一事无成。<br>——<a href=\"https://so.gushiwen.cn/shiwenv_c743b1310a1c.aspx\">《劝学》</a></p>\n</blockquote>\n<blockquote>\n<p>满招损，谦受益，功夫在字外。<br>—— <a href=\"https://www.dailymotion.com/video/x1apidq\">《笔中情》</a></p>\n</blockquote>\n<blockquote>\n<p>而世之奇伟、瑰怪，非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也。<br>有志矣，不随以止也，然力不足者，亦不能至也。<br>有志与力，而又不随以怠，至于幽暗昏惑而无物以相之，亦不能至也.<br>：想做成一件事，不容易，要具备目标，自身条件，外部环境。<br>—— <a href=\"https://so.gushiwen.cn/shiwenv_3807bdb3ebd6.aspx\">《游褒禅山记》</a></p>\n</blockquote>\n<blockquote>\n<p>完美是优秀的天敌。<br>—— <a href=\"\">《算法图解》</a></p>\n</blockquote>\n<blockquote>\n<p>对于一个有灵魂的人，贫穷和落后是难以忍受的。<br>—–<a href=\"\">《教父》</a></p>\n</blockquote>\n"},{"title":"📣📣-工程师的世界越复杂，你的世界就越简单","date":"2022-10-01T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-5904a05a6db1d8e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最近在读《Engineering: A Beginner's Guide》\n非常好的一本书，可以说改变了我的世界观，让我用另一个视角看世界，\n但是把这本书名翻译成《人人都该懂的工程学》感觉误解了这本书的初衷了。\n\n\n### 1.工程学发源简介\n- 工程学发端于古罗马城市建设，由于人口聚集，罗马人修建了高架桥和污水处理系统。\n\n- 中世纪出现了大型拱形建筑。\n\n- 伊斯兰黄金时代带来了机械发明的巨大飞跃。核心人物是阿尔－贾扎里（Al-Jazari），他是一位发明家，也是一位工匠，他在《精巧机械装置的知识》中展示了自己毕生的作品。\n\n- 文艺复兴时期，工程学发展迅速，从达芬奇的手稿中可以看到各种天马行空的现代化装备，比如直升机，发动机，这和当时的社会科学的浓厚氛围是分不开的。\n\n- 工程学诞生于17世纪后期的法国军队，为了在军队中培养职业军人。\n\n后来相继出现了土木工程，后来出现了结构工程、机械工程、电气工程、电子通信工程相、生物工程，复杂工程需要多个学科的合作。\n\n### 2.工程师思维\n- 观察需求，提出问题\n- 工程学的核心是创新\n- 善于利用数学，软硬件等工具\n- 工程师的工作常常带有很大的不确定性和不可避免的风险\n\n### 3.工程师培养方法论\n\n工程师并不是通过阅读别人的经验教训而造就的，要成为一名工程师，就要进行工程实践，掌握实用的工程知识。\n历史上伟大的工程师，包括达芬奇，爱迪生，戴森，都是通过实践锻炼出来的。\n\n### 4.工程师与科学家、手艺人的区别\n\n工程师创造未有之物，自然科学界发现未有之事。\n工程师让不太熟练的工人**通过工具**生产产品，手艺人把普通人培养成手艺人完成复杂的工作。\n\n**PS:**书中对某些概念解释没有配合实例，例如数学建模、工程师社会身份转换，可以配合《工程学：无尽的前沿》一起看。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-c4966569bcdb7708.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/📣📣-工程师的世界越复杂，你的世界就越简单.md","raw":"---\ntitle: \"📣📣-工程师的世界越复杂，你的世界就越简单\"\ndate: 2022-10-02\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-5904a05a6db1d8e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最近在读《Engineering: A Beginner's Guide》\n非常好的一本书，可以说改变了我的世界观，让我用另一个视角看世界，\n但是把这本书名翻译成《人人都该懂的工程学》感觉误解了这本书的初衷了。\n\n\n### 1.工程学发源简介\n- 工程学发端于古罗马城市建设，由于人口聚集，罗马人修建了高架桥和污水处理系统。\n\n- 中世纪出现了大型拱形建筑。\n\n- 伊斯兰黄金时代带来了机械发明的巨大飞跃。核心人物是阿尔－贾扎里（Al-Jazari），他是一位发明家，也是一位工匠，他在《精巧机械装置的知识》中展示了自己毕生的作品。\n\n- 文艺复兴时期，工程学发展迅速，从达芬奇的手稿中可以看到各种天马行空的现代化装备，比如直升机，发动机，这和当时的社会科学的浓厚氛围是分不开的。\n\n- 工程学诞生于17世纪后期的法国军队，为了在军队中培养职业军人。\n\n后来相继出现了土木工程，后来出现了结构工程、机械工程、电气工程、电子通信工程相、生物工程，复杂工程需要多个学科的合作。\n\n### 2.工程师思维\n- 观察需求，提出问题\n- 工程学的核心是创新\n- 善于利用数学，软硬件等工具\n- 工程师的工作常常带有很大的不确定性和不可避免的风险\n\n### 3.工程师培养方法论\n\n工程师并不是通过阅读别人的经验教训而造就的，要成为一名工程师，就要进行工程实践，掌握实用的工程知识。\n历史上伟大的工程师，包括达芬奇，爱迪生，戴森，都是通过实践锻炼出来的。\n\n### 4.工程师与科学家、手艺人的区别\n\n工程师创造未有之物，自然科学界发现未有之事。\n工程师让不太熟练的工人**通过工具**生产产品，手艺人把普通人培养成手艺人完成复杂的工作。\n\n**PS:**书中对某些概念解释没有配合实例，例如数学建模、工程师社会身份转换，可以配合《工程学：无尽的前沿》一起看。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-c4966569bcdb7708.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"📣📣-工程师的世界越复杂，你的世界就越简单","published":1,"updated":"2024-05-16T07:39:11.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pc006c2omv9u66he0h","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5904a05a6db1d8e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>最近在读《Engineering: A Beginner’s Guide》<br>非常好的一本书，可以说改变了我的世界观，让我用另一个视角看世界，<br>但是把这本书名翻译成《人人都该懂的工程学》感觉误解了这本书的初衷了。</p>\n<h3 id=\"1-工程学发源简介\"><a href=\"#1-工程学发源简介\" class=\"headerlink\" title=\"1.工程学发源简介\"></a>1.工程学发源简介</h3><ul>\n<li><p>工程学发端于古罗马城市建设，由于人口聚集，罗马人修建了高架桥和污水处理系统。</p>\n</li>\n<li><p>中世纪出现了大型拱形建筑。</p>\n</li>\n<li><p>伊斯兰黄金时代带来了机械发明的巨大飞跃。核心人物是阿尔－贾扎里（Al-Jazari），他是一位发明家，也是一位工匠，他在《精巧机械装置的知识》中展示了自己毕生的作品。</p>\n</li>\n<li><p>文艺复兴时期，工程学发展迅速，从达芬奇的手稿中可以看到各种天马行空的现代化装备，比如直升机，发动机，这和当时的社会科学的浓厚氛围是分不开的。</p>\n</li>\n<li><p>工程学诞生于17世纪后期的法国军队，为了在军队中培养职业军人。</p>\n</li>\n</ul>\n<p>后来相继出现了土木工程，后来出现了结构工程、机械工程、电气工程、电子通信工程相、生物工程，复杂工程需要多个学科的合作。</p>\n<h3 id=\"2-工程师思维\"><a href=\"#2-工程师思维\" class=\"headerlink\" title=\"2.工程师思维\"></a>2.工程师思维</h3><ul>\n<li>观察需求，提出问题</li>\n<li>工程学的核心是创新</li>\n<li>善于利用数学，软硬件等工具</li>\n<li>工程师的工作常常带有很大的不确定性和不可避免的风险</li>\n</ul>\n<h3 id=\"3-工程师培养方法论\"><a href=\"#3-工程师培养方法论\" class=\"headerlink\" title=\"3.工程师培养方法论\"></a>3.工程师培养方法论</h3><p>工程师并不是通过阅读别人的经验教训而造就的，要成为一名工程师，就要进行工程实践，掌握实用的工程知识。<br>历史上伟大的工程师，包括达芬奇，爱迪生，戴森，都是通过实践锻炼出来的。</p>\n<h3 id=\"4-工程师与科学家、手艺人的区别\"><a href=\"#4-工程师与科学家、手艺人的区别\" class=\"headerlink\" title=\"4.工程师与科学家、手艺人的区别\"></a>4.工程师与科学家、手艺人的区别</h3><p>工程师创造未有之物，自然科学界发现未有之事。<br>工程师让不太熟练的工人<strong>通过工具</strong>生产产品，手艺人把普通人培养成手艺人完成复杂的工作。</p>\n<p>**PS:**书中对某些概念解释没有配合实例，例如数学建模、工程师社会身份转换，可以配合《工程学：无尽的前沿》一起看。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c4966569bcdb7708.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-5904a05a6db1d8e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>最近在读《Engineering: A Beginner’s Guide》<br>非常好的一本书，可以说改变了我的世界观，让我用另一个视角看世界，<br>但是把这本书名翻译成《人人都该懂的工程学》感觉误解了这本书的初衷了。</p>\n<h3 id=\"1-工程学发源简介\"><a href=\"#1-工程学发源简介\" class=\"headerlink\" title=\"1.工程学发源简介\"></a>1.工程学发源简介</h3><ul>\n<li><p>工程学发端于古罗马城市建设，由于人口聚集，罗马人修建了高架桥和污水处理系统。</p>\n</li>\n<li><p>中世纪出现了大型拱形建筑。</p>\n</li>\n<li><p>伊斯兰黄金时代带来了机械发明的巨大飞跃。核心人物是阿尔－贾扎里（Al-Jazari），他是一位发明家，也是一位工匠，他在《精巧机械装置的知识》中展示了自己毕生的作品。</p>\n</li>\n<li><p>文艺复兴时期，工程学发展迅速，从达芬奇的手稿中可以看到各种天马行空的现代化装备，比如直升机，发动机，这和当时的社会科学的浓厚氛围是分不开的。</p>\n</li>\n<li><p>工程学诞生于17世纪后期的法国军队，为了在军队中培养职业军人。</p>\n</li>\n</ul>\n<p>后来相继出现了土木工程，后来出现了结构工程、机械工程、电气工程、电子通信工程相、生物工程，复杂工程需要多个学科的合作。</p>\n<h3 id=\"2-工程师思维\"><a href=\"#2-工程师思维\" class=\"headerlink\" title=\"2.工程师思维\"></a>2.工程师思维</h3><ul>\n<li>观察需求，提出问题</li>\n<li>工程学的核心是创新</li>\n<li>善于利用数学，软硬件等工具</li>\n<li>工程师的工作常常带有很大的不确定性和不可避免的风险</li>\n</ul>\n<h3 id=\"3-工程师培养方法论\"><a href=\"#3-工程师培养方法论\" class=\"headerlink\" title=\"3.工程师培养方法论\"></a>3.工程师培养方法论</h3><p>工程师并不是通过阅读别人的经验教训而造就的，要成为一名工程师，就要进行工程实践，掌握实用的工程知识。<br>历史上伟大的工程师，包括达芬奇，爱迪生，戴森，都是通过实践锻炼出来的。</p>\n<h3 id=\"4-工程师与科学家、手艺人的区别\"><a href=\"#4-工程师与科学家、手艺人的区别\" class=\"headerlink\" title=\"4.工程师与科学家、手艺人的区别\"></a>4.工程师与科学家、手艺人的区别</h3><p>工程师创造未有之物，自然科学界发现未有之事。<br>工程师让不太熟练的工人<strong>通过工具</strong>生产产品，手艺人把普通人培养成手艺人完成复杂的工作。</p>\n<p>**PS:**书中对某些概念解释没有配合实例，例如数学建模、工程师社会身份转换，可以配合《工程学：无尽的前沿》一起看。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c4966569bcdb7708.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"📣📣ph-d-vs-Engineer","date":"2022-06-19T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-7eccbef47e203095.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**ph.d 翻译为哲学家，指在某个领域可以建立新的世界体系的人。 一般意义上说应该是发明家，cs ph.d 不同于一般的面向CV开发工程师，其面相的领域需要开辟，探索，发现。**\n\n## 主要研究方向\n\n计算机方向总体上分三类：\n\n**Fundamental Theory Of Computer Science**，以我的了解和数学关系比较大 ，建立新的世界架构，比如图灵机。  \n\n**Computer Engineering**：在当前计算机体系前建立的软硬件系统，操作系统，计算机语言，编译器等。\n\n  **Applications**：如何利用计算机完成实现交叉工作，比如AI，各种领域软件开发。\n\n内容广泛，不仅仅包含数学，还会涉及材料，物理学，化学等等，而且和不同领域都存在交叉。\n\n![The Map of Computer Science](https://upload-images.jianshu.io/upload_images/15312191-c02181a7e8afa848.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n### 1\\. Fundamental Theory Of Computer Science（硬核）\n\n#### 1.1 System\n\nSystems的内容十分广泛，包括OS, Architecture, Network等等，比如特定场景操作系统，并行高性能计算机，分布式系统，存储系统和编程系统，文件系统、云系统，高性能系统计算、系统的可靠性、安全性，测量与性能分析。\n\n顶会：SOSP，OSDI，这两个是OS最好的会议，每两年开一次，轮流开，比如今年是OSDI，那么明年就是SOSP。由于这两个会议方向很广，因此影响很大。\n\n#### 1.2 Computer Architecture\n\n美国斯坦福大学最近在一份报告中分析了过去 20 年间出现的几乎所有的处理器，发现处理器性能提高了约 1 万倍。该报告进一步指出，在 1 万倍的性能提升中，半导体工艺贡献了 100 多倍，计算机体系结构贡献了 80 多倍，可见计算机结构对提升计算机性能的重要性。\n\n计算机系统结构是计算机的机器语言程序员或编译程序编写者所看到的外特性。所谓外特性，就是计算机的概念性结构和功能特性，主要研究计算机系统的基本工作原理，以及在硬件、软件界面划分的权衡策略，建立完整的、系统的计算机软硬件整体概念。\n\n **说人话就是研究计算机硬件体系的。**\n\n##### 未来计算机模型\n\n现代计算机自问世以来已历经50余年的历史，但计算机所遵循的基本结构形式始终是冯·诺依曼机结构。它的基本结构特征是“**共享数据和串行执行**”的计算机模型。  按照这种结构，程序和数据放在共享存储器内，CPU取出指令和数据进行相应的计算，因此CPU与共享存储器间的信息通路成为影响系统性能的“瓶颈”，芯片性能提升速度远高于存储性能的提升速度。多年来在并行计算机结构及处理的研究已经取得了很多成果，如阵列机、流水机、向量机等，使计算速度有了很大提高，但就本质上仍无法克服冯·诺依曼机结构上的缺陷。\n\n1.目前 CPU 的处理速度和内存容量的成长速率要远大于两者之间的流量，将大量数值从内存搬入搬出的操作 占用了 CPU 大部分的执行时间，也造成了总线的瓶颈。\n\n2.程序指令的执行是串行的，由程序计数器控制，这样使得即使有关数据已经准备好，也必须遵循逐条执行指令序列，影响了系统运行的速度；\n\n3.存储器是线性编址，按顺序排列的地址访问，这是有利于存储和执行机器语言，适用于数值计算。但高级语言的存储采用的是一组有名字的变量，是按名字调用变量而非按地址访问，且高级语言中的每个操作对于任何数据类型都是通用的，不管采用何种数据结构，多维数组、二叉树还是图，最终在存储器上都必须转换成一维的线性存储模型进行存储。这些因素都导致了机器语言和高级语言之间存在很大的语义差距，这些语义差距之间的映射大部分都要由编译程序来完成，在很大程度上增加了编译程序的工作量。\n\n4.冯·诺依曼体系结构计算机是为**逻辑和数值**运算而诞生的，它以 CPU 为中心，I/O 设备与存储器间的数据传送都要经过运算器，在**数值处理**方面已经达到很高的速度和精度，但对**非数值**数据的处理效率比较低，需要在体系结构方面有革命性突破。\n\n在非冯领域，包括近年来的出现的量子计算机，光子计算机，神经计算机（Neural computer）等，其中量子芯片已经面世，中国科大潘建伟团队构建起76个光量子的量子计算原型机“九章”，处理高斯玻色取样的速度比目前最快的超级计算机快一百万亿倍。如果量子计算机可以普及，计算机系统、计算机语言、软件体系，从业人员培养体系都会被推翻重来。\n\n##### 特定场景芯片\n\n比如在人工智能芯片方面，谷歌开发了用于AI计算高性能硬件**TPU**，Intel推出了针对深度学习市场的众核CPU**Knights Mill**，英伟达推出了**GPGPU**，而且还有了**DGX-1**这样的产品；在互联网大规模核心推荐算法场景，百度推出的**“百度昆仑1”**已在百度搜索引擎、小度等业务中部署超过2万片；自动驾驶领域，特斯拉发布了用于自动驾驶深度学习和解决带宽瓶颈的**D1**芯片。  ![](https://upload-images.jianshu.io/upload_images/15312191-623d3cda0454ca0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n针对高并发、高性能和高效需求，阿里平头哥发布了为云而生**倚天710**，**CIPU**，阿里云飞天+CIPU体系的推出，针对性地解决了云资源的多个痛点。首先，该体系通过全硬件虚拟化和转发加速，将存储时延降至最低30us（PLX），IOPS高达300万，存储带宽可达200 Gbps，全面超越市面上所有云产品；同时，该体系还将数据中心内的基础带宽从100G升级至200G，VPC的PPS转发性能从2000万提升至4000万，网络时延从22us降低至16us，RDMA协议下更可低至5.5us。在计算能力方面，新体系实现了单容器虚拟化消耗减少50%，虚拟化容器启动速度快350%。主流通用计算场景下，**Nginx**性能提升了89%，**Redis**性能提升了68%、**MySQL**提升了60%。\n\n该领域的四大国际顶级会议: **ISCA(偏芯片领域), HPCA, MICRO, ASPLOS**。\n\nps: 对于体系结构领域的应届毕业生来说，市场上有大致上三种工作可以选，一种是去做金融，高频交易之类，薪水很高；另一种是去做机器学习，利用体系结构领域的知识和技能去做机器学习应用的调优，也是薪水很高；比较符合体系结构传统的工作，例如去传统的芯片设计公司做芯片。\n\n在半导体集成电路领域，按照中国当前的国情，这个产业将迎来爆发阶段。据报道，在过去的四个季度，全球20个增速最快芯片公司，19个来自中国。\n\n比如前一段时间看到一直关注的频道老石谈芯的博主**石侃**(伦敦帝国理工学院电子工程系博士、高级 FPGA 研发工程师)宣布加入国内某芯片大厂。相信随着更多尖端人才的回流，国家战略倾斜，中国的计算机技术会越来越强大。\n\n#### 1.3 嵌入式实时计算机\n\n主要研究嵌入式的，希望未来的一天计算机可以植入人的大脑，微型计算机像手机一样进去大众生活中，就像科幻片里，召之即来挥之即去。\n\n#### 1.4 Computer Networks\n\nNetworking甚至包括Telecommunication。这个范围可以说是非常的大。网络应用、网络协议、网络通信、网络理论、网络安全、加密解密、路由算法、甚至编解码都是需要学习的学科。\n\n##### 1.5 Mobile computing\n\n移动计算是随着移动通信、互联网、数据库、分布式计算等技术的发展而兴起的新技术。移动计算技术将使计算机或其它信息智能终端设备在无线环境下实现数据传输及资源共享。它的作用是将有用、准确、及时的信息提供给任何时间、任何地点的任何客户。这将极大地改变人们的生活方式和工作方式。\n\n#### 1.6 计算机理论\n\n计算机理论涵盖的领域十分广泛，包括算法和数据结构、计算复杂性、密码学、计算几何、组合学、随机与去随机化、算法博弈论和量子计算等。\n\n计算机理论科学是完全偏向理论的学科，研究的不只是算法，更加重要的是算法的有效性和可行性。\n\n理论计算机科学领域有两大顶会，一个是ACM（美国计算机学会）的STOC，另外一个是IEEE（国际电气和电子工程师协会）的FOCS。\n\n##### 1.6.1 Algorithms & complexity\n\n计算机领域的算法的创新改进，比如华为的俄罗斯小伙，对数学问题的突破，使得华为基站大幅度领先。  最近看了一篇文章，某个团队在最大流问题利用这个问题，算法获突破性进展。\n\n##### 1.6.2 Cryptography\n\n密码学是研究编制密码和破译密码的技术科学。研究密码变化的客观规律，应用于编制密码以保守通信秘密的，称为编码学；应用于破译密码以获取通信情报的，称为破译学，总称密码学。\n\n举个：md5加密相信大家都听过，用过。发明者是[Ronald Rivest](https://en.wikipedia.org/wiki/Ronald_Rivest \"Ronald Rivest\")教授(耶鲁大学数学专业，斯坦福大学计算机科学ph.d)，他有多项发明，比如md6，[RSA](https://en.wikipedia.org/wiki/RSA_(algorithm)) ，此外还著有书籍《Introduction to Algorithms》，2002年因RSA加密方案，获得年度图灵奖。\n### 2\\. Computer Engineering\n\n软件工程/系统软件/程序设计语言。  研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。它涉及程序 设计语言、数据库、软件开发工具、系统平台、标准、设计模式等方面。\n典型的软件有电子邮件、嵌入式系统、人机界面、办公套件、**操作系统**、**编译器**、**数据库**等。这个专业比较灵活，可以说是为程序员服务的程序员，是个人比较感兴趣的方向。\n\n\n\n### 3.Applications\n\n#### 3.1 AI\n\n![](https://upload-images.jianshu.io/upload_images/15312191-924211e3319856b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n##### AI解放生产力\n\n随着计算机硬件性能的巨大提升，曾经沉寂一时的AI卷土重来。Ai大幅度提高生产力，取代人类工作，如果你的工作符合以下特征，你的工作被机器人取代的概率非常大：大量的重复性劳动，每天上班无需过脑，经由训练即可掌握的技能，工作空间狭小，坐在格子间里，不闻天下事。拜人工智能所赐，未来肯定会有人类从事的工作会被消灭。\n\nAI细分为机器学习和数据挖掘，人工智能，计算机视觉(感知)，自然语言处理，网络信息收集。\n\nAi涉及到的具体场景包括，智能机器人，战争AI，智慧医疗，自动驾驶，语音识别。在物流行业中，无人货仓，智能分拣系统，客服系统也都已经充满了AI的身影。\n\n##### AI的缺陷\n\n**1.复杂性问题**  很遗憾，截至目前，人工智能(AI)基本没有带来颠覆性的产业价值。原因也很简单，AI目前不具备处理世界“**复杂性**”的能力。如何判断AI+是否可以为一个产业带来颠覆性影响与价值，关键在于AI能否处理这个产业所在供给需求的复杂性。\n\n复杂性是系统科学发展到当前阶段，人类对系统属性的本质认识。从对自然现象的解释，到对生物进化的理解，再到对社会领域人造工程系统的构建，以及对经济发展的管理，人们开始意识到再这些探索活动背后都面临着相同的敌人，那就是“复杂性”。 现在全球对复杂性没有一致的定义，但对其属性倒是有基本统一的认知：**非线性、混沌、涌现性、自组织、自适应性。**\n\n除此以外，复杂性还有3个层次：**自组织、自适应和决策博弈**。第一层次是自组织，指无机系统演化遵从自然规则，第二层次是指生物系统演化遵循目的导向的自适应性，而最高层次是人类处理事情时的决策博弈过程。因此所谓复杂性，可以理解成无机世界的自组织、有机世界的自适应以及人类的心理决策博弈。\n\n每一个产业都有其自身的自组织、自适应和决策博弈，AI+必须直面这个复杂性，才能创造增量价值。以肿瘤治疗为例，AI可以帮助人类克服肿瘤吗？那么AI首先就要直面**肿瘤的复杂性**，！AI必须理解生命是如何在内在机制的驱动下，如何自行从简单向复杂、从粗糙向细致方向发展。她必须理解生命系统如何对外界环境干扰或内部变化做出自我适应。她必须考虑肿瘤自身与人免疫系统的博弈，理解肿瘤和人免疫系统的相互博弈。\n\n以上述标准看，在多个行业，AI+仅仅解决了“点”的问题，而没有触及系统复杂性，更谈不上解决复杂性问题，自然无法创造增量价值，颠覆传统模式。在未来，谁先掌握解决复杂性的AI，谁才能真正运用AI，为产业赋能。  **2.算力问题**  传统计算机架构导致的性能问题，无法满足当前算力的需要。  虽然近些年基础算力、智能算力和超算算力都有很大程度的增长，未来5年全球的增速甚至超过50%，但与日益复杂的算法模型和快速增长的现实需求而言，仍然存在较大的缺口。同时，存算一体架构、量子计算、光子计算和类脑计算芯片尚处于实验室的研发阶段，离大规模商业化还有较长的时间，无法以技术革命的方式实现跨越式发展。虽然，诸如商汤科技、华为等头部公司采取了建立人工智能计算中心（AIDC）的方式，来满足未来智能计算需求的快速增长；我国神威、天河、曙光三台E级超算系统的研制工作也在逐步推进，很多国内的硬件公司着手计算机硬件的国产化替代。但从短期来看，算力将会是一个制约人工智能技术发展的现实困难。\n\n比如无人驾驶至今无法真正投入使用，很大大神从工业界重返学术界的现象很大，比如离开谷歌的李飞飞。AI浪潮已经来袭了3次，海水退去，不知道能否游上岸，未来AI能走多远，仍是未知数。\n\n**顶会**：AI顶会最为熟知的人工智能领域最核心的四大顶会AAAI、IJCAI、ICML和NIPS，以及作为计算机视觉和自然语言为代表的CVPR和ACL这两大学术会议，也涌现了许多“后起之秀”，比如仅创立六年却有深度学习顶会“无冕之王”之称的ICLR，还有创办于1996年的大有赶超ACL之势的自然语言处理领域顶会EMNLP，这些“新星会议”的崛起，使得AI领域的会议呈现出亮点纷呈、多面开花的局面。\n\n#### 3.2 生物医疗\n\n比如计算机在医疗中的应用，Ai诊病，通过提取病人特征，快速诊断，缩短医生诊疗时间。提前预测病人病情，指定医疗方案，AI筛选药物，制药，医疗报告生成。使用人机接口，通过脑电波控制机械驱体等。\n\n目前AI在医疗领域得到广泛的应用：例如Abundy的癌症诊疗系统，在2分钟可以检测完130张癌症片子，而一个经验丰富的医生2分钟只能看一个。\n\n广州祈福医院有一个“沃森诊室”，机器人沃森可以只用10秒就能阅读3469本医学专著和10余万份临床报告。医生只需在机器上录入患者相关信息，短短几十秒内一份70页至100页的治疗报告就会生成。虽然目前AI只能充当医生的助手，两者相结合，给患者提供最大的保障，然而人工智能机器人将会逐步取代那些普通医生。\n\n#### 3.3 robot\n\n![](https://upload-images.jianshu.io/upload_images/15312191-f4b808c16db78ee7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  机器人研究方面比较广，目前美国是该领域的领跑者，比如战斗机器人，包括无人机，比较常见的任务包括侦察，排雷等，如美国波士顿公司的BigDog和阿特拉斯，部分型号的机器人装备了机枪等攻击性武器。Big Dog还可以帮助美军承担大重量物品的长途搬运工作，能够克服各种路面的异常情况，可以说是现代版的\"木牛流马\"，可能是诸葛亮提供的思路🤣。\n\n工业机器人，比如汽车生产组装流水线，无需人工干预，各种机器人在指令下，协同完成汽车各个部位的组装。甚至无人工厂，比如小米手机工厂，其在世界智能大会中展示的宣传片显示，未来该工厂将24小时熄灯生产，无人干预，甚至一秒钟就能生产一部手机。\n\n家庭护理机器人，就像保姆一样，完成餐桌碗碟的摆放，自动挑选放入洗碗机，感觉这个可以入手一台啊。\n\n有些机器人可以代替人工的高危作业，比如焊接机器人，海底探险机器人，维修机器人，等等。\n\n机器人在未来会取代很多职业，比如快递小哥，阿里分拣机器人“小黄人\"三个小时的工作量相当于100名工人一天的工作量。\n\n#### 3.4 经济和计算\n\n投资相关，比如利用计算机预测股市，制定投资计划，数据分析等。\n\n一旦看好一家公司，优秀的金融分析师会提前分析迈入，帮助机构调整投资并赚取巨额的收益。随着大数据时代的来临，近年来，一种观点十分流行：量化分析师即将完全取代主观分析师，机器即将完全取代人。这是因为人类金融分析师无法跟AI抗衡了，人工智能可以深度学习，读取历史数据，预测未来市场的走向。曾有论文指出，未来20年，美国47%的工作岗位将由于自动化技术而处于“高度危险”之中，其中54%的工作岗位来自金融行业。这并不奇怪，毕竟银行和金融行业的基础就是信息处理。拥有超强速算速度的人工智能，可以更加高效帮助企业进行投资，比起传统的金融分析师更有效率。\n\n#### 3.5 Human-computer interaction\n\n这是一门交叉学科，涵盖艺术，设计，计算机，心理学，社会学等等学科。主要是通过过计算机输入、输出设备，以有效的方式实现人与计算机交流。\n\n人机交互这个专业作为产品和用户之间的桥梁，已成为行业发展不可或缺的重要一环。无论是手机UI，汽车操作界面设计，用户体验，游戏设计又或是VR产业都需要这个专业的人才。\n\n#### 3.6 Computer graphics\n\n![](https://upload-images.jianshu.io/upload_images/15312191-6369718bc5ccfbfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n计算机图形学(Computer Graphics，简称CG)是一种使用数学算法将二维或三维图形转化为计算机显示器的栅格形式的科学。\n\n简单地说，计算机图形学的主要研究内容就是研究如何在计算机中表示图形、以及利用计算机进行图形的计算、处理和显示的相关原理与算法。\n\n比如元宇宙概念，AR眼镜已经可以逼真的在你眼前投射大屏，声临其境的感受3d环境，这种在科幻电影中才能出现的场景已经成为现实。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-507b7603dd2b9c7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  ps: 以上只是几个大类分类，计算机的蓬勃发展，对人类社会产生巨大冲击，计算机未来一百年会发展成什么样，应该是一件很有趣的事。\n\n## Engineer VS cs phd\n\n![](https://upload-images.jianshu.io/upload_images/15312191-65d3942dd445f8c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n### 学术界VS工业界\n\nphd基本上工作流程是做研究，找方向，做实验，发paper，不需要你每天没月都有产出，因为科研是一个long term的工作，自由度很高。\n\n一般程序员日常操作是需要写各种report，周报、月报、日报。基本工作是发现问题，百度一下，复制，整合，模仿，技术解决方案基本是面向API开发❓。\n\n是不是有时候突然会感觉自己做的事很无聊（没错说的就是我!!🥲 )，复制粘贴本身就很无聊；应用层的这种工作对一些人来说无法产生有效刺激，而且更可怕的是，长期在这种模式下工作，生产力会一直停留在某个层次，无法提高，准确来说，应该是 3-6 个年后，他们的生产力集体达到了一个“平台期”，再也无法增长。\n\n无聊的另一个来源是，总觉得自己的工作很死板总是一个老套路，没有什么挑战性，没有那种intellectual challenge在里面。公司工作，有时候会碰到一些挑战，比如说原来一个星期写完的代码，要让你两天写完，但是这样的挑战并不是intellectual challenge。\n\n### 转换思维\n\n工业界里，我们应该更多突破固定思维，少一些follow up，多一些new idea，一些问题除了现有的解决方案，能不能想出别的方法呢，即使不是更好的解法，具体问题要敢于质疑权威，走出自己的路。\n\n一个任务完成后，我们的认知、工程化能力、知识圈层，有没有向外围扩展。宇宙之大，知识世界之辽阔，穷极一生也不可能全部学完。与其被动接受，不如换种学习方式，去创造，融会贯通，培养自己的创新能力。\n\n工程师是一个非常需要创造力的工作岗位🤔。如果只局限在自己的岗位设定而没有更多思考，机械式完成任务的结果就是只能自嘲为“新生代的代码农民工”。只有把创造力、架构能力和学习能力都融入开发过程，才能感觉到自己的工作发挥出了工程师的真正价值，从而体验到研发的乐趣。\n\n### Figure Out Your Life\n\n大多数人都读不了硕士博士，没有机会做学术，但是这种作业方式特别值得我们学习。技术就是创新，不是学习API和各种知识，大多数人都不是搞技术的，而是软件操作技工、技术搬运工，这是一个痛苦又不得不接受的现实。 很多人入行的时候希望搞技术，去改变一些东西，最后确成了一个一年经验用N年，面向API开发，停留在倦怠期，迷失在自我循环世界的老油条。\n\n选择学术界还是工业界，取决你的性格，如果你天生不喜欢被约束，喜欢搞自己的事情，那么科研可能更适合你。\n\n有可能我们不知道自己做什么，慢慢找到自己想做的事，figure out what you want。  只要你有兴趣想学总归是好的。我只想说人生可能都会走点弯路，都是在不断寻找正确的路。\n\n### 对于读博士的一些误解\n\n**1.“读博和科研只适合绝顶聪明或成绩非常好的人。”**\n\n这个看法是完全错误的，如同“演员只有非常有表演天赋的人才能当”一样是个伪命题。你如果认为大家心目中的学术大牛都是绝顶聪明的人，就好比说经常出现在新浪首页或者微博热搜的那几位明星的演技都非常好一样。\n\n在博士群体，做出顶级科研的并不都是同辈中超级聪明的人，也不一定是平均成绩点数(Grade Point Average, GPA)最高的人，更不一定是参加ACM编程竞赛的高手们，而恰恰是那些有耐心有毅力坚持去钻研的人。\n\n很多博士生只要选好导师，选好研究方向，肯花费时间，都能做出顶尖的研究。有很多在海外学术圈颇有建树的学者当年的学习成绩并不好。 \n\n **2.“科研穷三代，读博毁一生。”**\n\n这句话在其他领域或许是对的，但在计算机领域就是错的。在计算机领域，通过读博挣钱的大有人在！计算机学科的特性就是科研与产业结合得非常紧密。尤其是最前沿的科研，对产业有很大的推动作用，并产生经济利益。\n\n一个典型的例子就是谷歌的创始人佩奇和布林都是博士生，也出自博士家庭。虽然他们没读完博士就去创业了（布林自称现在在职读博士），但是如果他们没有读博，那将很难开创出谷歌的核心技术。\n\n目前业界大数据系统的宠儿Spark，就是由加州大学伯克利分校的教授和博士们开发的。首席开发者马泰扎·哈里亚(MateiZaharia)即使有挣大钱的机会，也没有完全放弃麻省理工学院的教职。\n\n在网络技术领域，目前业界关注的核心“软件定义网络”也是教授和博士们在大学里开发出来的。谷歌、威睿(VMware)、 Databricks (Spark)、Nicira (OpenFlow)以及无数顶尖技术公司雇佣了数以千计的计算机专业毕业的博士，因为博士通常比其他雇员更接近核心技术。\n\n如果你想实现自己的技术梦想并挣大钱，读博士是一个很好的选择。“读博就得走清贫的人生道路”是没有任何道理的。 \n **3.“科研做的东西大部分都是废纸，对实际一点帮助都没有。”**\n\n这种观点在计算机领域也是不正确的。计算机科学并不是屠龙之技。今天几十亿人都离不开的计算机网络的原型就是从加州大学洛杉矶分校发展起来的，莱昂纳多·克莱洛克(LeonardKleinrock)教授在阿帕网(ARPANET)项目中开发了互联网的雏形，并在1969年发送了互联网的第一个数据包。\n\n20世纪70年代，美国工程院院士林善成(Simon Lam)教授在他的博士论文中分析了解决链路层冲突的方法，最后被以太网采用，融入到我们的生活中。\n\n林教授在90年代开发了安全套接层(SSL)的第一个实现系统，如今安全套接层被运用到每台电脑和手机的浏览器中。不仅是计算机网络，几乎每个计算机领域的技术都被科研引领着。\n\n按照加州大学伯克利分校博士后研究员钱学海博士发表在《中国计算机学会通讯》(CCCF)上的文章1所说，计算机体系结构这些年的发展，都与该领域四大学术会议上的论文密不可分。\n\n另一方面，虽然很多论文在现实世界不一定能体现直接价值，但是在写文章的过程中，你能学到很多东西，比如提出问题、解决问题、语言表达的能力，这些都让人受益无穷。\n\n当然读博士不是一件轻松的事，需要超越常人的耐力，韧性和心理素质，需要你真心的热爱你的专业，需要踏实的学习方式，不投机，不取巧，能扛住压力，不被周围环境影响，坚守自己的节奏孤独前行，板凳一坐十年冷，暗香始自苦寒来。\n\n> [我为什么鼓励你读计算机专业博士](https://zhuanlan.zhihu.com/p/60308234)\n[读博，你真的想好了吗？](https://zhuanlan.zhihu.com/p/372884253)\n[4年计算机博士读下来的一些感触](https://blog.csdn.net/ytomc/article/details/76387456)\n[一中国研究生被美国教授开除，教授坦言：我就不该录取你！](https://www.163.com/dy/article/HAN86PBN0517HIAS.html)\n[计算机基础问题，最大流问题获突破性进展：新算法「快得离谱」](https://www.jiqizhixin.com/articles/2022-06-14-9)\n[US sanctions helped China supercharge its chipmaking industry](https://www.businesstimes.com.sg/global-enterprise/us-sanctions-helped-china-supercharge-its-chipmaking-industry)\n[The Map of Computer Science](https://www.youtube.com/watch?v=SzJ46YA_RaA)  [中国计算机学会推荐国际学术会议和期刊目录](https://ccf.atom.im/) \n[冯•诺依曼计算机将渐行渐远?](https://www.infoq.cn/article/2015/06/alan-turing-neumann)\n","source":"_posts/📣📣ph-d-vs-Engineer.md","raw":"---\ntitle: \"📣📣ph-d-vs-Engineer\"\ndate: 2022-06-20\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-7eccbef47e203095.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**ph.d 翻译为哲学家，指在某个领域可以建立新的世界体系的人。 一般意义上说应该是发明家，cs ph.d 不同于一般的面向CV开发工程师，其面相的领域需要开辟，探索，发现。**\n\n## 主要研究方向\n\n计算机方向总体上分三类：\n\n**Fundamental Theory Of Computer Science**，以我的了解和数学关系比较大 ，建立新的世界架构，比如图灵机。  \n\n**Computer Engineering**：在当前计算机体系前建立的软硬件系统，操作系统，计算机语言，编译器等。\n\n  **Applications**：如何利用计算机完成实现交叉工作，比如AI，各种领域软件开发。\n\n内容广泛，不仅仅包含数学，还会涉及材料，物理学，化学等等，而且和不同领域都存在交叉。\n\n![The Map of Computer Science](https://upload-images.jianshu.io/upload_images/15312191-c02181a7e8afa848.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n### 1\\. Fundamental Theory Of Computer Science（硬核）\n\n#### 1.1 System\n\nSystems的内容十分广泛，包括OS, Architecture, Network等等，比如特定场景操作系统，并行高性能计算机，分布式系统，存储系统和编程系统，文件系统、云系统，高性能系统计算、系统的可靠性、安全性，测量与性能分析。\n\n顶会：SOSP，OSDI，这两个是OS最好的会议，每两年开一次，轮流开，比如今年是OSDI，那么明年就是SOSP。由于这两个会议方向很广，因此影响很大。\n\n#### 1.2 Computer Architecture\n\n美国斯坦福大学最近在一份报告中分析了过去 20 年间出现的几乎所有的处理器，发现处理器性能提高了约 1 万倍。该报告进一步指出，在 1 万倍的性能提升中，半导体工艺贡献了 100 多倍，计算机体系结构贡献了 80 多倍，可见计算机结构对提升计算机性能的重要性。\n\n计算机系统结构是计算机的机器语言程序员或编译程序编写者所看到的外特性。所谓外特性，就是计算机的概念性结构和功能特性，主要研究计算机系统的基本工作原理，以及在硬件、软件界面划分的权衡策略，建立完整的、系统的计算机软硬件整体概念。\n\n **说人话就是研究计算机硬件体系的。**\n\n##### 未来计算机模型\n\n现代计算机自问世以来已历经50余年的历史，但计算机所遵循的基本结构形式始终是冯·诺依曼机结构。它的基本结构特征是“**共享数据和串行执行**”的计算机模型。  按照这种结构，程序和数据放在共享存储器内，CPU取出指令和数据进行相应的计算，因此CPU与共享存储器间的信息通路成为影响系统性能的“瓶颈”，芯片性能提升速度远高于存储性能的提升速度。多年来在并行计算机结构及处理的研究已经取得了很多成果，如阵列机、流水机、向量机等，使计算速度有了很大提高，但就本质上仍无法克服冯·诺依曼机结构上的缺陷。\n\n1.目前 CPU 的处理速度和内存容量的成长速率要远大于两者之间的流量，将大量数值从内存搬入搬出的操作 占用了 CPU 大部分的执行时间，也造成了总线的瓶颈。\n\n2.程序指令的执行是串行的，由程序计数器控制，这样使得即使有关数据已经准备好，也必须遵循逐条执行指令序列，影响了系统运行的速度；\n\n3.存储器是线性编址，按顺序排列的地址访问，这是有利于存储和执行机器语言，适用于数值计算。但高级语言的存储采用的是一组有名字的变量，是按名字调用变量而非按地址访问，且高级语言中的每个操作对于任何数据类型都是通用的，不管采用何种数据结构，多维数组、二叉树还是图，最终在存储器上都必须转换成一维的线性存储模型进行存储。这些因素都导致了机器语言和高级语言之间存在很大的语义差距，这些语义差距之间的映射大部分都要由编译程序来完成，在很大程度上增加了编译程序的工作量。\n\n4.冯·诺依曼体系结构计算机是为**逻辑和数值**运算而诞生的，它以 CPU 为中心，I/O 设备与存储器间的数据传送都要经过运算器，在**数值处理**方面已经达到很高的速度和精度，但对**非数值**数据的处理效率比较低，需要在体系结构方面有革命性突破。\n\n在非冯领域，包括近年来的出现的量子计算机，光子计算机，神经计算机（Neural computer）等，其中量子芯片已经面世，中国科大潘建伟团队构建起76个光量子的量子计算原型机“九章”，处理高斯玻色取样的速度比目前最快的超级计算机快一百万亿倍。如果量子计算机可以普及，计算机系统、计算机语言、软件体系，从业人员培养体系都会被推翻重来。\n\n##### 特定场景芯片\n\n比如在人工智能芯片方面，谷歌开发了用于AI计算高性能硬件**TPU**，Intel推出了针对深度学习市场的众核CPU**Knights Mill**，英伟达推出了**GPGPU**，而且还有了**DGX-1**这样的产品；在互联网大规模核心推荐算法场景，百度推出的**“百度昆仑1”**已在百度搜索引擎、小度等业务中部署超过2万片；自动驾驶领域，特斯拉发布了用于自动驾驶深度学习和解决带宽瓶颈的**D1**芯片。  ![](https://upload-images.jianshu.io/upload_images/15312191-623d3cda0454ca0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n针对高并发、高性能和高效需求，阿里平头哥发布了为云而生**倚天710**，**CIPU**，阿里云飞天+CIPU体系的推出，针对性地解决了云资源的多个痛点。首先，该体系通过全硬件虚拟化和转发加速，将存储时延降至最低30us（PLX），IOPS高达300万，存储带宽可达200 Gbps，全面超越市面上所有云产品；同时，该体系还将数据中心内的基础带宽从100G升级至200G，VPC的PPS转发性能从2000万提升至4000万，网络时延从22us降低至16us，RDMA协议下更可低至5.5us。在计算能力方面，新体系实现了单容器虚拟化消耗减少50%，虚拟化容器启动速度快350%。主流通用计算场景下，**Nginx**性能提升了89%，**Redis**性能提升了68%、**MySQL**提升了60%。\n\n该领域的四大国际顶级会议: **ISCA(偏芯片领域), HPCA, MICRO, ASPLOS**。\n\nps: 对于体系结构领域的应届毕业生来说，市场上有大致上三种工作可以选，一种是去做金融，高频交易之类，薪水很高；另一种是去做机器学习，利用体系结构领域的知识和技能去做机器学习应用的调优，也是薪水很高；比较符合体系结构传统的工作，例如去传统的芯片设计公司做芯片。\n\n在半导体集成电路领域，按照中国当前的国情，这个产业将迎来爆发阶段。据报道，在过去的四个季度，全球20个增速最快芯片公司，19个来自中国。\n\n比如前一段时间看到一直关注的频道老石谈芯的博主**石侃**(伦敦帝国理工学院电子工程系博士、高级 FPGA 研发工程师)宣布加入国内某芯片大厂。相信随着更多尖端人才的回流，国家战略倾斜，中国的计算机技术会越来越强大。\n\n#### 1.3 嵌入式实时计算机\n\n主要研究嵌入式的，希望未来的一天计算机可以植入人的大脑，微型计算机像手机一样进去大众生活中，就像科幻片里，召之即来挥之即去。\n\n#### 1.4 Computer Networks\n\nNetworking甚至包括Telecommunication。这个范围可以说是非常的大。网络应用、网络协议、网络通信、网络理论、网络安全、加密解密、路由算法、甚至编解码都是需要学习的学科。\n\n##### 1.5 Mobile computing\n\n移动计算是随着移动通信、互联网、数据库、分布式计算等技术的发展而兴起的新技术。移动计算技术将使计算机或其它信息智能终端设备在无线环境下实现数据传输及资源共享。它的作用是将有用、准确、及时的信息提供给任何时间、任何地点的任何客户。这将极大地改变人们的生活方式和工作方式。\n\n#### 1.6 计算机理论\n\n计算机理论涵盖的领域十分广泛，包括算法和数据结构、计算复杂性、密码学、计算几何、组合学、随机与去随机化、算法博弈论和量子计算等。\n\n计算机理论科学是完全偏向理论的学科，研究的不只是算法，更加重要的是算法的有效性和可行性。\n\n理论计算机科学领域有两大顶会，一个是ACM（美国计算机学会）的STOC，另外一个是IEEE（国际电气和电子工程师协会）的FOCS。\n\n##### 1.6.1 Algorithms & complexity\n\n计算机领域的算法的创新改进，比如华为的俄罗斯小伙，对数学问题的突破，使得华为基站大幅度领先。  最近看了一篇文章，某个团队在最大流问题利用这个问题，算法获突破性进展。\n\n##### 1.6.2 Cryptography\n\n密码学是研究编制密码和破译密码的技术科学。研究密码变化的客观规律，应用于编制密码以保守通信秘密的，称为编码学；应用于破译密码以获取通信情报的，称为破译学，总称密码学。\n\n举个：md5加密相信大家都听过，用过。发明者是[Ronald Rivest](https://en.wikipedia.org/wiki/Ronald_Rivest \"Ronald Rivest\")教授(耶鲁大学数学专业，斯坦福大学计算机科学ph.d)，他有多项发明，比如md6，[RSA](https://en.wikipedia.org/wiki/RSA_(algorithm)) ，此外还著有书籍《Introduction to Algorithms》，2002年因RSA加密方案，获得年度图灵奖。\n### 2\\. Computer Engineering\n\n软件工程/系统软件/程序设计语言。  研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。它涉及程序 设计语言、数据库、软件开发工具、系统平台、标准、设计模式等方面。\n典型的软件有电子邮件、嵌入式系统、人机界面、办公套件、**操作系统**、**编译器**、**数据库**等。这个专业比较灵活，可以说是为程序员服务的程序员，是个人比较感兴趣的方向。\n\n\n\n### 3.Applications\n\n#### 3.1 AI\n\n![](https://upload-images.jianshu.io/upload_images/15312191-924211e3319856b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n##### AI解放生产力\n\n随着计算机硬件性能的巨大提升，曾经沉寂一时的AI卷土重来。Ai大幅度提高生产力，取代人类工作，如果你的工作符合以下特征，你的工作被机器人取代的概率非常大：大量的重复性劳动，每天上班无需过脑，经由训练即可掌握的技能，工作空间狭小，坐在格子间里，不闻天下事。拜人工智能所赐，未来肯定会有人类从事的工作会被消灭。\n\nAI细分为机器学习和数据挖掘，人工智能，计算机视觉(感知)，自然语言处理，网络信息收集。\n\nAi涉及到的具体场景包括，智能机器人，战争AI，智慧医疗，自动驾驶，语音识别。在物流行业中，无人货仓，智能分拣系统，客服系统也都已经充满了AI的身影。\n\n##### AI的缺陷\n\n**1.复杂性问题**  很遗憾，截至目前，人工智能(AI)基本没有带来颠覆性的产业价值。原因也很简单，AI目前不具备处理世界“**复杂性**”的能力。如何判断AI+是否可以为一个产业带来颠覆性影响与价值，关键在于AI能否处理这个产业所在供给需求的复杂性。\n\n复杂性是系统科学发展到当前阶段，人类对系统属性的本质认识。从对自然现象的解释，到对生物进化的理解，再到对社会领域人造工程系统的构建，以及对经济发展的管理，人们开始意识到再这些探索活动背后都面临着相同的敌人，那就是“复杂性”。 现在全球对复杂性没有一致的定义，但对其属性倒是有基本统一的认知：**非线性、混沌、涌现性、自组织、自适应性。**\n\n除此以外，复杂性还有3个层次：**自组织、自适应和决策博弈**。第一层次是自组织，指无机系统演化遵从自然规则，第二层次是指生物系统演化遵循目的导向的自适应性，而最高层次是人类处理事情时的决策博弈过程。因此所谓复杂性，可以理解成无机世界的自组织、有机世界的自适应以及人类的心理决策博弈。\n\n每一个产业都有其自身的自组织、自适应和决策博弈，AI+必须直面这个复杂性，才能创造增量价值。以肿瘤治疗为例，AI可以帮助人类克服肿瘤吗？那么AI首先就要直面**肿瘤的复杂性**，！AI必须理解生命是如何在内在机制的驱动下，如何自行从简单向复杂、从粗糙向细致方向发展。她必须理解生命系统如何对外界环境干扰或内部变化做出自我适应。她必须考虑肿瘤自身与人免疫系统的博弈，理解肿瘤和人免疫系统的相互博弈。\n\n以上述标准看，在多个行业，AI+仅仅解决了“点”的问题，而没有触及系统复杂性，更谈不上解决复杂性问题，自然无法创造增量价值，颠覆传统模式。在未来，谁先掌握解决复杂性的AI，谁才能真正运用AI，为产业赋能。  **2.算力问题**  传统计算机架构导致的性能问题，无法满足当前算力的需要。  虽然近些年基础算力、智能算力和超算算力都有很大程度的增长，未来5年全球的增速甚至超过50%，但与日益复杂的算法模型和快速增长的现实需求而言，仍然存在较大的缺口。同时，存算一体架构、量子计算、光子计算和类脑计算芯片尚处于实验室的研发阶段，离大规模商业化还有较长的时间，无法以技术革命的方式实现跨越式发展。虽然，诸如商汤科技、华为等头部公司采取了建立人工智能计算中心（AIDC）的方式，来满足未来智能计算需求的快速增长；我国神威、天河、曙光三台E级超算系统的研制工作也在逐步推进，很多国内的硬件公司着手计算机硬件的国产化替代。但从短期来看，算力将会是一个制约人工智能技术发展的现实困难。\n\n比如无人驾驶至今无法真正投入使用，很大大神从工业界重返学术界的现象很大，比如离开谷歌的李飞飞。AI浪潮已经来袭了3次，海水退去，不知道能否游上岸，未来AI能走多远，仍是未知数。\n\n**顶会**：AI顶会最为熟知的人工智能领域最核心的四大顶会AAAI、IJCAI、ICML和NIPS，以及作为计算机视觉和自然语言为代表的CVPR和ACL这两大学术会议，也涌现了许多“后起之秀”，比如仅创立六年却有深度学习顶会“无冕之王”之称的ICLR，还有创办于1996年的大有赶超ACL之势的自然语言处理领域顶会EMNLP，这些“新星会议”的崛起，使得AI领域的会议呈现出亮点纷呈、多面开花的局面。\n\n#### 3.2 生物医疗\n\n比如计算机在医疗中的应用，Ai诊病，通过提取病人特征，快速诊断，缩短医生诊疗时间。提前预测病人病情，指定医疗方案，AI筛选药物，制药，医疗报告生成。使用人机接口，通过脑电波控制机械驱体等。\n\n目前AI在医疗领域得到广泛的应用：例如Abundy的癌症诊疗系统，在2分钟可以检测完130张癌症片子，而一个经验丰富的医生2分钟只能看一个。\n\n广州祈福医院有一个“沃森诊室”，机器人沃森可以只用10秒就能阅读3469本医学专著和10余万份临床报告。医生只需在机器上录入患者相关信息，短短几十秒内一份70页至100页的治疗报告就会生成。虽然目前AI只能充当医生的助手，两者相结合，给患者提供最大的保障，然而人工智能机器人将会逐步取代那些普通医生。\n\n#### 3.3 robot\n\n![](https://upload-images.jianshu.io/upload_images/15312191-f4b808c16db78ee7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  机器人研究方面比较广，目前美国是该领域的领跑者，比如战斗机器人，包括无人机，比较常见的任务包括侦察，排雷等，如美国波士顿公司的BigDog和阿特拉斯，部分型号的机器人装备了机枪等攻击性武器。Big Dog还可以帮助美军承担大重量物品的长途搬运工作，能够克服各种路面的异常情况，可以说是现代版的\"木牛流马\"，可能是诸葛亮提供的思路🤣。\n\n工业机器人，比如汽车生产组装流水线，无需人工干预，各种机器人在指令下，协同完成汽车各个部位的组装。甚至无人工厂，比如小米手机工厂，其在世界智能大会中展示的宣传片显示，未来该工厂将24小时熄灯生产，无人干预，甚至一秒钟就能生产一部手机。\n\n家庭护理机器人，就像保姆一样，完成餐桌碗碟的摆放，自动挑选放入洗碗机，感觉这个可以入手一台啊。\n\n有些机器人可以代替人工的高危作业，比如焊接机器人，海底探险机器人，维修机器人，等等。\n\n机器人在未来会取代很多职业，比如快递小哥，阿里分拣机器人“小黄人\"三个小时的工作量相当于100名工人一天的工作量。\n\n#### 3.4 经济和计算\n\n投资相关，比如利用计算机预测股市，制定投资计划，数据分析等。\n\n一旦看好一家公司，优秀的金融分析师会提前分析迈入，帮助机构调整投资并赚取巨额的收益。随着大数据时代的来临，近年来，一种观点十分流行：量化分析师即将完全取代主观分析师，机器即将完全取代人。这是因为人类金融分析师无法跟AI抗衡了，人工智能可以深度学习，读取历史数据，预测未来市场的走向。曾有论文指出，未来20年，美国47%的工作岗位将由于自动化技术而处于“高度危险”之中，其中54%的工作岗位来自金融行业。这并不奇怪，毕竟银行和金融行业的基础就是信息处理。拥有超强速算速度的人工智能，可以更加高效帮助企业进行投资，比起传统的金融分析师更有效率。\n\n#### 3.5 Human-computer interaction\n\n这是一门交叉学科，涵盖艺术，设计，计算机，心理学，社会学等等学科。主要是通过过计算机输入、输出设备，以有效的方式实现人与计算机交流。\n\n人机交互这个专业作为产品和用户之间的桥梁，已成为行业发展不可或缺的重要一环。无论是手机UI，汽车操作界面设计，用户体验，游戏设计又或是VR产业都需要这个专业的人才。\n\n#### 3.6 Computer graphics\n\n![](https://upload-images.jianshu.io/upload_images/15312191-6369718bc5ccfbfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n计算机图形学(Computer Graphics，简称CG)是一种使用数学算法将二维或三维图形转化为计算机显示器的栅格形式的科学。\n\n简单地说，计算机图形学的主要研究内容就是研究如何在计算机中表示图形、以及利用计算机进行图形的计算、处理和显示的相关原理与算法。\n\n比如元宇宙概念，AR眼镜已经可以逼真的在你眼前投射大屏，声临其境的感受3d环境，这种在科幻电影中才能出现的场景已经成为现实。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-507b7603dd2b9c7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n  ps: 以上只是几个大类分类，计算机的蓬勃发展，对人类社会产生巨大冲击，计算机未来一百年会发展成什么样，应该是一件很有趣的事。\n\n## Engineer VS cs phd\n\n![](https://upload-images.jianshu.io/upload_images/15312191-65d3942dd445f8c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n### 学术界VS工业界\n\nphd基本上工作流程是做研究，找方向，做实验，发paper，不需要你每天没月都有产出，因为科研是一个long term的工作，自由度很高。\n\n一般程序员日常操作是需要写各种report，周报、月报、日报。基本工作是发现问题，百度一下，复制，整合，模仿，技术解决方案基本是面向API开发❓。\n\n是不是有时候突然会感觉自己做的事很无聊（没错说的就是我!!🥲 )，复制粘贴本身就很无聊；应用层的这种工作对一些人来说无法产生有效刺激，而且更可怕的是，长期在这种模式下工作，生产力会一直停留在某个层次，无法提高，准确来说，应该是 3-6 个年后，他们的生产力集体达到了一个“平台期”，再也无法增长。\n\n无聊的另一个来源是，总觉得自己的工作很死板总是一个老套路，没有什么挑战性，没有那种intellectual challenge在里面。公司工作，有时候会碰到一些挑战，比如说原来一个星期写完的代码，要让你两天写完，但是这样的挑战并不是intellectual challenge。\n\n### 转换思维\n\n工业界里，我们应该更多突破固定思维，少一些follow up，多一些new idea，一些问题除了现有的解决方案，能不能想出别的方法呢，即使不是更好的解法，具体问题要敢于质疑权威，走出自己的路。\n\n一个任务完成后，我们的认知、工程化能力、知识圈层，有没有向外围扩展。宇宙之大，知识世界之辽阔，穷极一生也不可能全部学完。与其被动接受，不如换种学习方式，去创造，融会贯通，培养自己的创新能力。\n\n工程师是一个非常需要创造力的工作岗位🤔。如果只局限在自己的岗位设定而没有更多思考，机械式完成任务的结果就是只能自嘲为“新生代的代码农民工”。只有把创造力、架构能力和学习能力都融入开发过程，才能感觉到自己的工作发挥出了工程师的真正价值，从而体验到研发的乐趣。\n\n### Figure Out Your Life\n\n大多数人都读不了硕士博士，没有机会做学术，但是这种作业方式特别值得我们学习。技术就是创新，不是学习API和各种知识，大多数人都不是搞技术的，而是软件操作技工、技术搬运工，这是一个痛苦又不得不接受的现实。 很多人入行的时候希望搞技术，去改变一些东西，最后确成了一个一年经验用N年，面向API开发，停留在倦怠期，迷失在自我循环世界的老油条。\n\n选择学术界还是工业界，取决你的性格，如果你天生不喜欢被约束，喜欢搞自己的事情，那么科研可能更适合你。\n\n有可能我们不知道自己做什么，慢慢找到自己想做的事，figure out what you want。  只要你有兴趣想学总归是好的。我只想说人生可能都会走点弯路，都是在不断寻找正确的路。\n\n### 对于读博士的一些误解\n\n**1.“读博和科研只适合绝顶聪明或成绩非常好的人。”**\n\n这个看法是完全错误的，如同“演员只有非常有表演天赋的人才能当”一样是个伪命题。你如果认为大家心目中的学术大牛都是绝顶聪明的人，就好比说经常出现在新浪首页或者微博热搜的那几位明星的演技都非常好一样。\n\n在博士群体，做出顶级科研的并不都是同辈中超级聪明的人，也不一定是平均成绩点数(Grade Point Average, GPA)最高的人，更不一定是参加ACM编程竞赛的高手们，而恰恰是那些有耐心有毅力坚持去钻研的人。\n\n很多博士生只要选好导师，选好研究方向，肯花费时间，都能做出顶尖的研究。有很多在海外学术圈颇有建树的学者当年的学习成绩并不好。 \n\n **2.“科研穷三代，读博毁一生。”**\n\n这句话在其他领域或许是对的，但在计算机领域就是错的。在计算机领域，通过读博挣钱的大有人在！计算机学科的特性就是科研与产业结合得非常紧密。尤其是最前沿的科研，对产业有很大的推动作用，并产生经济利益。\n\n一个典型的例子就是谷歌的创始人佩奇和布林都是博士生，也出自博士家庭。虽然他们没读完博士就去创业了（布林自称现在在职读博士），但是如果他们没有读博，那将很难开创出谷歌的核心技术。\n\n目前业界大数据系统的宠儿Spark，就是由加州大学伯克利分校的教授和博士们开发的。首席开发者马泰扎·哈里亚(MateiZaharia)即使有挣大钱的机会，也没有完全放弃麻省理工学院的教职。\n\n在网络技术领域，目前业界关注的核心“软件定义网络”也是教授和博士们在大学里开发出来的。谷歌、威睿(VMware)、 Databricks (Spark)、Nicira (OpenFlow)以及无数顶尖技术公司雇佣了数以千计的计算机专业毕业的博士，因为博士通常比其他雇员更接近核心技术。\n\n如果你想实现自己的技术梦想并挣大钱，读博士是一个很好的选择。“读博就得走清贫的人生道路”是没有任何道理的。 \n **3.“科研做的东西大部分都是废纸，对实际一点帮助都没有。”**\n\n这种观点在计算机领域也是不正确的。计算机科学并不是屠龙之技。今天几十亿人都离不开的计算机网络的原型就是从加州大学洛杉矶分校发展起来的，莱昂纳多·克莱洛克(LeonardKleinrock)教授在阿帕网(ARPANET)项目中开发了互联网的雏形，并在1969年发送了互联网的第一个数据包。\n\n20世纪70年代，美国工程院院士林善成(Simon Lam)教授在他的博士论文中分析了解决链路层冲突的方法，最后被以太网采用，融入到我们的生活中。\n\n林教授在90年代开发了安全套接层(SSL)的第一个实现系统，如今安全套接层被运用到每台电脑和手机的浏览器中。不仅是计算机网络，几乎每个计算机领域的技术都被科研引领着。\n\n按照加州大学伯克利分校博士后研究员钱学海博士发表在《中国计算机学会通讯》(CCCF)上的文章1所说，计算机体系结构这些年的发展，都与该领域四大学术会议上的论文密不可分。\n\n另一方面，虽然很多论文在现实世界不一定能体现直接价值，但是在写文章的过程中，你能学到很多东西，比如提出问题、解决问题、语言表达的能力，这些都让人受益无穷。\n\n当然读博士不是一件轻松的事，需要超越常人的耐力，韧性和心理素质，需要你真心的热爱你的专业，需要踏实的学习方式，不投机，不取巧，能扛住压力，不被周围环境影响，坚守自己的节奏孤独前行，板凳一坐十年冷，暗香始自苦寒来。\n\n> [我为什么鼓励你读计算机专业博士](https://zhuanlan.zhihu.com/p/60308234)\n[读博，你真的想好了吗？](https://zhuanlan.zhihu.com/p/372884253)\n[4年计算机博士读下来的一些感触](https://blog.csdn.net/ytomc/article/details/76387456)\n[一中国研究生被美国教授开除，教授坦言：我就不该录取你！](https://www.163.com/dy/article/HAN86PBN0517HIAS.html)\n[计算机基础问题，最大流问题获突破性进展：新算法「快得离谱」](https://www.jiqizhixin.com/articles/2022-06-14-9)\n[US sanctions helped China supercharge its chipmaking industry](https://www.businesstimes.com.sg/global-enterprise/us-sanctions-helped-china-supercharge-its-chipmaking-industry)\n[The Map of Computer Science](https://www.youtube.com/watch?v=SzJ46YA_RaA)  [中国计算机学会推荐国际学术会议和期刊目录](https://ccf.atom.im/) \n[冯•诺依曼计算机将渐行渐远?](https://www.infoq.cn/article/2015/06/alan-turing-neumann)\n","slug":"📣📣ph-d-vs-Engineer","published":1,"updated":"2024-05-16T07:39:11.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pd006e2omv4lcv0ayo","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7eccbef47e203095.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>ph.d 翻译为哲学家，指在某个领域可以建立新的世界体系的人。 一般意义上说应该是发明家，cs ph.d 不同于一般的面向CV开发工程师，其面相的领域需要开辟，探索，发现。</strong></p>\n<div class=\"\"><h2 id=\"主要研究方向\"><a href=\"#主要研究方向\" class=\"headerlink\" title=\"主要研究方向\"></a>主要研究方向</h2><p>计算机方向总体上分三类：</p>\n<p><strong>Fundamental Theory Of Computer Science</strong>，以我的了解和数学关系比较大 ，建立新的世界架构，比如图灵机。  </p>\n<p><strong>Computer Engineering</strong>：在当前计算机体系前建立的软硬件系统，操作系统，计算机语言，编译器等。</p>\n<p>  <strong>Applications</strong>：如何利用计算机完成实现交叉工作，比如AI，各种领域软件开发。</p>\n<p>内容广泛，不仅仅包含数学，还会涉及材料，物理学，化学等等，而且和不同领域都存在交叉。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c02181a7e8afa848.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"The Map of Computer Science\"> </p>\n<h3 id=\"1-Fundamental-Theory-Of-Computer-Science（硬核）\"><a href=\"#1-Fundamental-Theory-Of-Computer-Science（硬核）\" class=\"headerlink\" title=\"1. Fundamental Theory Of Computer Science（硬核）\"></a>1. Fundamental Theory Of Computer Science（硬核）</h3><h4 id=\"1-1-System\"><a href=\"#1-1-System\" class=\"headerlink\" title=\"1.1 System\"></a>1.1 System</h4><p>Systems的内容十分广泛，包括OS, Architecture, Network等等，比如特定场景操作系统，并行高性能计算机，分布式系统，存储系统和编程系统，文件系统、云系统，高性能系统计算、系统的可靠性、安全性，测量与性能分析。</p>\n<p>顶会：SOSP，OSDI，这两个是OS最好的会议，每两年开一次，轮流开，比如今年是OSDI，那么明年就是SOSP。由于这两个会议方向很广，因此影响很大。</p>\n<h4 id=\"1-2-Computer-Architecture\"><a href=\"#1-2-Computer-Architecture\" class=\"headerlink\" title=\"1.2 Computer Architecture\"></a>1.2 Computer Architecture</h4><p>美国斯坦福大学最近在一份报告中分析了过去 20 年间出现的几乎所有的处理器，发现处理器性能提高了约 1 万倍。该报告进一步指出，在 1 万倍的性能提升中，半导体工艺贡献了 100 多倍，计算机体系结构贡献了 80 多倍，可见计算机结构对提升计算机性能的重要性。</p>\n<p>计算机系统结构是计算机的机器语言程序员或编译程序编写者所看到的外特性。所谓外特性，就是计算机的概念性结构和功能特性，主要研究计算机系统的基本工作原理，以及在硬件、软件界面划分的权衡策略，建立完整的、系统的计算机软硬件整体概念。</p>\n<p> <strong>说人话就是研究计算机硬件体系的。</strong></p>\n<h5 id=\"未来计算机模型\"><a href=\"#未来计算机模型\" class=\"headerlink\" title=\"未来计算机模型\"></a>未来计算机模型</h5><p>现代计算机自问世以来已历经50余年的历史，但计算机所遵循的基本结构形式始终是冯·诺依曼机结构。它的基本结构特征是“<strong>共享数据和串行执行</strong>”的计算机模型。  按照这种结构，程序和数据放在共享存储器内，CPU取出指令和数据进行相应的计算，因此CPU与共享存储器间的信息通路成为影响系统性能的“瓶颈”，芯片性能提升速度远高于存储性能的提升速度。多年来在并行计算机结构及处理的研究已经取得了很多成果，如阵列机、流水机、向量机等，使计算速度有了很大提高，但就本质上仍无法克服冯·诺依曼机结构上的缺陷。</p>\n<p>1.目前 CPU 的处理速度和内存容量的成长速率要远大于两者之间的流量，将大量数值从内存搬入搬出的操作 占用了 CPU 大部分的执行时间，也造成了总线的瓶颈。</p>\n<p>2.程序指令的执行是串行的，由程序计数器控制，这样使得即使有关数据已经准备好，也必须遵循逐条执行指令序列，影响了系统运行的速度；</p>\n<p>3.存储器是线性编址，按顺序排列的地址访问，这是有利于存储和执行机器语言，适用于数值计算。但高级语言的存储采用的是一组有名字的变量，是按名字调用变量而非按地址访问，且高级语言中的每个操作对于任何数据类型都是通用的，不管采用何种数据结构，多维数组、二叉树还是图，最终在存储器上都必须转换成一维的线性存储模型进行存储。这些因素都导致了机器语言和高级语言之间存在很大的语义差距，这些语义差距之间的映射大部分都要由编译程序来完成，在很大程度上增加了编译程序的工作量。</p>\n<p>4.冯·诺依曼体系结构计算机是为<strong>逻辑和数值</strong>运算而诞生的，它以 CPU 为中心，I&#x2F;O 设备与存储器间的数据传送都要经过运算器，在<strong>数值处理</strong>方面已经达到很高的速度和精度，但对<strong>非数值</strong>数据的处理效率比较低，需要在体系结构方面有革命性突破。</p>\n<p>在非冯领域，包括近年来的出现的量子计算机，光子计算机，神经计算机（Neural computer）等，其中量子芯片已经面世，中国科大潘建伟团队构建起76个光量子的量子计算原型机“九章”，处理高斯玻色取样的速度比目前最快的超级计算机快一百万亿倍。如果量子计算机可以普及，计算机系统、计算机语言、软件体系，从业人员培养体系都会被推翻重来。</p>\n<h5 id=\"特定场景芯片\"><a href=\"#特定场景芯片\" class=\"headerlink\" title=\"特定场景芯片\"></a>特定场景芯片</h5><p>比如在人工智能芯片方面，谷歌开发了用于AI计算高性能硬件<strong>TPU</strong>，Intel推出了针对深度学习市场的众核CPU<strong>Knights Mill</strong>，英伟达推出了<strong>GPGPU</strong>，而且还有了<strong>DGX-1</strong>这样的产品；在互联网大规模核心推荐算法场景，百度推出的<strong>“百度昆仑1”</strong>已在百度搜索引擎、小度等业务中部署超过2万片；自动驾驶领域，特斯拉发布了用于自动驾驶深度学习和解决带宽瓶颈的<strong>D1</strong>芯片。  <img src=\"https://upload-images.jianshu.io/upload_images/15312191-623d3cda0454ca0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"> </p>\n<p>针对高并发、高性能和高效需求，阿里平头哥发布了为云而生<strong>倚天710</strong>，<strong>CIPU</strong>，阿里云飞天+CIPU体系的推出，针对性地解决了云资源的多个痛点。首先，该体系通过全硬件虚拟化和转发加速，将存储时延降至最低30us（PLX），IOPS高达300万，存储带宽可达200 Gbps，全面超越市面上所有云产品；同时，该体系还将数据中心内的基础带宽从100G升级至200G，VPC的PPS转发性能从2000万提升至4000万，网络时延从22us降低至16us，RDMA协议下更可低至5.5us。在计算能力方面，新体系实现了单容器虚拟化消耗减少50%，虚拟化容器启动速度快350%。主流通用计算场景下，<strong>Nginx</strong>性能提升了89%，<strong>Redis</strong>性能提升了68%、<strong>MySQL</strong>提升了60%。</p>\n<p>该领域的四大国际顶级会议: <strong>ISCA(偏芯片领域), HPCA, MICRO, ASPLOS</strong>。</p>\n<p>ps: 对于体系结构领域的应届毕业生来说，市场上有大致上三种工作可以选，一种是去做金融，高频交易之类，薪水很高；另一种是去做机器学习，利用体系结构领域的知识和技能去做机器学习应用的调优，也是薪水很高；比较符合体系结构传统的工作，例如去传统的芯片设计公司做芯片。</p>\n<p>在半导体集成电路领域，按照中国当前的国情，这个产业将迎来爆发阶段。据报道，在过去的四个季度，全球20个增速最快芯片公司，19个来自中国。</p>\n<p>比如前一段时间看到一直关注的频道老石谈芯的博主<strong>石侃</strong>(伦敦帝国理工学院电子工程系博士、高级 FPGA 研发工程师)宣布加入国内某芯片大厂。相信随着更多尖端人才的回流，国家战略倾斜，中国的计算机技术会越来越强大。</p>\n<h4 id=\"1-3-嵌入式实时计算机\"><a href=\"#1-3-嵌入式实时计算机\" class=\"headerlink\" title=\"1.3 嵌入式实时计算机\"></a>1.3 嵌入式实时计算机</h4><p>主要研究嵌入式的，希望未来的一天计算机可以植入人的大脑，微型计算机像手机一样进去大众生活中，就像科幻片里，召之即来挥之即去。</p>\n<h4 id=\"1-4-Computer-Networks\"><a href=\"#1-4-Computer-Networks\" class=\"headerlink\" title=\"1.4 Computer Networks\"></a>1.4 Computer Networks</h4><p>Networking甚至包括Telecommunication。这个范围可以说是非常的大。网络应用、网络协议、网络通信、网络理论、网络安全、加密解密、路由算法、甚至编解码都是需要学习的学科。</p>\n<h5 id=\"1-5-Mobile-computing\"><a href=\"#1-5-Mobile-computing\" class=\"headerlink\" title=\"1.5 Mobile computing\"></a>1.5 Mobile computing</h5><p>移动计算是随着移动通信、互联网、数据库、分布式计算等技术的发展而兴起的新技术。移动计算技术将使计算机或其它信息智能终端设备在无线环境下实现数据传输及资源共享。它的作用是将有用、准确、及时的信息提供给任何时间、任何地点的任何客户。这将极大地改变人们的生活方式和工作方式。</p>\n<h4 id=\"1-6-计算机理论\"><a href=\"#1-6-计算机理论\" class=\"headerlink\" title=\"1.6 计算机理论\"></a>1.6 计算机理论</h4><p>计算机理论涵盖的领域十分广泛，包括算法和数据结构、计算复杂性、密码学、计算几何、组合学、随机与去随机化、算法博弈论和量子计算等。</p>\n<p>计算机理论科学是完全偏向理论的学科，研究的不只是算法，更加重要的是算法的有效性和可行性。</p>\n<p>理论计算机科学领域有两大顶会，一个是ACM（美国计算机学会）的STOC，另外一个是IEEE（国际电气和电子工程师协会）的FOCS。</p>\n<h5 id=\"1-6-1-Algorithms-amp-complexity\"><a href=\"#1-6-1-Algorithms-amp-complexity\" class=\"headerlink\" title=\"1.6.1 Algorithms &amp; complexity\"></a>1.6.1 Algorithms &amp; complexity</h5><p>计算机领域的算法的创新改进，比如华为的俄罗斯小伙，对数学问题的突破，使得华为基站大幅度领先。  最近看了一篇文章，某个团队在最大流问题利用这个问题，算法获突破性进展。</p>\n<h5 id=\"1-6-2-Cryptography\"><a href=\"#1-6-2-Cryptography\" class=\"headerlink\" title=\"1.6.2 Cryptography\"></a>1.6.2 Cryptography</h5><p>密码学是研究编制密码和破译密码的技术科学。研究密码变化的客观规律，应用于编制密码以保守通信秘密的，称为编码学；应用于破译密码以获取通信情报的，称为破译学，总称密码学。</p>\n<p>举个：md5加密相信大家都听过，用过。发明者是<a href=\"https://en.wikipedia.org/wiki/Ronald_Rivest\" title=\"Ronald Rivest\">Ronald Rivest</a>教授(耶鲁大学数学专业，斯坦福大学计算机科学ph.d)，他有多项发明，比如md6，<a href=\"https://en.wikipedia.org/wiki/RSA_(algorithm)\">RSA</a> ，此外还著有书籍《Introduction to Algorithms》，2002年因RSA加密方案，获得年度图灵奖。</p>\n<h3 id=\"2-Computer-Engineering\"><a href=\"#2-Computer-Engineering\" class=\"headerlink\" title=\"2. Computer Engineering\"></a>2. Computer Engineering</h3><p>软件工程&#x2F;系统软件&#x2F;程序设计语言。  研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。它涉及程序 设计语言、数据库、软件开发工具、系统平台、标准、设计模式等方面。<br>典型的软件有电子邮件、嵌入式系统、人机界面、办公套件、<strong>操作系统</strong>、<strong>编译器</strong>、<strong>数据库</strong>等。这个专业比较灵活，可以说是为程序员服务的程序员，是个人比较感兴趣的方向。</p>\n<h3 id=\"3-Applications\"><a href=\"#3-Applications\" class=\"headerlink\" title=\"3.Applications\"></a>3.Applications</h3><h4 id=\"3-1-AI\"><a href=\"#3-1-AI\" class=\"headerlink\" title=\"3.1 AI\"></a>3.1 AI</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-924211e3319856b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"> </p>\n<h5 id=\"AI解放生产力\"><a href=\"#AI解放生产力\" class=\"headerlink\" title=\"AI解放生产力\"></a>AI解放生产力</h5><p>随着计算机硬件性能的巨大提升，曾经沉寂一时的AI卷土重来。Ai大幅度提高生产力，取代人类工作，如果你的工作符合以下特征，你的工作被机器人取代的概率非常大：大量的重复性劳动，每天上班无需过脑，经由训练即可掌握的技能，工作空间狭小，坐在格子间里，不闻天下事。拜人工智能所赐，未来肯定会有人类从事的工作会被消灭。</p>\n<p>AI细分为机器学习和数据挖掘，人工智能，计算机视觉(感知)，自然语言处理，网络信息收集。</p>\n<p>Ai涉及到的具体场景包括，智能机器人，战争AI，智慧医疗，自动驾驶，语音识别。在物流行业中，无人货仓，智能分拣系统，客服系统也都已经充满了AI的身影。</p>\n<h5 id=\"AI的缺陷\"><a href=\"#AI的缺陷\" class=\"headerlink\" title=\"AI的缺陷\"></a>AI的缺陷</h5><p><strong>1.复杂性问题</strong>  很遗憾，截至目前，人工智能(AI)基本没有带来颠覆性的产业价值。原因也很简单，AI目前不具备处理世界“<strong>复杂性</strong>”的能力。如何判断AI+是否可以为一个产业带来颠覆性影响与价值，关键在于AI能否处理这个产业所在供给需求的复杂性。</p>\n<p>复杂性是系统科学发展到当前阶段，人类对系统属性的本质认识。从对自然现象的解释，到对生物进化的理解，再到对社会领域人造工程系统的构建，以及对经济发展的管理，人们开始意识到再这些探索活动背后都面临着相同的敌人，那就是“复杂性”。 现在全球对复杂性没有一致的定义，但对其属性倒是有基本统一的认知：<strong>非线性、混沌、涌现性、自组织、自适应性。</strong></p>\n<p>除此以外，复杂性还有3个层次：<strong>自组织、自适应和决策博弈</strong>。第一层次是自组织，指无机系统演化遵从自然规则，第二层次是指生物系统演化遵循目的导向的自适应性，而最高层次是人类处理事情时的决策博弈过程。因此所谓复杂性，可以理解成无机世界的自组织、有机世界的自适应以及人类的心理决策博弈。</p>\n<p>每一个产业都有其自身的自组织、自适应和决策博弈，AI+必须直面这个复杂性，才能创造增量价值。以肿瘤治疗为例，AI可以帮助人类克服肿瘤吗？那么AI首先就要直面<strong>肿瘤的复杂性</strong>，！AI必须理解生命是如何在内在机制的驱动下，如何自行从简单向复杂、从粗糙向细致方向发展。她必须理解生命系统如何对外界环境干扰或内部变化做出自我适应。她必须考虑肿瘤自身与人免疫系统的博弈，理解肿瘤和人免疫系统的相互博弈。</p>\n<p>以上述标准看，在多个行业，AI+仅仅解决了“点”的问题，而没有触及系统复杂性，更谈不上解决复杂性问题，自然无法创造增量价值，颠覆传统模式。在未来，谁先掌握解决复杂性的AI，谁才能真正运用AI，为产业赋能。  <strong>2.算力问题</strong>  传统计算机架构导致的性能问题，无法满足当前算力的需要。  虽然近些年基础算力、智能算力和超算算力都有很大程度的增长，未来5年全球的增速甚至超过50%，但与日益复杂的算法模型和快速增长的现实需求而言，仍然存在较大的缺口。同时，存算一体架构、量子计算、光子计算和类脑计算芯片尚处于实验室的研发阶段，离大规模商业化还有较长的时间，无法以技术革命的方式实现跨越式发展。虽然，诸如商汤科技、华为等头部公司采取了建立人工智能计算中心（AIDC）的方式，来满足未来智能计算需求的快速增长；我国神威、天河、曙光三台E级超算系统的研制工作也在逐步推进，很多国内的硬件公司着手计算机硬件的国产化替代。但从短期来看，算力将会是一个制约人工智能技术发展的现实困难。</p>\n<p>比如无人驾驶至今无法真正投入使用，很大大神从工业界重返学术界的现象很大，比如离开谷歌的李飞飞。AI浪潮已经来袭了3次，海水退去，不知道能否游上岸，未来AI能走多远，仍是未知数。</p>\n<p><strong>顶会</strong>：AI顶会最为熟知的人工智能领域最核心的四大顶会AAAI、IJCAI、ICML和NIPS，以及作为计算机视觉和自然语言为代表的CVPR和ACL这两大学术会议，也涌现了许多“后起之秀”，比如仅创立六年却有深度学习顶会“无冕之王”之称的ICLR，还有创办于1996年的大有赶超ACL之势的自然语言处理领域顶会EMNLP，这些“新星会议”的崛起，使得AI领域的会议呈现出亮点纷呈、多面开花的局面。</p>\n<h4 id=\"3-2-生物医疗\"><a href=\"#3-2-生物医疗\" class=\"headerlink\" title=\"3.2 生物医疗\"></a>3.2 生物医疗</h4><p>比如计算机在医疗中的应用，Ai诊病，通过提取病人特征，快速诊断，缩短医生诊疗时间。提前预测病人病情，指定医疗方案，AI筛选药物，制药，医疗报告生成。使用人机接口，通过脑电波控制机械驱体等。</p>\n<p>目前AI在医疗领域得到广泛的应用：例如Abundy的癌症诊疗系统，在2分钟可以检测完130张癌症片子，而一个经验丰富的医生2分钟只能看一个。</p>\n<p>广州祈福医院有一个“沃森诊室”，机器人沃森可以只用10秒就能阅读3469本医学专著和10余万份临床报告。医生只需在机器上录入患者相关信息，短短几十秒内一份70页至100页的治疗报告就会生成。虽然目前AI只能充当医生的助手，两者相结合，给患者提供最大的保障，然而人工智能机器人将会逐步取代那些普通医生。</p>\n<h4 id=\"3-3-robot\"><a href=\"#3-3-robot\" class=\"headerlink\" title=\"3.3 robot\"></a>3.3 robot</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f4b808c16db78ee7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>  机器人研究方面比较广，目前美国是该领域的领跑者，比如战斗机器人，包括无人机，比较常见的任务包括侦察，排雷等，如美国波士顿公司的BigDog和阿特拉斯，部分型号的机器人装备了机枪等攻击性武器。Big Dog还可以帮助美军承担大重量物品的长途搬运工作，能够克服各种路面的异常情况，可以说是现代版的”木牛流马”，可能是诸葛亮提供的思路🤣。</p>\n<p>工业机器人，比如汽车生产组装流水线，无需人工干预，各种机器人在指令下，协同完成汽车各个部位的组装。甚至无人工厂，比如小米手机工厂，其在世界智能大会中展示的宣传片显示，未来该工厂将24小时熄灯生产，无人干预，甚至一秒钟就能生产一部手机。</p>\n<p>家庭护理机器人，就像保姆一样，完成餐桌碗碟的摆放，自动挑选放入洗碗机，感觉这个可以入手一台啊。</p>\n<p>有些机器人可以代替人工的高危作业，比如焊接机器人，海底探险机器人，维修机器人，等等。</p>\n<p>机器人在未来会取代很多职业，比如快递小哥，阿里分拣机器人“小黄人”三个小时的工作量相当于100名工人一天的工作量。</p>\n<h4 id=\"3-4-经济和计算\"><a href=\"#3-4-经济和计算\" class=\"headerlink\" title=\"3.4 经济和计算\"></a>3.4 经济和计算</h4><p>投资相关，比如利用计算机预测股市，制定投资计划，数据分析等。</p>\n<p>一旦看好一家公司，优秀的金融分析师会提前分析迈入，帮助机构调整投资并赚取巨额的收益。随着大数据时代的来临，近年来，一种观点十分流行：量化分析师即将完全取代主观分析师，机器即将完全取代人。这是因为人类金融分析师无法跟AI抗衡了，人工智能可以深度学习，读取历史数据，预测未来市场的走向。曾有论文指出，未来20年，美国47%的工作岗位将由于自动化技术而处于“高度危险”之中，其中54%的工作岗位来自金融行业。这并不奇怪，毕竟银行和金融行业的基础就是信息处理。拥有超强速算速度的人工智能，可以更加高效帮助企业进行投资，比起传统的金融分析师更有效率。</p>\n<h4 id=\"3-5-Human-computer-interaction\"><a href=\"#3-5-Human-computer-interaction\" class=\"headerlink\" title=\"3.5 Human-computer interaction\"></a>3.5 Human-computer interaction</h4><p>这是一门交叉学科，涵盖艺术，设计，计算机，心理学，社会学等等学科。主要是通过过计算机输入、输出设备，以有效的方式实现人与计算机交流。</p>\n<p>人机交互这个专业作为产品和用户之间的桥梁，已成为行业发展不可或缺的重要一环。无论是手机UI，汽车操作界面设计，用户体验，游戏设计又或是VR产业都需要这个专业的人才。</p>\n<h4 id=\"3-6-Computer-graphics\"><a href=\"#3-6-Computer-graphics\" class=\"headerlink\" title=\"3.6 Computer graphics\"></a>3.6 Computer graphics</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6369718bc5ccfbfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"> </p>\n<p>计算机图形学(Computer Graphics，简称CG)是一种使用数学算法将二维或三维图形转化为计算机显示器的栅格形式的科学。</p>\n<p>简单地说，计算机图形学的主要研究内容就是研究如何在计算机中表示图形、以及利用计算机进行图形的计算、处理和显示的相关原理与算法。</p>\n<p>比如元宇宙概念，AR眼镜已经可以逼真的在你眼前投射大屏，声临其境的感受3d环境，这种在科幻电影中才能出现的场景已经成为现实。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-507b7603dd2b9c7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>  ps: 以上只是几个大类分类，计算机的蓬勃发展，对人类社会产生巨大冲击，计算机未来一百年会发展成什么样，应该是一件很有趣的事。</p>\n</div><div class=\"\"><h2 id=\"Engineer-VS-cs-phd\"><a href=\"#Engineer-VS-cs-phd\" class=\"headerlink\" title=\"Engineer VS cs phd\"></a>Engineer VS cs phd</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-65d3942dd445f8c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"> </p>\n<h3 id=\"学术界VS工业界\"><a href=\"#学术界VS工业界\" class=\"headerlink\" title=\"学术界VS工业界\"></a>学术界VS工业界</h3><p>phd基本上工作流程是做研究，找方向，做实验，发paper，不需要你每天没月都有产出，因为科研是一个long term的工作，自由度很高。</p>\n<p>一般程序员日常操作是需要写各种report，周报、月报、日报。基本工作是发现问题，百度一下，复制，整合，模仿，技术解决方案基本是面向API开发❓。</p>\n<p>是不是有时候突然会感觉自己做的事很无聊（没错说的就是我!!🥲 )，复制粘贴本身就很无聊；应用层的这种工作对一些人来说无法产生有效刺激，而且更可怕的是，长期在这种模式下工作，生产力会一直停留在某个层次，无法提高，准确来说，应该是 3-6 个年后，他们的生产力集体达到了一个“平台期”，再也无法增长。</p>\n<p>无聊的另一个来源是，总觉得自己的工作很死板总是一个老套路，没有什么挑战性，没有那种intellectual challenge在里面。公司工作，有时候会碰到一些挑战，比如说原来一个星期写完的代码，要让你两天写完，但是这样的挑战并不是intellectual challenge。</p>\n<h3 id=\"转换思维\"><a href=\"#转换思维\" class=\"headerlink\" title=\"转换思维\"></a>转换思维</h3><p>工业界里，我们应该更多突破固定思维，少一些follow up，多一些new idea，一些问题除了现有的解决方案，能不能想出别的方法呢，即使不是更好的解法，具体问题要敢于质疑权威，走出自己的路。</p>\n<p>一个任务完成后，我们的认知、工程化能力、知识圈层，有没有向外围扩展。宇宙之大，知识世界之辽阔，穷极一生也不可能全部学完。与其被动接受，不如换种学习方式，去创造，融会贯通，培养自己的创新能力。</p>\n<p>工程师是一个非常需要创造力的工作岗位🤔。如果只局限在自己的岗位设定而没有更多思考，机械式完成任务的结果就是只能自嘲为“新生代的代码农民工”。只有把创造力、架构能力和学习能力都融入开发过程，才能感觉到自己的工作发挥出了工程师的真正价值，从而体验到研发的乐趣。</p>\n<h3 id=\"Figure-Out-Your-Life\"><a href=\"#Figure-Out-Your-Life\" class=\"headerlink\" title=\"Figure Out Your Life\"></a>Figure Out Your Life</h3><p>大多数人都读不了硕士博士，没有机会做学术，但是这种作业方式特别值得我们学习。技术就是创新，不是学习API和各种知识，大多数人都不是搞技术的，而是软件操作技工、技术搬运工，这是一个痛苦又不得不接受的现实。 很多人入行的时候希望搞技术，去改变一些东西，最后确成了一个一年经验用N年，面向API开发，停留在倦怠期，迷失在自我循环世界的老油条。</p>\n<p>选择学术界还是工业界，取决你的性格，如果你天生不喜欢被约束，喜欢搞自己的事情，那么科研可能更适合你。</p>\n<p>有可能我们不知道自己做什么，慢慢找到自己想做的事，figure out what you want。  只要你有兴趣想学总归是好的。我只想说人生可能都会走点弯路，都是在不断寻找正确的路。</p>\n<h3 id=\"对于读博士的一些误解\"><a href=\"#对于读博士的一些误解\" class=\"headerlink\" title=\"对于读博士的一些误解\"></a>对于读博士的一些误解</h3><p><strong>1.“读博和科研只适合绝顶聪明或成绩非常好的人。”</strong></p>\n<p>这个看法是完全错误的，如同“演员只有非常有表演天赋的人才能当”一样是个伪命题。你如果认为大家心目中的学术大牛都是绝顶聪明的人，就好比说经常出现在新浪首页或者微博热搜的那几位明星的演技都非常好一样。</p>\n<p>在博士群体，做出顶级科研的并不都是同辈中超级聪明的人，也不一定是平均成绩点数(Grade Point Average, GPA)最高的人，更不一定是参加ACM编程竞赛的高手们，而恰恰是那些有耐心有毅力坚持去钻研的人。</p>\n<p>很多博士生只要选好导师，选好研究方向，肯花费时间，都能做出顶尖的研究。有很多在海外学术圈颇有建树的学者当年的学习成绩并不好。 </p>\n<p> <strong>2.“科研穷三代，读博毁一生。”</strong></p>\n<p>这句话在其他领域或许是对的，但在计算机领域就是错的。在计算机领域，通过读博挣钱的大有人在！计算机学科的特性就是科研与产业结合得非常紧密。尤其是最前沿的科研，对产业有很大的推动作用，并产生经济利益。</p>\n<p>一个典型的例子就是谷歌的创始人佩奇和布林都是博士生，也出自博士家庭。虽然他们没读完博士就去创业了（布林自称现在在职读博士），但是如果他们没有读博，那将很难开创出谷歌的核心技术。</p>\n<p>目前业界大数据系统的宠儿Spark，就是由加州大学伯克利分校的教授和博士们开发的。首席开发者马泰扎·哈里亚(MateiZaharia)即使有挣大钱的机会，也没有完全放弃麻省理工学院的教职。</p>\n<p>在网络技术领域，目前业界关注的核心“软件定义网络”也是教授和博士们在大学里开发出来的。谷歌、威睿(VMware)、 Databricks (Spark)、Nicira (OpenFlow)以及无数顶尖技术公司雇佣了数以千计的计算机专业毕业的博士，因为博士通常比其他雇员更接近核心技术。</p>\n<p>如果你想实现自己的技术梦想并挣大钱，读博士是一个很好的选择。“读博就得走清贫的人生道路”是没有任何道理的。<br> <strong>3.“科研做的东西大部分都是废纸，对实际一点帮助都没有。”</strong></p>\n<p>这种观点在计算机领域也是不正确的。计算机科学并不是屠龙之技。今天几十亿人都离不开的计算机网络的原型就是从加州大学洛杉矶分校发展起来的，莱昂纳多·克莱洛克(LeonardKleinrock)教授在阿帕网(ARPANET)项目中开发了互联网的雏形，并在1969年发送了互联网的第一个数据包。</p>\n<p>20世纪70年代，美国工程院院士林善成(Simon Lam)教授在他的博士论文中分析了解决链路层冲突的方法，最后被以太网采用，融入到我们的生活中。</p>\n<p>林教授在90年代开发了安全套接层(SSL)的第一个实现系统，如今安全套接层被运用到每台电脑和手机的浏览器中。不仅是计算机网络，几乎每个计算机领域的技术都被科研引领着。</p>\n<p>按照加州大学伯克利分校博士后研究员钱学海博士发表在《中国计算机学会通讯》(CCCF)上的文章1所说，计算机体系结构这些年的发展，都与该领域四大学术会议上的论文密不可分。</p>\n<p>另一方面，虽然很多论文在现实世界不一定能体现直接价值，但是在写文章的过程中，你能学到很多东西，比如提出问题、解决问题、语言表达的能力，这些都让人受益无穷。</p>\n<p>当然读博士不是一件轻松的事，需要超越常人的耐力，韧性和心理素质，需要你真心的热爱你的专业，需要踏实的学习方式，不投机，不取巧，能扛住压力，不被周围环境影响，坚守自己的节奏孤独前行，板凳一坐十年冷，暗香始自苦寒来。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/60308234\">我为什么鼓励你读计算机专业博士</a><br><a href=\"https://zhuanlan.zhihu.com/p/372884253\">读博，你真的想好了吗？</a><br><a href=\"https://blog.csdn.net/ytomc/article/details/76387456\">4年计算机博士读下来的一些感触</a><br><a href=\"https://www.163.com/dy/article/HAN86PBN0517HIAS.html\">一中国研究生被美国教授开除，教授坦言：我就不该录取你！</a><br><a href=\"https://www.jiqizhixin.com/articles/2022-06-14-9\">计算机基础问题，最大流问题获突破性进展：新算法「快得离谱」</a><br><a href=\"https://www.businesstimes.com.sg/global-enterprise/us-sanctions-helped-china-supercharge-its-chipmaking-industry\">US sanctions helped China supercharge its chipmaking industry</a><br><a href=\"https://www.youtube.com/watch?v=SzJ46YA_RaA\">The Map of Computer Science</a>  <a href=\"https://ccf.atom.im/\">中国计算机学会推荐国际学术会议和期刊目录</a><br><a href=\"https://www.infoq.cn/article/2015/06/alan-turing-neumann\">冯•诺依曼计算机将渐行渐远?</a></p>\n</blockquote>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7eccbef47e203095.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>ph.d 翻译为哲学家，指在某个领域可以建立新的世界体系的人。 一般意义上说应该是发明家，cs ph.d 不同于一般的面向CV开发工程师，其面相的领域需要开辟，探索，发现。</strong></p>\n<h2 id=\"主要研究方向\"><a href=\"#主要研究方向\" class=\"headerlink\" title=\"主要研究方向\"></a>主要研究方向</h2><p>计算机方向总体上分三类：</p>\n<p><strong>Fundamental Theory Of Computer Science</strong>，以我的了解和数学关系比较大 ，建立新的世界架构，比如图灵机。  </p>\n<p><strong>Computer Engineering</strong>：在当前计算机体系前建立的软硬件系统，操作系统，计算机语言，编译器等。</p>\n<p>  <strong>Applications</strong>：如何利用计算机完成实现交叉工作，比如AI，各种领域软件开发。</p>\n<p>内容广泛，不仅仅包含数学，还会涉及材料，物理学，化学等等，而且和不同领域都存在交叉。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-c02181a7e8afa848.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"The Map of Computer Science\"> </p>\n<h3 id=\"1-Fundamental-Theory-Of-Computer-Science（硬核）\"><a href=\"#1-Fundamental-Theory-Of-Computer-Science（硬核）\" class=\"headerlink\" title=\"1. Fundamental Theory Of Computer Science（硬核）\"></a>1. Fundamental Theory Of Computer Science（硬核）</h3><h4 id=\"1-1-System\"><a href=\"#1-1-System\" class=\"headerlink\" title=\"1.1 System\"></a>1.1 System</h4><p>Systems的内容十分广泛，包括OS, Architecture, Network等等，比如特定场景操作系统，并行高性能计算机，分布式系统，存储系统和编程系统，文件系统、云系统，高性能系统计算、系统的可靠性、安全性，测量与性能分析。</p>\n<p>顶会：SOSP，OSDI，这两个是OS最好的会议，每两年开一次，轮流开，比如今年是OSDI，那么明年就是SOSP。由于这两个会议方向很广，因此影响很大。</p>\n<h4 id=\"1-2-Computer-Architecture\"><a href=\"#1-2-Computer-Architecture\" class=\"headerlink\" title=\"1.2 Computer Architecture\"></a>1.2 Computer Architecture</h4><p>美国斯坦福大学最近在一份报告中分析了过去 20 年间出现的几乎所有的处理器，发现处理器性能提高了约 1 万倍。该报告进一步指出，在 1 万倍的性能提升中，半导体工艺贡献了 100 多倍，计算机体系结构贡献了 80 多倍，可见计算机结构对提升计算机性能的重要性。</p>\n<p>计算机系统结构是计算机的机器语言程序员或编译程序编写者所看到的外特性。所谓外特性，就是计算机的概念性结构和功能特性，主要研究计算机系统的基本工作原理，以及在硬件、软件界面划分的权衡策略，建立完整的、系统的计算机软硬件整体概念。</p>\n<p> <strong>说人话就是研究计算机硬件体系的。</strong></p>\n<h5 id=\"未来计算机模型\"><a href=\"#未来计算机模型\" class=\"headerlink\" title=\"未来计算机模型\"></a>未来计算机模型</h5><p>现代计算机自问世以来已历经50余年的历史，但计算机所遵循的基本结构形式始终是冯·诺依曼机结构。它的基本结构特征是“<strong>共享数据和串行执行</strong>”的计算机模型。  按照这种结构，程序和数据放在共享存储器内，CPU取出指令和数据进行相应的计算，因此CPU与共享存储器间的信息通路成为影响系统性能的“瓶颈”，芯片性能提升速度远高于存储性能的提升速度。多年来在并行计算机结构及处理的研究已经取得了很多成果，如阵列机、流水机、向量机等，使计算速度有了很大提高，但就本质上仍无法克服冯·诺依曼机结构上的缺陷。</p>\n<p>1.目前 CPU 的处理速度和内存容量的成长速率要远大于两者之间的流量，将大量数值从内存搬入搬出的操作 占用了 CPU 大部分的执行时间，也造成了总线的瓶颈。</p>\n<p>2.程序指令的执行是串行的，由程序计数器控制，这样使得即使有关数据已经准备好，也必须遵循逐条执行指令序列，影响了系统运行的速度；</p>\n<p>3.存储器是线性编址，按顺序排列的地址访问，这是有利于存储和执行机器语言，适用于数值计算。但高级语言的存储采用的是一组有名字的变量，是按名字调用变量而非按地址访问，且高级语言中的每个操作对于任何数据类型都是通用的，不管采用何种数据结构，多维数组、二叉树还是图，最终在存储器上都必须转换成一维的线性存储模型进行存储。这些因素都导致了机器语言和高级语言之间存在很大的语义差距，这些语义差距之间的映射大部分都要由编译程序来完成，在很大程度上增加了编译程序的工作量。</p>\n<p>4.冯·诺依曼体系结构计算机是为<strong>逻辑和数值</strong>运算而诞生的，它以 CPU 为中心，I&#x2F;O 设备与存储器间的数据传送都要经过运算器，在<strong>数值处理</strong>方面已经达到很高的速度和精度，但对<strong>非数值</strong>数据的处理效率比较低，需要在体系结构方面有革命性突破。</p>\n<p>在非冯领域，包括近年来的出现的量子计算机，光子计算机，神经计算机（Neural computer）等，其中量子芯片已经面世，中国科大潘建伟团队构建起76个光量子的量子计算原型机“九章”，处理高斯玻色取样的速度比目前最快的超级计算机快一百万亿倍。如果量子计算机可以普及，计算机系统、计算机语言、软件体系，从业人员培养体系都会被推翻重来。</p>\n<h5 id=\"特定场景芯片\"><a href=\"#特定场景芯片\" class=\"headerlink\" title=\"特定场景芯片\"></a>特定场景芯片</h5><p>比如在人工智能芯片方面，谷歌开发了用于AI计算高性能硬件<strong>TPU</strong>，Intel推出了针对深度学习市场的众核CPU<strong>Knights Mill</strong>，英伟达推出了<strong>GPGPU</strong>，而且还有了<strong>DGX-1</strong>这样的产品；在互联网大规模核心推荐算法场景，百度推出的<strong>“百度昆仑1”</strong>已在百度搜索引擎、小度等业务中部署超过2万片；自动驾驶领域，特斯拉发布了用于自动驾驶深度学习和解决带宽瓶颈的<strong>D1</strong>芯片。  <img src=\"https://upload-images.jianshu.io/upload_images/15312191-623d3cda0454ca0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"> </p>\n<p>针对高并发、高性能和高效需求，阿里平头哥发布了为云而生<strong>倚天710</strong>，<strong>CIPU</strong>，阿里云飞天+CIPU体系的推出，针对性地解决了云资源的多个痛点。首先，该体系通过全硬件虚拟化和转发加速，将存储时延降至最低30us（PLX），IOPS高达300万，存储带宽可达200 Gbps，全面超越市面上所有云产品；同时，该体系还将数据中心内的基础带宽从100G升级至200G，VPC的PPS转发性能从2000万提升至4000万，网络时延从22us降低至16us，RDMA协议下更可低至5.5us。在计算能力方面，新体系实现了单容器虚拟化消耗减少50%，虚拟化容器启动速度快350%。主流通用计算场景下，<strong>Nginx</strong>性能提升了89%，<strong>Redis</strong>性能提升了68%、<strong>MySQL</strong>提升了60%。</p>\n<p>该领域的四大国际顶级会议: <strong>ISCA(偏芯片领域), HPCA, MICRO, ASPLOS</strong>。</p>\n<p>ps: 对于体系结构领域的应届毕业生来说，市场上有大致上三种工作可以选，一种是去做金融，高频交易之类，薪水很高；另一种是去做机器学习，利用体系结构领域的知识和技能去做机器学习应用的调优，也是薪水很高；比较符合体系结构传统的工作，例如去传统的芯片设计公司做芯片。</p>\n<p>在半导体集成电路领域，按照中国当前的国情，这个产业将迎来爆发阶段。据报道，在过去的四个季度，全球20个增速最快芯片公司，19个来自中国。</p>\n<p>比如前一段时间看到一直关注的频道老石谈芯的博主<strong>石侃</strong>(伦敦帝国理工学院电子工程系博士、高级 FPGA 研发工程师)宣布加入国内某芯片大厂。相信随着更多尖端人才的回流，国家战略倾斜，中国的计算机技术会越来越强大。</p>\n<h4 id=\"1-3-嵌入式实时计算机\"><a href=\"#1-3-嵌入式实时计算机\" class=\"headerlink\" title=\"1.3 嵌入式实时计算机\"></a>1.3 嵌入式实时计算机</h4><p>主要研究嵌入式的，希望未来的一天计算机可以植入人的大脑，微型计算机像手机一样进去大众生活中，就像科幻片里，召之即来挥之即去。</p>\n<h4 id=\"1-4-Computer-Networks\"><a href=\"#1-4-Computer-Networks\" class=\"headerlink\" title=\"1.4 Computer Networks\"></a>1.4 Computer Networks</h4><p>Networking甚至包括Telecommunication。这个范围可以说是非常的大。网络应用、网络协议、网络通信、网络理论、网络安全、加密解密、路由算法、甚至编解码都是需要学习的学科。</p>\n<h5 id=\"1-5-Mobile-computing\"><a href=\"#1-5-Mobile-computing\" class=\"headerlink\" title=\"1.5 Mobile computing\"></a>1.5 Mobile computing</h5><p>移动计算是随着移动通信、互联网、数据库、分布式计算等技术的发展而兴起的新技术。移动计算技术将使计算机或其它信息智能终端设备在无线环境下实现数据传输及资源共享。它的作用是将有用、准确、及时的信息提供给任何时间、任何地点的任何客户。这将极大地改变人们的生活方式和工作方式。</p>\n<h4 id=\"1-6-计算机理论\"><a href=\"#1-6-计算机理论\" class=\"headerlink\" title=\"1.6 计算机理论\"></a>1.6 计算机理论</h4><p>计算机理论涵盖的领域十分广泛，包括算法和数据结构、计算复杂性、密码学、计算几何、组合学、随机与去随机化、算法博弈论和量子计算等。</p>\n<p>计算机理论科学是完全偏向理论的学科，研究的不只是算法，更加重要的是算法的有效性和可行性。</p>\n<p>理论计算机科学领域有两大顶会，一个是ACM（美国计算机学会）的STOC，另外一个是IEEE（国际电气和电子工程师协会）的FOCS。</p>\n<h5 id=\"1-6-1-Algorithms-amp-complexity\"><a href=\"#1-6-1-Algorithms-amp-complexity\" class=\"headerlink\" title=\"1.6.1 Algorithms &amp; complexity\"></a>1.6.1 Algorithms &amp; complexity</h5><p>计算机领域的算法的创新改进，比如华为的俄罗斯小伙，对数学问题的突破，使得华为基站大幅度领先。  最近看了一篇文章，某个团队在最大流问题利用这个问题，算法获突破性进展。</p>\n<h5 id=\"1-6-2-Cryptography\"><a href=\"#1-6-2-Cryptography\" class=\"headerlink\" title=\"1.6.2 Cryptography\"></a>1.6.2 Cryptography</h5><p>密码学是研究编制密码和破译密码的技术科学。研究密码变化的客观规律，应用于编制密码以保守通信秘密的，称为编码学；应用于破译密码以获取通信情报的，称为破译学，总称密码学。</p>\n<p>举个：md5加密相信大家都听过，用过。发明者是<a href=\"https://en.wikipedia.org/wiki/Ronald_Rivest\" title=\"Ronald Rivest\">Ronald Rivest</a>教授(耶鲁大学数学专业，斯坦福大学计算机科学ph.d)，他有多项发明，比如md6，<a href=\"https://en.wikipedia.org/wiki/RSA_(algorithm)\">RSA</a> ，此外还著有书籍《Introduction to Algorithms》，2002年因RSA加密方案，获得年度图灵奖。</p>\n<h3 id=\"2-Computer-Engineering\"><a href=\"#2-Computer-Engineering\" class=\"headerlink\" title=\"2. Computer Engineering\"></a>2. Computer Engineering</h3><p>软件工程&#x2F;系统软件&#x2F;程序设计语言。  研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。它涉及程序 设计语言、数据库、软件开发工具、系统平台、标准、设计模式等方面。<br>典型的软件有电子邮件、嵌入式系统、人机界面、办公套件、<strong>操作系统</strong>、<strong>编译器</strong>、<strong>数据库</strong>等。这个专业比较灵活，可以说是为程序员服务的程序员，是个人比较感兴趣的方向。</p>\n<h3 id=\"3-Applications\"><a href=\"#3-Applications\" class=\"headerlink\" title=\"3.Applications\"></a>3.Applications</h3><h4 id=\"3-1-AI\"><a href=\"#3-1-AI\" class=\"headerlink\" title=\"3.1 AI\"></a>3.1 AI</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-924211e3319856b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"> </p>\n<h5 id=\"AI解放生产力\"><a href=\"#AI解放生产力\" class=\"headerlink\" title=\"AI解放生产力\"></a>AI解放生产力</h5><p>随着计算机硬件性能的巨大提升，曾经沉寂一时的AI卷土重来。Ai大幅度提高生产力，取代人类工作，如果你的工作符合以下特征，你的工作被机器人取代的概率非常大：大量的重复性劳动，每天上班无需过脑，经由训练即可掌握的技能，工作空间狭小，坐在格子间里，不闻天下事。拜人工智能所赐，未来肯定会有人类从事的工作会被消灭。</p>\n<p>AI细分为机器学习和数据挖掘，人工智能，计算机视觉(感知)，自然语言处理，网络信息收集。</p>\n<p>Ai涉及到的具体场景包括，智能机器人，战争AI，智慧医疗，自动驾驶，语音识别。在物流行业中，无人货仓，智能分拣系统，客服系统也都已经充满了AI的身影。</p>\n<h5 id=\"AI的缺陷\"><a href=\"#AI的缺陷\" class=\"headerlink\" title=\"AI的缺陷\"></a>AI的缺陷</h5><p><strong>1.复杂性问题</strong>  很遗憾，截至目前，人工智能(AI)基本没有带来颠覆性的产业价值。原因也很简单，AI目前不具备处理世界“<strong>复杂性</strong>”的能力。如何判断AI+是否可以为一个产业带来颠覆性影响与价值，关键在于AI能否处理这个产业所在供给需求的复杂性。</p>\n<p>复杂性是系统科学发展到当前阶段，人类对系统属性的本质认识。从对自然现象的解释，到对生物进化的理解，再到对社会领域人造工程系统的构建，以及对经济发展的管理，人们开始意识到再这些探索活动背后都面临着相同的敌人，那就是“复杂性”。 现在全球对复杂性没有一致的定义，但对其属性倒是有基本统一的认知：<strong>非线性、混沌、涌现性、自组织、自适应性。</strong></p>\n<p>除此以外，复杂性还有3个层次：<strong>自组织、自适应和决策博弈</strong>。第一层次是自组织，指无机系统演化遵从自然规则，第二层次是指生物系统演化遵循目的导向的自适应性，而最高层次是人类处理事情时的决策博弈过程。因此所谓复杂性，可以理解成无机世界的自组织、有机世界的自适应以及人类的心理决策博弈。</p>\n<p>每一个产业都有其自身的自组织、自适应和决策博弈，AI+必须直面这个复杂性，才能创造增量价值。以肿瘤治疗为例，AI可以帮助人类克服肿瘤吗？那么AI首先就要直面<strong>肿瘤的复杂性</strong>，！AI必须理解生命是如何在内在机制的驱动下，如何自行从简单向复杂、从粗糙向细致方向发展。她必须理解生命系统如何对外界环境干扰或内部变化做出自我适应。她必须考虑肿瘤自身与人免疫系统的博弈，理解肿瘤和人免疫系统的相互博弈。</p>\n<p>以上述标准看，在多个行业，AI+仅仅解决了“点”的问题，而没有触及系统复杂性，更谈不上解决复杂性问题，自然无法创造增量价值，颠覆传统模式。在未来，谁先掌握解决复杂性的AI，谁才能真正运用AI，为产业赋能。  <strong>2.算力问题</strong>  传统计算机架构导致的性能问题，无法满足当前算力的需要。  虽然近些年基础算力、智能算力和超算算力都有很大程度的增长，未来5年全球的增速甚至超过50%，但与日益复杂的算法模型和快速增长的现实需求而言，仍然存在较大的缺口。同时，存算一体架构、量子计算、光子计算和类脑计算芯片尚处于实验室的研发阶段，离大规模商业化还有较长的时间，无法以技术革命的方式实现跨越式发展。虽然，诸如商汤科技、华为等头部公司采取了建立人工智能计算中心（AIDC）的方式，来满足未来智能计算需求的快速增长；我国神威、天河、曙光三台E级超算系统的研制工作也在逐步推进，很多国内的硬件公司着手计算机硬件的国产化替代。但从短期来看，算力将会是一个制约人工智能技术发展的现实困难。</p>\n<p>比如无人驾驶至今无法真正投入使用，很大大神从工业界重返学术界的现象很大，比如离开谷歌的李飞飞。AI浪潮已经来袭了3次，海水退去，不知道能否游上岸，未来AI能走多远，仍是未知数。</p>\n<p><strong>顶会</strong>：AI顶会最为熟知的人工智能领域最核心的四大顶会AAAI、IJCAI、ICML和NIPS，以及作为计算机视觉和自然语言为代表的CVPR和ACL这两大学术会议，也涌现了许多“后起之秀”，比如仅创立六年却有深度学习顶会“无冕之王”之称的ICLR，还有创办于1996年的大有赶超ACL之势的自然语言处理领域顶会EMNLP，这些“新星会议”的崛起，使得AI领域的会议呈现出亮点纷呈、多面开花的局面。</p>\n<h4 id=\"3-2-生物医疗\"><a href=\"#3-2-生物医疗\" class=\"headerlink\" title=\"3.2 生物医疗\"></a>3.2 生物医疗</h4><p>比如计算机在医疗中的应用，Ai诊病，通过提取病人特征，快速诊断，缩短医生诊疗时间。提前预测病人病情，指定医疗方案，AI筛选药物，制药，医疗报告生成。使用人机接口，通过脑电波控制机械驱体等。</p>\n<p>目前AI在医疗领域得到广泛的应用：例如Abundy的癌症诊疗系统，在2分钟可以检测完130张癌症片子，而一个经验丰富的医生2分钟只能看一个。</p>\n<p>广州祈福医院有一个“沃森诊室”，机器人沃森可以只用10秒就能阅读3469本医学专著和10余万份临床报告。医生只需在机器上录入患者相关信息，短短几十秒内一份70页至100页的治疗报告就会生成。虽然目前AI只能充当医生的助手，两者相结合，给患者提供最大的保障，然而人工智能机器人将会逐步取代那些普通医生。</p>\n<h4 id=\"3-3-robot\"><a href=\"#3-3-robot\" class=\"headerlink\" title=\"3.3 robot\"></a>3.3 robot</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-f4b808c16db78ee7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>  机器人研究方面比较广，目前美国是该领域的领跑者，比如战斗机器人，包括无人机，比较常见的任务包括侦察，排雷等，如美国波士顿公司的BigDog和阿特拉斯，部分型号的机器人装备了机枪等攻击性武器。Big Dog还可以帮助美军承担大重量物品的长途搬运工作，能够克服各种路面的异常情况，可以说是现代版的”木牛流马”，可能是诸葛亮提供的思路🤣。</p>\n<p>工业机器人，比如汽车生产组装流水线，无需人工干预，各种机器人在指令下，协同完成汽车各个部位的组装。甚至无人工厂，比如小米手机工厂，其在世界智能大会中展示的宣传片显示，未来该工厂将24小时熄灯生产，无人干预，甚至一秒钟就能生产一部手机。</p>\n<p>家庭护理机器人，就像保姆一样，完成餐桌碗碟的摆放，自动挑选放入洗碗机，感觉这个可以入手一台啊。</p>\n<p>有些机器人可以代替人工的高危作业，比如焊接机器人，海底探险机器人，维修机器人，等等。</p>\n<p>机器人在未来会取代很多职业，比如快递小哥，阿里分拣机器人“小黄人”三个小时的工作量相当于100名工人一天的工作量。</p>\n<h4 id=\"3-4-经济和计算\"><a href=\"#3-4-经济和计算\" class=\"headerlink\" title=\"3.4 经济和计算\"></a>3.4 经济和计算</h4><p>投资相关，比如利用计算机预测股市，制定投资计划，数据分析等。</p>\n<p>一旦看好一家公司，优秀的金融分析师会提前分析迈入，帮助机构调整投资并赚取巨额的收益。随着大数据时代的来临，近年来，一种观点十分流行：量化分析师即将完全取代主观分析师，机器即将完全取代人。这是因为人类金融分析师无法跟AI抗衡了，人工智能可以深度学习，读取历史数据，预测未来市场的走向。曾有论文指出，未来20年，美国47%的工作岗位将由于自动化技术而处于“高度危险”之中，其中54%的工作岗位来自金融行业。这并不奇怪，毕竟银行和金融行业的基础就是信息处理。拥有超强速算速度的人工智能，可以更加高效帮助企业进行投资，比起传统的金融分析师更有效率。</p>\n<h4 id=\"3-5-Human-computer-interaction\"><a href=\"#3-5-Human-computer-interaction\" class=\"headerlink\" title=\"3.5 Human-computer interaction\"></a>3.5 Human-computer interaction</h4><p>这是一门交叉学科，涵盖艺术，设计，计算机，心理学，社会学等等学科。主要是通过过计算机输入、输出设备，以有效的方式实现人与计算机交流。</p>\n<p>人机交互这个专业作为产品和用户之间的桥梁，已成为行业发展不可或缺的重要一环。无论是手机UI，汽车操作界面设计，用户体验，游戏设计又或是VR产业都需要这个专业的人才。</p>\n<h4 id=\"3-6-Computer-graphics\"><a href=\"#3-6-Computer-graphics\" class=\"headerlink\" title=\"3.6 Computer graphics\"></a>3.6 Computer graphics</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6369718bc5ccfbfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"> </p>\n<p>计算机图形学(Computer Graphics，简称CG)是一种使用数学算法将二维或三维图形转化为计算机显示器的栅格形式的科学。</p>\n<p>简单地说，计算机图形学的主要研究内容就是研究如何在计算机中表示图形、以及利用计算机进行图形的计算、处理和显示的相关原理与算法。</p>\n<p>比如元宇宙概念，AR眼镜已经可以逼真的在你眼前投射大屏，声临其境的感受3d环境，这种在科幻电影中才能出现的场景已经成为现实。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-507b7603dd2b9c7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>  ps: 以上只是几个大类分类，计算机的蓬勃发展，对人类社会产生巨大冲击，计算机未来一百年会发展成什么样，应该是一件很有趣的事。</p>\n<h2 id=\"Engineer-VS-cs-phd\"><a href=\"#Engineer-VS-cs-phd\" class=\"headerlink\" title=\"Engineer VS cs phd\"></a>Engineer VS cs phd</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-65d3942dd445f8c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"> </p>\n<h3 id=\"学术界VS工业界\"><a href=\"#学术界VS工业界\" class=\"headerlink\" title=\"学术界VS工业界\"></a>学术界VS工业界</h3><p>phd基本上工作流程是做研究，找方向，做实验，发paper，不需要你每天没月都有产出，因为科研是一个long term的工作，自由度很高。</p>\n<p>一般程序员日常操作是需要写各种report，周报、月报、日报。基本工作是发现问题，百度一下，复制，整合，模仿，技术解决方案基本是面向API开发❓。</p>\n<p>是不是有时候突然会感觉自己做的事很无聊（没错说的就是我!!🥲 )，复制粘贴本身就很无聊；应用层的这种工作对一些人来说无法产生有效刺激，而且更可怕的是，长期在这种模式下工作，生产力会一直停留在某个层次，无法提高，准确来说，应该是 3-6 个年后，他们的生产力集体达到了一个“平台期”，再也无法增长。</p>\n<p>无聊的另一个来源是，总觉得自己的工作很死板总是一个老套路，没有什么挑战性，没有那种intellectual challenge在里面。公司工作，有时候会碰到一些挑战，比如说原来一个星期写完的代码，要让你两天写完，但是这样的挑战并不是intellectual challenge。</p>\n<h3 id=\"转换思维\"><a href=\"#转换思维\" class=\"headerlink\" title=\"转换思维\"></a>转换思维</h3><p>工业界里，我们应该更多突破固定思维，少一些follow up，多一些new idea，一些问题除了现有的解决方案，能不能想出别的方法呢，即使不是更好的解法，具体问题要敢于质疑权威，走出自己的路。</p>\n<p>一个任务完成后，我们的认知、工程化能力、知识圈层，有没有向外围扩展。宇宙之大，知识世界之辽阔，穷极一生也不可能全部学完。与其被动接受，不如换种学习方式，去创造，融会贯通，培养自己的创新能力。</p>\n<p>工程师是一个非常需要创造力的工作岗位🤔。如果只局限在自己的岗位设定而没有更多思考，机械式完成任务的结果就是只能自嘲为“新生代的代码农民工”。只有把创造力、架构能力和学习能力都融入开发过程，才能感觉到自己的工作发挥出了工程师的真正价值，从而体验到研发的乐趣。</p>\n<h3 id=\"Figure-Out-Your-Life\"><a href=\"#Figure-Out-Your-Life\" class=\"headerlink\" title=\"Figure Out Your Life\"></a>Figure Out Your Life</h3><p>大多数人都读不了硕士博士，没有机会做学术，但是这种作业方式特别值得我们学习。技术就是创新，不是学习API和各种知识，大多数人都不是搞技术的，而是软件操作技工、技术搬运工，这是一个痛苦又不得不接受的现实。 很多人入行的时候希望搞技术，去改变一些东西，最后确成了一个一年经验用N年，面向API开发，停留在倦怠期，迷失在自我循环世界的老油条。</p>\n<p>选择学术界还是工业界，取决你的性格，如果你天生不喜欢被约束，喜欢搞自己的事情，那么科研可能更适合你。</p>\n<p>有可能我们不知道自己做什么，慢慢找到自己想做的事，figure out what you want。  只要你有兴趣想学总归是好的。我只想说人生可能都会走点弯路，都是在不断寻找正确的路。</p>\n<h3 id=\"对于读博士的一些误解\"><a href=\"#对于读博士的一些误解\" class=\"headerlink\" title=\"对于读博士的一些误解\"></a>对于读博士的一些误解</h3><p><strong>1.“读博和科研只适合绝顶聪明或成绩非常好的人。”</strong></p>\n<p>这个看法是完全错误的，如同“演员只有非常有表演天赋的人才能当”一样是个伪命题。你如果认为大家心目中的学术大牛都是绝顶聪明的人，就好比说经常出现在新浪首页或者微博热搜的那几位明星的演技都非常好一样。</p>\n<p>在博士群体，做出顶级科研的并不都是同辈中超级聪明的人，也不一定是平均成绩点数(Grade Point Average, GPA)最高的人，更不一定是参加ACM编程竞赛的高手们，而恰恰是那些有耐心有毅力坚持去钻研的人。</p>\n<p>很多博士生只要选好导师，选好研究方向，肯花费时间，都能做出顶尖的研究。有很多在海外学术圈颇有建树的学者当年的学习成绩并不好。 </p>\n<p> <strong>2.“科研穷三代，读博毁一生。”</strong></p>\n<p>这句话在其他领域或许是对的，但在计算机领域就是错的。在计算机领域，通过读博挣钱的大有人在！计算机学科的特性就是科研与产业结合得非常紧密。尤其是最前沿的科研，对产业有很大的推动作用，并产生经济利益。</p>\n<p>一个典型的例子就是谷歌的创始人佩奇和布林都是博士生，也出自博士家庭。虽然他们没读完博士就去创业了（布林自称现在在职读博士），但是如果他们没有读博，那将很难开创出谷歌的核心技术。</p>\n<p>目前业界大数据系统的宠儿Spark，就是由加州大学伯克利分校的教授和博士们开发的。首席开发者马泰扎·哈里亚(MateiZaharia)即使有挣大钱的机会，也没有完全放弃麻省理工学院的教职。</p>\n<p>在网络技术领域，目前业界关注的核心“软件定义网络”也是教授和博士们在大学里开发出来的。谷歌、威睿(VMware)、 Databricks (Spark)、Nicira (OpenFlow)以及无数顶尖技术公司雇佣了数以千计的计算机专业毕业的博士，因为博士通常比其他雇员更接近核心技术。</p>\n<p>如果你想实现自己的技术梦想并挣大钱，读博士是一个很好的选择。“读博就得走清贫的人生道路”是没有任何道理的。<br> <strong>3.“科研做的东西大部分都是废纸，对实际一点帮助都没有。”</strong></p>\n<p>这种观点在计算机领域也是不正确的。计算机科学并不是屠龙之技。今天几十亿人都离不开的计算机网络的原型就是从加州大学洛杉矶分校发展起来的，莱昂纳多·克莱洛克(LeonardKleinrock)教授在阿帕网(ARPANET)项目中开发了互联网的雏形，并在1969年发送了互联网的第一个数据包。</p>\n<p>20世纪70年代，美国工程院院士林善成(Simon Lam)教授在他的博士论文中分析了解决链路层冲突的方法，最后被以太网采用，融入到我们的生活中。</p>\n<p>林教授在90年代开发了安全套接层(SSL)的第一个实现系统，如今安全套接层被运用到每台电脑和手机的浏览器中。不仅是计算机网络，几乎每个计算机领域的技术都被科研引领着。</p>\n<p>按照加州大学伯克利分校博士后研究员钱学海博士发表在《中国计算机学会通讯》(CCCF)上的文章1所说，计算机体系结构这些年的发展，都与该领域四大学术会议上的论文密不可分。</p>\n<p>另一方面，虽然很多论文在现实世界不一定能体现直接价值，但是在写文章的过程中，你能学到很多东西，比如提出问题、解决问题、语言表达的能力，这些都让人受益无穷。</p>\n<p>当然读博士不是一件轻松的事，需要超越常人的耐力，韧性和心理素质，需要你真心的热爱你的专业，需要踏实的学习方式，不投机，不取巧，能扛住压力，不被周围环境影响，坚守自己的节奏孤独前行，板凳一坐十年冷，暗香始自苦寒来。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/60308234\">我为什么鼓励你读计算机专业博士</a><br><a href=\"https://zhuanlan.zhihu.com/p/372884253\">读博，你真的想好了吗？</a><br><a href=\"https://blog.csdn.net/ytomc/article/details/76387456\">4年计算机博士读下来的一些感触</a><br><a href=\"https://www.163.com/dy/article/HAN86PBN0517HIAS.html\">一中国研究生被美国教授开除，教授坦言：我就不该录取你！</a><br><a href=\"https://www.jiqizhixin.com/articles/2022-06-14-9\">计算机基础问题，最大流问题获突破性进展：新算法「快得离谱」</a><br><a href=\"https://www.businesstimes.com.sg/global-enterprise/us-sanctions-helped-china-supercharge-its-chipmaking-industry\">US sanctions helped China supercharge its chipmaking industry</a><br><a href=\"https://www.youtube.com/watch?v=SzJ46YA_RaA\">The Map of Computer Science</a>  <a href=\"https://ccf.atom.im/\">中国计算机学会推荐国际学术会议和期刊目录</a><br><a href=\"https://www.infoq.cn/article/2015/06/alan-turing-neumann\">冯•诺依曼计算机将渐行渐远?</a></p>\n</blockquote>\n"},{"title":"📣📣-如果让我写一本《软件工程》.html","date":"2022-10-15T16:00:00.000Z","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2022-10-16-📣📣 如果让我写一本《软件工程》</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2022-10-16-📣📣 如果让我写一本《软件工程》</h1>\n        <div class=\"show-content\">\n          <blockquote><p>方法论的书，最好结合具体示例说明，不要动不动就上升到哲学。最好不要读那些科学家和哲学家写的工程学的书，食之无味，弃之可惜。</p></blockquote><p><br></p><h4>1.工程学是什么，历史、未来、本质、方法论。<br>\n</h4><h4>2.软件工程来源、目的、未来。</h4><h4>3.软件工程师，工程流程，工具，具备的科学知识</h4><h4>4.软件工程面临的问题</h4>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n","source":"_posts/📣📣-如果让我写一本《软件工程》.html","raw":"---\ntitle: \"📣📣-如果让我写一本《软件工程》.html\"\ndate: 2022-10-16\ntags: \n- 开发日常\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2022-10-16-📣📣 如果让我写一本《软件工程》</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2022-10-16-📣📣 如果让我写一本《软件工程》</h1>\n        <div class=\"show-content\">\n          <blockquote><p>方法论的书，最好结合具体示例说明，不要动不动就上升到哲学。最好不要读那些科学家和哲学家写的工程学的书，食之无味，弃之可惜。</p></blockquote><p><br></p><h4>1.工程学是什么，历史、未来、本质、方法论。<br>\n</h4><h4>2.软件工程来源、目的、未来。</h4><h4>3.软件工程师，工程流程，工具，具备的科学知识</h4><h4>4.软件工程面临的问题</h4>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n","slug":"📣📣-如果让我写一本《软件工程》","published":1,"updated":"2024-05-16T07:39:11.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pe006g2omv4qax2nkp","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2022-10-16-📣📣 如果让我写一本《软件工程》</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2022-10-16-📣📣 如果让我写一本《软件工程》</h1>\n        <div class=\"show-content\">\n          <blockquote><p>方法论的书，最好结合具体示例说明，不要动不动就上升到哲学。最好不要读那些科学家和哲学家写的工程学的书，食之无味，弃之可惜。</p></blockquote><p><br></p><h4>1.工程学是什么，历史、未来、本质、方法论。<br>\n</h4><h4>2.软件工程来源、目的、未来。</h4><h4>3.软件工程师，工程流程，工具，具备的科学知识</h4><h4>4.软件工程面临的问题</h4>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>2022-10-16-📣📣 如果让我写一本《软件工程》</title>\n    <style type=\"text/css\" media=\"all\">\n      body {\n        margin: 0;\n        font-family: \"Helvetica Neue\", Helvetica, Arial, \"Hiragino Sans GB\", sans-serif;\n        font-size: 14px;\n        line-height: 20px;\n        color: #777;\n        background-color: white;\n      }\n      .container {\n        width: 700px;\n        margin-right: auto;\n        margin-left: auto;\n      }\n\n      .post {\n        font-family: Georgia, \"Times New Roman\", Times, \"SimSun\", serif;\n        position: relative;\n        padding: 70px;\n        bottom: 0;\n        overflow-y: auto;\n        font-size: 16px;\n        font-weight: normal;\n        line-height: 25px;\n        color: #515151;\n      }\n\n      .post h1{\n        font-size: 50px;\n        font-weight: 500;\n        line-height: 60px;\n        margin-bottom: 40px;\n        color: inherit;\n      }\n\n      .post p {\n        margin: 0 0 35px 0;\n      }\n\n      .post img {\n        border: 1px solid #D9D9D9;\n      }\n\n      .post a {\n        color: #28A1C5;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"post\">\n        <h1 class=\"title\">2022-10-16-📣📣 如果让我写一本《软件工程》</h1>\n        <div class=\"show-content\">\n          <blockquote><p>方法论的书，最好结合具体示例说明，不要动不动就上升到哲学。最好不要读那些科学家和哲学家写的工程学的书，食之无味，弃之可惜。</p></blockquote><p><br></p><h4>1.工程学是什么，历史、未来、本质、方法论。<br>\n</h4><h4>2.软件工程来源、目的、未来。</h4><h4>3.软件工程师，工程流程，工具，具备的科学知识</h4><h4>4.软件工程面临的问题</h4>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n"},{"title":"📣📣编程艺术和编程的本质","date":"2021-09-07T16:00:00.000Z","_content":"![B-2幽灵战略轰炸机](https://upload-images.jianshu.io/upload_images/15312191-58cabdf927ec51ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![传统家具](https://upload-images.jianshu.io/upload_images/15312191-06955f6f9bb39761.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 编程艺术\n最近看老外写的代码，感觉他们写代码就跟搞艺术一样，就像珍珠一样晶莹剔透，甚至注释比代码都多。\n\n国外在产品中注入艺术气息的不再少数\n\n法国大餐，秀色可餐。\n日本料理，精致温婉。\n苹果产品，兼顾艺术品味，简约大气又耐用。\n美国隐身战斗机，外观霸气，操作简约。\n欧洲、日本的汽车流线、颜色都很美，功能人性化。\n古罗马帝国作为横跨欧洲、非洲与亚洲的强大帝国，格外强调其建筑的威严，以给人不可侵犯的感觉。\n![法国扇贝](https://upload-images.jianshu.io/upload_images/15312191-7b2d3c865c432d8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![古罗马建筑](https://upload-images.jianshu.io/upload_images/15312191-01b2900b9f9f1790.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当制造业开始讲求审美训练，艺术带给它什么硬核好处？\n学习艺术不但可以把工业产品做得更人性化，还可以把一个行业带到新的高度，\n国外好的工业产品在视觉上都会给人很大的冲突感，是美学的一部分。\n很多行业粗制滥造，只追求做出来，不会精益求精，产品也不会赏心悦目，没有体验感\n\n「知乎」上有段评论：\n老美的代码看起来是一件艺术品，他们会在代码文件头、函数头里写上很漂亮工整的注释，然后项目有一个庞大复杂的架构，各种设计模式、框架结合使用，好像这些东西用得越多越流逼一样。\n\n俄毛子的代码那简直就是天书，一股浓烈的geek气味伴随着灌满伏特加后眩晕的混沌感扑面而来。变量名写长一点清晰一点会死吗？plmm不是漂亮美眉，看了半天代码连猜带懵才知道是Platform Link Maintainess Manager。\n\n印度人写的代码就像一条工业流水线出来的产品一样，每个都很规矩，但也很死板。一个环形消息缓存的东西用竟然数组来实现，然后在下标计算时倒来倒去。尼玛用个链表来实现会死是不。\n\n中国人写的代码还是比较实用的，但如果不加控制就会犯低级错误。你见过为了查找一个用户id，先用select *从数据库把所有内容都捞出来，然后用个大大的for循环来查找的代码吗？我看了当时就泪奔无语了。\n\n**崇洋媚外不可取，夏之虫和井之蛙也不能做。**\n**希望我们能突破自己的认知，站在巨人的肩旁上，让自己不断强大。**\n\n#### 编程的本质是什么？\n![](https://upload-images.jianshu.io/upload_images/15312191-6d216b95a83961e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n《教父》里说过：花半分钟就看透事物本质的人，和花一辈子都看不清本质的人，自然是不一样的人生。\n\n\n\n所以我们尝试思考下编程的本质，或许可以让我们走的更远。\n\n\n\n对于编程这件事，编写程序，就字面意思来讲，事情的结果是程序。\n\n\n\n##### 程序是啥意思呢?\n----\n\n\n\n广义上的程序是指，一系列的动作以相同的方式执行，在相同的环境下，总能得出相同的结果。\n\n\n\n你比如开银行卡账户，你需要准备好材料，像身份证，去银行填表，核身，签字，最后拿到一张属于你的银行卡。\n\n\n\n换一个人也要走同样的程序，同样要备好材料，填表，核身，签字，同样要到银行办理，同样最后拿到了银行卡。\n\n\n\n你会发现，定义里面有三个相同，也就是程序最大的特点就是重复。\n\n\n\n只不过上边例子里的重复，是在银行这个地方发生的。每天做着相同程序的业务，只是不同的客户，不同的柜员。\n\n\n\n但开卡业务只能在银行办理，这就很受局限了。我得花费时间和体力，跑到银行，还得挑银行上班的时间。那有没有办法，我不去银行也能把银行卡开下来呢。\n**计算机**和**互联网**的出现，就解决了这个问题。\n\n要交的材料，要走的程序，要拿的卡，都不变，只是整个操作环境，从线下的银行，变成了线上的某个载体，可以是个 PC 端 Web 网站，也可以是个移动端 APP。\n\n线上就是指互联网，它能够让**信息的传递跨越空间**，而操作的载体，无论是 Web 网站 还是 APP，背后都是计算机程序。\n\n从前你要花一个小时坐公交去银行，如今足不出户点点手机就能办理业务。\n\n计算机上的这些程序从哪来的？\n\n就是**程序员编写的**。\n\n所以程序员要做的事就是，**把线下现实世界的事情，编到线上计算机里来做**。\n\n这有点像电影编剧的角色，都要取材于现实。\n\n不同的是，电影编剧会**充分虚构**，保证艺术源于生活又高于生活，产出物是一两个小时的影像。\n\n而程序员要**充分还原现实**，保证程序符合正常逻辑不会错乱，产出物是电子设备上的应用程序。\n\n那编程的目的就很清晰了，用计算机来解决现实世界的问题。\n\n无论是现实世界还是计算机，我们做一件事，都需要有三个核心要素：输入（Input）、处理（Process）和输出（Output），简称 **IPO**。\n\n编程就是把现实世界的问题，映射到计算机的 IPO 中。\n\n那怎么把现实世界的问题映射到计算机的 IPO 中呢？\n\n我理解要通过**模型**。\n\n##### 什么是模型？\n---\n模型是指用一个较为**简单的东西来代表另一个东西**。\n\n如果要简单化一个东西，那就需要对这个东西进行**分析**，然后**抽象**。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-9aa310b8c275aee5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**抽象的维度，决定着最后软件的形式**。\n\n比如 form-render抽象层次，可以是拖拽式，可以config 配置， 可以是表格配置\n\n如果对计算机本身进行抽象，那软件就会以机器代码或汇编语言的形式呈现。\n\n如果对计算处理逻辑进行抽象，那软件就会以非结构化的高级语言呈现，比如 Basic。\n\n如果对问题领域过程进行抽象，那软件就会以结构化的高级语言呈现，比如 C。\n\n如果对问题领域元素进行抽象，那软件就会以面向对象程序设计语言呈现，比如 Java。\n\n也就是说，**编程语言是现实世界到计算机世界抽象的机制**。\n\n##### 总结: 枚举 => 归纳 => 抽象\n>编程的本质就是可计算,可计算的基础就是建模\n建模可实现必须简化,简化的方式就是抽象\n简化的前提就是限定范围。\n然后一切编程成为了限定范围内抽象模型的数学计算的计算机表达\n\n\n\n> 所谓的编程，就是使用**某种语言**，在**某个维度**，把**现实世界抽象成简单的模型**，然后**设计**和**实现**出可运行的**计算机软件**，也就是**完整的 IPO**。\n","source":"_posts/📣📣编程艺术和编程的本质.md","raw":"---\ntitle: \"📣📣编程艺术和编程的本质\"\ndate: 2021-09-08\ntags: \n- 开发日常\n---\n![B-2幽灵战略轰炸机](https://upload-images.jianshu.io/upload_images/15312191-58cabdf927ec51ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![传统家具](https://upload-images.jianshu.io/upload_images/15312191-06955f6f9bb39761.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 编程艺术\n最近看老外写的代码，感觉他们写代码就跟搞艺术一样，就像珍珠一样晶莹剔透，甚至注释比代码都多。\n\n国外在产品中注入艺术气息的不再少数\n\n法国大餐，秀色可餐。\n日本料理，精致温婉。\n苹果产品，兼顾艺术品味，简约大气又耐用。\n美国隐身战斗机，外观霸气，操作简约。\n欧洲、日本的汽车流线、颜色都很美，功能人性化。\n古罗马帝国作为横跨欧洲、非洲与亚洲的强大帝国，格外强调其建筑的威严，以给人不可侵犯的感觉。\n![法国扇贝](https://upload-images.jianshu.io/upload_images/15312191-7b2d3c865c432d8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![古罗马建筑](https://upload-images.jianshu.io/upload_images/15312191-01b2900b9f9f1790.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当制造业开始讲求审美训练，艺术带给它什么硬核好处？\n学习艺术不但可以把工业产品做得更人性化，还可以把一个行业带到新的高度，\n国外好的工业产品在视觉上都会给人很大的冲突感，是美学的一部分。\n很多行业粗制滥造，只追求做出来，不会精益求精，产品也不会赏心悦目，没有体验感\n\n「知乎」上有段评论：\n老美的代码看起来是一件艺术品，他们会在代码文件头、函数头里写上很漂亮工整的注释，然后项目有一个庞大复杂的架构，各种设计模式、框架结合使用，好像这些东西用得越多越流逼一样。\n\n俄毛子的代码那简直就是天书，一股浓烈的geek气味伴随着灌满伏特加后眩晕的混沌感扑面而来。变量名写长一点清晰一点会死吗？plmm不是漂亮美眉，看了半天代码连猜带懵才知道是Platform Link Maintainess Manager。\n\n印度人写的代码就像一条工业流水线出来的产品一样，每个都很规矩，但也很死板。一个环形消息缓存的东西用竟然数组来实现，然后在下标计算时倒来倒去。尼玛用个链表来实现会死是不。\n\n中国人写的代码还是比较实用的，但如果不加控制就会犯低级错误。你见过为了查找一个用户id，先用select *从数据库把所有内容都捞出来，然后用个大大的for循环来查找的代码吗？我看了当时就泪奔无语了。\n\n**崇洋媚外不可取，夏之虫和井之蛙也不能做。**\n**希望我们能突破自己的认知，站在巨人的肩旁上，让自己不断强大。**\n\n#### 编程的本质是什么？\n![](https://upload-images.jianshu.io/upload_images/15312191-6d216b95a83961e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n《教父》里说过：花半分钟就看透事物本质的人，和花一辈子都看不清本质的人，自然是不一样的人生。\n\n\n\n所以我们尝试思考下编程的本质，或许可以让我们走的更远。\n\n\n\n对于编程这件事，编写程序，就字面意思来讲，事情的结果是程序。\n\n\n\n##### 程序是啥意思呢?\n----\n\n\n\n广义上的程序是指，一系列的动作以相同的方式执行，在相同的环境下，总能得出相同的结果。\n\n\n\n你比如开银行卡账户，你需要准备好材料，像身份证，去银行填表，核身，签字，最后拿到一张属于你的银行卡。\n\n\n\n换一个人也要走同样的程序，同样要备好材料，填表，核身，签字，同样要到银行办理，同样最后拿到了银行卡。\n\n\n\n你会发现，定义里面有三个相同，也就是程序最大的特点就是重复。\n\n\n\n只不过上边例子里的重复，是在银行这个地方发生的。每天做着相同程序的业务，只是不同的客户，不同的柜员。\n\n\n\n但开卡业务只能在银行办理，这就很受局限了。我得花费时间和体力，跑到银行，还得挑银行上班的时间。那有没有办法，我不去银行也能把银行卡开下来呢。\n**计算机**和**互联网**的出现，就解决了这个问题。\n\n要交的材料，要走的程序，要拿的卡，都不变，只是整个操作环境，从线下的银行，变成了线上的某个载体，可以是个 PC 端 Web 网站，也可以是个移动端 APP。\n\n线上就是指互联网，它能够让**信息的传递跨越空间**，而操作的载体，无论是 Web 网站 还是 APP，背后都是计算机程序。\n\n从前你要花一个小时坐公交去银行，如今足不出户点点手机就能办理业务。\n\n计算机上的这些程序从哪来的？\n\n就是**程序员编写的**。\n\n所以程序员要做的事就是，**把线下现实世界的事情，编到线上计算机里来做**。\n\n这有点像电影编剧的角色，都要取材于现实。\n\n不同的是，电影编剧会**充分虚构**，保证艺术源于生活又高于生活，产出物是一两个小时的影像。\n\n而程序员要**充分还原现实**，保证程序符合正常逻辑不会错乱，产出物是电子设备上的应用程序。\n\n那编程的目的就很清晰了，用计算机来解决现实世界的问题。\n\n无论是现实世界还是计算机，我们做一件事，都需要有三个核心要素：输入（Input）、处理（Process）和输出（Output），简称 **IPO**。\n\n编程就是把现实世界的问题，映射到计算机的 IPO 中。\n\n那怎么把现实世界的问题映射到计算机的 IPO 中呢？\n\n我理解要通过**模型**。\n\n##### 什么是模型？\n---\n模型是指用一个较为**简单的东西来代表另一个东西**。\n\n如果要简单化一个东西，那就需要对这个东西进行**分析**，然后**抽象**。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-9aa310b8c275aee5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**抽象的维度，决定着最后软件的形式**。\n\n比如 form-render抽象层次，可以是拖拽式，可以config 配置， 可以是表格配置\n\n如果对计算机本身进行抽象，那软件就会以机器代码或汇编语言的形式呈现。\n\n如果对计算处理逻辑进行抽象，那软件就会以非结构化的高级语言呈现，比如 Basic。\n\n如果对问题领域过程进行抽象，那软件就会以结构化的高级语言呈现，比如 C。\n\n如果对问题领域元素进行抽象，那软件就会以面向对象程序设计语言呈现，比如 Java。\n\n也就是说，**编程语言是现实世界到计算机世界抽象的机制**。\n\n##### 总结: 枚举 => 归纳 => 抽象\n>编程的本质就是可计算,可计算的基础就是建模\n建模可实现必须简化,简化的方式就是抽象\n简化的前提就是限定范围。\n然后一切编程成为了限定范围内抽象模型的数学计算的计算机表达\n\n\n\n> 所谓的编程，就是使用**某种语言**，在**某个维度**，把**现实世界抽象成简单的模型**，然后**设计**和**实现**出可运行的**计算机软件**，也就是**完整的 IPO**。\n","slug":"📣📣编程艺术和编程的本质","published":1,"updated":"2024-05-16T07:39:11.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pf006i2omv6d9l8as8","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-58cabdf927ec51ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"B-2幽灵战略轰炸机\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-06955f6f9bb39761.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"传统家具\"></p>\n<h4 id=\"编程艺术\"><a href=\"#编程艺术\" class=\"headerlink\" title=\"编程艺术\"></a>编程艺术</h4><p>最近看老外写的代码，感觉他们写代码就跟搞艺术一样，就像珍珠一样晶莹剔透，甚至注释比代码都多。</p>\n<p>国外在产品中注入艺术气息的不再少数</p>\n<p>法国大餐，秀色可餐。<br>日本料理，精致温婉。<br>苹果产品，兼顾艺术品味，简约大气又耐用。<br>美国隐身战斗机，外观霸气，操作简约。<br>欧洲、日本的汽车流线、颜色都很美，功能人性化。<br>古罗马帝国作为横跨欧洲、非洲与亚洲的强大帝国，格外强调其建筑的威严，以给人不可侵犯的感觉。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7b2d3c865c432d8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"法国扇贝\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-01b2900b9f9f1790.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"古罗马建筑\"></p>\n<p>当制造业开始讲求审美训练，艺术带给它什么硬核好处？<br>学习艺术不但可以把工业产品做得更人性化，还可以把一个行业带到新的高度，<br>国外好的工业产品在视觉上都会给人很大的冲突感，是美学的一部分。<br>很多行业粗制滥造，只追求做出来，不会精益求精，产品也不会赏心悦目，没有体验感</p>\n<p>「知乎」上有段评论：<br>老美的代码看起来是一件艺术品，他们会在代码文件头、函数头里写上很漂亮工整的注释，然后项目有一个庞大复杂的架构，各种设计模式、框架结合使用，好像这些东西用得越多越流逼一样。</p>\n<p>俄毛子的代码那简直就是天书，一股浓烈的geek气味伴随着灌满伏特加后眩晕的混沌感扑面而来。变量名写长一点清晰一点会死吗？plmm不是漂亮美眉，看了半天代码连猜带懵才知道是Platform Link Maintainess Manager。</p>\n<p>印度人写的代码就像一条工业流水线出来的产品一样，每个都很规矩，但也很死板。一个环形消息缓存的东西用竟然数组来实现，然后在下标计算时倒来倒去。尼玛用个链表来实现会死是不。</p>\n<p>中国人写的代码还是比较实用的，但如果不加控制就会犯低级错误。你见过为了查找一个用户id，先用select *从数据库把所有内容都捞出来，然后用个大大的for循环来查找的代码吗？我看了当时就泪奔无语了。</p>\n<p><strong>崇洋媚外不可取，夏之虫和井之蛙也不能做。</strong><br><strong>希望我们能突破自己的认知，站在巨人的肩旁上，让自己不断强大。</strong></p>\n<h4 id=\"编程的本质是什么？\"><a href=\"#编程的本质是什么？\" class=\"headerlink\" title=\"编程的本质是什么？\"></a>编程的本质是什么？</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6d216b95a83961e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<hr>\n<p>《教父》里说过：花半分钟就看透事物本质的人，和花一辈子都看不清本质的人，自然是不一样的人生。</p>\n<p>所以我们尝试思考下编程的本质，或许可以让我们走的更远。</p>\n<p>对于编程这件事，编写程序，就字面意思来讲，事情的结果是程序。</p>\n<h5 id=\"程序是啥意思呢\"><a href=\"#程序是啥意思呢\" class=\"headerlink\" title=\"程序是啥意思呢?\"></a>程序是啥意思呢?</h5><hr>\n<p>广义上的程序是指，一系列的动作以相同的方式执行，在相同的环境下，总能得出相同的结果。</p>\n<p>你比如开银行卡账户，你需要准备好材料，像身份证，去银行填表，核身，签字，最后拿到一张属于你的银行卡。</p>\n<p>换一个人也要走同样的程序，同样要备好材料，填表，核身，签字，同样要到银行办理，同样最后拿到了银行卡。</p>\n<p>你会发现，定义里面有三个相同，也就是程序最大的特点就是重复。</p>\n<p>只不过上边例子里的重复，是在银行这个地方发生的。每天做着相同程序的业务，只是不同的客户，不同的柜员。</p>\n<p>但开卡业务只能在银行办理，这就很受局限了。我得花费时间和体力，跑到银行，还得挑银行上班的时间。那有没有办法，我不去银行也能把银行卡开下来呢。<br><strong>计算机</strong>和<strong>互联网</strong>的出现，就解决了这个问题。</p>\n<p>要交的材料，要走的程序，要拿的卡，都不变，只是整个操作环境，从线下的银行，变成了线上的某个载体，可以是个 PC 端 Web 网站，也可以是个移动端 APP。</p>\n<p>线上就是指互联网，它能够让<strong>信息的传递跨越空间</strong>，而操作的载体，无论是 Web 网站 还是 APP，背后都是计算机程序。</p>\n<p>从前你要花一个小时坐公交去银行，如今足不出户点点手机就能办理业务。</p>\n<p>计算机上的这些程序从哪来的？</p>\n<p>就是<strong>程序员编写的</strong>。</p>\n<p>所以程序员要做的事就是，<strong>把线下现实世界的事情，编到线上计算机里来做</strong>。</p>\n<p>这有点像电影编剧的角色，都要取材于现实。</p>\n<p>不同的是，电影编剧会<strong>充分虚构</strong>，保证艺术源于生活又高于生活，产出物是一两个小时的影像。</p>\n<p>而程序员要<strong>充分还原现实</strong>，保证程序符合正常逻辑不会错乱，产出物是电子设备上的应用程序。</p>\n<p>那编程的目的就很清晰了，用计算机来解决现实世界的问题。</p>\n<p>无论是现实世界还是计算机，我们做一件事，都需要有三个核心要素：输入（Input）、处理（Process）和输出（Output），简称 <strong>IPO</strong>。</p>\n<p>编程就是把现实世界的问题，映射到计算机的 IPO 中。</p>\n<p>那怎么把现实世界的问题映射到计算机的 IPO 中呢？</p>\n<p>我理解要通过<strong>模型</strong>。</p>\n<h5 id=\"什么是模型？\"><a href=\"#什么是模型？\" class=\"headerlink\" title=\"什么是模型？\"></a>什么是模型？</h5><hr>\n<p>模型是指用一个较为<strong>简单的东西来代表另一个东西</strong>。</p>\n<p>如果要简单化一个东西，那就需要对这个东西进行<strong>分析</strong>，然后<strong>抽象</strong>。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9aa310b8c275aee5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>抽象的维度，决定着最后软件的形式</strong>。</p>\n<p>比如 form-render抽象层次，可以是拖拽式，可以config 配置， 可以是表格配置</p>\n<p>如果对计算机本身进行抽象，那软件就会以机器代码或汇编语言的形式呈现。</p>\n<p>如果对计算处理逻辑进行抽象，那软件就会以非结构化的高级语言呈现，比如 Basic。</p>\n<p>如果对问题领域过程进行抽象，那软件就会以结构化的高级语言呈现，比如 C。</p>\n<p>如果对问题领域元素进行抽象，那软件就会以面向对象程序设计语言呈现，比如 Java。</p>\n<p>也就是说，<strong>编程语言是现实世界到计算机世界抽象的机制</strong>。</p>\n<h5 id=\"总结-枚举-x3D-gt-归纳-x3D-gt-抽象\"><a href=\"#总结-枚举-x3D-gt-归纳-x3D-gt-抽象\" class=\"headerlink\" title=\"总结: 枚举 &#x3D;&gt; 归纳 &#x3D;&gt; 抽象\"></a>总结: 枚举 &#x3D;&gt; 归纳 &#x3D;&gt; 抽象</h5><blockquote>\n<p>编程的本质就是可计算,可计算的基础就是建模<br>建模可实现必须简化,简化的方式就是抽象<br>简化的前提就是限定范围。<br>然后一切编程成为了限定范围内抽象模型的数学计算的计算机表达</p>\n</blockquote>\n<blockquote>\n<p>所谓的编程，就是使用<strong>某种语言</strong>，在<strong>某个维度</strong>，把<strong>现实世界抽象成简单的模型</strong>，然后<strong>设计</strong>和<strong>实现</strong>出可运行的<strong>计算机软件</strong>，也就是<strong>完整的 IPO</strong>。</p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-58cabdf927ec51ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"B-2幽灵战略轰炸机\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-06955f6f9bb39761.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"传统家具\"></p>\n<h4 id=\"编程艺术\"><a href=\"#编程艺术\" class=\"headerlink\" title=\"编程艺术\"></a>编程艺术</h4><p>最近看老外写的代码，感觉他们写代码就跟搞艺术一样，就像珍珠一样晶莹剔透，甚至注释比代码都多。</p>\n<p>国外在产品中注入艺术气息的不再少数</p>\n<p>法国大餐，秀色可餐。<br>日本料理，精致温婉。<br>苹果产品，兼顾艺术品味，简约大气又耐用。<br>美国隐身战斗机，外观霸气，操作简约。<br>欧洲、日本的汽车流线、颜色都很美，功能人性化。<br>古罗马帝国作为横跨欧洲、非洲与亚洲的强大帝国，格外强调其建筑的威严，以给人不可侵犯的感觉。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7b2d3c865c432d8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"法国扇贝\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-01b2900b9f9f1790.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"古罗马建筑\"></p>\n<p>当制造业开始讲求审美训练，艺术带给它什么硬核好处？<br>学习艺术不但可以把工业产品做得更人性化，还可以把一个行业带到新的高度，<br>国外好的工业产品在视觉上都会给人很大的冲突感，是美学的一部分。<br>很多行业粗制滥造，只追求做出来，不会精益求精，产品也不会赏心悦目，没有体验感</p>\n<p>「知乎」上有段评论：<br>老美的代码看起来是一件艺术品，他们会在代码文件头、函数头里写上很漂亮工整的注释，然后项目有一个庞大复杂的架构，各种设计模式、框架结合使用，好像这些东西用得越多越流逼一样。</p>\n<p>俄毛子的代码那简直就是天书，一股浓烈的geek气味伴随着灌满伏特加后眩晕的混沌感扑面而来。变量名写长一点清晰一点会死吗？plmm不是漂亮美眉，看了半天代码连猜带懵才知道是Platform Link Maintainess Manager。</p>\n<p>印度人写的代码就像一条工业流水线出来的产品一样，每个都很规矩，但也很死板。一个环形消息缓存的东西用竟然数组来实现，然后在下标计算时倒来倒去。尼玛用个链表来实现会死是不。</p>\n<p>中国人写的代码还是比较实用的，但如果不加控制就会犯低级错误。你见过为了查找一个用户id，先用select *从数据库把所有内容都捞出来，然后用个大大的for循环来查找的代码吗？我看了当时就泪奔无语了。</p>\n<p><strong>崇洋媚外不可取，夏之虫和井之蛙也不能做。</strong><br><strong>希望我们能突破自己的认知，站在巨人的肩旁上，让自己不断强大。</strong></p>\n<h4 id=\"编程的本质是什么？\"><a href=\"#编程的本质是什么？\" class=\"headerlink\" title=\"编程的本质是什么？\"></a>编程的本质是什么？</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6d216b95a83961e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<hr>\n<p>《教父》里说过：花半分钟就看透事物本质的人，和花一辈子都看不清本质的人，自然是不一样的人生。</p>\n<p>所以我们尝试思考下编程的本质，或许可以让我们走的更远。</p>\n<p>对于编程这件事，编写程序，就字面意思来讲，事情的结果是程序。</p>\n<h5 id=\"程序是啥意思呢\"><a href=\"#程序是啥意思呢\" class=\"headerlink\" title=\"程序是啥意思呢?\"></a>程序是啥意思呢?</h5><hr>\n<p>广义上的程序是指，一系列的动作以相同的方式执行，在相同的环境下，总能得出相同的结果。</p>\n<p>你比如开银行卡账户，你需要准备好材料，像身份证，去银行填表，核身，签字，最后拿到一张属于你的银行卡。</p>\n<p>换一个人也要走同样的程序，同样要备好材料，填表，核身，签字，同样要到银行办理，同样最后拿到了银行卡。</p>\n<p>你会发现，定义里面有三个相同，也就是程序最大的特点就是重复。</p>\n<p>只不过上边例子里的重复，是在银行这个地方发生的。每天做着相同程序的业务，只是不同的客户，不同的柜员。</p>\n<p>但开卡业务只能在银行办理，这就很受局限了。我得花费时间和体力，跑到银行，还得挑银行上班的时间。那有没有办法，我不去银行也能把银行卡开下来呢。<br><strong>计算机</strong>和<strong>互联网</strong>的出现，就解决了这个问题。</p>\n<p>要交的材料，要走的程序，要拿的卡，都不变，只是整个操作环境，从线下的银行，变成了线上的某个载体，可以是个 PC 端 Web 网站，也可以是个移动端 APP。</p>\n<p>线上就是指互联网，它能够让<strong>信息的传递跨越空间</strong>，而操作的载体，无论是 Web 网站 还是 APP，背后都是计算机程序。</p>\n<p>从前你要花一个小时坐公交去银行，如今足不出户点点手机就能办理业务。</p>\n<p>计算机上的这些程序从哪来的？</p>\n<p>就是<strong>程序员编写的</strong>。</p>\n<p>所以程序员要做的事就是，<strong>把线下现实世界的事情，编到线上计算机里来做</strong>。</p>\n<p>这有点像电影编剧的角色，都要取材于现实。</p>\n<p>不同的是，电影编剧会<strong>充分虚构</strong>，保证艺术源于生活又高于生活，产出物是一两个小时的影像。</p>\n<p>而程序员要<strong>充分还原现实</strong>，保证程序符合正常逻辑不会错乱，产出物是电子设备上的应用程序。</p>\n<p>那编程的目的就很清晰了，用计算机来解决现实世界的问题。</p>\n<p>无论是现实世界还是计算机，我们做一件事，都需要有三个核心要素：输入（Input）、处理（Process）和输出（Output），简称 <strong>IPO</strong>。</p>\n<p>编程就是把现实世界的问题，映射到计算机的 IPO 中。</p>\n<p>那怎么把现实世界的问题映射到计算机的 IPO 中呢？</p>\n<p>我理解要通过<strong>模型</strong>。</p>\n<h5 id=\"什么是模型？\"><a href=\"#什么是模型？\" class=\"headerlink\" title=\"什么是模型？\"></a>什么是模型？</h5><hr>\n<p>模型是指用一个较为<strong>简单的东西来代表另一个东西</strong>。</p>\n<p>如果要简单化一个东西，那就需要对这个东西进行<strong>分析</strong>，然后<strong>抽象</strong>。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-9aa310b8c275aee5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p><strong>抽象的维度，决定着最后软件的形式</strong>。</p>\n<p>比如 form-render抽象层次，可以是拖拽式，可以config 配置， 可以是表格配置</p>\n<p>如果对计算机本身进行抽象，那软件就会以机器代码或汇编语言的形式呈现。</p>\n<p>如果对计算处理逻辑进行抽象，那软件就会以非结构化的高级语言呈现，比如 Basic。</p>\n<p>如果对问题领域过程进行抽象，那软件就会以结构化的高级语言呈现，比如 C。</p>\n<p>如果对问题领域元素进行抽象，那软件就会以面向对象程序设计语言呈现，比如 Java。</p>\n<p>也就是说，<strong>编程语言是现实世界到计算机世界抽象的机制</strong>。</p>\n<h5 id=\"总结-枚举-x3D-gt-归纳-x3D-gt-抽象\"><a href=\"#总结-枚举-x3D-gt-归纳-x3D-gt-抽象\" class=\"headerlink\" title=\"总结: 枚举 &#x3D;&gt; 归纳 &#x3D;&gt; 抽象\"></a>总结: 枚举 &#x3D;&gt; 归纳 &#x3D;&gt; 抽象</h5><blockquote>\n<p>编程的本质就是可计算,可计算的基础就是建模<br>建模可实现必须简化,简化的方式就是抽象<br>简化的前提就是限定范围。<br>然后一切编程成为了限定范围内抽象模型的数学计算的计算机表达</p>\n</blockquote>\n<blockquote>\n<p>所谓的编程，就是使用<strong>某种语言</strong>，在<strong>某个维度</strong>，把<strong>现实世界抽象成简单的模型</strong>，然后<strong>设计</strong>和<strong>实现</strong>出可运行的<strong>计算机软件</strong>，也就是<strong>完整的 IPO</strong>。</p>\n</blockquote>\n"},{"title":"📣🚦力扣刷题有感","date":"2021-08-15T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-0e24d845c63ddf74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 1.非智力因素\n作为一个专业人士，要保持编码能力的一个方法就是经常做题，千难万难，坚持最难，训练韧性和耐力，戒骄戒躁，脚踏实地，注重非智力因素的培养。\n##### 放弃幻想准备斗争\n听过一句考研界数学大神的话：考研需要和你之前长达几十年的学习习惯做斗争。考研数学考得不只是你的数学，考研考的也不只是你的政治、英语、数学、专业课，甚至不只是学习能力，而是你这个人，你对这个世界的认知，时间管理能力，以及长期以来做事情的**习惯**和**态度**。\n\n做到和知道之间距离很远，我们的人生不是听道理就能美满，需要坚持不懈的执行你所知道的，终日而思不如须臾之所学，知行合一，Just Do It。\n\n#### 2.计算过关\n许多人意识不到“**计算过关**”的重要性，就是不看答案自己看时间算一遍能算对。有思路的题，最后答案算错的概率小于百分之一就过关。\n\n写代码不能靠猜，更不能靠运气，用逻辑去思考，感觉自己以前纯粹是扣代码，蒙对了就过，蒙不对就在找原因，这是很low的阶段。\n计算好每一步，不能面向打印编程，有的人写代码就像走迷宫一样，这条路试一下，那条路试一下，试了很多路终于走出来了，下次再进入迷宫还是不知道怎么走，这样没有任何意义，我们要搞编制一副地图，靠地图走出来， 不断完善自己的地图，注重消化，学会为主，等有类似迷宫我们就查地图就可以了。\n\nMysql之父说过：**代码应该一次写成，而不是后面再改。**\n\n#### 3.Deliberately practice\n功夫在文章外，靠纯粹写项目代码并不能提高代码本身的水平，多刷题，代码本身是算法的组合，刷题刻意训练思维逻辑。\n\n#### 4.实践\n多看好代码，如果仅靠自己关门造车，好前端是好项目煨出来的，可以多看看github一些高star项目的源代码，尝试写一些这样的项目，和letcode多做对比,这样才能不断汲取好的东西。\n\n#### 5.举一反N\n提交通过只是完成了第一步，写出别的方法才是进步。总之，技术的本质是创新。\n\n#### 6.做项目和刷题的区别:\n\n- 做项目测试少，刷题有上千个测试case。\n- 做项目千篇一律，基本是cv，能跑就行，完全是为了完成任务。刷题要考虑复杂度，内存，更深入。\n- 做项目遇到问题的时候，就需要去权衡应该采用什么样的方式来解决具体的问题，但是如果写的项目代码只是仅仅满足于实现流程，不能对比不同实现方案之间的优缺点，那做项目确实对代码能力的成长是很局限的。\n- 项目更多的是应用领域，刷题是理论基础研究。就像蒸汽机应用于汽车，拓补学应用于人工智能。\n- 项目不够难，日常只有增删改查。\n","source":"_posts/📣🚦力扣刷题有感.md","raw":"---\ntitle: \"📣🚦力扣刷题有感\"\ndate: 2021-08-16\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-0e24d845c63ddf74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 1.非智力因素\n作为一个专业人士，要保持编码能力的一个方法就是经常做题，千难万难，坚持最难，训练韧性和耐力，戒骄戒躁，脚踏实地，注重非智力因素的培养。\n##### 放弃幻想准备斗争\n听过一句考研界数学大神的话：考研需要和你之前长达几十年的学习习惯做斗争。考研数学考得不只是你的数学，考研考的也不只是你的政治、英语、数学、专业课，甚至不只是学习能力，而是你这个人，你对这个世界的认知，时间管理能力，以及长期以来做事情的**习惯**和**态度**。\n\n做到和知道之间距离很远，我们的人生不是听道理就能美满，需要坚持不懈的执行你所知道的，终日而思不如须臾之所学，知行合一，Just Do It。\n\n#### 2.计算过关\n许多人意识不到“**计算过关**”的重要性，就是不看答案自己看时间算一遍能算对。有思路的题，最后答案算错的概率小于百分之一就过关。\n\n写代码不能靠猜，更不能靠运气，用逻辑去思考，感觉自己以前纯粹是扣代码，蒙对了就过，蒙不对就在找原因，这是很low的阶段。\n计算好每一步，不能面向打印编程，有的人写代码就像走迷宫一样，这条路试一下，那条路试一下，试了很多路终于走出来了，下次再进入迷宫还是不知道怎么走，这样没有任何意义，我们要搞编制一副地图，靠地图走出来， 不断完善自己的地图，注重消化，学会为主，等有类似迷宫我们就查地图就可以了。\n\nMysql之父说过：**代码应该一次写成，而不是后面再改。**\n\n#### 3.Deliberately practice\n功夫在文章外，靠纯粹写项目代码并不能提高代码本身的水平，多刷题，代码本身是算法的组合，刷题刻意训练思维逻辑。\n\n#### 4.实践\n多看好代码，如果仅靠自己关门造车，好前端是好项目煨出来的，可以多看看github一些高star项目的源代码，尝试写一些这样的项目，和letcode多做对比,这样才能不断汲取好的东西。\n\n#### 5.举一反N\n提交通过只是完成了第一步，写出别的方法才是进步。总之，技术的本质是创新。\n\n#### 6.做项目和刷题的区别:\n\n- 做项目测试少，刷题有上千个测试case。\n- 做项目千篇一律，基本是cv，能跑就行，完全是为了完成任务。刷题要考虑复杂度，内存，更深入。\n- 做项目遇到问题的时候，就需要去权衡应该采用什么样的方式来解决具体的问题，但是如果写的项目代码只是仅仅满足于实现流程，不能对比不同实现方案之间的优缺点，那做项目确实对代码能力的成长是很局限的。\n- 项目更多的是应用领域，刷题是理论基础研究。就像蒸汽机应用于汽车，拓补学应用于人工智能。\n- 项目不够难，日常只有增删改查。\n","slug":"📣🚦力扣刷题有感","published":1,"updated":"2024-05-16T07:39:11.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pg006k2omvefcw9y8u","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-0e24d845c63ddf74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"1-非智力因素\"><a href=\"#1-非智力因素\" class=\"headerlink\" title=\"1.非智力因素\"></a>1.非智力因素</h5><p>作为一个专业人士，要保持编码能力的一个方法就是经常做题，千难万难，坚持最难，训练韧性和耐力，戒骄戒躁，脚踏实地，注重非智力因素的培养。</p>\n<h5 id=\"放弃幻想准备斗争\"><a href=\"#放弃幻想准备斗争\" class=\"headerlink\" title=\"放弃幻想准备斗争\"></a>放弃幻想准备斗争</h5><p>听过一句考研界数学大神的话：考研需要和你之前长达几十年的学习习惯做斗争。考研数学考得不只是你的数学，考研考的也不只是你的政治、英语、数学、专业课，甚至不只是学习能力，而是你这个人，你对这个世界的认知，时间管理能力，以及长期以来做事情的<strong>习惯</strong>和<strong>态度</strong>。</p>\n<p>做到和知道之间距离很远，我们的人生不是听道理就能美满，需要坚持不懈的执行你所知道的，终日而思不如须臾之所学，知行合一，Just Do It。</p>\n<h4 id=\"2-计算过关\"><a href=\"#2-计算过关\" class=\"headerlink\" title=\"2.计算过关\"></a>2.计算过关</h4><p>许多人意识不到“<strong>计算过关</strong>”的重要性，就是不看答案自己看时间算一遍能算对。有思路的题，最后答案算错的概率小于百分之一就过关。</p>\n<p>写代码不能靠猜，更不能靠运气，用逻辑去思考，感觉自己以前纯粹是扣代码，蒙对了就过，蒙不对就在找原因，这是很low的阶段。<br>计算好每一步，不能面向打印编程，有的人写代码就像走迷宫一样，这条路试一下，那条路试一下，试了很多路终于走出来了，下次再进入迷宫还是不知道怎么走，这样没有任何意义，我们要搞编制一副地图，靠地图走出来， 不断完善自己的地图，注重消化，学会为主，等有类似迷宫我们就查地图就可以了。</p>\n<p>Mysql之父说过：<strong>代码应该一次写成，而不是后面再改。</strong></p>\n<h4 id=\"3-Deliberately-practice\"><a href=\"#3-Deliberately-practice\" class=\"headerlink\" title=\"3.Deliberately practice\"></a>3.Deliberately practice</h4><p>功夫在文章外，靠纯粹写项目代码并不能提高代码本身的水平，多刷题，代码本身是算法的组合，刷题刻意训练思维逻辑。</p>\n<h4 id=\"4-实践\"><a href=\"#4-实践\" class=\"headerlink\" title=\"4.实践\"></a>4.实践</h4><p>多看好代码，如果仅靠自己关门造车，好前端是好项目煨出来的，可以多看看github一些高star项目的源代码，尝试写一些这样的项目，和letcode多做对比,这样才能不断汲取好的东西。</p>\n<h4 id=\"5-举一反N\"><a href=\"#5-举一反N\" class=\"headerlink\" title=\"5.举一反N\"></a>5.举一反N</h4><p>提交通过只是完成了第一步，写出别的方法才是进步。总之，技术的本质是创新。</p>\n<h4 id=\"6-做项目和刷题的区别\"><a href=\"#6-做项目和刷题的区别\" class=\"headerlink\" title=\"6.做项目和刷题的区别:\"></a>6.做项目和刷题的区别:</h4><p>- 做项目测试少，刷题有上千个测试case。<br>- 做项目千篇一律，基本是cv，能跑就行，完全是为了完成任务。刷题要考虑复杂度，内存，更深入。<br>- 做项目遇到问题的时候，就需要去权衡应该采用什么样的方式来解决具体的问题，但是如果写的项目代码只是仅仅满足于实现流程，不能对比不同实现方案之间的优缺点，那做项目确实对代码能力的成长是很局限的。<br>- 项目更多的是应用领域，刷题是理论基础研究。就像蒸汽机应用于汽车，拓补学应用于人工智能。<br>- 项目不够难，日常只有增删改查。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-0e24d845c63ddf74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"1-非智力因素\"><a href=\"#1-非智力因素\" class=\"headerlink\" title=\"1.非智力因素\"></a>1.非智力因素</h5><p>作为一个专业人士，要保持编码能力的一个方法就是经常做题，千难万难，坚持最难，训练韧性和耐力，戒骄戒躁，脚踏实地，注重非智力因素的培养。</p>\n<h5 id=\"放弃幻想准备斗争\"><a href=\"#放弃幻想准备斗争\" class=\"headerlink\" title=\"放弃幻想准备斗争\"></a>放弃幻想准备斗争</h5><p>听过一句考研界数学大神的话：考研需要和你之前长达几十年的学习习惯做斗争。考研数学考得不只是你的数学，考研考的也不只是你的政治、英语、数学、专业课，甚至不只是学习能力，而是你这个人，你对这个世界的认知，时间管理能力，以及长期以来做事情的<strong>习惯</strong>和<strong>态度</strong>。</p>\n<p>做到和知道之间距离很远，我们的人生不是听道理就能美满，需要坚持不懈的执行你所知道的，终日而思不如须臾之所学，知行合一，Just Do It。</p>\n<h4 id=\"2-计算过关\"><a href=\"#2-计算过关\" class=\"headerlink\" title=\"2.计算过关\"></a>2.计算过关</h4><p>许多人意识不到“<strong>计算过关</strong>”的重要性，就是不看答案自己看时间算一遍能算对。有思路的题，最后答案算错的概率小于百分之一就过关。</p>\n<p>写代码不能靠猜，更不能靠运气，用逻辑去思考，感觉自己以前纯粹是扣代码，蒙对了就过，蒙不对就在找原因，这是很low的阶段。<br>计算好每一步，不能面向打印编程，有的人写代码就像走迷宫一样，这条路试一下，那条路试一下，试了很多路终于走出来了，下次再进入迷宫还是不知道怎么走，这样没有任何意义，我们要搞编制一副地图，靠地图走出来， 不断完善自己的地图，注重消化，学会为主，等有类似迷宫我们就查地图就可以了。</p>\n<p>Mysql之父说过：<strong>代码应该一次写成，而不是后面再改。</strong></p>\n<h4 id=\"3-Deliberately-practice\"><a href=\"#3-Deliberately-practice\" class=\"headerlink\" title=\"3.Deliberately practice\"></a>3.Deliberately practice</h4><p>功夫在文章外，靠纯粹写项目代码并不能提高代码本身的水平，多刷题，代码本身是算法的组合，刷题刻意训练思维逻辑。</p>\n<h4 id=\"4-实践\"><a href=\"#4-实践\" class=\"headerlink\" title=\"4.实践\"></a>4.实践</h4><p>多看好代码，如果仅靠自己关门造车，好前端是好项目煨出来的，可以多看看github一些高star项目的源代码，尝试写一些这样的项目，和letcode多做对比,这样才能不断汲取好的东西。</p>\n<h4 id=\"5-举一反N\"><a href=\"#5-举一反N\" class=\"headerlink\" title=\"5.举一反N\"></a>5.举一反N</h4><p>提交通过只是完成了第一步，写出别的方法才是进步。总之，技术的本质是创新。</p>\n<h4 id=\"6-做项目和刷题的区别\"><a href=\"#6-做项目和刷题的区别\" class=\"headerlink\" title=\"6.做项目和刷题的区别:\"></a>6.做项目和刷题的区别:</h4><p>- 做项目测试少，刷题有上千个测试case。<br>- 做项目千篇一律，基本是cv，能跑就行，完全是为了完成任务。刷题要考虑复杂度，内存，更深入。<br>- 做项目遇到问题的时候，就需要去权衡应该采用什么样的方式来解决具体的问题，但是如果写的项目代码只是仅仅满足于实现流程，不能对比不同实现方案之间的优缺点，那做项目确实对代码能力的成长是很局限的。<br>- 项目更多的是应用领域，刷题是理论基础研究。就像蒸汽机应用于汽车，拓补学应用于人工智能。<br>- 项目不够难，日常只有增删改查。</p>\n"},{"title":"📣🚶🚶🚶🏻做好自己的事-不要被别人打乱自己的节奏","date":"2022-03-16T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-b7813688ce4dbd62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最近看了一个小视频，话说韩国的一位拳击选手，沈健吾对阵美国名将“抱抱熊”巴内特，赛前的称重环节，突然从包里掏出一束花，向举牌女郎表白，这个举牌女郎正是韩国知名模特`李恩慧`，而李恩慧则在社交平台表示，如果`沈健吾`能够赢得这场比赛，就答应做他的女朋友。\n![](https://upload-images.jianshu.io/upload_images/15312191-09be0caac87c3cd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n比赛开始环节，沈健吾为了抱的美人归，急于求胜，被巴内特，几个下踢，打乱节奏。\n比赛中期，沈健吾看似进攻其实没有任何节奏，越来约虚弱。\n比赛后期，沈健吾急于表现自己，不断向前压制，被巴内特一个后摆KO\n感觉沈健吾压力很大，俗话说心机则乱，最终被巴内特一个后摆ko倒地。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-819c491eb6c2b008.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-0d65ec78c559cb0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-6ccb3b6332a02cbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-348c8b567ce0b2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果沈健吾不是这么急于表现自己，为自己搞这么大的flag，他不一定赢，但是一定不会输这么惨。\n节奏乱了，步调就乱了，工作和生活都乱了，整个人生就乱了。混乱的节奏不仅带来了生活的低质量和工作的低效率，还带来了无尽的烦恼和压力。\n#### 别为自己挖坑,把握好自己的节奏，不要被别糖衣炮弹打乱自己的节奏，不要被当前快节奏生活裹挟。\n可能我们有时跑的太快了，停下来，等一等灵魂吧。\n> ·[秀恩爱，死的快](https://mobile.yangkeduo.com/fyxmkief.html?_wv=41729&_wvx=10&_x_share_id=fa55f20ffcb64dc5a2d321253d398ec1&feed_id=4243473058961293673&share_uid=3445142862496&page_from=602100&needs_login=1&shared_time=1647526925316&shared_sign=d8c77ca1973f7af2c9a0a56410d8756a&refer_share_id=46nol742lxomx0mc4qv4gmta5434aqhq&refer_share_uid=3575751412&refer_share_uin=O6GIHBG5LXZU6VHBA3NHIDBU5A_GEXDA&refer_share_channel=message)\n","source":"_posts/📣🚶🚶🚶🏻做好自己的事-不要被别人打乱自己的节奏.md","raw":"---\ntitle: \"📣🚶🚶🚶🏻做好自己的事-不要被别人打乱自己的节奏\"\ndate: 2022-03-17\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-b7813688ce4dbd62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最近看了一个小视频，话说韩国的一位拳击选手，沈健吾对阵美国名将“抱抱熊”巴内特，赛前的称重环节，突然从包里掏出一束花，向举牌女郎表白，这个举牌女郎正是韩国知名模特`李恩慧`，而李恩慧则在社交平台表示，如果`沈健吾`能够赢得这场比赛，就答应做他的女朋友。\n![](https://upload-images.jianshu.io/upload_images/15312191-09be0caac87c3cd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n比赛开始环节，沈健吾为了抱的美人归，急于求胜，被巴内特，几个下踢，打乱节奏。\n比赛中期，沈健吾看似进攻其实没有任何节奏，越来约虚弱。\n比赛后期，沈健吾急于表现自己，不断向前压制，被巴内特一个后摆KO\n感觉沈健吾压力很大，俗话说心机则乱，最终被巴内特一个后摆ko倒地。\n\n![](https://upload-images.jianshu.io/upload_images/15312191-819c491eb6c2b008.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-0d65ec78c559cb0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-6ccb3b6332a02cbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/15312191-348c8b567ce0b2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果沈健吾不是这么急于表现自己，为自己搞这么大的flag，他不一定赢，但是一定不会输这么惨。\n节奏乱了，步调就乱了，工作和生活都乱了，整个人生就乱了。混乱的节奏不仅带来了生活的低质量和工作的低效率，还带来了无尽的烦恼和压力。\n#### 别为自己挖坑,把握好自己的节奏，不要被别糖衣炮弹打乱自己的节奏，不要被当前快节奏生活裹挟。\n可能我们有时跑的太快了，停下来，等一等灵魂吧。\n> ·[秀恩爱，死的快](https://mobile.yangkeduo.com/fyxmkief.html?_wv=41729&_wvx=10&_x_share_id=fa55f20ffcb64dc5a2d321253d398ec1&feed_id=4243473058961293673&share_uid=3445142862496&page_from=602100&needs_login=1&shared_time=1647526925316&shared_sign=d8c77ca1973f7af2c9a0a56410d8756a&refer_share_id=46nol742lxomx0mc4qv4gmta5434aqhq&refer_share_uid=3575751412&refer_share_uin=O6GIHBG5LXZU6VHBA3NHIDBU5A_GEXDA&refer_share_channel=message)\n","slug":"📣🚶🚶🚶🏻做好自己的事-不要被别人打乱自己的节奏","published":1,"updated":"2024-05-16T07:39:11.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ph006m2omv1qacebrl","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b7813688ce4dbd62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>最近看了一个小视频，话说韩国的一位拳击选手，沈健吾对阵美国名将“抱抱熊”巴内特，赛前的称重环节，突然从包里掏出一束花，向举牌女郎表白，这个举牌女郎正是韩国知名模特<code>李恩慧</code>，而李恩慧则在社交平台表示，如果<code>沈健吾</code>能够赢得这场比赛，就答应做他的女朋友。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-09be0caac87c3cd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>比赛开始环节，沈健吾为了抱的美人归，急于求胜，被巴内特，几个下踢，打乱节奏。<br>比赛中期，沈健吾看似进攻其实没有任何节奏，越来约虚弱。<br>比赛后期，沈健吾急于表现自己，不断向前压制，被巴内特一个后摆KO<br>感觉沈健吾压力很大，俗话说心机则乱，最终被巴内特一个后摆ko倒地。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-819c491eb6c2b008.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-0d65ec78c559cb0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6ccb3b6332a02cbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-348c8b567ce0b2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>如果沈健吾不是这么急于表现自己，为自己搞这么大的flag，他不一定赢，但是一定不会输这么惨。<br>节奏乱了，步调就乱了，工作和生活都乱了，整个人生就乱了。混乱的节奏不仅带来了生活的低质量和工作的低效率，还带来了无尽的烦恼和压力。</p>\n<h4 id=\"别为自己挖坑-把握好自己的节奏，不要被别糖衣炮弹打乱自己的节奏，不要被当前快节奏生活裹挟。\"><a href=\"#别为自己挖坑-把握好自己的节奏，不要被别糖衣炮弹打乱自己的节奏，不要被当前快节奏生活裹挟。\" class=\"headerlink\" title=\"别为自己挖坑,把握好自己的节奏，不要被别糖衣炮弹打乱自己的节奏，不要被当前快节奏生活裹挟。\"></a>别为自己挖坑,把握好自己的节奏，不要被别糖衣炮弹打乱自己的节奏，不要被当前快节奏生活裹挟。</h4><p>可能我们有时跑的太快了，停下来，等一等灵魂吧。</p>\n<blockquote>\n<p>·<a href=\"https://mobile.yangkeduo.com/fyxmkief.html?_wv=41729&_wvx=10&_x_share_id=fa55f20ffcb64dc5a2d321253d398ec1&feed_id=4243473058961293673&share_uid=3445142862496&page_from=602100&needs_login=1&shared_time=1647526925316&shared_sign=d8c77ca1973f7af2c9a0a56410d8756a&refer_share_id=46nol742lxomx0mc4qv4gmta5434aqhq&refer_share_uid=3575751412&refer_share_uin=O6GIHBG5LXZU6VHBA3NHIDBU5A_GEXDA&refer_share_channel=message\">秀恩爱，死的快</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b7813688ce4dbd62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>最近看了一个小视频，话说韩国的一位拳击选手，沈健吾对阵美国名将“抱抱熊”巴内特，赛前的称重环节，突然从包里掏出一束花，向举牌女郎表白，这个举牌女郎正是韩国知名模特<code>李恩慧</code>，而李恩慧则在社交平台表示，如果<code>沈健吾</code>能够赢得这场比赛，就答应做他的女朋友。<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-09be0caac87c3cd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>比赛开始环节，沈健吾为了抱的美人归，急于求胜，被巴内特，几个下踢，打乱节奏。<br>比赛中期，沈健吾看似进攻其实没有任何节奏，越来约虚弱。<br>比赛后期，沈健吾急于表现自己，不断向前压制，被巴内特一个后摆KO<br>感觉沈健吾压力很大，俗话说心机则乱，最终被巴内特一个后摆ko倒地。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-819c491eb6c2b008.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-0d65ec78c559cb0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6ccb3b6332a02cbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"><br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-348c8b567ce0b2cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>如果沈健吾不是这么急于表现自己，为自己搞这么大的flag，他不一定赢，但是一定不会输这么惨。<br>节奏乱了，步调就乱了，工作和生活都乱了，整个人生就乱了。混乱的节奏不仅带来了生活的低质量和工作的低效率，还带来了无尽的烦恼和压力。</p>\n<h4 id=\"别为自己挖坑-把握好自己的节奏，不要被别糖衣炮弹打乱自己的节奏，不要被当前快节奏生活裹挟。\"><a href=\"#别为自己挖坑-把握好自己的节奏，不要被别糖衣炮弹打乱自己的节奏，不要被当前快节奏生活裹挟。\" class=\"headerlink\" title=\"别为自己挖坑,把握好自己的节奏，不要被别糖衣炮弹打乱自己的节奏，不要被当前快节奏生活裹挟。\"></a>别为自己挖坑,把握好自己的节奏，不要被别糖衣炮弹打乱自己的节奏，不要被当前快节奏生活裹挟。</h4><p>可能我们有时跑的太快了，停下来，等一等灵魂吧。</p>\n<blockquote>\n<p>·<a href=\"https://mobile.yangkeduo.com/fyxmkief.html?_wv=41729&_wvx=10&_x_share_id=fa55f20ffcb64dc5a2d321253d398ec1&feed_id=4243473058961293673&share_uid=3445142862496&page_from=602100&needs_login=1&shared_time=1647526925316&shared_sign=d8c77ca1973f7af2c9a0a56410d8756a&refer_share_id=46nol742lxomx0mc4qv4gmta5434aqhq&refer_share_uid=3575751412&refer_share_uin=O6GIHBG5LXZU6VHBA3NHIDBU5A_GEXDA&refer_share_channel=message\">秀恩爱，死的快</a></p>\n</blockquote>\n"},{"title":"📣🤔🤔关于技术和创业的思考","date":"2022-02-27T16:00:00.000Z","_content":"\n![](https://upload-images.jianshu.io/upload_images/15312191-28daa7a95a10990c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##### 怎样看待技术\n最近，身边的小伙伴很多都开始自主创业，我不进有点浮想联翩。\n\n技术对社会进步具有重要推动作用，这句话的范畴是技术的大规模应用。\n如果某项技术在某个时间段没有被某个人发明，难道这项技术就不回存在了吗？\n\n没有爱因斯坦，核武器就不会出现？\n没有乔布斯，智能手机就不会出现？\n没有牛顿，万有引力就没人发现？\n\n我觉得就算当时没有出现，以后也会有别的人去发现。\n\n搞技术被替代的可能性非常高，因为很多都是已知的，具体的，不像创业需要冒险，所谓高风险高收入。技术入门门槛没有那么的高，IT技术到今天基本原理并没有变化，仍旧是冯诺伊曼体系，数据结构和算法几十年也不会变。\n\n另一方面，语言在发展，框架在更新，两年不学习，可能行业就不存在了，你怎么证明你曾经的经验呢，这个行业的特点就是日新月异，很难有所积累，人脉无法积累，经验无法积累。\n\n##### 积累型工种怎么区分呢？\n总分为两种类型：\n1、资源积累型，比如销售，餐饮业；\n2、经验积累型，比如医生、教师，会计。\n\n老师年纪越大越吃香，因为教材不会经常变。\n律师年纪越大越吃香，因为法律条文不会朝令夕改。\n医生年纪越大越吃香，因为人的生理结构不会变。\n文物鉴定师年纪越大越吃香，上百年的文物不会变吧。\n\n\n\n\n希望在一个技能行业耕耘的前提是，这个行业知识体系结构不会有激进性，高频率的改变。\n技术能创造的价值是有限的，有限到我们常常高估自己，高估这个行业对社会进步的影响。\n\n改变世界的是人和点子，让你被更多人被需要，而不是技术。通过阿里搞死的虾米，天天动听，总结人还是应该做自己感兴趣和熟悉的事，起码你要认可你在做的事情，热爱着它。\n总拿着功利主义去做事，你做不好的。\n##### 关于人生目标\n成为高级程序员，大牛工程师是人生的一个方向，但绝不是最高目标。\n技术不能应用到产品中，就是一页废纸，把产品和技术结合起来，运用到商业层面。\n正如雷军所言：`无论多么高级的程序员，关键是你能否出想法出产品，你的劳动能否被社会承认，为社会创造财富，成为高级程序员绝对不是追求的目标。`\n","source":"_posts/📣🤔🤔关于技术和创业的思考.md","raw":"---\ntitle: \"📣🤔🤔关于技术和创业的思考\"\ndate: 2022-02-28\ntags: \n- 开发日常\n---\n\n![](https://upload-images.jianshu.io/upload_images/15312191-28daa7a95a10990c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n##### 怎样看待技术\n最近，身边的小伙伴很多都开始自主创业，我不进有点浮想联翩。\n\n技术对社会进步具有重要推动作用，这句话的范畴是技术的大规模应用。\n如果某项技术在某个时间段没有被某个人发明，难道这项技术就不回存在了吗？\n\n没有爱因斯坦，核武器就不会出现？\n没有乔布斯，智能手机就不会出现？\n没有牛顿，万有引力就没人发现？\n\n我觉得就算当时没有出现，以后也会有别的人去发现。\n\n搞技术被替代的可能性非常高，因为很多都是已知的，具体的，不像创业需要冒险，所谓高风险高收入。技术入门门槛没有那么的高，IT技术到今天基本原理并没有变化，仍旧是冯诺伊曼体系，数据结构和算法几十年也不会变。\n\n另一方面，语言在发展，框架在更新，两年不学习，可能行业就不存在了，你怎么证明你曾经的经验呢，这个行业的特点就是日新月异，很难有所积累，人脉无法积累，经验无法积累。\n\n##### 积累型工种怎么区分呢？\n总分为两种类型：\n1、资源积累型，比如销售，餐饮业；\n2、经验积累型，比如医生、教师，会计。\n\n老师年纪越大越吃香，因为教材不会经常变。\n律师年纪越大越吃香，因为法律条文不会朝令夕改。\n医生年纪越大越吃香，因为人的生理结构不会变。\n文物鉴定师年纪越大越吃香，上百年的文物不会变吧。\n\n\n\n\n希望在一个技能行业耕耘的前提是，这个行业知识体系结构不会有激进性，高频率的改变。\n技术能创造的价值是有限的，有限到我们常常高估自己，高估这个行业对社会进步的影响。\n\n改变世界的是人和点子，让你被更多人被需要，而不是技术。通过阿里搞死的虾米，天天动听，总结人还是应该做自己感兴趣和熟悉的事，起码你要认可你在做的事情，热爱着它。\n总拿着功利主义去做事，你做不好的。\n##### 关于人生目标\n成为高级程序员，大牛工程师是人生的一个方向，但绝不是最高目标。\n技术不能应用到产品中，就是一页废纸，把产品和技术结合起来，运用到商业层面。\n正如雷军所言：`无论多么高级的程序员，关键是你能否出想法出产品，你的劳动能否被社会承认，为社会创造财富，成为高级程序员绝对不是追求的目标。`\n","slug":"📣🤔🤔关于技术和创业的思考","published":1,"updated":"2024-05-16T07:39:11.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pi006o2omv6cjj7rhf","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-28daa7a95a10990c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"怎样看待技术\"><a href=\"#怎样看待技术\" class=\"headerlink\" title=\"怎样看待技术\"></a>怎样看待技术</h5><p>最近，身边的小伙伴很多都开始自主创业，我不进有点浮想联翩。</p>\n<p>技术对社会进步具有重要推动作用，这句话的范畴是技术的大规模应用。<br>如果某项技术在某个时间段没有被某个人发明，难道这项技术就不回存在了吗？</p>\n<p>没有爱因斯坦，核武器就不会出现？<br>没有乔布斯，智能手机就不会出现？<br>没有牛顿，万有引力就没人发现？</p>\n<p>我觉得就算当时没有出现，以后也会有别的人去发现。</p>\n<p>搞技术被替代的可能性非常高，因为很多都是已知的，具体的，不像创业需要冒险，所谓高风险高收入。技术入门门槛没有那么的高，IT技术到今天基本原理并没有变化，仍旧是冯诺伊曼体系，数据结构和算法几十年也不会变。</p>\n<p>另一方面，语言在发展，框架在更新，两年不学习，可能行业就不存在了，你怎么证明你曾经的经验呢，这个行业的特点就是日新月异，很难有所积累，人脉无法积累，经验无法积累。</p>\n<h5 id=\"积累型工种怎么区分呢？\"><a href=\"#积累型工种怎么区分呢？\" class=\"headerlink\" title=\"积累型工种怎么区分呢？\"></a>积累型工种怎么区分呢？</h5><p>总分为两种类型：<br>1、资源积累型，比如销售，餐饮业；<br>2、经验积累型，比如医生、教师，会计。</p>\n<p>老师年纪越大越吃香，因为教材不会经常变。<br>律师年纪越大越吃香，因为法律条文不会朝令夕改。<br>医生年纪越大越吃香，因为人的生理结构不会变。<br>文物鉴定师年纪越大越吃香，上百年的文物不会变吧。</p>\n<p>希望在一个技能行业耕耘的前提是，这个行业知识体系结构不会有激进性，高频率的改变。<br>技术能创造的价值是有限的，有限到我们常常高估自己，高估这个行业对社会进步的影响。</p>\n<p>改变世界的是人和点子，让你被更多人被需要，而不是技术。通过阿里搞死的虾米，天天动听，总结人还是应该做自己感兴趣和熟悉的事，起码你要认可你在做的事情，热爱着它。<br>总拿着功利主义去做事，你做不好的。</p>\n<h5 id=\"关于人生目标\"><a href=\"#关于人生目标\" class=\"headerlink\" title=\"关于人生目标\"></a>关于人生目标</h5><p>成为高级程序员，大牛工程师是人生的一个方向，但绝不是最高目标。<br>技术不能应用到产品中，就是一页废纸，把产品和技术结合起来，运用到商业层面。<br>正如雷军所言：<code>无论多么高级的程序员，关键是你能否出想法出产品，你的劳动能否被社会承认，为社会创造财富，成为高级程序员绝对不是追求的目标。</code></p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-28daa7a95a10990c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"怎样看待技术\"><a href=\"#怎样看待技术\" class=\"headerlink\" title=\"怎样看待技术\"></a>怎样看待技术</h5><p>最近，身边的小伙伴很多都开始自主创业，我不进有点浮想联翩。</p>\n<p>技术对社会进步具有重要推动作用，这句话的范畴是技术的大规模应用。<br>如果某项技术在某个时间段没有被某个人发明，难道这项技术就不回存在了吗？</p>\n<p>没有爱因斯坦，核武器就不会出现？<br>没有乔布斯，智能手机就不会出现？<br>没有牛顿，万有引力就没人发现？</p>\n<p>我觉得就算当时没有出现，以后也会有别的人去发现。</p>\n<p>搞技术被替代的可能性非常高，因为很多都是已知的，具体的，不像创业需要冒险，所谓高风险高收入。技术入门门槛没有那么的高，IT技术到今天基本原理并没有变化，仍旧是冯诺伊曼体系，数据结构和算法几十年也不会变。</p>\n<p>另一方面，语言在发展，框架在更新，两年不学习，可能行业就不存在了，你怎么证明你曾经的经验呢，这个行业的特点就是日新月异，很难有所积累，人脉无法积累，经验无法积累。</p>\n<h5 id=\"积累型工种怎么区分呢？\"><a href=\"#积累型工种怎么区分呢？\" class=\"headerlink\" title=\"积累型工种怎么区分呢？\"></a>积累型工种怎么区分呢？</h5><p>总分为两种类型：<br>1、资源积累型，比如销售，餐饮业；<br>2、经验积累型，比如医生、教师，会计。</p>\n<p>老师年纪越大越吃香，因为教材不会经常变。<br>律师年纪越大越吃香，因为法律条文不会朝令夕改。<br>医生年纪越大越吃香，因为人的生理结构不会变。<br>文物鉴定师年纪越大越吃香，上百年的文物不会变吧。</p>\n<p>希望在一个技能行业耕耘的前提是，这个行业知识体系结构不会有激进性，高频率的改变。<br>技术能创造的价值是有限的，有限到我们常常高估自己，高估这个行业对社会进步的影响。</p>\n<p>改变世界的是人和点子，让你被更多人被需要，而不是技术。通过阿里搞死的虾米，天天动听，总结人还是应该做自己感兴趣和熟悉的事，起码你要认可你在做的事情，热爱着它。<br>总拿着功利主义去做事，你做不好的。</p>\n<h5 id=\"关于人生目标\"><a href=\"#关于人生目标\" class=\"headerlink\" title=\"关于人生目标\"></a>关于人生目标</h5><p>成为高级程序员，大牛工程师是人生的一个方向，但绝不是最高目标。<br>技术不能应用到产品中，就是一页废纸，把产品和技术结合起来，运用到商业层面。<br>正如雷军所言：<code>无论多么高级的程序员，关键是你能否出想法出产品，你的劳动能否被社会承认，为社会创造财富，成为高级程序员绝对不是追求的目标。</code></p>\n"},{"title":"🗳🗳-nginx-启动停止命令","date":"2021-09-14T16:00:00.000Z","_content":"#### 启动\n```\n$ ./nginx\n```\n\n#### 查看nginx 的状态 \nps -ef | grep nginx  出现master 则启动成功\n![](https://upload-images.jianshu.io/upload_images/15312191-8458f03006e93406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 关闭nginx\n\n```\nkill -9 9658(进程号 上面的) \n```\n\n#### 停止 nginx 命令\n```\n./nginx -s stop\n```\n#### 重启nginx\n\n ```\n$ ./nginx -s reload\n```\n#### 查找nginx 位置\n```\n$ whereis nginx\n```\n![](https://upload-images.jianshu.io/upload_images/15312191-7226fcbc8ff137c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 检测 nginx.config正确性\n\n```\nnginx -t\n```\n![](https://upload-images.jianshu.io/upload_images/15312191-8ed56dd863c03961.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/🗳🗳-nginx-启动停止命令.md","raw":"---\ntitle: \"🗳🗳-nginx-启动停止命令\"\ndate: 2021-09-15\ntags: \n- 开发日常\n---\n#### 启动\n```\n$ ./nginx\n```\n\n#### 查看nginx 的状态 \nps -ef | grep nginx  出现master 则启动成功\n![](https://upload-images.jianshu.io/upload_images/15312191-8458f03006e93406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 关闭nginx\n\n```\nkill -9 9658(进程号 上面的) \n```\n\n#### 停止 nginx 命令\n```\n./nginx -s stop\n```\n#### 重启nginx\n\n ```\n$ ./nginx -s reload\n```\n#### 查找nginx 位置\n```\n$ whereis nginx\n```\n![](https://upload-images.jianshu.io/upload_images/15312191-7226fcbc8ff137c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 检测 nginx.config正确性\n\n```\nnginx -t\n```\n![](https://upload-images.jianshu.io/upload_images/15312191-8ed56dd863c03961.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"🗳🗳-nginx-启动停止命令","published":1,"updated":"2024-05-16T07:39:11.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pj006q2omvh7eratm6","content":"<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./nginx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看nginx-的状态\"><a href=\"#查看nginx-的状态\" class=\"headerlink\" title=\"查看nginx 的状态\"></a>查看nginx 的状态</h4><p>ps -ef | grep nginx  出现master 则启动成功<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8458f03006e93406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"关闭nginx\"><a href=\"#关闭nginx\" class=\"headerlink\" title=\"关闭nginx\"></a>关闭nginx</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -9 9658(进程号 上面的) </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"停止-nginx-命令\"><a href=\"#停止-nginx-命令\" class=\"headerlink\" title=\"停止 nginx 命令\"></a>停止 nginx 命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -s stop</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启nginx\"><a href=\"#重启nginx\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h4> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./nginx -s reload</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找nginx-位置\"><a href=\"#查找nginx-位置\" class=\"headerlink\" title=\"查找nginx 位置\"></a>查找nginx 位置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ whereis nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7226fcbc8ff137c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"检测-nginx-config正确性\"><a href=\"#检测-nginx-config正确性\" class=\"headerlink\" title=\"检测 nginx.config正确性\"></a>检测 nginx.config正确性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8ed56dd863c03961.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./nginx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看nginx-的状态\"><a href=\"#查看nginx-的状态\" class=\"headerlink\" title=\"查看nginx 的状态\"></a>查看nginx 的状态</h4><p>ps -ef | grep nginx  出现master 则启动成功<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8458f03006e93406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"关闭nginx\"><a href=\"#关闭nginx\" class=\"headerlink\" title=\"关闭nginx\"></a>关闭nginx</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -9 9658(进程号 上面的) </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"停止-nginx-命令\"><a href=\"#停止-nginx-命令\" class=\"headerlink\" title=\"停止 nginx 命令\"></a>停止 nginx 命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -s stop</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启nginx\"><a href=\"#重启nginx\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h4> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./nginx -s reload</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找nginx-位置\"><a href=\"#查找nginx-位置\" class=\"headerlink\" title=\"查找nginx 位置\"></a>查找nginx 位置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ whereis nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-7226fcbc8ff137c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h4 id=\"检测-nginx-config正确性\"><a href=\"#检测-nginx-config正确性\" class=\"headerlink\" title=\"检测 nginx.config正确性\"></a>检测 nginx.config正确性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-8ed56dd863c03961.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n"},{"title":"🗳🗳-npm版本自动控制","date":"2021-08-14T16:00:00.000Z","_content":"### 痛点\nnpm 发包每次都手动改 version，好烦。。🤣\n\n\n\n### 解决办法：Semantic versioning\n#### npm version Patch\n在我们的package.json里面有一个version字段。\n\n\n那么，怎么在项目不断构建的过程中调整版本呢？\n\nnpm有一套自己的版本控制标准——Semantic versioning（语义化版本）\n\n\n具体体现为：\n\n版本格式：**主版本号** **次版本号**  **修订号**，版本号递增规则如下：\n\n主版本号：patch，当你做了不兼容的 API 修改，\n次版本号：minor，当你做了向下兼容的功能性新增，\n修订号：major，当你做了向下兼容的问题修正。\n\n\n\n自动改变版本\n\n$ `npm version <update_type>`\n#### [参数](update_type)\n\n##### update_type: `patch(补丁)`, `minor(小改)`, `major(大改)`\n\n例如：我原本的项目是1.0.0版本的话\n```\nnpm --no-git-tag-version version patch\n```\npatch => 1.0.1\n```\nnpm --no-git-tag-version version mino\n```\nmino => 1.1.0\n```\nnpm --no-git-tag-version version major\n```\nmajor => 2.0.0\n\nps: 记得加 **--no-git-tag-version**，因为version命令会影响git tag\n\n#### version + prepare\n`npm publish`之前会调用 `prepare`命令，我们可以利用这个hook，打包文件，一键发布🤔\n\n\npackage.json:\n```\n\"scripts\": {\n    \"build\": \"NODE_ENV=production webpack --progress\",\n    \"prepare\": \"npm run build && npm --no-git-tag-version version patch\"\n  },\n```\n","source":"_posts/🗳🗳-npm版本自动控制.md","raw":"---\ntitle: \"🗳🗳-npm版本自动控制\"\ndate: 2021-08-15\ntags: \n- 开发日常\n---\n### 痛点\nnpm 发包每次都手动改 version，好烦。。🤣\n\n\n\n### 解决办法：Semantic versioning\n#### npm version Patch\n在我们的package.json里面有一个version字段。\n\n\n那么，怎么在项目不断构建的过程中调整版本呢？\n\nnpm有一套自己的版本控制标准——Semantic versioning（语义化版本）\n\n\n具体体现为：\n\n版本格式：**主版本号** **次版本号**  **修订号**，版本号递增规则如下：\n\n主版本号：patch，当你做了不兼容的 API 修改，\n次版本号：minor，当你做了向下兼容的功能性新增，\n修订号：major，当你做了向下兼容的问题修正。\n\n\n\n自动改变版本\n\n$ `npm version <update_type>`\n#### [参数](update_type)\n\n##### update_type: `patch(补丁)`, `minor(小改)`, `major(大改)`\n\n例如：我原本的项目是1.0.0版本的话\n```\nnpm --no-git-tag-version version patch\n```\npatch => 1.0.1\n```\nnpm --no-git-tag-version version mino\n```\nmino => 1.1.0\n```\nnpm --no-git-tag-version version major\n```\nmajor => 2.0.0\n\nps: 记得加 **--no-git-tag-version**，因为version命令会影响git tag\n\n#### version + prepare\n`npm publish`之前会调用 `prepare`命令，我们可以利用这个hook，打包文件，一键发布🤔\n\n\npackage.json:\n```\n\"scripts\": {\n    \"build\": \"NODE_ENV=production webpack --progress\",\n    \"prepare\": \"npm run build && npm --no-git-tag-version version patch\"\n  },\n```\n","slug":"🗳🗳-npm版本自动控制","published":1,"updated":"2024-05-16T07:39:11.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pk006s2omva9qr1eic","content":"<h3 id=\"痛点\"><a href=\"#痛点\" class=\"headerlink\" title=\"痛点\"></a>痛点</h3><p>npm 发包每次都手动改 version，好烦。。🤣</p>\n<h3 id=\"解决办法：Semantic-versioning\"><a href=\"#解决办法：Semantic-versioning\" class=\"headerlink\" title=\"解决办法：Semantic versioning\"></a>解决办法：Semantic versioning</h3><h4 id=\"npm-version-Patch\"><a href=\"#npm-version-Patch\" class=\"headerlink\" title=\"npm version Patch\"></a>npm version Patch</h4><p>在我们的package.json里面有一个version字段。</p>\n<p>那么，怎么在项目不断构建的过程中调整版本呢？</p>\n<p>npm有一套自己的版本控制标准——Semantic versioning（语义化版本）</p>\n<p>具体体现为：</p>\n<p>版本格式：<strong>主版本号</strong> <strong>次版本号</strong>  <strong>修订号</strong>，版本号递增规则如下：</p>\n<p>主版本号：patch，当你做了不兼容的 API 修改，<br>次版本号：minor，当你做了向下兼容的功能性新增，<br>修订号：major，当你做了向下兼容的问题修正。</p>\n<p>自动改变版本</p>\n<p>$ <code>npm version &lt;update_type&gt;</code></p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a><a href=\"update_type\">参数</a></h4><h5 id=\"update-type-patch-补丁-minor-小改-major-大改\"><a href=\"#update-type-patch-补丁-minor-小改-major-大改\" class=\"headerlink\" title=\"update_type: patch(补丁), minor(小改), major(大改)\"></a>update_type: <code>patch(补丁)</code>, <code>minor(小改)</code>, <code>major(大改)</code></h5><p>例如：我原本的项目是1.0.0版本的话</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --no-git-tag-version version patch</span><br></pre></td></tr></table></figure>\n<p>patch &#x3D;&gt; 1.0.1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --no-git-tag-version version mino</span><br></pre></td></tr></table></figure>\n<p>mino &#x3D;&gt; 1.1.0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --no-git-tag-version version major</span><br></pre></td></tr></table></figure>\n<p>major &#x3D;&gt; 2.0.0</p>\n<p>ps: 记得加 <strong>–no-git-tag-version</strong>，因为version命令会影响git tag</p>\n<h4 id=\"version-prepare\"><a href=\"#version-prepare\" class=\"headerlink\" title=\"version + prepare\"></a>version + prepare</h4><p><code>npm publish</code>之前会调用 <code>prepare</code>命令，我们可以利用这个hook，打包文件，一键发布🤔</p>\n<p>package.json:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &quot;NODE_ENV=production webpack --progress&quot;,</span><br><span class=\"line\">    &quot;prepare&quot;: &quot;npm run build &amp;&amp; npm --no-git-tag-version version patch&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"痛点\"><a href=\"#痛点\" class=\"headerlink\" title=\"痛点\"></a>痛点</h3><p>npm 发包每次都手动改 version，好烦。。🤣</p>\n<h3 id=\"解决办法：Semantic-versioning\"><a href=\"#解决办法：Semantic-versioning\" class=\"headerlink\" title=\"解决办法：Semantic versioning\"></a>解决办法：Semantic versioning</h3><h4 id=\"npm-version-Patch\"><a href=\"#npm-version-Patch\" class=\"headerlink\" title=\"npm version Patch\"></a>npm version Patch</h4><p>在我们的package.json里面有一个version字段。</p>\n<p>那么，怎么在项目不断构建的过程中调整版本呢？</p>\n<p>npm有一套自己的版本控制标准——Semantic versioning（语义化版本）</p>\n<p>具体体现为：</p>\n<p>版本格式：<strong>主版本号</strong> <strong>次版本号</strong>  <strong>修订号</strong>，版本号递增规则如下：</p>\n<p>主版本号：patch，当你做了不兼容的 API 修改，<br>次版本号：minor，当你做了向下兼容的功能性新增，<br>修订号：major，当你做了向下兼容的问题修正。</p>\n<p>自动改变版本</p>\n<p>$ <code>npm version &lt;update_type&gt;</code></p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a><a href=\"update_type\">参数</a></h4><h5 id=\"update-type-patch-补丁-minor-小改-major-大改\"><a href=\"#update-type-patch-补丁-minor-小改-major-大改\" class=\"headerlink\" title=\"update_type: patch(补丁), minor(小改), major(大改)\"></a>update_type: <code>patch(补丁)</code>, <code>minor(小改)</code>, <code>major(大改)</code></h5><p>例如：我原本的项目是1.0.0版本的话</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --no-git-tag-version version patch</span><br></pre></td></tr></table></figure>\n<p>patch &#x3D;&gt; 1.0.1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --no-git-tag-version version mino</span><br></pre></td></tr></table></figure>\n<p>mino &#x3D;&gt; 1.1.0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --no-git-tag-version version major</span><br></pre></td></tr></table></figure>\n<p>major &#x3D;&gt; 2.0.0</p>\n<p>ps: 记得加 <strong>–no-git-tag-version</strong>，因为version命令会影响git tag</p>\n<h4 id=\"version-prepare\"><a href=\"#version-prepare\" class=\"headerlink\" title=\"version + prepare\"></a>version + prepare</h4><p><code>npm publish</code>之前会调用 <code>prepare</code>命令，我们可以利用这个hook，打包文件，一键发布🤔</p>\n<p>package.json:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &quot;NODE_ENV=production webpack --progress&quot;,</span><br><span class=\"line\">    &quot;prepare&quot;: &quot;npm run build &amp;&amp; npm --no-git-tag-version version patch&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n"},{"title":"🗳🗳-软件工程之前端基础建设","date":"2022-05-20T16:00:00.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/15312191-43bdbc0767ce06bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n任何工程的建设都需要基础工具、方法，在前端软件开发中，基础工具和工程的开发必不可少。\n\n#### 为什么搞前端基建？\n在业务开发中，解决普遍性、高频性的工作，让业务开发更幸福。\n#### 怎么搞？\n前端基建的几个方向\n![](https://upload-images.jianshu.io/upload_images/15312191-b506acf308b5255d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#####  1.CLI套件，脚手架最佳实践\n基本稍微成熟的团队，都会有自己的cli工具，快速开发，拉取，定义。\n例如海尔的packi，字节UED团队的Arco Design Pro，阿里的ice。\n最佳实践方案包括：\n- 前端技术选型\n-  UI模版\n- 统一登陆\n- 国际化\n- 权限管理\n- 菜单配置\n- 路由配置\n- 本地 Mock 数据\n- theme更改\n- 数据请求\n- Proxy方案\n- 状态管理\n- 日志打印\n- 环境配置\n- 文件上传环境搭建\n- 私有源搭建\n\n##### 2.端数据监控\n端性能跟踪分析，行为数据监控，埋点反馈。\n端性能检测包括：\n- 首开速度\n- 图片大小检测，预加载\n- tcp速度\n- dns解析速度\n- gzip是否开启等\n\n![](https://upload-images.jianshu.io/upload_images/15312191-3c28ccda725ed738.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n #####  3.端构建发布\n发布构建，主要解决两大问题：\n- 资源发布\n- 版本号管理，回溯\n成熟的方案如jekins，gitlab-cli，可在此基础上开发\n或者按照自己的具体需求定制，例如政采云的云长系统，插件化定制，例如构建检测中断，具体如API兼容，debugger关键词检测，包版本监控。\n#####  4.可视化搭建\n解放开发，非开发人员可自动定制，如采购平台首页，定制楼层，商品。\n#####  5.特色场景自动化工具，各个领域工具链\n特别工具解决特别场景问题。\n例如：swagger Api查找工具，python开发商品自动发布工具，webpack-afteremit-zipfloder-plugin插件，移动端pc调试工具\n##### 6.前端规范，文档\n规范方面：代码规范，命名规范，git分支管理、提交规范，lint标准。\n文档方面：代码未动，文档先行，目前现有的文档站点方案有 [docsify](https://link.juejin.cn/?target=https%3A%2F%2Fdocsify.js.org%2F%23%2F%3Fid%3Ddocsify \"https://docsify.js.org/#/?id=docsify\")、[gitbook](https://link.juejin.cn/?target=http%3A%2F%2Fgitbook.hushuang.me%2F \"http://gitbook.hushuang.me/\")、[vuepress](https://link.juejin.cn/?target=https%3A%2F%2Fvuepress.vuejs.org%2Fzh%2Fguide%2F \"https://vuepress.vuejs.org/zh/guide/\") 等，也可以自己DIY。\n\n##### 7.端安全防护\n  - 代码兼容性检测\n  - 包安全检查\n  - 恶意请求拦截报警\n  - 端构建发布跟踪\n  - 接口请求报错\n  - 代码回滚指派\n  - 统计静态资源加载问题\n#### 如何做前端基建人\n前端人员不应把自己设限在前端的UI层。\n着眼于服务层，网管层，Java，go，nodejs,，mysql，redis，前端不止于前端。\n#### 仰望星空，基建的未来\n![](https://upload-images.jianshu.io/upload_images/15312191-4b06f06f03f9a278.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n前端基建应该和公司具体发展阶段相吻合：\n\n##### 初期团队\n前端要求能用就行，拼人力完全能搞定；\n##### 发展阶段\n如果业务增值10倍，团队也要增长10倍？靠加班996方式拼蛮力，老板费钱，我不幸福。\n把当前业务努力做好，等业务相对成熟，就得进入想办法阶段，梳理工具链，工具化，系统化，降低人肉要求。\n##### 成熟阶段\n经过中期发展阶段，基建相对完善，人工智能方向突破；\n如阿里鲁班制图，微软sketch2json，京东Deco，设计稿直接生成代码，更多是探索 AI 与前端结合的各种可能性。\n\n上面介绍的都是可见场景，未来的软件开发面对的场景会更多，更复杂，与硬件结合的密切。\n\n>[前端文档站点搭建方案](https://juejin.cn/post/6844904132076126222)\n> [前端搞基建|Scott - 如何在人单力薄时立项推动基建](https://zhuanlan.zhihu.com/p/148514252)\n","source":"_posts/🗳🗳-软件工程之前端基础建设.md","raw":"---\ntitle: \"🗳🗳-软件工程之前端基础建设\"\ndate: 2022-05-21\ntags: \n- 开发日常\n---\n![](https://upload-images.jianshu.io/upload_images/15312191-43bdbc0767ce06bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n任何工程的建设都需要基础工具、方法，在前端软件开发中，基础工具和工程的开发必不可少。\n\n#### 为什么搞前端基建？\n在业务开发中，解决普遍性、高频性的工作，让业务开发更幸福。\n#### 怎么搞？\n前端基建的几个方向\n![](https://upload-images.jianshu.io/upload_images/15312191-b506acf308b5255d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#####  1.CLI套件，脚手架最佳实践\n基本稍微成熟的团队，都会有自己的cli工具，快速开发，拉取，定义。\n例如海尔的packi，字节UED团队的Arco Design Pro，阿里的ice。\n最佳实践方案包括：\n- 前端技术选型\n-  UI模版\n- 统一登陆\n- 国际化\n- 权限管理\n- 菜单配置\n- 路由配置\n- 本地 Mock 数据\n- theme更改\n- 数据请求\n- Proxy方案\n- 状态管理\n- 日志打印\n- 环境配置\n- 文件上传环境搭建\n- 私有源搭建\n\n##### 2.端数据监控\n端性能跟踪分析，行为数据监控，埋点反馈。\n端性能检测包括：\n- 首开速度\n- 图片大小检测，预加载\n- tcp速度\n- dns解析速度\n- gzip是否开启等\n\n![](https://upload-images.jianshu.io/upload_images/15312191-3c28ccda725ed738.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n #####  3.端构建发布\n发布构建，主要解决两大问题：\n- 资源发布\n- 版本号管理，回溯\n成熟的方案如jekins，gitlab-cli，可在此基础上开发\n或者按照自己的具体需求定制，例如政采云的云长系统，插件化定制，例如构建检测中断，具体如API兼容，debugger关键词检测，包版本监控。\n#####  4.可视化搭建\n解放开发，非开发人员可自动定制，如采购平台首页，定制楼层，商品。\n#####  5.特色场景自动化工具，各个领域工具链\n特别工具解决特别场景问题。\n例如：swagger Api查找工具，python开发商品自动发布工具，webpack-afteremit-zipfloder-plugin插件，移动端pc调试工具\n##### 6.前端规范，文档\n规范方面：代码规范，命名规范，git分支管理、提交规范，lint标准。\n文档方面：代码未动，文档先行，目前现有的文档站点方案有 [docsify](https://link.juejin.cn/?target=https%3A%2F%2Fdocsify.js.org%2F%23%2F%3Fid%3Ddocsify \"https://docsify.js.org/#/?id=docsify\")、[gitbook](https://link.juejin.cn/?target=http%3A%2F%2Fgitbook.hushuang.me%2F \"http://gitbook.hushuang.me/\")、[vuepress](https://link.juejin.cn/?target=https%3A%2F%2Fvuepress.vuejs.org%2Fzh%2Fguide%2F \"https://vuepress.vuejs.org/zh/guide/\") 等，也可以自己DIY。\n\n##### 7.端安全防护\n  - 代码兼容性检测\n  - 包安全检查\n  - 恶意请求拦截报警\n  - 端构建发布跟踪\n  - 接口请求报错\n  - 代码回滚指派\n  - 统计静态资源加载问题\n#### 如何做前端基建人\n前端人员不应把自己设限在前端的UI层。\n着眼于服务层，网管层，Java，go，nodejs,，mysql，redis，前端不止于前端。\n#### 仰望星空，基建的未来\n![](https://upload-images.jianshu.io/upload_images/15312191-4b06f06f03f9a278.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n前端基建应该和公司具体发展阶段相吻合：\n\n##### 初期团队\n前端要求能用就行，拼人力完全能搞定；\n##### 发展阶段\n如果业务增值10倍，团队也要增长10倍？靠加班996方式拼蛮力，老板费钱，我不幸福。\n把当前业务努力做好，等业务相对成熟，就得进入想办法阶段，梳理工具链，工具化，系统化，降低人肉要求。\n##### 成熟阶段\n经过中期发展阶段，基建相对完善，人工智能方向突破；\n如阿里鲁班制图，微软sketch2json，京东Deco，设计稿直接生成代码，更多是探索 AI 与前端结合的各种可能性。\n\n上面介绍的都是可见场景，未来的软件开发面对的场景会更多，更复杂，与硬件结合的密切。\n\n>[前端文档站点搭建方案](https://juejin.cn/post/6844904132076126222)\n> [前端搞基建|Scott - 如何在人单力薄时立项推动基建](https://zhuanlan.zhihu.com/p/148514252)\n","slug":"🗳🗳-软件工程之前端基础建设","published":1,"updated":"2024-05-16T07:39:11.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pl006u2omv0f379ir3","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-43bdbc0767ce06bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>任何工程的建设都需要基础工具、方法，在前端软件开发中，基础工具和工程的开发必不可少。</p>\n<h4 id=\"为什么搞前端基建？\"><a href=\"#为什么搞前端基建？\" class=\"headerlink\" title=\"为什么搞前端基建？\"></a>为什么搞前端基建？</h4><p>在业务开发中，解决普遍性、高频性的工作，让业务开发更幸福。</p>\n<h4 id=\"怎么搞？\"><a href=\"#怎么搞？\" class=\"headerlink\" title=\"怎么搞？\"></a>怎么搞？</h4><p>前端基建的几个方向<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b506acf308b5255d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"1-CLI套件，脚手架最佳实践\"><a href=\"#1-CLI套件，脚手架最佳实践\" class=\"headerlink\" title=\"1.CLI套件，脚手架最佳实践\"></a>1.CLI套件，脚手架最佳实践</h5><p>基本稍微成熟的团队，都会有自己的cli工具，快速开发，拉取，定义。<br>例如海尔的packi，字节UED团队的Arco Design Pro，阿里的ice。<br>最佳实践方案包括：</p>\n<ul>\n<li>前端技术选型</li>\n<li>UI模版</li>\n<li>统一登陆</li>\n<li>国际化</li>\n<li>权限管理</li>\n<li>菜单配置</li>\n<li>路由配置</li>\n<li>本地 Mock 数据</li>\n<li>theme更改</li>\n<li>数据请求</li>\n<li>Proxy方案</li>\n<li>状态管理</li>\n<li>日志打印</li>\n<li>环境配置</li>\n<li>文件上传环境搭建</li>\n<li>私有源搭建</li>\n</ul>\n<h5 id=\"2-端数据监控\"><a href=\"#2-端数据监控\" class=\"headerlink\" title=\"2.端数据监控\"></a>2.端数据监控</h5><p>端性能跟踪分析，行为数据监控，埋点反馈。<br>端性能检测包括：</p>\n<ul>\n<li>首开速度</li>\n<li>图片大小检测，预加载</li>\n<li>tcp速度</li>\n<li>dns解析速度</li>\n<li>gzip是否开启等</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3c28ccda725ed738.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"3-端构建发布\"><a href=\"#3-端构建发布\" class=\"headerlink\" title=\"3.端构建发布\"></a>3.端构建发布</h5><p>发布构建，主要解决两大问题：</p>\n<ul>\n<li>资源发布</li>\n<li>版本号管理，回溯<br>成熟的方案如jekins，gitlab-cli，可在此基础上开发<br>或者按照自己的具体需求定制，例如政采云的云长系统，插件化定制，例如构建检测中断，具体如API兼容，debugger关键词检测，包版本监控。<h5 id=\"4-可视化搭建\"><a href=\"#4-可视化搭建\" class=\"headerlink\" title=\"4.可视化搭建\"></a>4.可视化搭建</h5>解放开发，非开发人员可自动定制，如采购平台首页，定制楼层，商品。<h5 id=\"5-特色场景自动化工具，各个领域工具链\"><a href=\"#5-特色场景自动化工具，各个领域工具链\" class=\"headerlink\" title=\"5.特色场景自动化工具，各个领域工具链\"></a>5.特色场景自动化工具，各个领域工具链</h5>特别工具解决特别场景问题。<br>例如：swagger Api查找工具，python开发商品自动发布工具，webpack-afteremit-zipfloder-plugin插件，移动端pc调试工具<h5 id=\"6-前端规范，文档\"><a href=\"#6-前端规范，文档\" class=\"headerlink\" title=\"6.前端规范，文档\"></a>6.前端规范，文档</h5>规范方面：代码规范，命名规范，git分支管理、提交规范，lint标准。<br>文档方面：代码未动，文档先行，目前现有的文档站点方案有 <a href=\"https://link.juejin.cn/?target=https://docsify.js.org/%23/?id=docsify\" title=\"https://docsify.js.org/#/?id=docsify\">docsify</a>、<a href=\"https://link.juejin.cn/?target=http://gitbook.hushuang.me/\" title=\"http://gitbook.hushuang.me/\">gitbook</a>、<a href=\"https://link.juejin.cn/?target=https://vuepress.vuejs.org/zh/guide/\" title=\"https://vuepress.vuejs.org/zh/guide/\">vuepress</a> 等，也可以自己DIY。</li>\n</ul>\n<h5 id=\"7-端安全防护\"><a href=\"#7-端安全防护\" class=\"headerlink\" title=\"7.端安全防护\"></a>7.端安全防护</h5><ul>\n<li>代码兼容性检测</li>\n<li>包安全检查</li>\n<li>恶意请求拦截报警</li>\n<li>端构建发布跟踪</li>\n<li>接口请求报错</li>\n<li>代码回滚指派</li>\n<li>统计静态资源加载问题<h4 id=\"如何做前端基建人\"><a href=\"#如何做前端基建人\" class=\"headerlink\" title=\"如何做前端基建人\"></a>如何做前端基建人</h4>前端人员不应把自己设限在前端的UI层。<br>着眼于服务层，网管层，Java，go，nodejs,，mysql，redis，前端不止于前端。<h4 id=\"仰望星空，基建的未来\"><a href=\"#仰望星空，基建的未来\" class=\"headerlink\" title=\"仰望星空，基建的未来\"></a>仰望星空，基建的未来</h4><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4b06f06f03f9a278.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></li>\n</ul>\n<p>前端基建应该和公司具体发展阶段相吻合：</p>\n<h5 id=\"初期团队\"><a href=\"#初期团队\" class=\"headerlink\" title=\"初期团队\"></a>初期团队</h5><p>前端要求能用就行，拼人力完全能搞定；</p>\n<h5 id=\"发展阶段\"><a href=\"#发展阶段\" class=\"headerlink\" title=\"发展阶段\"></a>发展阶段</h5><p>如果业务增值10倍，团队也要增长10倍？靠加班996方式拼蛮力，老板费钱，我不幸福。<br>把当前业务努力做好，等业务相对成熟，就得进入想办法阶段，梳理工具链，工具化，系统化，降低人肉要求。</p>\n<h5 id=\"成熟阶段\"><a href=\"#成熟阶段\" class=\"headerlink\" title=\"成熟阶段\"></a>成熟阶段</h5><p>经过中期发展阶段，基建相对完善，人工智能方向突破；<br>如阿里鲁班制图，微软sketch2json，京东Deco，设计稿直接生成代码，更多是探索 AI 与前端结合的各种可能性。</p>\n<p>上面介绍的都是可见场景，未来的软件开发面对的场景会更多，更复杂，与硬件结合的密切。</p>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844904132076126222\">前端文档站点搭建方案</a><br><a href=\"https://zhuanlan.zhihu.com/p/148514252\">前端搞基建|Scott - 如何在人单力薄时立项推动基建</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-43bdbc0767ce06bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>任何工程的建设都需要基础工具、方法，在前端软件开发中，基础工具和工程的开发必不可少。</p>\n<h4 id=\"为什么搞前端基建？\"><a href=\"#为什么搞前端基建？\" class=\"headerlink\" title=\"为什么搞前端基建？\"></a>为什么搞前端基建？</h4><p>在业务开发中，解决普遍性、高频性的工作，让业务开发更幸福。</p>\n<h4 id=\"怎么搞？\"><a href=\"#怎么搞？\" class=\"headerlink\" title=\"怎么搞？\"></a>怎么搞？</h4><p>前端基建的几个方向<br><img src=\"https://upload-images.jianshu.io/upload_images/15312191-b506acf308b5255d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"1-CLI套件，脚手架最佳实践\"><a href=\"#1-CLI套件，脚手架最佳实践\" class=\"headerlink\" title=\"1.CLI套件，脚手架最佳实践\"></a>1.CLI套件，脚手架最佳实践</h5><p>基本稍微成熟的团队，都会有自己的cli工具，快速开发，拉取，定义。<br>例如海尔的packi，字节UED团队的Arco Design Pro，阿里的ice。<br>最佳实践方案包括：</p>\n<ul>\n<li>前端技术选型</li>\n<li>UI模版</li>\n<li>统一登陆</li>\n<li>国际化</li>\n<li>权限管理</li>\n<li>菜单配置</li>\n<li>路由配置</li>\n<li>本地 Mock 数据</li>\n<li>theme更改</li>\n<li>数据请求</li>\n<li>Proxy方案</li>\n<li>状态管理</li>\n<li>日志打印</li>\n<li>环境配置</li>\n<li>文件上传环境搭建</li>\n<li>私有源搭建</li>\n</ul>\n<h5 id=\"2-端数据监控\"><a href=\"#2-端数据监控\" class=\"headerlink\" title=\"2.端数据监控\"></a>2.端数据监控</h5><p>端性能跟踪分析，行为数据监控，埋点反馈。<br>端性能检测包括：</p>\n<ul>\n<li>首开速度</li>\n<li>图片大小检测，预加载</li>\n<li>tcp速度</li>\n<li>dns解析速度</li>\n<li>gzip是否开启等</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-3c28ccda725ed738.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h5 id=\"3-端构建发布\"><a href=\"#3-端构建发布\" class=\"headerlink\" title=\"3.端构建发布\"></a>3.端构建发布</h5><p>发布构建，主要解决两大问题：</p>\n<ul>\n<li>资源发布</li>\n<li>版本号管理，回溯<br>成熟的方案如jekins，gitlab-cli，可在此基础上开发<br>或者按照自己的具体需求定制，例如政采云的云长系统，插件化定制，例如构建检测中断，具体如API兼容，debugger关键词检测，包版本监控。<h5 id=\"4-可视化搭建\"><a href=\"#4-可视化搭建\" class=\"headerlink\" title=\"4.可视化搭建\"></a>4.可视化搭建</h5>解放开发，非开发人员可自动定制，如采购平台首页，定制楼层，商品。<h5 id=\"5-特色场景自动化工具，各个领域工具链\"><a href=\"#5-特色场景自动化工具，各个领域工具链\" class=\"headerlink\" title=\"5.特色场景自动化工具，各个领域工具链\"></a>5.特色场景自动化工具，各个领域工具链</h5>特别工具解决特别场景问题。<br>例如：swagger Api查找工具，python开发商品自动发布工具，webpack-afteremit-zipfloder-plugin插件，移动端pc调试工具<h5 id=\"6-前端规范，文档\"><a href=\"#6-前端规范，文档\" class=\"headerlink\" title=\"6.前端规范，文档\"></a>6.前端规范，文档</h5>规范方面：代码规范，命名规范，git分支管理、提交规范，lint标准。<br>文档方面：代码未动，文档先行，目前现有的文档站点方案有 <a href=\"https://link.juejin.cn/?target=https://docsify.js.org/%23/?id=docsify\" title=\"https://docsify.js.org/#/?id=docsify\">docsify</a>、<a href=\"https://link.juejin.cn/?target=http://gitbook.hushuang.me/\" title=\"http://gitbook.hushuang.me/\">gitbook</a>、<a href=\"https://link.juejin.cn/?target=https://vuepress.vuejs.org/zh/guide/\" title=\"https://vuepress.vuejs.org/zh/guide/\">vuepress</a> 等，也可以自己DIY。</li>\n</ul>\n<h5 id=\"7-端安全防护\"><a href=\"#7-端安全防护\" class=\"headerlink\" title=\"7.端安全防护\"></a>7.端安全防护</h5><ul>\n<li>代码兼容性检测</li>\n<li>包安全检查</li>\n<li>恶意请求拦截报警</li>\n<li>端构建发布跟踪</li>\n<li>接口请求报错</li>\n<li>代码回滚指派</li>\n<li>统计静态资源加载问题<h4 id=\"如何做前端基建人\"><a href=\"#如何做前端基建人\" class=\"headerlink\" title=\"如何做前端基建人\"></a>如何做前端基建人</h4>前端人员不应把自己设限在前端的UI层。<br>着眼于服务层，网管层，Java，go，nodejs,，mysql，redis，前端不止于前端。<h4 id=\"仰望星空，基建的未来\"><a href=\"#仰望星空，基建的未来\" class=\"headerlink\" title=\"仰望星空，基建的未来\"></a>仰望星空，基建的未来</h4><img src=\"https://upload-images.jianshu.io/upload_images/15312191-4b06f06f03f9a278.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></li>\n</ul>\n<p>前端基建应该和公司具体发展阶段相吻合：</p>\n<h5 id=\"初期团队\"><a href=\"#初期团队\" class=\"headerlink\" title=\"初期团队\"></a>初期团队</h5><p>前端要求能用就行，拼人力完全能搞定；</p>\n<h5 id=\"发展阶段\"><a href=\"#发展阶段\" class=\"headerlink\" title=\"发展阶段\"></a>发展阶段</h5><p>如果业务增值10倍，团队也要增长10倍？靠加班996方式拼蛮力，老板费钱，我不幸福。<br>把当前业务努力做好，等业务相对成熟，就得进入想办法阶段，梳理工具链，工具化，系统化，降低人肉要求。</p>\n<h5 id=\"成熟阶段\"><a href=\"#成熟阶段\" class=\"headerlink\" title=\"成熟阶段\"></a>成熟阶段</h5><p>经过中期发展阶段，基建相对完善，人工智能方向突破；<br>如阿里鲁班制图，微软sketch2json，京东Deco，设计稿直接生成代码，更多是探索 AI 与前端结合的各种可能性。</p>\n<p>上面介绍的都是可见场景，未来的软件开发面对的场景会更多，更复杂，与硬件结合的密切。</p>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844904132076126222\">前端文档站点搭建方案</a><br><a href=\"https://zhuanlan.zhihu.com/p/148514252\">前端搞基建|Scott - 如何在人单力薄时立项推动基建</a></p>\n</blockquote>\n"},{"title":"🗳🗳nginx转发小能手","date":"2022-01-10T16:00:00.000Z","_content":"需要把前后端分离的项目部署到服务器,\n前端静态资源通过nginx代理访问,接口请求代理到指定端口的服务上,先看配置:\n\n```\nserver {\n    listen       4040;\n    server_name  127.0.0.1;\n    // 静态目录设置\n    location / {\n       root   /opt/demo/static;\n       index  index.html index.htm;\n    }\n    // 域名转发\n    location ^~ / {\n      proxy_pass   http://example.com:4041/;\n    }\n    // 目录映射\n    location /image/ {\n      root /;\n      rewrite ^/image/(.*)$ /image_data/$1 break;\n    }\n}\n```\n##### 1.静态文件\nnginx代理端口4040, 后台服务端口4041. 这个要注意了,nginx监听的端口不能与服务端口相同\n`/根目录` --被代理到--> `/opt/demo/static`路径下\n那么在static下的静态资源就可以直接被访问了,形式: [http://127.0.0.1:4040/index.html](http://127.0.0.1:4040/index.html)\n\n##### 2.域名代理\n访问某个域名会被代理到另一个域名下\n比如：\n`http:// 10.138.92.77:4040\n被代理到--> `http://direct.com\n\n**实战**\n\npack脚手架nginx项目配置，生产环境\n```\nresolver 10.138.92.77;\nlocation ^~ / {\n  set $entry index.html;\n  set $prefix http://cdn.haier.net/assets/overlay/dts-fe/html-entries-prod;\n  set $project_name suk-sys;\n  proxy_pass $prefix/$project_name/$entry;\n}\n```\n访问 服务器IP 就会转发到  http://cdn.haier.net/assets/overlay/dts-fe/html-entries-prod/suk-sys/index.html\n\n##### 3.nginx做本地目录映射\n　location /image/设置服务器拦截含有/image/的请求，实际上范围根据实际情况确定精确度\n\n　　root /;设定作用的根目录，rewrite就是真正的跳转规则，设置以image为开头的请求跳转到/image_data开头的根目录，后面的参数原封不动的添加过去，这样就实现了目录的映射，\n\n　　使用上面的规则可以很方便的映射到本地指定的多个用于静态访问的目录\n\n比如想通过浏览器http://ip/image/2016/04/29/10/abc.jpg访问到系统目录/image_data/2016/04/29/10/abc.jpg\n\n\n\n\n\n> [1] https://www.cnblogs.com/linyufeng/p/13361640.html\n[2] https://www.jianshu.com/p/b010c9302cd0\n[3] [nginx做本地目录映射](https://www.cnblogs.com/freeweb/p/5446632.html)\n","source":"_posts/🗳🗳nginx转发小能手.md","raw":"---\ntitle: \"🗳🗳nginx转发小能手\"\ndate: 2022-01-11\ntags: \n- 开发日常\n---\n需要把前后端分离的项目部署到服务器,\n前端静态资源通过nginx代理访问,接口请求代理到指定端口的服务上,先看配置:\n\n```\nserver {\n    listen       4040;\n    server_name  127.0.0.1;\n    // 静态目录设置\n    location / {\n       root   /opt/demo/static;\n       index  index.html index.htm;\n    }\n    // 域名转发\n    location ^~ / {\n      proxy_pass   http://example.com:4041/;\n    }\n    // 目录映射\n    location /image/ {\n      root /;\n      rewrite ^/image/(.*)$ /image_data/$1 break;\n    }\n}\n```\n##### 1.静态文件\nnginx代理端口4040, 后台服务端口4041. 这个要注意了,nginx监听的端口不能与服务端口相同\n`/根目录` --被代理到--> `/opt/demo/static`路径下\n那么在static下的静态资源就可以直接被访问了,形式: [http://127.0.0.1:4040/index.html](http://127.0.0.1:4040/index.html)\n\n##### 2.域名代理\n访问某个域名会被代理到另一个域名下\n比如：\n`http:// 10.138.92.77:4040\n被代理到--> `http://direct.com\n\n**实战**\n\npack脚手架nginx项目配置，生产环境\n```\nresolver 10.138.92.77;\nlocation ^~ / {\n  set $entry index.html;\n  set $prefix http://cdn.haier.net/assets/overlay/dts-fe/html-entries-prod;\n  set $project_name suk-sys;\n  proxy_pass $prefix/$project_name/$entry;\n}\n```\n访问 服务器IP 就会转发到  http://cdn.haier.net/assets/overlay/dts-fe/html-entries-prod/suk-sys/index.html\n\n##### 3.nginx做本地目录映射\n　location /image/设置服务器拦截含有/image/的请求，实际上范围根据实际情况确定精确度\n\n　　root /;设定作用的根目录，rewrite就是真正的跳转规则，设置以image为开头的请求跳转到/image_data开头的根目录，后面的参数原封不动的添加过去，这样就实现了目录的映射，\n\n　　使用上面的规则可以很方便的映射到本地指定的多个用于静态访问的目录\n\n比如想通过浏览器http://ip/image/2016/04/29/10/abc.jpg访问到系统目录/image_data/2016/04/29/10/abc.jpg\n\n\n\n\n\n> [1] https://www.cnblogs.com/linyufeng/p/13361640.html\n[2] https://www.jianshu.com/p/b010c9302cd0\n[3] [nginx做本地目录映射](https://www.cnblogs.com/freeweb/p/5446632.html)\n","slug":"🗳🗳nginx转发小能手","published":1,"updated":"2024-05-16T07:39:11.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pm006w2omv2g002h4g","content":"<p>需要把前后端分离的项目部署到服务器,<br>前端静态资源通过nginx代理访问,接口请求代理到指定端口的服务上,先看配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       4040;</span><br><span class=\"line\">    server_name  127.0.0.1;</span><br><span class=\"line\">    // 静态目录设置</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">       root   /opt/demo/static;</span><br><span class=\"line\">       index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 域名转发</span><br><span class=\"line\">    location ^~ / &#123;</span><br><span class=\"line\">      proxy_pass   http://example.com:4041/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 目录映射</span><br><span class=\"line\">    location /image/ &#123;</span><br><span class=\"line\">      root /;</span><br><span class=\"line\">      rewrite ^/image/(.*)$ /image_data/$1 break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-静态文件\"><a href=\"#1-静态文件\" class=\"headerlink\" title=\"1.静态文件\"></a>1.静态文件</h5><p>nginx代理端口4040, 后台服务端口4041. 这个要注意了,nginx监听的端口不能与服务端口相同<br><code>/根目录</code> –被代理到–&gt; <code>/opt/demo/static</code>路径下<br>那么在static下的静态资源就可以直接被访问了,形式: <a href=\"http://127.0.0.1:4040/index.html\">http://127.0.0.1:4040/index.html</a></p>\n<h5 id=\"2-域名代理\"><a href=\"#2-域名代理\" class=\"headerlink\" title=\"2.域名代理\"></a>2.域名代理</h5><p>访问某个域名会被代理到另一个域名下<br>比如：<br><code>http:// 10.138.92.77:4040 被代理到--&gt; </code><a href=\"http://direct.com/\">http://direct.com</a></p>\n<p><strong>实战</strong></p>\n<p>pack脚手架nginx项目配置，生产环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolver 10.138.92.77;</span><br><span class=\"line\">location ^~ / &#123;</span><br><span class=\"line\">  set $entry index.html;</span><br><span class=\"line\">  set $prefix http://cdn.haier.net/assets/overlay/dts-fe/html-entries-prod;</span><br><span class=\"line\">  set $project_name suk-sys;</span><br><span class=\"line\">  proxy_pass $prefix/$project_name/$entry;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问 服务器IP 就会转发到  <a href=\"http://cdn.haier.net/assets/overlay/dts-fe/html-entries-prod/suk-sys/index.html\">http://cdn.haier.net/assets/overlay/dts-fe/html-entries-prod/suk-sys/index.html</a></p>\n<h5 id=\"3-nginx做本地目录映射\"><a href=\"#3-nginx做本地目录映射\" class=\"headerlink\" title=\"3.nginx做本地目录映射\"></a>3.nginx做本地目录映射</h5><p>　location &#x2F;image&#x2F;设置服务器拦截含有&#x2F;image&#x2F;的请求，实际上范围根据实际情况确定精确度</p>\n<p>　　root &#x2F;;设定作用的根目录，rewrite就是真正的跳转规则，设置以image为开头的请求跳转到&#x2F;image_data开头的根目录，后面的参数原封不动的添加过去，这样就实现了目录的映射，</p>\n<p>　　使用上面的规则可以很方便的映射到本地指定的多个用于静态访问的目录</p>\n<p>比如想通过浏览器<a href=\"http://ip/image/2016/04/29/10/abc.jpg%E8%AE%BF%E9%97%AE%E5%88%B0%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/image_data/2016/04/29/10/abc.jpg\">http://ip/image/2016/04/29/10/abc.jpg访问到系统目录/image_data/2016/04/29/10/abc.jpg</a></p>\n<blockquote>\n<p>[1] <a href=\"https://www.cnblogs.com/linyufeng/p/13361640.html\">https://www.cnblogs.com/linyufeng/p/13361640.html</a><br>[2] <a href=\"https://www.jianshu.com/p/b010c9302cd0\">https://www.jianshu.com/p/b010c9302cd0</a><br>[3] <a href=\"https://www.cnblogs.com/freeweb/p/5446632.html\">nginx做本地目录映射</a></p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p>需要把前后端分离的项目部署到服务器,<br>前端静态资源通过nginx代理访问,接口请求代理到指定端口的服务上,先看配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       4040;</span><br><span class=\"line\">    server_name  127.0.0.1;</span><br><span class=\"line\">    // 静态目录设置</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">       root   /opt/demo/static;</span><br><span class=\"line\">       index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 域名转发</span><br><span class=\"line\">    location ^~ / &#123;</span><br><span class=\"line\">      proxy_pass   http://example.com:4041/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 目录映射</span><br><span class=\"line\">    location /image/ &#123;</span><br><span class=\"line\">      root /;</span><br><span class=\"line\">      rewrite ^/image/(.*)$ /image_data/$1 break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-静态文件\"><a href=\"#1-静态文件\" class=\"headerlink\" title=\"1.静态文件\"></a>1.静态文件</h5><p>nginx代理端口4040, 后台服务端口4041. 这个要注意了,nginx监听的端口不能与服务端口相同<br><code>/根目录</code> –被代理到–&gt; <code>/opt/demo/static</code>路径下<br>那么在static下的静态资源就可以直接被访问了,形式: <a href=\"http://127.0.0.1:4040/index.html\">http://127.0.0.1:4040/index.html</a></p>\n<h5 id=\"2-域名代理\"><a href=\"#2-域名代理\" class=\"headerlink\" title=\"2.域名代理\"></a>2.域名代理</h5><p>访问某个域名会被代理到另一个域名下<br>比如：<br><code>http:// 10.138.92.77:4040 被代理到--&gt; </code><a href=\"http://direct.com/\">http://direct.com</a></p>\n<p><strong>实战</strong></p>\n<p>pack脚手架nginx项目配置，生产环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolver 10.138.92.77;</span><br><span class=\"line\">location ^~ / &#123;</span><br><span class=\"line\">  set $entry index.html;</span><br><span class=\"line\">  set $prefix http://cdn.haier.net/assets/overlay/dts-fe/html-entries-prod;</span><br><span class=\"line\">  set $project_name suk-sys;</span><br><span class=\"line\">  proxy_pass $prefix/$project_name/$entry;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问 服务器IP 就会转发到  <a href=\"http://cdn.haier.net/assets/overlay/dts-fe/html-entries-prod/suk-sys/index.html\">http://cdn.haier.net/assets/overlay/dts-fe/html-entries-prod/suk-sys/index.html</a></p>\n<h5 id=\"3-nginx做本地目录映射\"><a href=\"#3-nginx做本地目录映射\" class=\"headerlink\" title=\"3.nginx做本地目录映射\"></a>3.nginx做本地目录映射</h5><p>　location &#x2F;image&#x2F;设置服务器拦截含有&#x2F;image&#x2F;的请求，实际上范围根据实际情况确定精确度</p>\n<p>　　root &#x2F;;设定作用的根目录，rewrite就是真正的跳转规则，设置以image为开头的请求跳转到&#x2F;image_data开头的根目录，后面的参数原封不动的添加过去，这样就实现了目录的映射，</p>\n<p>　　使用上面的规则可以很方便的映射到本地指定的多个用于静态访问的目录</p>\n<p>比如想通过浏览器<a href=\"http://ip/image/2016/04/29/10/abc.jpg%E8%AE%BF%E9%97%AE%E5%88%B0%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/image_data/2016/04/29/10/abc.jpg\">http://ip/image/2016/04/29/10/abc.jpg访问到系统目录/image_data/2016/04/29/10/abc.jpg</a></p>\n<blockquote>\n<p>[1] <a href=\"https://www.cnblogs.com/linyufeng/p/13361640.html\">https://www.cnblogs.com/linyufeng/p/13361640.html</a><br>[2] <a href=\"https://www.jianshu.com/p/b010c9302cd0\">https://www.jianshu.com/p/b010c9302cd0</a><br>[3] <a href=\"https://www.cnblogs.com/freeweb/p/5446632.html\">nginx做本地目录映射</a></p>\n</blockquote>\n"},{"title":"🟨-🟨--常用正则表达式","date":"2021-06-28T16:00:00.000Z","_content":"### 常用正则表达式\n#### 1.数字，保留两位小数\n```js\n^(([1-9]{1}\\d*)|(0{1}))(\\.\\d{0,2})?$\n```\n\n```\n2.22, true\n2.0 true\n2 true\n2.222 false\n```\n#### 1.1.有效数字，不以0结尾\n```js\n let reg = /^(([1-9]{1}\\d*)|(0{1}))(\\.\\d*[1-9]+)?$/;\n```\n```\n2.20 false\n2.22 true\n2 true\n2.222 true\n```\n#### 2.连续相同字符\n```\n^(.)\\1{1}\n```\n```\nlet s = \"aaabbcde\"\ns.match(/(.)\\1*/g);\n[\"aaa\",\"bb\",\"c\",\"d\",\"e\"]\n```\n#### 3.奇数\n```\n/^\\d?[13579]$/\n```\n#### 4.以某个字符开头的字符\n```\nonst reg = new RegExp(`(?<=${str})\\\\w+`, 'g');\n(?<=${str}) 以某个字符开头\n```\n\n-----\n\n\n### 方法\n\n#### 1.replace \n语法\n> str.replace(regexp|substr, newSubStr|function)\n```\nlet  ex = \"aadcd\";\nex = ex.replace('a',1)  // \"1adcd\"\n```\n\n```\nlet  ex = \"aadcd\";\nex = ex.replace(/a/g,1) // \"11dcd\"\n```\n\n```\nlet obj = {a: 1, b: 2}\nlet  ex = \"aadcd\";\nex = ex.replace(/a/g, (match ,offset) => {\n  console.log(match) // 匹配对象\n  console.log(offset) // 下标\n  return obj[match]\n})\nconsole.log(ex) // \"11dcd\"\n```\n#### 2.replaceAll\nES2021新特性-替换一个字符串中的所有指定字符 replaceAll()方法的使用\nString.protype.replaceAll\n\n在 ES2021 之前\n\n```js\nconst str = '2-4-6-8-10';\nconst newStr = str.replace(/\\-/g, '+');\nconsole.log(newStr); //2+4+6+8+10\n```\n\nES2021 之后：\n\n```\nconst str = '2-4-6-8-10';\nconst newStr = str.replaceAll('-', '+');\nconsole.log(newStr); //2+4+6+8+10\n```\n\n#### 在正则中使用变量\n\n```\nlet pre = \"flo\"\nlet reg = new RegExp(`${pre}`)\n```\n\n\n#### 基础知识\n正则只能用于匹配，不能用于计算\n ```js\n.匹配除换行符以外的任意字符\n\\w 匹配字母或数字或下划线或汉字 等价于 ‘[A-Za-z0-9_]’。\n\\s 匹配任意的空白符\n\\d 匹配数字\n+ 表示重复一次或者多次\n?表示重复0次或1次（最多1次）；\n* 表示重复零次或者多次\n{n,m} 表示n 到 m 次\n/\\XX/g 全局替换\n```\n","source":"_posts/🟨-🟨--常用正则表达式.md","raw":"---\ntitle: \"🟨-🟨--常用正则表达式\"\ndate: 2021-06-29\ntags: \n- 正则\n---\n### 常用正则表达式\n#### 1.数字，保留两位小数\n```js\n^(([1-9]{1}\\d*)|(0{1}))(\\.\\d{0,2})?$\n```\n\n```\n2.22, true\n2.0 true\n2 true\n2.222 false\n```\n#### 1.1.有效数字，不以0结尾\n```js\n let reg = /^(([1-9]{1}\\d*)|(0{1}))(\\.\\d*[1-9]+)?$/;\n```\n```\n2.20 false\n2.22 true\n2 true\n2.222 true\n```\n#### 2.连续相同字符\n```\n^(.)\\1{1}\n```\n```\nlet s = \"aaabbcde\"\ns.match(/(.)\\1*/g);\n[\"aaa\",\"bb\",\"c\",\"d\",\"e\"]\n```\n#### 3.奇数\n```\n/^\\d?[13579]$/\n```\n#### 4.以某个字符开头的字符\n```\nonst reg = new RegExp(`(?<=${str})\\\\w+`, 'g');\n(?<=${str}) 以某个字符开头\n```\n\n-----\n\n\n### 方法\n\n#### 1.replace \n语法\n> str.replace(regexp|substr, newSubStr|function)\n```\nlet  ex = \"aadcd\";\nex = ex.replace('a',1)  // \"1adcd\"\n```\n\n```\nlet  ex = \"aadcd\";\nex = ex.replace(/a/g,1) // \"11dcd\"\n```\n\n```\nlet obj = {a: 1, b: 2}\nlet  ex = \"aadcd\";\nex = ex.replace(/a/g, (match ,offset) => {\n  console.log(match) // 匹配对象\n  console.log(offset) // 下标\n  return obj[match]\n})\nconsole.log(ex) // \"11dcd\"\n```\n#### 2.replaceAll\nES2021新特性-替换一个字符串中的所有指定字符 replaceAll()方法的使用\nString.protype.replaceAll\n\n在 ES2021 之前\n\n```js\nconst str = '2-4-6-8-10';\nconst newStr = str.replace(/\\-/g, '+');\nconsole.log(newStr); //2+4+6+8+10\n```\n\nES2021 之后：\n\n```\nconst str = '2-4-6-8-10';\nconst newStr = str.replaceAll('-', '+');\nconsole.log(newStr); //2+4+6+8+10\n```\n\n#### 在正则中使用变量\n\n```\nlet pre = \"flo\"\nlet reg = new RegExp(`${pre}`)\n```\n\n\n#### 基础知识\n正则只能用于匹配，不能用于计算\n ```js\n.匹配除换行符以外的任意字符\n\\w 匹配字母或数字或下划线或汉字 等价于 ‘[A-Za-z0-9_]’。\n\\s 匹配任意的空白符\n\\d 匹配数字\n+ 表示重复一次或者多次\n?表示重复0次或1次（最多1次）；\n* 表示重复零次或者多次\n{n,m} 表示n 到 m 次\n/\\XX/g 全局替换\n```\n","slug":"🟨-🟨--常用正则表达式","published":1,"updated":"2024-05-16T07:39:11.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pn006y2omv2geh83ls","content":"<h3 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h3><h4 id=\"1-数字，保留两位小数\"><a href=\"#1-数字，保留两位小数\" class=\"headerlink\" title=\"1.数字，保留两位小数\"></a>1.数字，保留两位小数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(([<span class=\"number\">1</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">1</span>&#125;\\d*)|(<span class=\"number\">0</span>&#123;<span class=\"number\">1</span>&#125;))(\\.\\d&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;)?$</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.22, true</span><br><span class=\"line\">2.0 true</span><br><span class=\"line\">2 true</span><br><span class=\"line\">2.222 false</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-1-有效数字，不以0结尾\"><a href=\"#1-1-有效数字，不以0结尾\" class=\"headerlink\" title=\"1.1.有效数字，不以0结尾\"></a>1.1.有效数字，不以0结尾</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^(([1-9]&#123;1&#125;\\d*)|(0&#123;1&#125;))(\\.\\d*[1-9]+)?$/</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.20 false</span><br><span class=\"line\">2.22 true</span><br><span class=\"line\">2 true</span><br><span class=\"line\">2.222 true</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-连续相同字符\"><a href=\"#2-连续相同字符\" class=\"headerlink\" title=\"2.连续相同字符\"></a>2.连续相同字符</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(.)\\1&#123;1&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = &quot;aaabbcde&quot;</span><br><span class=\"line\">s.match(/(.)\\1*/g);</span><br><span class=\"line\">[&quot;aaa&quot;,&quot;bb&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-奇数\"><a href=\"#3-奇数\" class=\"headerlink\" title=\"3.奇数\"></a>3.奇数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^\\d?[13579]$/</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-以某个字符开头的字符\"><a href=\"#4-以某个字符开头的字符\" class=\"headerlink\" title=\"4.以某个字符开头的字符\"></a>4.以某个字符开头的字符</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onst reg = new RegExp(`(?&lt;=$&#123;str&#125;)\\\\w+`, &#x27;g&#x27;);</span><br><span class=\"line\">(?&lt;=$&#123;str&#125;) 以某个字符开头</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-replace\"><a href=\"#1-replace\" class=\"headerlink\" title=\"1.replace\"></a>1.replace</h4><p>语法</p>\n<blockquote>\n<p>str.replace(regexp|substr, newSubStr|function)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  ex = &quot;aadcd&quot;;</span><br><span class=\"line\">ex = ex.replace(&#x27;a&#x27;,1)  // &quot;1adcd&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  ex = &quot;aadcd&quot;;</span><br><span class=\"line\">ex = ex.replace(/a/g,1) // &quot;11dcd&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;a: 1, b: 2&#125;</span><br><span class=\"line\">let  ex = &quot;aadcd&quot;;</span><br><span class=\"line\">ex = ex.replace(/a/g, (match ,offset) =&gt; &#123;</span><br><span class=\"line\">  console.log(match) // 匹配对象</span><br><span class=\"line\">  console.log(offset) // 下标</span><br><span class=\"line\">  return obj[match]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(ex) // &quot;11dcd&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-replaceAll\"><a href=\"#2-replaceAll\" class=\"headerlink\" title=\"2.replaceAll\"></a>2.replaceAll</h4><p>ES2021新特性-替换一个字符串中的所有指定字符 replaceAll()方法的使用<br>String.protype.replaceAll</p>\n<p>在 ES2021 之前</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;2-4-6-8-10&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> newStr = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\-/g</span>, <span class=\"string\">&#x27;+&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newStr); <span class=\"comment\">//2+4+6+8+10</span></span><br></pre></td></tr></table></figure>\n\n<p>ES2021 之后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const str = &#x27;2-4-6-8-10&#x27;;</span><br><span class=\"line\">const newStr = str.replaceAll(&#x27;-&#x27;, &#x27;+&#x27;);</span><br><span class=\"line\">console.log(newStr); //2+4+6+8+10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在正则中使用变量\"><a href=\"#在正则中使用变量\" class=\"headerlink\" title=\"在正则中使用变量\"></a>在正则中使用变量</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pre = &quot;flo&quot;</span><br><span class=\"line\">let reg = new RegExp(`$&#123;pre&#125;`)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><p>正则只能用于匹配，不能用于计算<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.匹配除换行符以外的任意字符</span><br><span class=\"line\">\\w 匹配字母或数字或下划线或汉字 等价于 ‘[A-<span class=\"title class_\">Za</span>-z0-9_]’。</span><br><span class=\"line\">\\s 匹配任意的空白符</span><br><span class=\"line\">\\d 匹配数字</span><br><span class=\"line\">+ 表示重复一次或者多次</span><br><span class=\"line\">?表示重复<span class=\"number\">0</span>次或<span class=\"number\">1</span>次（最多<span class=\"number\">1</span>次）；</span><br><span class=\"line\">* 表示重复零次或者多次</span><br><span class=\"line\">&#123;n,m&#125; 表示n 到 m 次</span><br><span class=\"line\">/\\<span class=\"variable constant_\">XX</span>/g 全局替换</span><br></pre></td></tr></table></figure></p>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h3><h4 id=\"1-数字，保留两位小数\"><a href=\"#1-数字，保留两位小数\" class=\"headerlink\" title=\"1.数字，保留两位小数\"></a>1.数字，保留两位小数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(([<span class=\"number\">1</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">1</span>&#125;\\d*)|(<span class=\"number\">0</span>&#123;<span class=\"number\">1</span>&#125;))(\\.\\d&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;)?$</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.22, true</span><br><span class=\"line\">2.0 true</span><br><span class=\"line\">2 true</span><br><span class=\"line\">2.222 false</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-1-有效数字，不以0结尾\"><a href=\"#1-1-有效数字，不以0结尾\" class=\"headerlink\" title=\"1.1.有效数字，不以0结尾\"></a>1.1.有效数字，不以0结尾</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^(([1-9]&#123;1&#125;\\d*)|(0&#123;1&#125;))(\\.\\d*[1-9]+)?$/</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.20 false</span><br><span class=\"line\">2.22 true</span><br><span class=\"line\">2 true</span><br><span class=\"line\">2.222 true</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-连续相同字符\"><a href=\"#2-连续相同字符\" class=\"headerlink\" title=\"2.连续相同字符\"></a>2.连续相同字符</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(.)\\1&#123;1&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = &quot;aaabbcde&quot;</span><br><span class=\"line\">s.match(/(.)\\1*/g);</span><br><span class=\"line\">[&quot;aaa&quot;,&quot;bb&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-奇数\"><a href=\"#3-奇数\" class=\"headerlink\" title=\"3.奇数\"></a>3.奇数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^\\d?[13579]$/</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-以某个字符开头的字符\"><a href=\"#4-以某个字符开头的字符\" class=\"headerlink\" title=\"4.以某个字符开头的字符\"></a>4.以某个字符开头的字符</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onst reg = new RegExp(`(?&lt;=$&#123;str&#125;)\\\\w+`, &#x27;g&#x27;);</span><br><span class=\"line\">(?&lt;=$&#123;str&#125;) 以某个字符开头</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"1-replace\"><a href=\"#1-replace\" class=\"headerlink\" title=\"1.replace\"></a>1.replace</h4><p>语法</p>\n<blockquote>\n<p>str.replace(regexp|substr, newSubStr|function)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  ex = &quot;aadcd&quot;;</span><br><span class=\"line\">ex = ex.replace(&#x27;a&#x27;,1)  // &quot;1adcd&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  ex = &quot;aadcd&quot;;</span><br><span class=\"line\">ex = ex.replace(/a/g,1) // &quot;11dcd&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;a: 1, b: 2&#125;</span><br><span class=\"line\">let  ex = &quot;aadcd&quot;;</span><br><span class=\"line\">ex = ex.replace(/a/g, (match ,offset) =&gt; &#123;</span><br><span class=\"line\">  console.log(match) // 匹配对象</span><br><span class=\"line\">  console.log(offset) // 下标</span><br><span class=\"line\">  return obj[match]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(ex) // &quot;11dcd&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-replaceAll\"><a href=\"#2-replaceAll\" class=\"headerlink\" title=\"2.replaceAll\"></a>2.replaceAll</h4><p>ES2021新特性-替换一个字符串中的所有指定字符 replaceAll()方法的使用<br>String.protype.replaceAll</p>\n<p>在 ES2021 之前</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;2-4-6-8-10&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> newStr = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\-/g</span>, <span class=\"string\">&#x27;+&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newStr); <span class=\"comment\">//2+4+6+8+10</span></span><br></pre></td></tr></table></figure>\n\n<p>ES2021 之后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const str = &#x27;2-4-6-8-10&#x27;;</span><br><span class=\"line\">const newStr = str.replaceAll(&#x27;-&#x27;, &#x27;+&#x27;);</span><br><span class=\"line\">console.log(newStr); //2+4+6+8+10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在正则中使用变量\"><a href=\"#在正则中使用变量\" class=\"headerlink\" title=\"在正则中使用变量\"></a>在正则中使用变量</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pre = &quot;flo&quot;</span><br><span class=\"line\">let reg = new RegExp(`$&#123;pre&#125;`)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><p>正则只能用于匹配，不能用于计算<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.匹配除换行符以外的任意字符</span><br><span class=\"line\">\\w 匹配字母或数字或下划线或汉字 等价于 ‘[A-<span class=\"title class_\">Za</span>-z0-9_]’。</span><br><span class=\"line\">\\s 匹配任意的空白符</span><br><span class=\"line\">\\d 匹配数字</span><br><span class=\"line\">+ 表示重复一次或者多次</span><br><span class=\"line\">?表示重复<span class=\"number\">0</span>次或<span class=\"number\">1</span>次（最多<span class=\"number\">1</span>次）；</span><br><span class=\"line\">* 表示重复零次或者多次</span><br><span class=\"line\">&#123;n,m&#125; 表示n 到 m 次</span><br><span class=\"line\">/\\<span class=\"variable constant_\">XX</span>/g 全局替换</span><br></pre></td></tr></table></figure></p>\n"},{"title":"🟨-🟨-正则表达式中^的用法","date":"2021-08-03T16:00:00.000Z","_content":"##### 用法一:   限定开头\n\n 文档上给出了解释是匹配输入的开始，如果多行标示被设置成了true，同时会匹配后面紧跟的字符。    比如 /^A/会匹配\"An e\"中的A，但是不会匹配\"ab A\"中的A\n\n##### 用法二：（否）取反\n\n当这个字符出现在一个字符集合模式的第一个字符时，他将会有不同的含义。\n\n 比如： /[^a-z\\s]/会匹配\"my 3 sisters\"中的\"3\"  这里的”^”的意思是字符类的否定，上面的正则表达式的意思是匹配不是（a到z和空白字符）的字符。 \n\n##### 总结：\n\n什么时候”^”是否定字符，什么时候是匹配开始行\n\n###### 表示限定开头的示例：\n```\n/[(^\\s+)(\\s+$)]/g\n(^cat)$\n(^cat$)\n^(cat)$\n^(cat$)\n```\n###### 表示否定的示例：\n```\n[^a]表示“匹配除了a的任意字符”。\n[^a-zA-Z0-9]表示“找到一个非字母也非数字的字符”。\n[\\^abc]表示“找到一个插入符或者a或者b或者c”。\n[^0-9] 匹配非数字\n```\n经过对比，只要是”^”这个字符是在中括号”[]”中被使用的话就是表示字符类的否定，如果不是的话就是表示限定开头。我这里说的是直接在”[]”中使用，不包括嵌套使用。 \n其实也就是说”[]”代表的是一个字符集，”^”只有在字符集中才是反向字符集的意思。\n","source":"_posts/🟨-🟨-正则表达式中^的用法.md","raw":"---\ntitle: \"🟨-🟨-正则表达式中^的用法\"\ndate: 2021-08-04\ntags: \n- 正则\n---\n##### 用法一:   限定开头\n\n 文档上给出了解释是匹配输入的开始，如果多行标示被设置成了true，同时会匹配后面紧跟的字符。    比如 /^A/会匹配\"An e\"中的A，但是不会匹配\"ab A\"中的A\n\n##### 用法二：（否）取反\n\n当这个字符出现在一个字符集合模式的第一个字符时，他将会有不同的含义。\n\n 比如： /[^a-z\\s]/会匹配\"my 3 sisters\"中的\"3\"  这里的”^”的意思是字符类的否定，上面的正则表达式的意思是匹配不是（a到z和空白字符）的字符。 \n\n##### 总结：\n\n什么时候”^”是否定字符，什么时候是匹配开始行\n\n###### 表示限定开头的示例：\n```\n/[(^\\s+)(\\s+$)]/g\n(^cat)$\n(^cat$)\n^(cat)$\n^(cat$)\n```\n###### 表示否定的示例：\n```\n[^a]表示“匹配除了a的任意字符”。\n[^a-zA-Z0-9]表示“找到一个非字母也非数字的字符”。\n[\\^abc]表示“找到一个插入符或者a或者b或者c”。\n[^0-9] 匹配非数字\n```\n经过对比，只要是”^”这个字符是在中括号”[]”中被使用的话就是表示字符类的否定，如果不是的话就是表示限定开头。我这里说的是直接在”[]”中使用，不包括嵌套使用。 \n其实也就是说”[]”代表的是一个字符集，”^”只有在字符集中才是反向字符集的意思。\n","slug":"🟨-🟨-正则表达式中^的用法","published":1,"updated":"2024-05-16T07:39:11.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094po00702omve2f18u0a","content":"<h5 id=\"用法一-限定开头\"><a href=\"#用法一-限定开头\" class=\"headerlink\" title=\"用法一:   限定开头\"></a>用法一:   限定开头</h5><p> 文档上给出了解释是匹配输入的开始，如果多行标示被设置成了true，同时会匹配后面紧跟的字符。    比如 &#x2F;^A&#x2F;会匹配”An e”中的A，但是不会匹配”ab A”中的A</p>\n<h5 id=\"用法二：（否）取反\"><a href=\"#用法二：（否）取反\" class=\"headerlink\" title=\"用法二：（否）取反\"></a>用法二：（否）取反</h5><p>当这个字符出现在一个字符集合模式的第一个字符时，他将会有不同的含义。</p>\n<p> 比如： &#x2F;[^a-z\\s]&#x2F;会匹配”my 3 sisters”中的”3”  这里的”^”的意思是字符类的否定，上面的正则表达式的意思是匹配不是（a到z和空白字符）的字符。 </p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>什么时候”^”是否定字符，什么时候是匹配开始行</p>\n<h6 id=\"表示限定开头的示例：\"><a href=\"#表示限定开头的示例：\" class=\"headerlink\" title=\"表示限定开头的示例：\"></a>表示限定开头的示例：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[(^\\s+)(\\s+$)]/g</span><br><span class=\"line\">(^cat)$</span><br><span class=\"line\">(^cat$)</span><br><span class=\"line\">^(cat)$</span><br><span class=\"line\">^(cat$)</span><br></pre></td></tr></table></figure>\n<h6 id=\"表示否定的示例：\"><a href=\"#表示否定的示例：\" class=\"headerlink\" title=\"表示否定的示例：\"></a>表示否定的示例：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[^a]表示“匹配除了a的任意字符”。</span><br><span class=\"line\">[^a-zA-Z0-9]表示“找到一个非字母也非数字的字符”。</span><br><span class=\"line\">[\\^abc]表示“找到一个插入符或者a或者b或者c”。</span><br><span class=\"line\">[^0-9] 匹配非数字</span><br></pre></td></tr></table></figure>\n<p>经过对比，只要是”^”这个字符是在中括号”[]”中被使用的话就是表示字符类的否定，如果不是的话就是表示限定开头。我这里说的是直接在”[]”中使用，不包括嵌套使用。<br>其实也就是说”[]”代表的是一个字符集，”^”只有在字符集中才是反向字符集的意思。</p>\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"用法一-限定开头\"><a href=\"#用法一-限定开头\" class=\"headerlink\" title=\"用法一:   限定开头\"></a>用法一:   限定开头</h5><p> 文档上给出了解释是匹配输入的开始，如果多行标示被设置成了true，同时会匹配后面紧跟的字符。    比如 &#x2F;^A&#x2F;会匹配”An e”中的A，但是不会匹配”ab A”中的A</p>\n<h5 id=\"用法二：（否）取反\"><a href=\"#用法二：（否）取反\" class=\"headerlink\" title=\"用法二：（否）取反\"></a>用法二：（否）取反</h5><p>当这个字符出现在一个字符集合模式的第一个字符时，他将会有不同的含义。</p>\n<p> 比如： &#x2F;[^a-z\\s]&#x2F;会匹配”my 3 sisters”中的”3”  这里的”^”的意思是字符类的否定，上面的正则表达式的意思是匹配不是（a到z和空白字符）的字符。 </p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><p>什么时候”^”是否定字符，什么时候是匹配开始行</p>\n<h6 id=\"表示限定开头的示例：\"><a href=\"#表示限定开头的示例：\" class=\"headerlink\" title=\"表示限定开头的示例：\"></a>表示限定开头的示例：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[(^\\s+)(\\s+$)]/g</span><br><span class=\"line\">(^cat)$</span><br><span class=\"line\">(^cat$)</span><br><span class=\"line\">^(cat)$</span><br><span class=\"line\">^(cat$)</span><br></pre></td></tr></table></figure>\n<h6 id=\"表示否定的示例：\"><a href=\"#表示否定的示例：\" class=\"headerlink\" title=\"表示否定的示例：\"></a>表示否定的示例：</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[^a]表示“匹配除了a的任意字符”。</span><br><span class=\"line\">[^a-zA-Z0-9]表示“找到一个非字母也非数字的字符”。</span><br><span class=\"line\">[\\^abc]表示“找到一个插入符或者a或者b或者c”。</span><br><span class=\"line\">[^0-9] 匹配非数字</span><br></pre></td></tr></table></figure>\n<p>经过对比，只要是”^”这个字符是在中括号”[]”中被使用的话就是表示字符类的否定，如果不是的话就是表示限定开头。我这里说的是直接在”[]”中使用，不包括嵌套使用。<br>其实也就是说”[]”代表的是一个字符集，”^”只有在字符集中才是反向字符集的意思。</p>\n"},{"title":"🦕🦕-react-hotc与-Decorator模式区别","date":"2021-08-04T16:00:00.000Z","_content":"##### 简介\n高阶组件可以直接调用子组件属性方法；\n子组件通过 this.props.xxx调用高阶组件方法属性\n\n高阶组件无法修改子组件状态属性\n子组件无法修改高阶组件属性\n\n高阶组件通俗讲是 代理模式的变种\n##### 高阶组件和装饰器\n1.高阶组件是react 组件，拥有react 组件各种属性（生命周期，state, render)\n装饰器没有\n\n2.装饰器可以，修饰函数 和 react 组件 ，面向切面编程\n\n3.都是代理模式的一种应用\n","source":"_posts/🦕🦕-react-hotc与-Decorator模式区别.md","raw":"---\ntitle: \"🦕🦕-react-hotc与-Decorator模式区别\"\ndate: 2021-08-05\ntags: \n- 开发日常\n---\n##### 简介\n高阶组件可以直接调用子组件属性方法；\n子组件通过 this.props.xxx调用高阶组件方法属性\n\n高阶组件无法修改子组件状态属性\n子组件无法修改高阶组件属性\n\n高阶组件通俗讲是 代理模式的变种\n##### 高阶组件和装饰器\n1.高阶组件是react 组件，拥有react 组件各种属性（生命周期，state, render)\n装饰器没有\n\n2.装饰器可以，修饰函数 和 react 组件 ，面向切面编程\n\n3.都是代理模式的一种应用\n","slug":"🦕🦕-react-hotc与-Decorator模式区别","published":1,"updated":"2024-05-16T07:39:11.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pp00732omv8luea1q3","content":"<h5 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h5><p>高阶组件可以直接调用子组件属性方法；<br>子组件通过 this.props.xxx调用高阶组件方法属性</p>\n<p>高阶组件无法修改子组件状态属性<br>子组件无法修改高阶组件属性</p>\n<p>高阶组件通俗讲是 代理模式的变种</p>\n<h5 id=\"高阶组件和装饰器\"><a href=\"#高阶组件和装饰器\" class=\"headerlink\" title=\"高阶组件和装饰器\"></a>高阶组件和装饰器</h5><p>1.高阶组件是react 组件，拥有react 组件各种属性（生命周期，state, render)<br>装饰器没有</p>\n<p>2.装饰器可以，修饰函数 和 react 组件 ，面向切面编程</p>\n<p>3.都是代理模式的一种应用</p>\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h5><p>高阶组件可以直接调用子组件属性方法；<br>子组件通过 this.props.xxx调用高阶组件方法属性</p>\n<p>高阶组件无法修改子组件状态属性<br>子组件无法修改高阶组件属性</p>\n<p>高阶组件通俗讲是 代理模式的变种</p>\n<h5 id=\"高阶组件和装饰器\"><a href=\"#高阶组件和装饰器\" class=\"headerlink\" title=\"高阶组件和装饰器\"></a>高阶组件和装饰器</h5><p>1.高阶组件是react 组件，拥有react 组件各种属性（生命周期，state, render)<br>装饰器没有</p>\n<p>2.装饰器可以，修饰函数 和 react 组件 ，面向切面编程</p>\n<p>3.都是代理模式的一种应用</p>\n"},{"title":"🦕🦕React阻止事件冒泡？","date":"2018-12-07T16:00:00.000Z","_content":"React 为提高性能，有自己的一套事件处理机制，相当于将事件代理到全局进行处理，也就是说监听函数并未绑定到DOM元素上。因此，如果你禁止react事件冒泡e.stopPropagation()，你就无法阻止原生事件冒泡；你禁用原生事件冒泡e.nativeEvent.stopPropagation()，React的监听函数就调用不到了。\n\n正确的姿势，应该是判断event.target对象，是否是目标对象、或包含的对象、或被包含的对象，来决定是否触发事件。以下函数就可以用来判断包含性：\n\nDEMO\n\n```js\nfunction contains(root, n) {\n    var node = n;\n    while (node) {\n        if (node === root) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\nhandleClick (e) {\n    if(e.target.nodeName === 'li'){\n        // do something\n    }\n    if(contains(this.root, e.target)){\n        // do something\n    }\n}\n```\n","source":"_posts/🦕🦕React阻止事件冒泡？.md","raw":"---\ntitle: \"🦕🦕React阻止事件冒泡？\"\ndate: 2018-12-08\ntags: \n- 开发日常\n---\nReact 为提高性能，有自己的一套事件处理机制，相当于将事件代理到全局进行处理，也就是说监听函数并未绑定到DOM元素上。因此，如果你禁止react事件冒泡e.stopPropagation()，你就无法阻止原生事件冒泡；你禁用原生事件冒泡e.nativeEvent.stopPropagation()，React的监听函数就调用不到了。\n\n正确的姿势，应该是判断event.target对象，是否是目标对象、或包含的对象、或被包含的对象，来决定是否触发事件。以下函数就可以用来判断包含性：\n\nDEMO\n\n```js\nfunction contains(root, n) {\n    var node = n;\n    while (node) {\n        if (node === root) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\nhandleClick (e) {\n    if(e.target.nodeName === 'li'){\n        // do something\n    }\n    if(contains(this.root, e.target)){\n        // do something\n    }\n}\n```\n","slug":"🦕🦕React阻止事件冒泡？","published":1,"updated":"2024-05-16T07:39:11.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pq00752omvfi6b1kzn","content":"<p>React 为提高性能，有自己的一套事件处理机制，相当于将事件代理到全局进行处理，也就是说监听函数并未绑定到DOM元素上。因此，如果你禁止react事件冒泡e.stopPropagation()，你就无法阻止原生事件冒泡；你禁用原生事件冒泡e.nativeEvent.stopPropagation()，React的监听函数就调用不到了。</p>\n<p>正确的姿势，应该是判断event.target对象，是否是目标对象、或包含的对象、或被包含的对象，来决定是否触发事件。以下函数就可以用来判断包含性：</p>\n<p>DEMO</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">contains</span>(<span class=\"params\">root, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === root) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node = node.<span class=\"property\">parentNode</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handleClick (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span> === <span class=\"string\">&#x27;li&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">contains</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>, e.<span class=\"property\">target</span>))&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>React 为提高性能，有自己的一套事件处理机制，相当于将事件代理到全局进行处理，也就是说监听函数并未绑定到DOM元素上。因此，如果你禁止react事件冒泡e.stopPropagation()，你就无法阻止原生事件冒泡；你禁用原生事件冒泡e.nativeEvent.stopPropagation()，React的监听函数就调用不到了。</p>\n<p>正确的姿势，应该是判断event.target对象，是否是目标对象、或包含的对象、或被包含的对象，来决定是否触发事件。以下函数就可以用来判断包含性：</p>\n<p>DEMO</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">contains</span>(<span class=\"params\">root, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === root) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node = node.<span class=\"property\">parentNode</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handleClick (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span> === <span class=\"string\">&#x27;li&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_\">contains</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>, e.<span class=\"property\">target</span>))&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"🦜🦜-vue-router-同一个页面地址栏参数改变，页面不刷新的问题","date":"2021-10-21T16:00:00.000Z","_content":"vue-router  同一个页面地址栏参数改变（比如文章的发布和编辑是同一个页面），不会触发vue的created或者mounted钩子，所以数据不会重新渲染。\n\n解决办法有两种：\n\n1：监听地址栏变化（watch）,这是vue-router官方给出的解决办法。\n监听路由变化，把初始化的方法重新写到监听的方法里面执行\n```js\nwatch: {\n    '$route' (to, from) {\n        this.getData(this.$route.query.id)\n    }\n}\n \nmethods: {\n    async getData (id) {\n      // 按照id获取数据\n      const { data: { result } } = await this.$http.get('getShowList', {\n        params: { id }\n      })\n      this.dataList = result\n    }\n}\n```\n2、给router-view加个唯一的key，来保证路由切换时都会重新渲染触发钩子了\n```\n\n<template>\n    <div id=\"main\" class=\"app-main\">\n        <transition :name=\"transitionName\">\n            <router-view class=\"router-box\" :key=\"key\"></router-view>\n        </transition>\n    </div>\n</template>\n<script>\n    export default {\n        computed:{\n            key() {\n               return this.$route.name?this.$route.name+ +new Date():this.$route+ +new Date()\n            }\n        }\n    };\n</script>\n\n```\n> 第二种方法，页面每次切换都会跑到顶部，需要配合 scroll处理\n","source":"_posts/🦜🦜-vue-router-同一个页面地址栏参数改变，页面不刷新的问题.md","raw":"---\ntitle: \"🦜🦜-vue-router-同一个页面地址栏参数改变，页面不刷新的问题\"\ndate: 2021-10-22\ntags: \n- 开发日常\n---\nvue-router  同一个页面地址栏参数改变（比如文章的发布和编辑是同一个页面），不会触发vue的created或者mounted钩子，所以数据不会重新渲染。\n\n解决办法有两种：\n\n1：监听地址栏变化（watch）,这是vue-router官方给出的解决办法。\n监听路由变化，把初始化的方法重新写到监听的方法里面执行\n```js\nwatch: {\n    '$route' (to, from) {\n        this.getData(this.$route.query.id)\n    }\n}\n \nmethods: {\n    async getData (id) {\n      // 按照id获取数据\n      const { data: { result } } = await this.$http.get('getShowList', {\n        params: { id }\n      })\n      this.dataList = result\n    }\n}\n```\n2、给router-view加个唯一的key，来保证路由切换时都会重新渲染触发钩子了\n```\n\n<template>\n    <div id=\"main\" class=\"app-main\">\n        <transition :name=\"transitionName\">\n            <router-view class=\"router-box\" :key=\"key\"></router-view>\n        </transition>\n    </div>\n</template>\n<script>\n    export default {\n        computed:{\n            key() {\n               return this.$route.name?this.$route.name+ +new Date():this.$route+ +new Date()\n            }\n        }\n    };\n</script>\n\n```\n> 第二种方法，页面每次切换都会跑到顶部，需要配合 scroll处理\n","slug":"🦜🦜-vue-router-同一个页面地址栏参数改变，页面不刷新的问题","published":1,"updated":"2024-05-16T07:39:11.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pr00772omv53adbnsz","content":"<p>vue-router  同一个页面地址栏参数改变（比如文章的发布和编辑是同一个页面），不会触发vue的created或者mounted钩子，所以数据不会重新渲染。</p>\n<p>解决办法有两种：</p>\n<p>1：监听地址栏变化（watch）,这是vue-router官方给出的解决办法。<br>监听路由变化，把初始化的方法重新写到监听的方法里面执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;$route&#x27;</span> (to, <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">getData</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">query</span>.<span class=\"property\">id</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> getData (id) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 按照id获取数据</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; <span class=\"attr\">data</span>: &#123; result &#125; &#125; = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$http</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;getShowList&#x27;</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">params</span>: &#123; id &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">dataList</span> = result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、给router-view加个唯一的key，来保证路由切换时都会重新渲染触发钩子了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div id=&quot;main&quot; class=&quot;app-main&quot;&gt;</span><br><span class=\"line\">        &lt;transition :name=&quot;transitionName&quot;&gt;</span><br><span class=\"line\">            &lt;router-view class=&quot;router-box&quot; :key=&quot;key&quot;&gt;&lt;/router-view&gt;</span><br><span class=\"line\">        &lt;/transition&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        computed:&#123;</span><br><span class=\"line\">            key() &#123;</span><br><span class=\"line\">               return this.$route.name?this.$route.name+ +new Date():this.$route+ +new Date()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种方法，页面每次切换都会跑到顶部，需要配合 scroll处理</p>\n</blockquote>\n\n","site":{"data":{}},"excerpt":"","more":"<p>vue-router  同一个页面地址栏参数改变（比如文章的发布和编辑是同一个页面），不会触发vue的created或者mounted钩子，所以数据不会重新渲染。</p>\n<p>解决办法有两种：</p>\n<p>1：监听地址栏变化（watch）,这是vue-router官方给出的解决办法。<br>监听路由变化，把初始化的方法重新写到监听的方法里面执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;$route&#x27;</span> (to, <span class=\"keyword\">from</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">getData</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">query</span>.<span class=\"property\">id</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> getData (id) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 按照id获取数据</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; <span class=\"attr\">data</span>: &#123; result &#125; &#125; = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$http</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;getShowList&#x27;</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">params</span>: &#123; id &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">dataList</span> = result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、给router-view加个唯一的key，来保证路由切换时都会重新渲染触发钩子了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div id=&quot;main&quot; class=&quot;app-main&quot;&gt;</span><br><span class=\"line\">        &lt;transition :name=&quot;transitionName&quot;&gt;</span><br><span class=\"line\">            &lt;router-view class=&quot;router-box&quot; :key=&quot;key&quot;&gt;&lt;/router-view&gt;</span><br><span class=\"line\">        &lt;/transition&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        computed:&#123;</span><br><span class=\"line\">            key() &#123;</span><br><span class=\"line\">               return this.$route.name?this.$route.name+ +new Date():this.$route+ +new Date()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种方法，页面每次切换都会跑到顶部，需要配合 scroll处理</p>\n</blockquote>\n"},{"title":"🦜🦜-vue中使provide中的数据变为响应式","date":"2021-10-12T16:00:00.000Z","_content":"### 正常使用provide的方式：\n```js\n// 父组件中：\nprovide:{\n　　for: 'demo'\n}\n```\n这样子组件中无论多深的子组件都可以使用：\n```js\n// 子组件\ninject:['for'],\ndata(){\n　　return{\n　　　　demo: this.for\n　　}\n}\n```\n\n但是上面的写法有一定的问题，\n比如父组件中for变量的值如果我们是在mounted方法中请求后台数据再更改provide中for的值，\n那么在子组件中获取不到更改后的for的值。\n\n### 这时候就需要换一种写法：\n\n\n```js\n// 父组件中：\ndata () {\n  return {\n    for: {}\n  }\n},\nprovide() {\n    return {\n      provObj: this.for\n    };\n  },\n mounted() {\n   setTimeout(() => {\n      this.for.fp= 'demo';\n   }, 2000);\n}\n```\n\n```js\n// 子组件中：\ninject:['provObj'],\ndata(){\n　　return{\n　　　　demo: this.provObj.fp\n　　}\n}\n```\n---\n [provide源码](@previous)\n使用defineReactive, 让provide变为响应式的, 所以根元素属性 `this.for` 无效，必须监听下一级属性 ` this.for.fp`\n```js\nexport function initInjections (vm: Component) {\nconst result = resolveInject(vm.$options.inject, vm)\nif (result) {\n  observerState.shouldConvert = false\n  Object.keys(result).forEach(key => {\n    `defineReactive(vm, key, result[key])` // defineReactive\n  })\n  observerState.shouldConvert = true\n  }\n}\n\n```\n [inject源码](@previous)\n\n----\n\n```js\nexport function resolveInject (inject: any, vm: Component): ?Object {\n  if (inject) {\n  // inject 是 :any 类型因为流没有智能到能够指出缓存\n    const result = Object.create(null)\n    // 获取 inject 选项的 key 数组\n    const keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(key => {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject)\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      const provideKey = inject[key].from\n      let source = vm\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey]\n          break\n        }\n        source = source.$parent\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          const provideDefault = inject[key].default\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn(`Injection \"${key}\" not found`, vm)\n        }\n      }\n    }\n    return result\n  }\n}\n```\n","source":"_posts/🦜🦜-vue中使provide中的数据变为响应式.md","raw":"---\ntitle: \"🦜🦜-vue中使provide中的数据变为响应式\"\ndate: 2021-10-13\ntags: \n- 开发日常\n---\n### 正常使用provide的方式：\n```js\n// 父组件中：\nprovide:{\n　　for: 'demo'\n}\n```\n这样子组件中无论多深的子组件都可以使用：\n```js\n// 子组件\ninject:['for'],\ndata(){\n　　return{\n　　　　demo: this.for\n　　}\n}\n```\n\n但是上面的写法有一定的问题，\n比如父组件中for变量的值如果我们是在mounted方法中请求后台数据再更改provide中for的值，\n那么在子组件中获取不到更改后的for的值。\n\n### 这时候就需要换一种写法：\n\n\n```js\n// 父组件中：\ndata () {\n  return {\n    for: {}\n  }\n},\nprovide() {\n    return {\n      provObj: this.for\n    };\n  },\n mounted() {\n   setTimeout(() => {\n      this.for.fp= 'demo';\n   }, 2000);\n}\n```\n\n```js\n// 子组件中：\ninject:['provObj'],\ndata(){\n　　return{\n　　　　demo: this.provObj.fp\n　　}\n}\n```\n---\n [provide源码](@previous)\n使用defineReactive, 让provide变为响应式的, 所以根元素属性 `this.for` 无效，必须监听下一级属性 ` this.for.fp`\n```js\nexport function initInjections (vm: Component) {\nconst result = resolveInject(vm.$options.inject, vm)\nif (result) {\n  observerState.shouldConvert = false\n  Object.keys(result).forEach(key => {\n    `defineReactive(vm, key, result[key])` // defineReactive\n  })\n  observerState.shouldConvert = true\n  }\n}\n\n```\n [inject源码](@previous)\n\n----\n\n```js\nexport function resolveInject (inject: any, vm: Component): ?Object {\n  if (inject) {\n  // inject 是 :any 类型因为流没有智能到能够指出缓存\n    const result = Object.create(null)\n    // 获取 inject 选项的 key 数组\n    const keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(key => {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject)\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      const provideKey = inject[key].from\n      let source = vm\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey]\n          break\n        }\n        source = source.$parent\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          const provideDefault = inject[key].default\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn(`Injection \"${key}\" not found`, vm)\n        }\n      }\n    }\n    return result\n  }\n}\n```\n","slug":"🦜🦜-vue中使provide中的数据变为响应式","published":1,"updated":"2024-05-16T07:39:11.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094ps007a2omvbmqk0h24","content":"<h3 id=\"正常使用provide的方式：\"><a href=\"#正常使用provide的方式：\" class=\"headerlink\" title=\"正常使用provide的方式：\"></a>正常使用provide的方式：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件中：</span></span><br><span class=\"line\"><span class=\"attr\">provide</span>:&#123;</span><br><span class=\"line\">　　<span class=\"attr\">for</span>: <span class=\"string\">&#x27;demo&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样子组件中无论多深的子组件都可以使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\"><span class=\"attr\">inject</span>:[<span class=\"string\">&#x27;for&#x27;</span>],</span><br><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">　　　　<span class=\"attr\">demo</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">for</span></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是上面的写法有一定的问题，<br>比如父组件中for变量的值如果我们是在mounted方法中请求后台数据再更改provide中for的值，<br>那么在子组件中获取不到更改后的for的值。</p>\n<h3 id=\"这时候就需要换一种写法：\"><a href=\"#这时候就需要换一种写法：\" class=\"headerlink\" title=\"这时候就需要换一种写法：\"></a>这时候就需要换一种写法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件中：</span></span><br><span class=\"line\">data () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">for</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"title function_\">provide</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">provObj</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">for</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">for</span>.<span class=\"property\">fp</span>= <span class=\"string\">&#x27;demo&#x27;</span>;</span><br><span class=\"line\">   &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件中：</span></span><br><span class=\"line\"><span class=\"attr\">inject</span>:[<span class=\"string\">&#x27;provObj&#x27;</span>],</span><br><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">　　　　<span class=\"attr\">demo</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">provObj</span>.<span class=\"property\">fp</span></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p> <a href=\"@previous\">provide源码</a><br>使用defineReactive, 让provide变为响应式的, 所以根元素属性 <code>this.for</code> 无效，必须监听下一级属性 <code> this.for.fp</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initInjections</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">resolveInject</span>(vm.<span class=\"property\">$options</span>.<span class=\"property\">inject</span>, vm)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">  observerState.<span class=\"property\">shouldConvert</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(result).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">`defineReactive(vm, key, result[key])`</span> <span class=\"comment\">// defineReactive</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  observerState.<span class=\"property\">shouldConvert</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> <a href=\"@previous\">inject源码</a></p>\n<hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">resolveInject</span> (<span class=\"attr\">inject</span>: any, <span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>): ?<span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (inject) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// inject 是 :any 类型因为流没有智能到能够指出缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 获取 inject 选项的 key 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = hasSymbol</span><br><span class=\"line\">      ? <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(inject).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(inject, key).<span class=\"property\">enumerable</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      : <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(inject)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> provideKey = inject[key].<span class=\"property\">from</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> source = vm</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (source.<span class=\"property\">_provided</span> &amp;&amp; provideKey <span class=\"keyword\">in</span> source.<span class=\"property\">_provided</span>) &#123;</span><br><span class=\"line\">          result[key] = source.<span class=\"property\">_provided</span>[provideKey]</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        source = source.<span class=\"property\">$parent</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;default&#x27;</span> <span class=\"keyword\">in</span> inject[key]) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> provideDefault = inject[key].<span class=\"property\">default</span></span><br><span class=\"line\">          result[key] = <span class=\"keyword\">typeof</span> provideDefault === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">            ? provideDefault.<span class=\"title function_\">call</span>(vm)</span><br><span class=\"line\">            : provideDefault</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">warn</span>(<span class=\"string\">`Injection &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; not found`</span>, vm)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"正常使用provide的方式：\"><a href=\"#正常使用provide的方式：\" class=\"headerlink\" title=\"正常使用provide的方式：\"></a>正常使用provide的方式：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件中：</span></span><br><span class=\"line\"><span class=\"attr\">provide</span>:&#123;</span><br><span class=\"line\">　　<span class=\"attr\">for</span>: <span class=\"string\">&#x27;demo&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样子组件中无论多深的子组件都可以使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\"><span class=\"attr\">inject</span>:[<span class=\"string\">&#x27;for&#x27;</span>],</span><br><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">　　　　<span class=\"attr\">demo</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">for</span></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是上面的写法有一定的问题，<br>比如父组件中for变量的值如果我们是在mounted方法中请求后台数据再更改provide中for的值，<br>那么在子组件中获取不到更改后的for的值。</p>\n<h3 id=\"这时候就需要换一种写法：\"><a href=\"#这时候就需要换一种写法：\" class=\"headerlink\" title=\"这时候就需要换一种写法：\"></a>这时候就需要换一种写法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件中：</span></span><br><span class=\"line\">data () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">for</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"title function_\">provide</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">provObj</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">for</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">for</span>.<span class=\"property\">fp</span>= <span class=\"string\">&#x27;demo&#x27;</span>;</span><br><span class=\"line\">   &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件中：</span></span><br><span class=\"line\"><span class=\"attr\">inject</span>:[<span class=\"string\">&#x27;provObj&#x27;</span>],</span><br><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">　　　　<span class=\"attr\">demo</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">provObj</span>.<span class=\"property\">fp</span></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p> <a href=\"@previous\">provide源码</a><br>使用defineReactive, 让provide变为响应式的, 所以根元素属性 <code>this.for</code> 无效，必须监听下一级属性 <code> this.for.fp</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initInjections</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"title function_\">resolveInject</span>(vm.<span class=\"property\">$options</span>.<span class=\"property\">inject</span>, vm)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">  observerState.<span class=\"property\">shouldConvert</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(result).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">`defineReactive(vm, key, result[key])`</span> <span class=\"comment\">// defineReactive</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  observerState.<span class=\"property\">shouldConvert</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> <a href=\"@previous\">inject源码</a></p>\n<hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">resolveInject</span> (<span class=\"attr\">inject</span>: any, <span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>): ?<span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (inject) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// inject 是 :any 类型因为流没有智能到能够指出缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 获取 inject 选项的 key 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = hasSymbol</span><br><span class=\"line\">      ? <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(inject).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(inject, key).<span class=\"property\">enumerable</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      : <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(inject)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> provideKey = inject[key].<span class=\"property\">from</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> source = vm</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (source.<span class=\"property\">_provided</span> &amp;&amp; provideKey <span class=\"keyword\">in</span> source.<span class=\"property\">_provided</span>) &#123;</span><br><span class=\"line\">          result[key] = source.<span class=\"property\">_provided</span>[provideKey]</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        source = source.<span class=\"property\">$parent</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;default&#x27;</span> <span class=\"keyword\">in</span> inject[key]) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> provideDefault = inject[key].<span class=\"property\">default</span></span><br><span class=\"line\">          result[key] = <span class=\"keyword\">typeof</span> provideDefault === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">            ? provideDefault.<span class=\"title function_\">call</span>(vm)</span><br><span class=\"line\">            : provideDefault</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">warn</span>(<span class=\"string\">`Injection &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot; not found`</span>, vm)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"🦜🦜Vuex-Action异步执行使用场景","date":"2022-03-21T16:00:00.000Z","_content":"vuex action 是全局事件触发的执行函数，\n定义\n```js\nconst actions  = {\n  login(state) {\n    axios('login').then(res ={\n      state.login = true\n    })\n  }\n}\n\n// 执行\nthis.dispatch(\"login\").then(res => {\n  \n})\n```\n相交于一般 muitition具有异步执行的功能😺,\n具体是包了一层Promise.resolve,其实完全可以用muitition,commit实现，只要`return new Promise`\n```js\nconst mutations = {\n  login (state) {\n    return new Promise(resolve => {\n      axios('login').then(res ={\n        resolve(res)\n        state.login = true\n      })\n    })\n  }\n }\n// 执行\nthis.$store.commit(\"login\").then(res => {})\n```\n","source":"_posts/🦜🦜Vuex-Action异步执行使用场景.md","raw":"---\ntitle: \"🦜🦜Vuex-Action异步执行使用场景\"\ndate: 2022-03-22\ntags: \n- 开发日常\n---\nvuex action 是全局事件触发的执行函数，\n定义\n```js\nconst actions  = {\n  login(state) {\n    axios('login').then(res ={\n      state.login = true\n    })\n  }\n}\n\n// 执行\nthis.dispatch(\"login\").then(res => {\n  \n})\n```\n相交于一般 muitition具有异步执行的功能😺,\n具体是包了一层Promise.resolve,其实完全可以用muitition,commit实现，只要`return new Promise`\n```js\nconst mutations = {\n  login (state) {\n    return new Promise(resolve => {\n      axios('login').then(res ={\n        resolve(res)\n        state.login = true\n      })\n    })\n  }\n }\n// 执行\nthis.$store.commit(\"login\").then(res => {})\n```\n","slug":"🦜🦜Vuex-Action异步执行使用场景","published":1,"updated":"2024-05-16T07:39:11.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pt007c2omvdl4a67z2","content":"<p>vuex action 是全局事件触发的执行函数，<br>定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions  = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">login</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">axios</span>(<span class=\"string\">&#x27;login&#x27;</span>).<span class=\"title function_\">then</span>(res =&#123;</span><br><span class=\"line\">      state.<span class=\"property\">login</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&quot;login&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>相交于一般 muitition具有异步执行的功能😺,<br>具体是包了一层Promise.resolve,其实完全可以用muitition,commit实现，只要<code>return new Promise</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  login (state) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">axios</span>(<span class=\"string\">&#x27;login&#x27;</span>).<span class=\"title function_\">then</span>(res =&#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">        state.<span class=\"property\">login</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&quot;login&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>vuex action 是全局事件触发的执行函数，<br>定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions  = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">login</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">axios</span>(<span class=\"string\">&#x27;login&#x27;</span>).<span class=\"title function_\">then</span>(res =&#123;</span><br><span class=\"line\">      state.<span class=\"property\">login</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&quot;login&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>相交于一般 muitition具有异步执行的功能😺,<br>具体是包了一层Promise.resolve,其实完全可以用muitition,commit实现，只要<code>return new Promise</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  login (state) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">axios</span>(<span class=\"string\">&#x27;login&#x27;</span>).<span class=\"title function_\">then</span>(res =&#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">        state.<span class=\"property\">login</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&quot;login&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"🦜🦜vue-$emit-钩子函数","date":"2021-10-07T16:00:00.000Z","_content":"标题换一种说法：vue $emit 调用父组件异步方法，执行完毕后再执行子组件的某方法\n使用回调的形式\n```js\n// 组件的html中添加事件 @getData=\"getData\"\nmethods : {\n\tgetData(params, callback) {\n\t\tconsole.log(\"子组件的传递到父组件的参数\", params);\n\t\tconsole.log(\"模拟发送后台异步请求，延迟3s...\");\n\t\tsetTimeout(() => {\n\t\t\tconsole.log(\"异步请求结束，执行回调函数\");\n\t\t\tcallback(\"父组件传到子组件的文本666\")\n\t\t}, 3000)\n\t}\n} \n\n```\n子组件\n```js\n// 通过 $emit 触发父组件的方法\n// 参数：触发的事件名称、事件参数，事件参数\n// 把方法当做事件参数传递到父组件，由父组件调用执行。\nthis.$emit('getData', 10, (res)=> {\n\tconsole.log(\"父组件的返回结果：\", res); //由父组件调用\n})\n\n```\n","source":"_posts/🦜🦜vue-$emit-钩子函数.md","raw":"---\ntitle: \"🦜🦜vue-$emit-钩子函数\"\ndate: 2021-10-08\ntags: \n- 开发日常\n---\n标题换一种说法：vue $emit 调用父组件异步方法，执行完毕后再执行子组件的某方法\n使用回调的形式\n```js\n// 组件的html中添加事件 @getData=\"getData\"\nmethods : {\n\tgetData(params, callback) {\n\t\tconsole.log(\"子组件的传递到父组件的参数\", params);\n\t\tconsole.log(\"模拟发送后台异步请求，延迟3s...\");\n\t\tsetTimeout(() => {\n\t\t\tconsole.log(\"异步请求结束，执行回调函数\");\n\t\t\tcallback(\"父组件传到子组件的文本666\")\n\t\t}, 3000)\n\t}\n} \n\n```\n子组件\n```js\n// 通过 $emit 触发父组件的方法\n// 参数：触发的事件名称、事件参数，事件参数\n// 把方法当做事件参数传递到父组件，由父组件调用执行。\nthis.$emit('getData', 10, (res)=> {\n\tconsole.log(\"父组件的返回结果：\", res); //由父组件调用\n})\n\n```\n","slug":"🦜🦜vue-$emit-钩子函数","published":1,"updated":"2024-05-16T07:39:11.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pu007e2omv01bn2fiy","content":"<p>标题换一种说法：vue $emit 调用父组件异步方法，执行完毕后再执行子组件的某方法<br>使用回调的形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组件的html中添加事件 @getData=&quot;getData&quot;</span></span><br><span class=\"line\">methods : &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">getData</span>(<span class=\"params\">params, callback</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;子组件的传递到父组件的参数&quot;</span>, params);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;模拟发送后台异步请求，延迟3s...&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;异步请求结束，执行回调函数&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">callback</span>(<span class=\"string\">&quot;父组件传到子组件的文本666&quot;</span>)</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过 $emit 触发父组件的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 参数：触发的事件名称、事件参数，事件参数</span></span><br><span class=\"line\"><span class=\"comment\">// 把方法当做事件参数传递到父组件，由父组件调用执行。</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;getData&#x27;</span>, <span class=\"number\">10</span>, <span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;父组件的返回结果：&quot;</span>, res); <span class=\"comment\">//由父组件调用</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>标题换一种说法：vue $emit 调用父组件异步方法，执行完毕后再执行子组件的某方法<br>使用回调的形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组件的html中添加事件 @getData=&quot;getData&quot;</span></span><br><span class=\"line\">methods : &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">getData</span>(<span class=\"params\">params, callback</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;子组件的传递到父组件的参数&quot;</span>, params);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;模拟发送后台异步请求，延迟3s...&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;异步请求结束，执行回调函数&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">callback</span>(<span class=\"string\">&quot;父组件传到子组件的文本666&quot;</span>)</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过 $emit 触发父组件的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 参数：触发的事件名称、事件参数，事件参数</span></span><br><span class=\"line\"><span class=\"comment\">// 把方法当做事件参数传递到父组件，由父组件调用执行。</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;getData&#x27;</span>, <span class=\"number\">10</span>, <span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;父组件的返回结果：&quot;</span>, res); <span class=\"comment\">//由父组件调用</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"🦜🦜vue-修改数组中某个对象的属性不更新","date":"2021-03-10T16:00:00.000Z","_content":"比如要有如下数组\n```\ndata() {\n  return {\n    certificateData: [\n      {\n        name: 'xxx',\n        type: '环境证书',\n        imgs:[{url: 'xxxx.png']\n      },\n      {\n        name: 'yyy',\n        type: '安全证书',\n        imgs:[{url: 'yyy.png'}]\n      }\n    ]\n}\n```\n如果属性已经存在\n修改对象中 imgs属性\n```\n/// index为索引\nthis.certificateData[index].imgs = [url: 'osodo.png'];\n```\n如果属性不存在\n```\nthis.$set(this.certificateData, index, {\n  ...this.certificateData[index],\n  buff: 'bits'\n})\n```\n","source":"_posts/🦜🦜vue-修改数组中某个对象的属性不更新.md","raw":"---\ntitle: \"🦜🦜vue-修改数组中某个对象的属性不更新\"\ndate: 2021-03-11\ntags: \n- 开发日常\n---\n比如要有如下数组\n```\ndata() {\n  return {\n    certificateData: [\n      {\n        name: 'xxx',\n        type: '环境证书',\n        imgs:[{url: 'xxxx.png']\n      },\n      {\n        name: 'yyy',\n        type: '安全证书',\n        imgs:[{url: 'yyy.png'}]\n      }\n    ]\n}\n```\n如果属性已经存在\n修改对象中 imgs属性\n```\n/// index为索引\nthis.certificateData[index].imgs = [url: 'osodo.png'];\n```\n如果属性不存在\n```\nthis.$set(this.certificateData, index, {\n  ...this.certificateData[index],\n  buff: 'bits'\n})\n```\n","slug":"🦜🦜vue-修改数组中某个对象的属性不更新","published":1,"updated":"2024-05-16T07:39:11.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pv007g2omvfnhu6x5v","content":"<p>比如要有如下数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    certificateData: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &#x27;xxx&#x27;,</span><br><span class=\"line\">        type: &#x27;环境证书&#x27;,</span><br><span class=\"line\">        imgs:[&#123;url: &#x27;xxxx.png&#x27;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &#x27;yyy&#x27;,</span><br><span class=\"line\">        type: &#x27;安全证书&#x27;,</span><br><span class=\"line\">        imgs:[&#123;url: &#x27;yyy.png&#x27;&#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果属性已经存在<br>修改对象中 imgs属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// index为索引</span><br><span class=\"line\">this.certificateData[index].imgs = [url: &#x27;osodo.png&#x27;];</span><br></pre></td></tr></table></figure>\n<p>如果属性不存在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$set(this.certificateData, index, &#123;</span><br><span class=\"line\">  ...this.certificateData[index],</span><br><span class=\"line\">  buff: &#x27;bits&#x27;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>比如要有如下数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    certificateData: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &#x27;xxx&#x27;,</span><br><span class=\"line\">        type: &#x27;环境证书&#x27;,</span><br><span class=\"line\">        imgs:[&#123;url: &#x27;xxxx.png&#x27;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &#x27;yyy&#x27;,</span><br><span class=\"line\">        type: &#x27;安全证书&#x27;,</span><br><span class=\"line\">        imgs:[&#123;url: &#x27;yyy.png&#x27;&#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果属性已经存在<br>修改对象中 imgs属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// index为索引</span><br><span class=\"line\">this.certificateData[index].imgs = [url: &#x27;osodo.png&#x27;];</span><br></pre></td></tr></table></figure>\n<p>如果属性不存在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$set(this.certificateData, index, &#123;</span><br><span class=\"line\">  ...this.certificateData[index],</span><br><span class=\"line\">  buff: &#x27;bits&#x27;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"🦜🦜vue-对象的属性是数组-watch监听不了","date":"2021-01-16T16:00:00.000Z","_content":"```\ndata() {\n formData: {\n        areaId: 14,\n        isNew: true,\n        isDraft: false,\n        cName: '',\n        costRate: 0,\n        price: 0,\n        grammage: 0,\n        pictureUri: '',\n        testArr: [],\n        materialListOrigin: []\n      },\n},\n watch: {\n    \"formData.materialListOrigin\": {\n      handler(v) {\n        debugger\n        let r = v.reduce((sum, item) => {\n          sum += item.needWeight * item.unitPrice;\n          return sum;\n        }, 0);\n        this.formData.price = fixedPoint(r, 2);\n        let s  = v.reduce((sum, item) => {\n          if (item.isWeight) {\n            sum += item.productWeight;\n          }\n          return sum\n        }, 0);\n        if (this.dishesName === '小吃类') {\n          this.formData.grammage = 0;\n          return;\n        }\n        // 成品克数\n        this.formData.grammage = fixedPoint(s, 0);\n      },\n      deep: true\n    },\n  },\nmethods() {\n // 新增菜品保存\n    saveMateRiarl(name) {\n      this.$refs[name].validate((valid) => {\n        if (!valid) return;\n   \n        this.formData.materialListOrigin.push(this.formValidateMetarial);\n      })\n    },\n}\n```\n问题， this.formData.materialListOrigin.push，watch 不会触发。\n原因：对象下的属性是数组，watch不了\n解决方法：直接监听对象\n```\nwatch: {\n    formData: {\n      handler(w) {\n       let v = w.materialListOrigin;\n        let r = v.reduce((sum, item) => {\n          sum += item.needWeight * item.unitPrice;\n          return sum;\n        }, 0);\n        this.formData.price = fixedPoint(r, 2);\n        let s  = v.reduce((sum, item) => {\n          if (item.isWeight) {\n            sum += item.productWeight;\n          }\n          return sum\n        }, 0);\n        if (this.dishesName === '小吃类') {\n          this.formData.grammage = 0;\n          return;\n        }\n        // 成品克数\n        this.formData.grammage = fixedPoint(s, 0);\n      },\n      deep: true\n    },\n  },\n```\n","source":"_posts/🦜🦜vue-对象的属性是数组-watch监听不了.md","raw":"---\ntitle: \"🦜🦜vue-对象的属性是数组-watch监听不了\"\ndate: 2021-01-17\ntags: \n- 开发日常\n---\n```\ndata() {\n formData: {\n        areaId: 14,\n        isNew: true,\n        isDraft: false,\n        cName: '',\n        costRate: 0,\n        price: 0,\n        grammage: 0,\n        pictureUri: '',\n        testArr: [],\n        materialListOrigin: []\n      },\n},\n watch: {\n    \"formData.materialListOrigin\": {\n      handler(v) {\n        debugger\n        let r = v.reduce((sum, item) => {\n          sum += item.needWeight * item.unitPrice;\n          return sum;\n        }, 0);\n        this.formData.price = fixedPoint(r, 2);\n        let s  = v.reduce((sum, item) => {\n          if (item.isWeight) {\n            sum += item.productWeight;\n          }\n          return sum\n        }, 0);\n        if (this.dishesName === '小吃类') {\n          this.formData.grammage = 0;\n          return;\n        }\n        // 成品克数\n        this.formData.grammage = fixedPoint(s, 0);\n      },\n      deep: true\n    },\n  },\nmethods() {\n // 新增菜品保存\n    saveMateRiarl(name) {\n      this.$refs[name].validate((valid) => {\n        if (!valid) return;\n   \n        this.formData.materialListOrigin.push(this.formValidateMetarial);\n      })\n    },\n}\n```\n问题， this.formData.materialListOrigin.push，watch 不会触发。\n原因：对象下的属性是数组，watch不了\n解决方法：直接监听对象\n```\nwatch: {\n    formData: {\n      handler(w) {\n       let v = w.materialListOrigin;\n        let r = v.reduce((sum, item) => {\n          sum += item.needWeight * item.unitPrice;\n          return sum;\n        }, 0);\n        this.formData.price = fixedPoint(r, 2);\n        let s  = v.reduce((sum, item) => {\n          if (item.isWeight) {\n            sum += item.productWeight;\n          }\n          return sum\n        }, 0);\n        if (this.dishesName === '小吃类') {\n          this.formData.grammage = 0;\n          return;\n        }\n        // 成品克数\n        this.formData.grammage = fixedPoint(s, 0);\n      },\n      deep: true\n    },\n  },\n```\n","slug":"🦜🦜vue-对象的属性是数组-watch监听不了","published":1,"updated":"2024-05-16T07:39:11.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pv007i2omve2zb7e06","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\"> formData: &#123;</span><br><span class=\"line\">        areaId: 14,</span><br><span class=\"line\">        isNew: true,</span><br><span class=\"line\">        isDraft: false,</span><br><span class=\"line\">        cName: &#x27;&#x27;,</span><br><span class=\"line\">        costRate: 0,</span><br><span class=\"line\">        price: 0,</span><br><span class=\"line\">        grammage: 0,</span><br><span class=\"line\">        pictureUri: &#x27;&#x27;,</span><br><span class=\"line\">        testArr: [],</span><br><span class=\"line\">        materialListOrigin: []</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"> watch: &#123;</span><br><span class=\"line\">    &quot;formData.materialListOrigin&quot;: &#123;</span><br><span class=\"line\">      handler(v) &#123;</span><br><span class=\"line\">        debugger</span><br><span class=\"line\">        let r = v.reduce((sum, item) =&gt; &#123;</span><br><span class=\"line\">          sum += item.needWeight * item.unitPrice;</span><br><span class=\"line\">          return sum;</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">        this.formData.price = fixedPoint(r, 2);</span><br><span class=\"line\">        let s  = v.reduce((sum, item) =&gt; &#123;</span><br><span class=\"line\">          if (item.isWeight) &#123;</span><br><span class=\"line\">            sum += item.productWeight;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return sum</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">        if (this.dishesName === &#x27;小吃类&#x27;) &#123;</span><br><span class=\"line\">          this.formData.grammage = 0;</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 成品克数</span><br><span class=\"line\">        this.formData.grammage = fixedPoint(s, 0);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">methods() &#123;</span><br><span class=\"line\"> // 新增菜品保存</span><br><span class=\"line\">    saveMateRiarl(name) &#123;</span><br><span class=\"line\">      this.$refs[name].validate((valid) =&gt; &#123;</span><br><span class=\"line\">        if (!valid) return;</span><br><span class=\"line\">   </span><br><span class=\"line\">        this.formData.materialListOrigin.push(this.formValidateMetarial);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题， this.formData.materialListOrigin.push，watch 不会触发。<br>原因：对象下的属性是数组，watch不了<br>解决方法：直接监听对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    formData: &#123;</span><br><span class=\"line\">      handler(w) &#123;</span><br><span class=\"line\">       let v = w.materialListOrigin;</span><br><span class=\"line\">        let r = v.reduce((sum, item) =&gt; &#123;</span><br><span class=\"line\">          sum += item.needWeight * item.unitPrice;</span><br><span class=\"line\">          return sum;</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">        this.formData.price = fixedPoint(r, 2);</span><br><span class=\"line\">        let s  = v.reduce((sum, item) =&gt; &#123;</span><br><span class=\"line\">          if (item.isWeight) &#123;</span><br><span class=\"line\">            sum += item.productWeight;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return sum</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">        if (this.dishesName === &#x27;小吃类&#x27;) &#123;</span><br><span class=\"line\">          this.formData.grammage = 0;</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 成品克数</span><br><span class=\"line\">        this.formData.grammage = fixedPoint(s, 0);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\"> formData: &#123;</span><br><span class=\"line\">        areaId: 14,</span><br><span class=\"line\">        isNew: true,</span><br><span class=\"line\">        isDraft: false,</span><br><span class=\"line\">        cName: &#x27;&#x27;,</span><br><span class=\"line\">        costRate: 0,</span><br><span class=\"line\">        price: 0,</span><br><span class=\"line\">        grammage: 0,</span><br><span class=\"line\">        pictureUri: &#x27;&#x27;,</span><br><span class=\"line\">        testArr: [],</span><br><span class=\"line\">        materialListOrigin: []</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"> watch: &#123;</span><br><span class=\"line\">    &quot;formData.materialListOrigin&quot;: &#123;</span><br><span class=\"line\">      handler(v) &#123;</span><br><span class=\"line\">        debugger</span><br><span class=\"line\">        let r = v.reduce((sum, item) =&gt; &#123;</span><br><span class=\"line\">          sum += item.needWeight * item.unitPrice;</span><br><span class=\"line\">          return sum;</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">        this.formData.price = fixedPoint(r, 2);</span><br><span class=\"line\">        let s  = v.reduce((sum, item) =&gt; &#123;</span><br><span class=\"line\">          if (item.isWeight) &#123;</span><br><span class=\"line\">            sum += item.productWeight;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return sum</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">        if (this.dishesName === &#x27;小吃类&#x27;) &#123;</span><br><span class=\"line\">          this.formData.grammage = 0;</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 成品克数</span><br><span class=\"line\">        this.formData.grammage = fixedPoint(s, 0);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">methods() &#123;</span><br><span class=\"line\"> // 新增菜品保存</span><br><span class=\"line\">    saveMateRiarl(name) &#123;</span><br><span class=\"line\">      this.$refs[name].validate((valid) =&gt; &#123;</span><br><span class=\"line\">        if (!valid) return;</span><br><span class=\"line\">   </span><br><span class=\"line\">        this.formData.materialListOrigin.push(this.formValidateMetarial);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题， this.formData.materialListOrigin.push，watch 不会触发。<br>原因：对象下的属性是数组，watch不了<br>解决方法：直接监听对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    formData: &#123;</span><br><span class=\"line\">      handler(w) &#123;</span><br><span class=\"line\">       let v = w.materialListOrigin;</span><br><span class=\"line\">        let r = v.reduce((sum, item) =&gt; &#123;</span><br><span class=\"line\">          sum += item.needWeight * item.unitPrice;</span><br><span class=\"line\">          return sum;</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">        this.formData.price = fixedPoint(r, 2);</span><br><span class=\"line\">        let s  = v.reduce((sum, item) =&gt; &#123;</span><br><span class=\"line\">          if (item.isWeight) &#123;</span><br><span class=\"line\">            sum += item.productWeight;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return sum</span><br><span class=\"line\">        &#125;, 0);</span><br><span class=\"line\">        if (this.dishesName === &#x27;小吃类&#x27;) &#123;</span><br><span class=\"line\">          this.formData.grammage = 0;</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 成品克数</span><br><span class=\"line\">        this.formData.grammage = fixedPoint(s, 0);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n"},{"title":"🦜🦜vuejs-第二次点击按钮-事件时出现TypeError--n-apply-is-not-a-function","date":"2020-12-23T16:00:00.000Z","_content":"![image.png](https://upload-images.jianshu.io/upload_images/15312191-6ab605c0603018b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nadd 是方法又是属性，\n第一次点击之后，this.add = true 成为一个属性\n第二点击，add 就会报错\n","source":"_posts/🦜🦜vuejs-第二次点击按钮-事件时出现TypeError--n-apply-is-not-a-function.md","raw":"---\ntitle: \"🦜🦜vuejs-第二次点击按钮-事件时出现TypeError--n-apply-is-not-a-function\"\ndate: 2020-12-24\ntags: \n- 开发日常\n---\n![image.png](https://upload-images.jianshu.io/upload_images/15312191-6ab605c0603018b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nadd 是方法又是属性，\n第一次点击之后，this.add = true 成为一个属性\n第二点击，add 就会报错\n","slug":"🦜🦜vuejs-第二次点击按钮-事件时出现TypeError--n-apply-is-not-a-function","published":1,"updated":"2024-05-16T07:39:11.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094pw007k2omvhx3pb9q5","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6ab605c0603018b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>add 是方法又是属性，<br>第一次点击之后，this.add &#x3D; true 成为一个属性<br>第二点击，add 就会报错</p>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/15312191-6ab605c0603018b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>add 是方法又是属性，<br>第一次点击之后，this.add &#x3D; true 成为一个属性<br>第二点击，add 就会报错</p>\n"},{"title":"🧮🧮几个算法","date":"2018-12-05T16:00:00.000Z","_content":"```\nvar log = console.log;\n\nlet arr = [23,45,23,46,1,100,14];\n\nfunction Figure(){\n\n}\nFigure.prototype = {\n    /*简单递归*/\n    factorial:function(number){\n        if(number==1){\n            return number;\n          } else {\n            return (number)*this.factorial(number-1);\n          }\n    },\n    /*冒泡排序*/\n    bubbling(arr){\n      for(var j=0;j<arr.length-1;j++){\n        for(var i=0;i<arr.length;i++){\n          if(arr[i]>arr[i+1]){\n                var  tepm = arr[i]\n              arr[i] = arr[i+1];\n              arr[i+1] = tepm;\n          }\n        }\n      }\n      return arr;\n    },\n\t//找到数组中最大的三个 \n    findMax3(){\n      var tempArr = [arr[0],arr[1],arr[2]];\n      for(var i=0;i<arr.length;i++){\n        var min = this.findMin(tempArr);\n        if(arr[i]>min[0]){\n          tempArr[min[1]] = arr[i];\n        }\n      }\n      return tempArr;\n    },\n    findMin(ca){\n      var t = ca[0];\n      var v = '';\n      for(var i=0;i<ca.length;i++){\n        if(ca[i]<t){\n          t = ca[i];\n        }\n      }\n      for(var j=0;j<ca.length;j++){\n        if(t==ca[j]){\n          v = j;\n        }\n      }\n      return [t,v];\n    }\n};\n\nvar f = new Figure();\n```\nlog(f.bubbling(arr))\nlog(f.findMax3(arr));\n","source":"_posts/🧮🧮几个算法.md","raw":"---\ntitle: \"🧮🧮几个算法\"\ndate: 2018-12-06\ntags: \n- 开发日常\n---\n```\nvar log = console.log;\n\nlet arr = [23,45,23,46,1,100,14];\n\nfunction Figure(){\n\n}\nFigure.prototype = {\n    /*简单递归*/\n    factorial:function(number){\n        if(number==1){\n            return number;\n          } else {\n            return (number)*this.factorial(number-1);\n          }\n    },\n    /*冒泡排序*/\n    bubbling(arr){\n      for(var j=0;j<arr.length-1;j++){\n        for(var i=0;i<arr.length;i++){\n          if(arr[i]>arr[i+1]){\n                var  tepm = arr[i]\n              arr[i] = arr[i+1];\n              arr[i+1] = tepm;\n          }\n        }\n      }\n      return arr;\n    },\n\t//找到数组中最大的三个 \n    findMax3(){\n      var tempArr = [arr[0],arr[1],arr[2]];\n      for(var i=0;i<arr.length;i++){\n        var min = this.findMin(tempArr);\n        if(arr[i]>min[0]){\n          tempArr[min[1]] = arr[i];\n        }\n      }\n      return tempArr;\n    },\n    findMin(ca){\n      var t = ca[0];\n      var v = '';\n      for(var i=0;i<ca.length;i++){\n        if(ca[i]<t){\n          t = ca[i];\n        }\n      }\n      for(var j=0;j<ca.length;j++){\n        if(t==ca[j]){\n          v = j;\n        }\n      }\n      return [t,v];\n    }\n};\n\nvar f = new Figure();\n```\nlog(f.bubbling(arr))\nlog(f.findMax3(arr));\n","slug":"🧮🧮几个算法","published":1,"updated":"2024-05-16T07:39:11.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094px007m2omv87n07vi3","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var log = console.log;</span><br><span class=\"line\"></span><br><span class=\"line\">let arr = [23,45,23,46,1,100,14];</span><br><span class=\"line\"></span><br><span class=\"line\">function Figure()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Figure.prototype = &#123;</span><br><span class=\"line\">    /*简单递归*/</span><br><span class=\"line\">    factorial:function(number)&#123;</span><br><span class=\"line\">        if(number==1)&#123;</span><br><span class=\"line\">            return number;</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            return (number)*this.factorial(number-1);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    /*冒泡排序*/</span><br><span class=\"line\">    bubbling(arr)&#123;</span><br><span class=\"line\">      for(var j=0;j&lt;arr.length-1;j++)&#123;</span><br><span class=\"line\">        for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">          if(arr[i]&gt;arr[i+1])&#123;</span><br><span class=\"line\">                var  tepm = arr[i]</span><br><span class=\"line\">              arr[i] = arr[i+1];</span><br><span class=\"line\">              arr[i+1] = tepm;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return arr;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">\t//找到数组中最大的三个 </span><br><span class=\"line\">    findMax3()&#123;</span><br><span class=\"line\">      var tempArr = [arr[0],arr[1],arr[2]];</span><br><span class=\"line\">      for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        var min = this.findMin(tempArr);</span><br><span class=\"line\">        if(arr[i]&gt;min[0])&#123;</span><br><span class=\"line\">          tempArr[min[1]] = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return tempArr;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    findMin(ca)&#123;</span><br><span class=\"line\">      var t = ca[0];</span><br><span class=\"line\">      var v = &#x27;&#x27;;</span><br><span class=\"line\">      for(var i=0;i&lt;ca.length;i++)&#123;</span><br><span class=\"line\">        if(ca[i]&lt;t)&#123;</span><br><span class=\"line\">          t = ca[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      for(var j=0;j&lt;ca.length;j++)&#123;</span><br><span class=\"line\">        if(t==ca[j])&#123;</span><br><span class=\"line\">          v = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return [t,v];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var f = new Figure();</span><br></pre></td></tr></table></figure>\n<p>log(f.bubbling(arr))<br>log(f.findMax3(arr));</p>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var log = console.log;</span><br><span class=\"line\"></span><br><span class=\"line\">let arr = [23,45,23,46,1,100,14];</span><br><span class=\"line\"></span><br><span class=\"line\">function Figure()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Figure.prototype = &#123;</span><br><span class=\"line\">    /*简单递归*/</span><br><span class=\"line\">    factorial:function(number)&#123;</span><br><span class=\"line\">        if(number==1)&#123;</span><br><span class=\"line\">            return number;</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            return (number)*this.factorial(number-1);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    /*冒泡排序*/</span><br><span class=\"line\">    bubbling(arr)&#123;</span><br><span class=\"line\">      for(var j=0;j&lt;arr.length-1;j++)&#123;</span><br><span class=\"line\">        for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">          if(arr[i]&gt;arr[i+1])&#123;</span><br><span class=\"line\">                var  tepm = arr[i]</span><br><span class=\"line\">              arr[i] = arr[i+1];</span><br><span class=\"line\">              arr[i+1] = tepm;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return arr;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">\t//找到数组中最大的三个 </span><br><span class=\"line\">    findMax3()&#123;</span><br><span class=\"line\">      var tempArr = [arr[0],arr[1],arr[2]];</span><br><span class=\"line\">      for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        var min = this.findMin(tempArr);</span><br><span class=\"line\">        if(arr[i]&gt;min[0])&#123;</span><br><span class=\"line\">          tempArr[min[1]] = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return tempArr;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    findMin(ca)&#123;</span><br><span class=\"line\">      var t = ca[0];</span><br><span class=\"line\">      var v = &#x27;&#x27;;</span><br><span class=\"line\">      for(var i=0;i&lt;ca.length;i++)&#123;</span><br><span class=\"line\">        if(ca[i]&lt;t)&#123;</span><br><span class=\"line\">          t = ca[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      for(var j=0;j&lt;ca.length;j++)&#123;</span><br><span class=\"line\">        if(t==ca[j])&#123;</span><br><span class=\"line\">          v = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return [t,v];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var f = new Figure();</span><br></pre></td></tr></table></figure>\n<p>log(f.bubbling(arr))<br>log(f.findMax3(arr));</p>\n"},{"title":"🧮🧮查找树节点中符合条件的子节点","date":"2021-04-18T16:00:00.000Z","_content":"1.查找一个\n```\nlet filterTreeId = (list, id)  => {\n      let targetObj = null;\n      for (const item of list) {\n        if (item.id === id) {\n          targetObj = item;\n          break;\n        }\n        if (item.childList && item.childList.length) {\n          targetObj = filterTreeId(item.childList, id);\n        }\n      }\n      return targetObj;\n    },\n```\n2.查找多个\n```\nlet  filterTreeIdList = (List, id)  => {\n      let setList = [];\n      for (const item of List) {\n        if (item.id === id) {\n          setList.push(item);\n        }\n        if (item.childList && item.childList.length >= 1) {\n          setList = [\n            ...setList,\n            ...filterTreeIdList(item.childList, id)\n          ];\n        }\n      }\n      return setList;\n  }\n```\n","source":"_posts/🧮🧮查找树节点中符合条件的子节点.md","raw":"---\ntitle: \"🧮🧮查找树节点中符合条件的子节点\"\ndate: 2021-04-19\ntags: \n- 开发日常\n---\n1.查找一个\n```\nlet filterTreeId = (list, id)  => {\n      let targetObj = null;\n      for (const item of list) {\n        if (item.id === id) {\n          targetObj = item;\n          break;\n        }\n        if (item.childList && item.childList.length) {\n          targetObj = filterTreeId(item.childList, id);\n        }\n      }\n      return targetObj;\n    },\n```\n2.查找多个\n```\nlet  filterTreeIdList = (List, id)  => {\n      let setList = [];\n      for (const item of List) {\n        if (item.id === id) {\n          setList.push(item);\n        }\n        if (item.childList && item.childList.length >= 1) {\n          setList = [\n            ...setList,\n            ...filterTreeIdList(item.childList, id)\n          ];\n        }\n      }\n      return setList;\n  }\n```\n","slug":"🧮🧮查找树节点中符合条件的子节点","published":1,"updated":"2024-05-16T07:39:11.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw9094py007o2omveuwcfgq6","content":"<p>1.查找一个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let filterTreeId = (list, id)  =&gt; &#123;</span><br><span class=\"line\">      let targetObj = null;</span><br><span class=\"line\">      for (const item of list) &#123;</span><br><span class=\"line\">        if (item.id === id) &#123;</span><br><span class=\"line\">          targetObj = item;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (item.childList &amp;&amp; item.childList.length) &#123;</span><br><span class=\"line\">          targetObj = filterTreeId(item.childList, id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return targetObj;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>2.查找多个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  filterTreeIdList = (List, id)  =&gt; &#123;</span><br><span class=\"line\">      let setList = [];</span><br><span class=\"line\">      for (const item of List) &#123;</span><br><span class=\"line\">        if (item.id === id) &#123;</span><br><span class=\"line\">          setList.push(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (item.childList &amp;&amp; item.childList.length &gt;= 1) &#123;</span><br><span class=\"line\">          setList = [</span><br><span class=\"line\">            ...setList,</span><br><span class=\"line\">            ...filterTreeIdList(item.childList, id)</span><br><span class=\"line\">          ];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return setList;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>1.查找一个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let filterTreeId = (list, id)  =&gt; &#123;</span><br><span class=\"line\">      let targetObj = null;</span><br><span class=\"line\">      for (const item of list) &#123;</span><br><span class=\"line\">        if (item.id === id) &#123;</span><br><span class=\"line\">          targetObj = item;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (item.childList &amp;&amp; item.childList.length) &#123;</span><br><span class=\"line\">          targetObj = filterTreeId(item.childList, id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return targetObj;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>2.查找多个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  filterTreeIdList = (List, id)  =&gt; &#123;</span><br><span class=\"line\">      let setList = [];</span><br><span class=\"line\">      for (const item of List) &#123;</span><br><span class=\"line\">        if (item.id === id) &#123;</span><br><span class=\"line\">          setList.push(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (item.childList &amp;&amp; item.childList.length &gt;= 1) &#123;</span><br><span class=\"line\">          setList = [</span><br><span class=\"line\">            ...setList,</span><br><span class=\"line\">            ...filterTreeIdList(item.childList, id)</span><br><span class=\"line\">          ];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return setList;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clw9094lh00042omv6otl0lbf","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ll00072omv1fyx06eu"},{"post_id":"clw9094l100002omv166pbo0l","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ln00092omv6o477z6y"},{"post_id":"clw9094li00052omva90e5ihq","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094lp000c2omveipv3duy"},{"post_id":"clw9094ll00082omv7cgk8uzg","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094lq000e2omv9e1j1a2t"},{"post_id":"clw9094l900012omv283dhtcs","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ls000g2omv0hrkc0uk"},{"post_id":"clw9094ln000a2omvh93ud84u","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094lu000i2omv5ada7azk"},{"post_id":"clw9094lp000d2omvcxm8btby","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094lw000k2omvbaqf3s7o"},{"post_id":"clw9094lf00032omvbbqzdw7d","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094lx000m2omv18v75fvn"},{"post_id":"clw9094lq000f2omvhwn63adv","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ly000o2omv14lc7tdg"},{"post_id":"clw9094lt000h2omvgd7a1l4s","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094m0000r2omv2tac4j8j"},{"post_id":"clw9094lv000j2omv2k0s8i7t","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094m2000t2omvhfri3t3s"},{"post_id":"clw9094lw000l2omv1kbictjw","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094m3000v2omv08p7exob"},{"post_id":"clw9094ly000p2omv7cwsf1kq","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094m4000y2omv6r487l71"},{"post_id":"clw9094m2000u2omvd45ibmjl","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094m500102omv7imtfac9"},{"post_id":"clw9094lx000n2omvbzvpflxp","tag_id":"clw9094m0000q2omv7ne50mn2","_id":"clw9094m700122omveo8sfeqp"},{"post_id":"clw9094m3000w2omv3b4s4leq","tag_id":"clw9094m0000q2omv7ne50mn2","_id":"clw9094m800142omvexdfeqz2"},{"post_id":"clw9094m4000z2omvgi3r35ug","tag_id":"clw9094m0000q2omv7ne50mn2","_id":"clw9094m900162omv1ro0cw8t"},{"post_id":"clw9094m0000s2omveghtffs7","tag_id":"clw9094m0000q2omv7ne50mn2","_id":"clw9094ma00182omv5kfu3p9x"},{"post_id":"clw9094m600112omv6cvb8doa","tag_id":"clw9094m0000q2omv7ne50mn2","_id":"clw9094mb001a2omvb38fhsxl"},{"post_id":"clw9094m700132omv48um8gdq","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mc001c2omvee2e7j21"},{"post_id":"clw9094m800152omvcd2i4tu0","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094md001e2omvhdke9d88"},{"post_id":"clw9094m900172omvayap6lws","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094me001g2omv5hlu2bk8"},{"post_id":"clw9094ma00192omv950yepzg","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mg001i2omvb1q5bk4w"},{"post_id":"clw9094mb001b2omv1zoz3w59","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mh001k2omv487kc6fg"},{"post_id":"clw9094mc001d2omvaek87c7q","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mi001m2omvftu4ftya"},{"post_id":"clw9094md001f2omvbu2850xv","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mj001o2omvczjkhuar"},{"post_id":"clw9094mf001h2omvhedrcvdi","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mk001q2omv3luheykx"},{"post_id":"clw9094mg001j2omvg8ma8t6j","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ml001s2omv0oghbjoc"},{"post_id":"clw9094mh001l2omvep009rgv","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mn001u2omvh0r67wk2"},{"post_id":"clw9094mj001n2omvcs37dhyt","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mo001w2omvha8tc2h6"},{"post_id":"clw9094mj001p2omvc94ehddq","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mp001y2omv3yek0l7i"},{"post_id":"clw9094ml001r2omvc85f43i9","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mq00202omvc428dray"},{"post_id":"clw9094mm001t2omv6msxb4k7","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mr00222omv5oztadc2"},{"post_id":"clw9094mn001v2omv55bl1k9b","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ms00242omv3lgt63wv"},{"post_id":"clw9094mo001x2omvdvpk81y3","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mw00262omv4ian4tvw"},{"post_id":"clw9094mp001z2omv5cuz188c","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094my00292omv7i5pcw3l"},{"post_id":"clw9094mq00212omvegs839s1","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094mz002b2omvca9u1437"},{"post_id":"clw9094mr00232omvc1x87eso","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094n0002d2omv98326b0h"},{"post_id":"clw9094n0002c2omvb4mudalq","tag_id":"clw9094my00282omv05a5f8ef","_id":"clw9094n2002g2omv3lcj1zwi"},{"post_id":"clw9094mt00252omv66cv7jza","tag_id":"clw9094my00282omv05a5f8ef","_id":"clw9094n3002i2omv2nj17344"},{"post_id":"clw9094n1002e2omvg9o75g5l","tag_id":"clw9094my00282omv05a5f8ef","_id":"clw9094n4002l2omv57h54oqc"},{"post_id":"clw9094n2002h2omv89h5f44i","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094n5002n2omvenivbkss"},{"post_id":"clw9094mx00272omv9ja4f5sf","tag_id":"clw9094my00282omv05a5f8ef","_id":"clw9094n6002p2omv8c1ghw9a"},{"post_id":"clw9094n3002j2omvc2lxc4hn","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094n7002r2omvhqase3dd"},{"post_id":"clw9094n5002m2omv9c6h7uf4","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094n9002t2omvf4mw7dw5"},{"post_id":"clw9094mz002a2omvaagadoqm","tag_id":"clw9094my00282omv05a5f8ef","_id":"clw9094nb002v2omvgo9t5fgf"},{"post_id":"clw9094n5002o2omv5pufgozc","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nc002x2omv9kz32qnp"},{"post_id":"clw9094n6002q2omv76dh0cwt","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nd002z2omv7ddlh3sm"},{"post_id":"clw9094n7002s2omv3d61bj4d","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nf00312omvgf6g63sy"},{"post_id":"clw9094na002u2omv2vhtfzb1","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ng00332omv2qkw3xr8"},{"post_id":"clw9094nb002w2omv2iqzhsl6","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ni00352omv2g685ibw"},{"post_id":"clw9094nc002y2omv36u7dve4","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nj00372omvcsu0a4xl"},{"post_id":"clw9094nd00302omv4hf8fx0p","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nk00392omvdlivfu4y"},{"post_id":"clw9094nf00322omv1dabb23f","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nm003b2omv0muqf9i2"},{"post_id":"clw9094ng00342omvb8wbhden","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nn003d2omvbe643tfe"},{"post_id":"clw9094ni00362omvd4tk15l7","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094np003f2omv6rqh0ys1"},{"post_id":"clw9094nj00382omvayjv5u1e","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nr003h2omv1ck7dvyh"},{"post_id":"clw9094nk003a2omv2a8a5cgd","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ns003j2omvbcnu7de3"},{"post_id":"clw9094nm003c2omvamo23cln","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nt003l2omvb5zy4v9n"},{"post_id":"clw9094nn003e2omv70ilhfdx","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nu003n2omvgs9b12re"},{"post_id":"clw9094np003g2omvcg9sdfhb","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nv003p2omv8l1v2r4g"},{"post_id":"clw9094nr003i2omv7qm65lca","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nw003r2omv4bo59air"},{"post_id":"clw9094ns003k2omv76hmgv6g","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nx003t2omvgbjr7n1z"},{"post_id":"clw9094nt003m2omv56roczwa","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ny003v2omv7x7g82dh"},{"post_id":"clw9094nu003o2omv4z4h0q9f","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094nz003x2omvgok9dvno"},{"post_id":"clw9094nv003q2omvcl7m33zu","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094o0003z2omvbfoj6qqx"},{"post_id":"clw9094nw003s2omv30o0cdvb","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094o100412omvby655m4s"},{"post_id":"clw9094nx003u2omv1clt2eky","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094o200432omv4cefgp8t"},{"post_id":"clw9094ny003w2omveqp91st6","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094o400462omv4hfg83tx"},{"post_id":"clw9094nz003y2omv8ddoc5tr","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094o500482omv47o84de4"},{"post_id":"clw9094o000402omv5cwr6b0j","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094o6004a2omvdu8t7knx"},{"post_id":"clw9094o400472omvdwnh6wyn","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094o8004d2omv4wna3d2w"},{"post_id":"clw9094o600492omv9446913w","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094oa004f2omv4fw9d3uk"},{"post_id":"clw9094o100422omvgb2hfarq","tag_id":"clw9094o300452omva2sgft2z","_id":"clw9094ob004h2omv4edddjh1"},{"post_id":"clw9094o7004b2omv75stdla9","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094od004j2omvhl9y0j7e"},{"post_id":"clw9094o8004e2omv8x6vhlm4","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094of004l2omva3s1e0jm"},{"post_id":"clw9094o300442omv0j859moy","tag_id":"clw9094o300452omva2sgft2z","_id":"clw9094og004n2omvaavj0zqg"},{"post_id":"clw9094oa004g2omv7u584jnq","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094oh004p2omv4m82gs5w"},{"post_id":"clw9094ob004i2omva32607c4","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094oi004r2omvbqv9a1dy"},{"post_id":"clw9094of004k2omv3uif6ypm","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094oj004t2omv6a8t0upn"},{"post_id":"clw9094og004m2omvdyoqhyo8","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ok004w2omvch05bpnt"},{"post_id":"clw9094og004o2omv5ukqe3xe","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ol004y2omvfmwqah21"},{"post_id":"clw9094oh004q2omv4e3z4flh","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094om00502omv606rfarr"},{"post_id":"clw9094oj004u2omvgx163bjm","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094op00532omvdbwrev26"},{"post_id":"clw9094ol004z2omv3q9katx3","tag_id":"clw9094ok004v2omva88eg0a0","_id":"clw9094or00552omv660xgheq"},{"post_id":"clw9094oi004s2omvfvc32m01","tag_id":"clw9094ok004v2omva88eg0a0","_id":"clw9094os00572omvbmxa6elx"},{"post_id":"clw9094on00512omvhju5b6kw","tag_id":"clw9094ok004v2omva88eg0a0","_id":"clw9094ot00592omv9cg2dhzz"},{"post_id":"clw9094oq00542omvgqyohai4","tag_id":"clw9094ok004v2omva88eg0a0","_id":"clw9094ou005c2omvfr9p0pig"},{"post_id":"clw9094ok004x2omvgmv55nlp","tag_id":"clw9094ok004v2omva88eg0a0","_id":"clw9094ov005e2omvc86ne7ie"},{"post_id":"clw9094or00562omv1oq0dv88","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ow005g2omvbxjzdjun"},{"post_id":"clw9094os00582omv2zph2ry4","tag_id":"clw9094ou005b2omvamlo58z3","_id":"clw9094ox005j2omvfc1i160n"},{"post_id":"clw9094oy005k2omv9ixp3974","tag_id":"clw9094ox005i2omvd80vfrih","_id":"clw9094p0005n2omvepcoaydn"},{"post_id":"clw9094ot005a2omv7bhm7are","tag_id":"clw9094ox005i2omvd80vfrih","_id":"clw9094p1005p2omvekzxfty3"},{"post_id":"clw9094oy005l2omvb4rv78gd","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094p2005s2omv6qc3c3ec"},{"post_id":"clw9094p0005o2omv18qccqzw","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094p3005u2omv4ewcdn7w"},{"post_id":"clw9094ou005d2omvh3f51dlp","tag_id":"clw9094ox005i2omvd80vfrih","_id":"clw9094p5005x2omv24wd69w5"},{"post_id":"clw9094p1005q2omvh48ddeqr","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094p6005z2omv8p290ff1"},{"post_id":"clw9094p2005t2omv6zsa05oi","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094p700612omv0vn93sw1"},{"post_id":"clw9094ov005f2omvfiwg3keh","tag_id":"clw9094ox005i2omvd80vfrih","_id":"clw9094p800632omvezer7bhy"},{"post_id":"clw9094p3005v2omv224mfibd","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094p900652omv2det1gzj"},{"post_id":"clw9094p5005y2omv0gq24bt2","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pa00672omvfmfv5r74"},{"post_id":"clw9094ow005h2omv0ldt8htu","tag_id":"clw9094ox005i2omvd80vfrih","_id":"clw9094pb00692omv0uwnavbp"},{"post_id":"clw9094p600602omve4la119s","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pc006b2omvguasf42c"},{"post_id":"clw9094p700622omvbz304rgg","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pd006d2omv02h46sip"},{"post_id":"clw9094p800642omv0q2j9nd2","tag_id":"clw9094ox005i2omvd80vfrih","_id":"clw9094pd006f2omvfrm3h9nr"},{"post_id":"clw9094p900662omvgib96k4y","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pf006h2omv9goeaulp"},{"post_id":"clw9094pa00682omvcw0sd9pg","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pg006j2omvgpskdkg3"},{"post_id":"clw9094pb006a2omv9kn8e2zg","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ph006l2omvf8fgfxsu"},{"post_id":"clw9094pc006c2omv9u66he0h","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pi006n2omv1zrj412d"},{"post_id":"clw9094pd006e2omv4lcv0ayo","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pj006p2omv4732gka2"},{"post_id":"clw9094pe006g2omv4qax2nkp","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pk006r2omvcecpbz1b"},{"post_id":"clw9094pf006i2omv6d9l8as8","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pl006t2omv4cfu6zuz"},{"post_id":"clw9094pg006k2omvefcw9y8u","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pm006v2omvg7cdcf58"},{"post_id":"clw9094ph006m2omv1qacebrl","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pn006x2omv939k1ieb"},{"post_id":"clw9094pi006o2omv6cjj7rhf","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094po006z2omv1m83as64"},{"post_id":"clw9094pj006q2omvh7eratm6","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pp00722omvev18g0we"},{"post_id":"clw9094pk006s2omva9qr1eic","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pq00742omv61yq1y06"},{"post_id":"clw9094pl006u2omv0f379ir3","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pr00762omv803v7mex"},{"post_id":"clw9094pm006w2omv2g002h4g","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094ps00792omve4cybz6a"},{"post_id":"clw9094pp00732omv8luea1q3","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pt007b2omvfggk0caz"},{"post_id":"clw9094pq00752omvfi6b1kzn","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pu007d2omv15kqgnxv"},{"post_id":"clw9094pn006y2omv2geh83ls","tag_id":"clw9094po00712omv7vaf06n1","_id":"clw9094pv007f2omvflix6rbh"},{"post_id":"clw9094pr00772omv53adbnsz","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pv007h2omvelbh77me"},{"post_id":"clw9094ps007a2omvbmqk0h24","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pw007j2omv4vty0v1m"},{"post_id":"clw9094po00702omve2f18u0a","tag_id":"clw9094po00712omv7vaf06n1","_id":"clw9094px007l2omvdwqn04ku"},{"post_id":"clw9094pt007c2omvdl4a67z2","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094py007n2omv1hkser1y"},{"post_id":"clw9094pu007e2omv01bn2fiy","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pz007p2omv9xvr6ofy"},{"post_id":"clw9094pv007g2omvfnhu6x5v","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pz007q2omvbtbp5da0"},{"post_id":"clw9094pv007i2omve2zb7e06","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pz007r2omvao9i2zwd"},{"post_id":"clw9094pw007k2omvhx3pb9q5","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pz007s2omv6drz05qm"},{"post_id":"clw9094px007m2omv87n07vi3","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pz007t2omvekl8ddas"},{"post_id":"clw9094py007o2omveuwcfgq6","tag_id":"clw9094ld00022omv3rct5lzb","_id":"clw9094pz007u2omv4e3ie9ze"}],"Tag":[{"name":"开发日常","_id":"clw9094ld00022omv3rct5lzb"},{"name":"编程范式","_id":"clw9094m0000q2omv7ne50mn2"},{"name":"css","_id":"clw9094my00282omv05a5f8ef"},{"name":"mac小天地","_id":"clw9094o300452omva2sgft2z"},{"name":"实践堂","_id":"clw9094ok004v2omva88eg0a0"},{"name":"美食记录","_id":"clw9094ou005b2omvamlo58z3"},{"name":"计算机基础小窥","_id":"clw9094ox005i2omvd80vfrih"},{"name":"正则","_id":"clw9094po00712omv7vaf06n1"}]}}